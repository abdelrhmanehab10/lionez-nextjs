"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb";
exports.ids = ["vendor-chunks/mongodb"];
exports.modules = {

/***/ "(ssr)/./node_modules/mongodb/lib/admin.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/admin.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Admin = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_databases_1 = __webpack_require__(/*! ./operations/list_databases */ \"(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst validate_collection_1 = __webpack_require__(/*! ./operations/validate_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */ class Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */ constructor(db){\n        this.s = {\n            db\n        };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */ async command(command, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */ async buildInfo(options) {\n        return this.command({\n            buildinfo: 1\n        }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */ async serverInfo(options) {\n        return this.command({\n            buildinfo: 1\n        }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */ async serverStatus(options) {\n        return this.command({\n            serverStatus: 1\n        }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */ async ping(options) {\n        return this.command({\n            ping: 1\n        }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */ async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, {\n            dbName: \"admin\",\n            ...options\n        }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */ async validateCollection(collectionName, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */ async listDatabases(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */ async replSetGetStatus(options) {\n        return this.command({\n            replSetGetStatus: 1\n        }, options);\n    }\n}\nexports.Admin = Admin; //# sourceMappingURL=admin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/admin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bson.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/bson.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.EJSON = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\nvar bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nObject.defineProperty(exports, \"Binary\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Binary;\n    }\n}));\nObject.defineProperty(exports, \"BSON\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSON;\n    }\n}));\nObject.defineProperty(exports, \"BSONRegExp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSONRegExp;\n    }\n}));\nObject.defineProperty(exports, \"BSONSymbol\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSONSymbol;\n    }\n}));\nObject.defineProperty(exports, \"BSONType\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSONType;\n    }\n}));\nObject.defineProperty(exports, \"calculateObjectSize\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.calculateObjectSize;\n    }\n}));\nObject.defineProperty(exports, \"Code\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Code;\n    }\n}));\nObject.defineProperty(exports, \"DBRef\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.DBRef;\n    }\n}));\nObject.defineProperty(exports, \"Decimal128\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Decimal128;\n    }\n}));\nObject.defineProperty(exports, \"deserialize\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.deserialize;\n    }\n}));\nObject.defineProperty(exports, \"Double\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Double;\n    }\n}));\nObject.defineProperty(exports, \"EJSON\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.EJSON;\n    }\n}));\nObject.defineProperty(exports, \"Int32\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Int32;\n    }\n}));\nObject.defineProperty(exports, \"Long\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Long;\n    }\n}));\nObject.defineProperty(exports, \"MaxKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.MaxKey;\n    }\n}));\nObject.defineProperty(exports, \"MinKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.MinKey;\n    }\n}));\nObject.defineProperty(exports, \"ObjectId\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.ObjectId;\n    }\n}));\nObject.defineProperty(exports, \"serialize\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.serialize;\n    }\n}));\nObject.defineProperty(exports, \"Timestamp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Timestamp;\n    }\n}));\nObject.defineProperty(exports, \"UUID\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.UUID;\n    }\n}));\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */ function resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\nexports.resolveBSONOptions = resolveBSONOptions; //# sourceMappingURL=bson.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bson.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BulkOperationBase = exports.BulkWriteShimOperation = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_functions_1 = __webpack_require__(/*! ../operations/common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst delete_1 = __webpack_require__(/*! ../operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst insert_1 = __webpack_require__(/*! ../operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst operation_1 = __webpack_require__(/*! ../operations/operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst update_1 = __webpack_require__(/*! ../operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */ const kServerError = Symbol(\"serverError\");\n/** @public */ exports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */ class Batch {\n    constructor(batchType, originalZeroIndex){\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */ class BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids){\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */ constructor(bulkResult, isOrdered){\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, \"result\", {\n            value: this.result,\n            enumerable: false\n        });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */ get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */ getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0) return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index })=>!bulkResult.writeErrors.some((writeError)=>index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */ getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */ getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */ hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */ getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */ getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */ getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */ getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        } else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        } else {\n            // Combine the errors\n            let errmsg = \"\";\n            for(let i = 0; i < this.result.writeConcernErrors.length; i++){\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0) errmsg = errmsg + \" and \";\n            }\n            return new WriteConcernError({\n                errmsg,\n                code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n            });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${this.result})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */ class WriteConcernError {\n    constructor(error){\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */ get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */ get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */ get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */ class WriteError {\n    constructor(err){\n        this.err = err;\n    }\n    /** WriteError code. */ get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */ get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */ get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */ get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */ getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return {\n            code: this.err.code,\n            index: this.err.index,\n            errmsg: this.err.errmsg,\n            op: this.err.op\n        };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */ function mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    } else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    } else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for(let i = 0; i < result.upserted.length; i++){\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    } else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === \"number\") {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        } else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for(let i = 0; i < result.writeErrors.length; i++){\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && \"message\" in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, bulkOperation.isOrdered, err, callback);\n        }\n        // Merge the results together\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        if (bulkOperation.handleWriteError(callback, writeResult)) return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some((op)=>op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some((op)=>op.limit === 0);\n        }\n    }\n    try {\n        const operation = isInsertBatch(batch) ? new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions) : isUpdateBatch(batch) ? new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions) : isDeleteBatch(batch) ? new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions) : null;\n        if (operation != null) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, operation).then((result)=>resultHandler(undefined, result), (error)=>resultHandler(error));\n        }\n    } catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, isOrdered, err, callback) {\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n    }, new BulkWriteResult(bulkResult, isOrdered)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */ class MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(error, result){\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError) this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return \"MongoBulkWriteError\";\n    }\n    /** Number of documents inserted. */ get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */ get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */ get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */ get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */ get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */ get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */ get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */ class FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */ constructor(bulkOperation){\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */ update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */ updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: false\n        }));\n    }\n    /** Add a replace one operation to the bulk operation */ replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError(\"Replacement document must not use atomic operators\");\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, {\n            ...currentOp,\n            multi: false\n        }));\n    }\n    /** Add a delete one operation to the bulk operation */ deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n            ...currentOp,\n            limit: 1\n        }));\n    }\n    /** Add a delete many operation to the bulk operation */ delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n            ...currentOp,\n            limit: 0\n        }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */ upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */ collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */ arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */ hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\nconst executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */ class BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options){\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    get commandName() {\n        return \"bulkWrite\";\n    }\n    execute(_server, session) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n}\nexports.BulkWriteShimOperation = BulkWriteShimOperation;\n/** @public */ class BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */ constructor(collection, options, isOrdered){\n        this.collection = collection;\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === \"boolean\" ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */ insert(document) {\n        (0, common_functions_1.maybeAddIdToDocuments)(this.collection, document, {\n            forceServerObjectId: this.shouldForceServerObjectId()\n        });\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */ find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError(\"Bulk find operation must specify a selector\");\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */ raw(op) {\n        if (op == null || typeof op !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError(\"Operation must be an object with an operation key\");\n        }\n        if (\"insertOne\" in op) {\n            const forceServerObjectId = this.shouldForceServerObjectId();\n            const document = op.insertOne && op.insertOne.document == null ? op.insertOne : op.insertOne.document;\n            (0, common_functions_1.maybeAddIdToDocuments)(this.collection, document, {\n                forceServerObjectId\n            });\n            return this.addToOperationsList(exports.BatchType.INSERT, document);\n        }\n        if (\"replaceOne\" in op || \"updateOne\" in op || \"updateMany\" in op) {\n            if (\"replaceOne\" in op) {\n                if (\"q\" in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, {\n                    ...op.replaceOne,\n                    multi: false\n                });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError(\"Replacement document must not use atomic operators\");\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if (\"updateOne\" in op) {\n                if (\"q\" in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if (\"updateMany\" in op) {\n                if (\"q\" in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if (\"deleteOne\" in op) {\n            if (\"q\" in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, {\n                ...op.deleteOne,\n                limit: 1\n            }));\n        }\n        if (\"deleteMany\" in op) {\n            if (\"q\" in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, {\n                ...op.deleteMany,\n                limit: 0\n            }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError(\"bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany\");\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [\n            ...this.s.batches\n        ];\n        if (this.isOrdered) {\n            if (this.s.currentBatch) batches.push(this.s.currentBatch);\n        } else {\n            if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n        } else {\n            if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError(\"Invalid BulkOperation, Batch cannot be empty\");\n        }\n        this.s.executed = true;\n        const finalOptions = {\n            ...this.s.options,\n            ...options\n        };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */ handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : \"write operation failed\";\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n    shouldForceServerObjectId() {\n        return this.s.options.forceServerObjectId === true || this.s.collection.s.db.options?.forceServerObjectId === true;\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, \"length\", {\n    enumerable: true,\n    get () {\n        return this.s.currentIndex;\n    }\n});\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp) currentOp = {};\n    return currentOp;\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/ordered.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/ordered.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OrderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */ class OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */ constructor(collection, options){\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) // TODO(NODE-3483): Change this to MongoBSONError\n        throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (// New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n        // since we can't sent an empty batch\n        this.s.currentBatchSize > 0 && this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n        this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError(\"Operation passed in cannot be an Array\");\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation; //# sourceMappingURL=ordered.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/unordered.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/unordered.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnorderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */ class UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */ constructor(collection, options){\n        super(collection, options, false);\n    }\n    handleWriteError(callback, writeResult) {\n        if (this.s.batches.length) {\n            return false;\n        }\n        return super.handleWriteError(callback, writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        } else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        } else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (// New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n        // since we can't sent an empty batch\n        this.s.currentBatch.size > 0 && this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n        this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError(\"Operation passed in cannot be an Array\");\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        } else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        } else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation; //# sourceMappingURL=unordered.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/change_stream.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/change_stream.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChangeStream = void 0;\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */ const kCursorStream = Symbol(\"cursorStream\");\n/** @internal */ const kClosed = Symbol(\"closed\");\n/** @internal */ const kMode = Symbol(\"mode\");\nconst CHANGE_STREAM_OPTIONS = [\n    \"resumeAfter\",\n    \"startAfter\",\n    \"startAtOperationTime\",\n    \"fullDocument\",\n    \"fullDocumentBeforeChange\",\n    \"showExpandedEvents\"\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol(\"Collection\"),\n    DATABASE: Symbol(\"Database\"),\n    CLUSTER: Symbol(\"Cluster\")\n};\nconst CHANGE_STREAM_EVENTS = [\n    constants_1.RESUME_TOKEN_CHANGED,\n    constants_1.END,\n    constants_1.CLOSE\n];\nconst NO_RESUME_TOKEN_ERROR = \"A change stream document has been received that lacks a resume token (_id).\";\nconst CHANGESTREAM_CLOSED_ERROR = \"ChangeStream is closed\";\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */ class ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */ constructor(parent, pipeline = [], options = {}){\n        super();\n        this.pipeline = pipeline;\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        } else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        } else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        } else {\n            throw new error_1.MongoChangeStreamError(\"Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient\");\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on(\"newListener\", (eventName)=>{\n            if (eventName === \"change\" && this.cursor && this.listenerCount(\"change\") === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on(\"removeListener\", (eventName)=>{\n            if (eventName === \"change\" && this.listenerCount(\"change\") === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners(\"data\");\n            }\n        });\n    }\n    /** @internal */ get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */ get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */ async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            } catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                } catch (error) {\n                    try {\n                        await this.close();\n                    } catch  {\n                    // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */ async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            } catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                } catch (error) {\n                    try {\n                        await this.close();\n                    } catch  {\n                    // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */ async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            } catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                } catch (error) {\n                    try {\n                        await this.close();\n                    } catch  {\n                    // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while(true){\n                yield await this.next();\n            }\n        } finally{\n            try {\n                await this.close();\n            } catch  {\n            // we're not concerned with errors from close()\n            }\n        }\n    }\n    /** Is the cursor closed */ get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */ async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        } finally{\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */ stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */ _setIsEmitter() {\n        if (this[kMode] === \"iterator\") {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError(\"ChangeStream cannot be used as an EventEmitter after being used as an iterator\");\n        }\n        this[kMode] = \"emitter\";\n    }\n    /** @internal */ _setIsIterator() {\n        if (this[kMode] === \"emitter\") {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError(\"ChangeStream cannot be used as an iterator after being used as an EventEmitter\");\n        }\n        this[kMode] = \"iterator\";\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */ _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [\n            {\n                $changeStream: changeStreamStageOptions\n            },\n            ...this.pipeline\n        ];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.client : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS){\n            changeStreamCursor.on(event, (e)=>this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */ _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().catch(()=>null);\n    }\n    /** @internal */ _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on(\"data\", (change)=>{\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            } catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on(\"error\", (error)=>this._processErrorStreamMode(error));\n    }\n    /** @internal */ _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            [\n                \"data\",\n                \"close\",\n                \"end\",\n                \"error\"\n            ].forEach((event)=>cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */ _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */ _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed]) return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(()=>null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, {\n                operationName: \"reconnect topology in change stream\"\n            }, (serverSelectionError)=>{\n                if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        } else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */ async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            } catch  {\n            // ignore errors from close\n            }\n            throw changeStreamError;\n        }\n        await this.cursor.close().catch(()=>null);\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServerAsync(this.cursor.readPreference, {\n                operationName: \"reconnect topology in change stream\"\n            });\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        } catch  {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\n/** @event */ ChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */ ChangeStream.MORE = constants_1.MORE;\n/** @event */ ChangeStream.INIT = constants_1.INIT;\n/** @event */ ChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */ ChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */ ChangeStream.END = constants_1.END;\n/** @event */ ChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */ ChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream; //# sourceMappingURL=change_stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/change_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ../mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst mongocryptd_manager_1 = __webpack_require__(/*! ./mongocryptd_manager */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/** @public */ exports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */ const kDecorateResult = Symbol.for(\"@@mdb.decorateDecryptionResult\");\n/** @internal */ const kDecoratedKeys = Symbol.for(\"@@mdb.decryptedKeys\");\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */ class AutoEncrypter {\n    /** @internal */ static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if (\"kModuleError\" in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */ constructor(client, options){\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */ this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || \"admin.datakeys\";\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        const mongoCryptOptions = {\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap) ? options.schemaMap : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap) ? options.encryptedFieldsMap : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        } else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = [\n                \"$SYSTEM\"\n            ];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibRequired && !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError(\"`cryptSharedLibRequired` set but no crypt_shared library loaded\");\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== \"string\") {\n                clientOptions.family = 4;\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */ async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError(\"Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.\");\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError(\"Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.\");\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        } catch (error) {\n            const { message } = error;\n            if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n                throw new error_1.MongoRuntimeError(\"Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn\", {\n                    cause: error\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */ async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */ async encrypt(ns, cmd, options = {}) {\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        return stateMachine.execute(this, context);\n    }\n    /**\n     * Decrypt a command response\n     */ async decrypt(response, options = {}) {\n        const buffer = Buffer.isBuffer(response) ? response : (0, bson_1.serialize)(response, options);\n        const context = this._mongocrypt.makeDecryptionContext(buffer);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const decorateResult = this[kDecorateResult];\n        const result = await stateMachine.execute(this, context);\n        if (decorateResult) {\n            decorateDecryptionResult(result, response);\n        }\n        return result;\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */ async askForKMSCredentials() {\n        return (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */ get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = kDecorateResult;\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */ function decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError(\"Expected result of decryption to be deserialized BSON object\");\n        }\n    }\n    if (!decrypted || typeof decrypted !== \"object\") return;\n    for (const k of Object.keys(decrypted)){\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === \"Binary\" && originalValue.sub_type === 6) {\n            if (!decrypted[kDecoratedKeys]) {\n                Object.defineProperty(decrypted, kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[kDecoratedKeys].push(k);\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n} //# sourceMappingURL=auto_encrypter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/client_encryption.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ClientEncryption = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst index_1 = __webpack_require__(/*! ./providers/index */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */ class ClientEncryption {\n    /** @internal */ static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if (\"kModuleError\" in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */ constructor(client, options){\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError(\"Missing required option `keyVaultNamespace`\");\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */ async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i)=>{\n                if (typeof keyAltName !== \"string\") {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({\n                    keyAltName\n                });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({\n                keyMaterial: options.keyMaterial\n            });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const dataKey = await stateMachine.execute(this, context);\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient.db(dbName).collection(collectionName).insertOne(dataKey, {\n            writeConcern: {\n                w: \"majority\"\n            }\n        });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */ async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({\n                provider: options.provider\n            }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v: dataKeys } = await stateMachine.execute(this, context);\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key)=>({\n                updateOne: {\n                    filter: {\n                        _id: key._id\n                    },\n                    update: {\n                        $set: {\n                            masterKey: key.masterKey,\n                            keyMaterial: key.keyMaterial\n                        },\n                        $currentDate: {\n                            updateDate: true\n                        }\n                    }\n                }\n            }));\n        const result = await this._keyVaultClient.db(dbName).collection(collectionName).bulkWrite(replacements, {\n            writeConcern: {\n                w: \"majority\"\n            }\n        });\n        return {\n            bulkWriteResult: result\n        };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */ async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).deleteOne({\n            _id\n        }, {\n            writeConcern: {\n                w: \"majority\"\n            }\n        });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */ getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).find({}, {\n            readConcern: {\n                level: \"majority\"\n            }\n        });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */ async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n            _id\n        }, {\n            readConcern: {\n                level: \"majority\"\n            }\n        });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */ async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n            keyAltNames: keyAltName\n        }, {\n            readConcern: {\n                level: \"majority\"\n            }\n        });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */ async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n            _id\n        }, {\n            $addToSet: {\n                keyAltNames: keyAltName\n            }\n        }, {\n            writeConcern: {\n                w: \"majority\"\n            },\n            returnDocument: \"before\"\n        });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */ async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: [\n                                    \"$keyAltNames\",\n                                    [\n                                        keyAltName\n                                    ]\n                                ]\n                            },\n                            \"$$REMOVE\",\n                            {\n                                $filter: {\n                                    input: \"$keyAltNames\",\n                                    cond: {\n                                        $ne: [\n                                            \"$$this\",\n                                            keyAltName\n                                        ]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n            _id\n        }, pipeline, {\n            writeConcern: {\n                w: \"majority\"\n            },\n            returnDocument: \"before\"\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */ async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field)=>field == null || typeof field !== \"object\" || field.keyId != null ? field : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, {\n                        masterKey\n                    })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index)=>resolution.status === \"fulfilled\" ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result)=>result.status === \"rejected\");\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, {\n                    cause: rejection.reason\n                });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields\n            });\n            return {\n                collection,\n                encryptedFields\n            };\n        } catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, {\n                cause\n            });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */ async encrypt(value, options) {\n        return this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n     *\n     * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */ async encryptExpression(expression, options) {\n        return this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */ async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({\n            v: value\n        });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v } = await stateMachine.execute(this, context);\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */ async askForKMSCredentials() {\n        return (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */ async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== \"string\") {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({\n                keyAltName\n            });\n        }\n        if (typeof contentionFactor === \"number\" || typeof contentionFactor === \"bigint\") {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === \"string\") {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === \"object\") {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({\n            v: value\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const result = await stateMachine.execute(this, context);\n        return result.v;\n    }\n}\nexports.ClientEncryption = ClientEncryption; //# sourceMappingURL=client_encryption.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = exports.signRsaSha256Hook = exports.makeHmacHook = exports.sha256Hook = exports.randomHook = exports.makeAES256Hook = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function(key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([\n                    result,\n                    final\n                ]);\n            }\n        } catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeAES256Hook = makeAES256Hook;\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    } catch (e) {\n        return e;\n    }\n    return count;\n}\nexports.randomHook = randomHook;\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash(\"sha256\").update(input).digest();\n    } catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.sha256Hook = sha256Hook;\nfunction makeHmacHook(algorithm) {\n    return (key, input, output)=>{\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        } catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeHmacHook = makeHmacHook;\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign(\"sha256WithRSAEncryption\");\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString(\"base64\")}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    } catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.signRsaSha256Hook = signRsaSha256Hook;\nexports.aes256CbcEncryptHook = makeAES256Hook(\"createCipheriv\", \"aes-256-cbc\");\nexports.aes256CbcDecryptHook = makeAES256Hook(\"createDecipheriv\", \"aes-256-cbc\");\nexports.aes256CtrEncryptHook = makeAES256Hook(\"createCipheriv\", \"aes-256-ctr\");\nexports.aes256CtrDecryptHook = makeAES256Hook(\"createDecipheriv\", \"aes-256-ctr\");\nexports.hmacSha512Hook = makeHmacHook(\"sha512\");\nexports.hmacSha256Hook = makeHmacHook(\"sha256\"); //# sourceMappingURL=crypto_callbacks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9jcnlwdG9fY2FsbGJhY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0Esc0JBQXNCLEdBQUdBLDRCQUE0QixHQUFHQSw0QkFBNEIsR0FBR0EsNEJBQTRCLEdBQUdBLDRCQUE0QixHQUFHQSx5QkFBeUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUN6UyxNQUFNYSxTQUFTQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUMvQixTQUFTRixlQUFlRyxNQUFNLEVBQUVDLElBQUk7SUFDaEMsT0FBTyxTQUFVQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO1FBQ25DLElBQUlDO1FBQ0osSUFBSTtZQUNBLE1BQU1DLFNBQVNULE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxNQUFNQyxLQUFLQztZQUN6Q0ksT0FBT0MsY0FBYyxDQUFDO1lBQ3RCRixTQUFTQyxPQUFPRSxNQUFNLENBQUNMO1lBQ3ZCLE1BQU1NLFFBQVFILE9BQU9HLEtBQUs7WUFDMUIsSUFBSUEsTUFBTUMsTUFBTSxHQUFHLEdBQUc7Z0JBQ2xCTCxTQUFTTSxPQUFPQyxNQUFNLENBQUM7b0JBQUNQO29CQUFRSTtpQkFBTTtZQUMxQztRQUNKLEVBQ0EsT0FBT0ksR0FBRztZQUNOLE9BQU9BO1FBQ1g7UUFDQVIsT0FBT1MsSUFBSSxDQUFDVjtRQUNaLE9BQU9DLE9BQU9LLE1BQU07SUFDeEI7QUFDSjtBQUNBMUIsc0JBQXNCLEdBQUdZO0FBQ3pCLFNBQVNELFdBQVdvQixNQUFNLEVBQUVDLEtBQUs7SUFDN0IsSUFBSTtRQUNBbkIsT0FBT29CLGNBQWMsQ0FBQ0YsUUFBUSxHQUFHQztJQUNyQyxFQUNBLE9BQU9ILEdBQUc7UUFDTixPQUFPQTtJQUNYO0lBQ0EsT0FBT0c7QUFDWDtBQUNBaEMsa0JBQWtCLEdBQUdXO0FBQ3JCLFNBQVNELFdBQVdTLEtBQUssRUFBRUMsTUFBTTtJQUM3QixJQUFJQztJQUNKLElBQUk7UUFDQUEsU0FBU1IsT0FBT3FCLFVBQVUsQ0FBQyxVQUFVVixNQUFNLENBQUNMLE9BQU9nQixNQUFNO0lBQzdELEVBQ0EsT0FBT04sR0FBRztRQUNOLE9BQU9BO0lBQ1g7SUFDQVIsT0FBT1MsSUFBSSxDQUFDVjtJQUNaLE9BQU9DLE9BQU9LLE1BQU07QUFDeEI7QUFDQTFCLGtCQUFrQixHQUFHVTtBQUNyQixTQUFTRCxhQUFhMkIsU0FBUztJQUMzQixPQUFPLENBQUNuQixLQUFLRSxPQUFPQztRQUNoQixJQUFJQztRQUNKLElBQUk7WUFDQUEsU0FBU1IsT0FBT3dCLFVBQVUsQ0FBQ0QsV0FBV25CLEtBQUtPLE1BQU0sQ0FBQ0wsT0FBT2dCLE1BQU07UUFDbkUsRUFDQSxPQUFPTixHQUFHO1lBQ04sT0FBT0E7UUFDWDtRQUNBUixPQUFPUyxJQUFJLENBQUNWO1FBQ1osT0FBT0MsT0FBT0ssTUFBTTtJQUN4QjtBQUNKO0FBQ0ExQixvQkFBb0IsR0FBR1M7QUFDdkIsU0FBU0Qsa0JBQWtCUyxHQUFHLEVBQUVFLEtBQUssRUFBRUMsTUFBTTtJQUN6QyxJQUFJQztJQUNKLElBQUk7UUFDQSxNQUFNaUIsU0FBU3pCLE9BQU8wQixVQUFVLENBQUM7UUFDakMsTUFBTUMsYUFBYWIsT0FBT2MsSUFBSSxDQUFDLENBQUMsNkJBQTZCLEVBQUV4QixJQUFJeUIsUUFBUSxDQUFDLFVBQVUsNkJBQTZCLENBQUM7UUFDcEhyQixTQUFTaUIsT0FBT2QsTUFBTSxDQUFDTCxPQUFPd0IsR0FBRyxHQUFHQyxJQUFJLENBQUNKO0lBQzdDLEVBQ0EsT0FBT1gsR0FBRztRQUNOLE9BQU9BO0lBQ1g7SUFDQVIsT0FBT1MsSUFBSSxDQUFDVjtJQUNaLE9BQU9DLE9BQU9LLE1BQU07QUFDeEI7QUFDQTFCLHlCQUF5QixHQUFHUTtBQUM1QlIsNEJBQTRCLEdBQUdZLGVBQWUsa0JBQWtCO0FBQ2hFWiw0QkFBNEIsR0FBR1ksZUFBZSxvQkFBb0I7QUFDbEVaLDRCQUE0QixHQUFHWSxlQUFlLGtCQUFrQjtBQUNoRVosNEJBQTRCLEdBQUdZLGVBQWUsb0JBQW9CO0FBQ2xFWixzQkFBc0IsR0FBR1MsYUFBYTtBQUN0Q1Qsc0JBQXNCLEdBQUdTLGFBQWEsV0FDdEMsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2NyeXB0b19jYWxsYmFja3MuanM/OWQ4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaG1hY1NoYTI1Nkhvb2sgPSBleHBvcnRzLmhtYWNTaGE1MTJIb29rID0gZXhwb3J0cy5hZXMyNTZDdHJEZWNyeXB0SG9vayA9IGV4cG9ydHMuYWVzMjU2Q3RyRW5jcnlwdEhvb2sgPSBleHBvcnRzLmFlczI1NkNiY0RlY3J5cHRIb29rID0gZXhwb3J0cy5hZXMyNTZDYmNFbmNyeXB0SG9vayA9IGV4cG9ydHMuc2lnblJzYVNoYTI1Nkhvb2sgPSBleHBvcnRzLm1ha2VIbWFjSG9vayA9IGV4cG9ydHMuc2hhMjU2SG9vayA9IGV4cG9ydHMucmFuZG9tSG9vayA9IGV4cG9ydHMubWFrZUFFUzI1Nkhvb2sgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuZnVuY3Rpb24gbWFrZUFFUzI1Nkhvb2sobWV0aG9kLCBtb2RlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIGl2LCBpbnB1dCwgb3V0cHV0KSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG9bbWV0aG9kXShtb2RlLCBrZXksIGl2KTtcbiAgICAgICAgICAgIGNpcGhlci5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG4gICAgICAgICAgICByZXN1bHQgPSBjaXBoZXIudXBkYXRlKGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsID0gY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgICAgICBpZiAoZmluYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoW3Jlc3VsdCwgZmluYWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZUFFUzI1Nkhvb2sgPSBtYWtlQUVTMjU2SG9vaztcbmZ1bmN0aW9uIHJhbmRvbUhvb2soYnVmZmVyLCBjb3VudCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhidWZmZXIsIDAsIGNvdW50KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn1cbmV4cG9ydHMucmFuZG9tSG9vayA9IHJhbmRvbUhvb2s7XG5mdW5jdGlvbiBzaGEyNTZIb29rKGlucHV0LCBvdXRwdXQpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbn1cbmV4cG9ydHMuc2hhMjU2SG9vayA9IHNoYTI1Nkhvb2s7XG5mdW5jdGlvbiBtYWtlSG1hY0hvb2soYWxnb3JpdGhtKSB7XG4gICAgcmV0dXJuIChrZXksIGlucHV0LCBvdXRwdXQpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIbWFjKGFsZ29yaXRobSwga2V5KS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlSG1hY0hvb2sgPSBtYWtlSG1hY0hvb2s7XG5mdW5jdGlvbiBzaWduUnNhU2hhMjU2SG9vayhrZXksIGlucHV0LCBvdXRwdXQpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKCdzaGEyNTZXaXRoUlNBRW5jcnlwdGlvbicpO1xuICAgICAgICBjb25zdCBwcml2YXRlS2V5ID0gQnVmZmVyLmZyb20oYC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbiR7a2V5LnRvU3RyaW5nKCdiYXNlNjQnKX1cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXFxuYCk7XG4gICAgICAgIHJlc3VsdCA9IHNpZ25lci51cGRhdGUoaW5wdXQpLmVuZCgpLnNpZ24ocHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xufVxuZXhwb3J0cy5zaWduUnNhU2hhMjU2SG9vayA9IHNpZ25Sc2FTaGEyNTZIb29rO1xuZXhwb3J0cy5hZXMyNTZDYmNFbmNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVDaXBoZXJpdicsICdhZXMtMjU2LWNiYycpO1xuZXhwb3J0cy5hZXMyNTZDYmNEZWNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVEZWNpcGhlcml2JywgJ2Flcy0yNTYtY2JjJyk7XG5leHBvcnRzLmFlczI1NkN0ckVuY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZUNpcGhlcml2JywgJ2Flcy0yNTYtY3RyJyk7XG5leHBvcnRzLmFlczI1NkN0ckRlY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZURlY2lwaGVyaXYnLCAnYWVzLTI1Ni1jdHInKTtcbmV4cG9ydHMuaG1hY1NoYTUxMkhvb2sgPSBtYWtlSG1hY0hvb2soJ3NoYTUxMicpO1xuZXhwb3J0cy5obWFjU2hhMjU2SG9vayA9IG1ha2VIbWFjSG9vaygnc2hhMjU2Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG9fY2FsbGJhY2tzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImhtYWNTaGEyNTZIb29rIiwiaG1hY1NoYTUxMkhvb2siLCJhZXMyNTZDdHJEZWNyeXB0SG9vayIsImFlczI1NkN0ckVuY3J5cHRIb29rIiwiYWVzMjU2Q2JjRGVjcnlwdEhvb2siLCJhZXMyNTZDYmNFbmNyeXB0SG9vayIsInNpZ25Sc2FTaGEyNTZIb29rIiwibWFrZUhtYWNIb29rIiwic2hhMjU2SG9vayIsInJhbmRvbUhvb2siLCJtYWtlQUVTMjU2SG9vayIsImNyeXB0byIsInJlcXVpcmUiLCJtZXRob2QiLCJtb2RlIiwia2V5IiwiaXYiLCJpbnB1dCIsIm91dHB1dCIsInJlc3VsdCIsImNpcGhlciIsInNldEF1dG9QYWRkaW5nIiwidXBkYXRlIiwiZmluYWwiLCJsZW5ndGgiLCJCdWZmZXIiLCJjb25jYXQiLCJlIiwiY29weSIsImJ1ZmZlciIsImNvdW50IiwicmFuZG9tRmlsbFN5bmMiLCJjcmVhdGVIYXNoIiwiZGlnZXN0IiwiYWxnb3JpdGhtIiwiY3JlYXRlSG1hYyIsInNpZ25lciIsImNyZWF0ZVNpZ24iLCJwcml2YXRlS2V5IiwiZnJvbSIsInRvU3RyaW5nIiwiZW5kIiwic2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/errors.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */ class MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options = {}){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoCryptError\";\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */ class MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoCryptInvalidArgumentError\";\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */ class MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(encryptedFields, { cause }){\n        super(`Unable to complete creating data keys: ${cause.message}`, {\n            cause\n        });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return \"MongoCryptCreateDataKeyError\";\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */ class MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(encryptedFields, { cause }){\n        super(`Unable to create collection: ${cause.message}`, {\n            cause\n        });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return \"MongoCryptCreateEncryptedCollectionError\";\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */ class MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, body){\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return \"MongoCryptAzureKMSRequestError\";\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */ class MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return \"MongoCryptKMSRequestNetworkTimeoutError\";\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongocryptdManager = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */ class MongocryptdManager {\n    constructor(extraOptions = {}){\n        this.uri = typeof extraOptions.mongocryptdURI === \"string\" && extraOptions.mongocryptdURI.length > 0 ? extraOptions.mongocryptdURI : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        this.spawnPath = extraOptions.mongocryptdSpawnPath || \"\";\n        this.spawnArgs = [];\n        if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs.filter((arg)=>typeof arg === \"string\").every((arg)=>arg.indexOf(\"--idleShutdownTimeoutSecs\") < 0)) {\n            this.spawnArgs.push(\"--idleShutdownTimeoutSecs\", \"60\");\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */ async spawn() {\n        const cmdName = this.spawnPath || \"mongocryptd\";\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: \"ignore\",\n            detached: true\n        });\n        this._child.on(\"error\", ()=>{\n        // From the FLE spec:\n        // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n        // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n        // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n        // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n        // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n        // connect after spawning, the server selection error is propagated to the user.\"\n        // The AutoEncrypter and MongoCryptdManager should work together to spawn\n        // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n        // shuts down after 60s and gets respawned when necessary.  We rely on server\n        // selection timeouts when connecting to the `mongocryptd` to inform users that something\n        // has been configured incorrectly.  For those reasons, we suppress stderr from\n        // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */ async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        } catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = \"mongodb://localhost:27020\";\nexports.MongocryptdManager = MongocryptdManager; //# sourceMappingURL=mongocryptd_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/aws.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadAWSCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/**\n * @internal\n */ async function loadAWSCredentials(kmsProviders) {\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n    if (\"kModuleError\" in credentialProvider) {\n        return kmsProviders;\n    }\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    // The state machine is the only place calling this so it will\n    // catch if there is a rejection here.\n    const aws = await provider();\n    return {\n        ...kmsProviders,\n        aws\n    };\n}\nexports.loadAWSCredentials = loadAWSCredentials; //# sourceMappingURL=aws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXdzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLDREQUFZO0FBQ25DOztDQUVDLEdBQ0QsZUFBZUYsbUJBQW1CRyxZQUFZO0lBQzFDLE1BQU1DLHFCQUFxQixDQUFDLEdBQUdILE9BQU9JLHdCQUF3QjtJQUM5RCxJQUFJLGtCQUFrQkQsb0JBQW9CO1FBQ3RDLE9BQU9EO0lBQ1g7SUFDQSxNQUFNLEVBQUVHLHFCQUFxQixFQUFFLEdBQUdGO0lBQ2xDLE1BQU1HLFdBQVdEO0lBQ2pCLDhEQUE4RDtJQUM5RCxzQ0FBc0M7SUFDdEMsTUFBTUUsTUFBTSxNQUFNRDtJQUNsQixPQUFPO1FBQUUsR0FBR0osWUFBWTtRQUFFSztJQUFJO0FBQ2xDO0FBQ0FWLDBCQUEwQixHQUFHRSxvQkFDN0IsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9hd3MuanM/NDAzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEFXU0NyZWRlbnRpYWxzID0gdm9pZCAwO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4uLy4uL2RlcHNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkQVdTQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gKDAsIGRlcHNfMS5nZXRBd3NDcmVkZW50aWFsUHJvdmlkZXIpKCk7XG4gICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGNyZWRlbnRpYWxQcm92aWRlcikge1xuICAgICAgICByZXR1cm4ga21zUHJvdmlkZXJzO1xuICAgIH1cbiAgICBjb25zdCB7IGZyb21Ob2RlUHJvdmlkZXJDaGFpbiB9ID0gY3JlZGVudGlhbFByb3ZpZGVyO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gZnJvbU5vZGVQcm92aWRlckNoYWluKCk7XG4gICAgLy8gVGhlIHN0YXRlIG1hY2hpbmUgaXMgdGhlIG9ubHkgcGxhY2UgY2FsbGluZyB0aGlzIHNvIGl0IHdpbGxcbiAgICAvLyBjYXRjaCBpZiB0aGVyZSBpcyBhIHJlamVjdGlvbiBoZXJlLlxuICAgIGNvbnN0IGF3cyA9IGF3YWl0IHByb3ZpZGVyKCk7XG4gICAgcmV0dXJuIHsgLi4ua21zUHJvdmlkZXJzLCBhd3MgfTtcbn1cbmV4cG9ydHMubG9hZEFXU0NyZWRlbnRpYWxzID0gbG9hZEFXU0NyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXdzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRBV1NDcmVkZW50aWFscyIsImRlcHNfMSIsInJlcXVpcmUiLCJrbXNQcm92aWRlcnMiLCJjcmVkZW50aWFsUHJvdmlkZXIiLCJnZXRBd3NDcmVkZW50aWFsUHJvdmlkZXIiLCJmcm9tTm9kZVByb3ZpZGVyQ2hhaW4iLCJwcm92aWRlciIsImF3cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/azure.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadAzureCredentials = exports.fetchAzureKMSToken = exports.prepareRequest = exports.tokenCache = exports.AzureCredentialCache = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/**\n * @internal\n */ class AzureCredentialCache {\n    constructor(){\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return {\n            accessToken: this.cachedToken.accessToken\n        };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */ resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */ _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */ exports.tokenCache = new AzureCredentialCache();\n/** @internal */ async function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (()=>{\n        try {\n            return JSON.parse(rawBody);\n        } catch  {\n            throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed JSON body in GET request.\");\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Unable to complete request.\", body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed response body - missing field `access_token`.\");\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed response body - missing field `expires_in`.\");\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed response body - unable to parse int from `expires_in` field.\");\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */ function prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? \"http://169.254.169.254/metadata/identity/oauth2/token\");\n    url.searchParams.append(\"api-version\", \"2018-02-01\");\n    url.searchParams.append(\"resource\", \"https://vault.azure.net\");\n    const headers = {\n        ...options.headers,\n        \"Content-Type\": \"application/json\",\n        Metadata: true\n    };\n    return {\n        headers,\n        url\n    };\n}\nexports.prepareRequest = prepareRequest;\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */ async function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    const response = await (0, utils_1.get)(url, {\n        headers\n    }).catch((error)=>{\n        if (error instanceof errors_1.MongoCryptKMSRequestNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    });\n    return parseResponse(response);\n}\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */ async function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return {\n        ...kmsProviders,\n        azure\n    };\n}\nexports.loadAzureCredentials = loadAzureCredentials; //# sourceMappingURL=azure.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadGCPCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/** @internal */ async function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if (\"kModuleError\" in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: \"service-accounts/default/token\"\n    });\n    return {\n        ...kmsProviders,\n        gcp: {\n            accessToken\n        }\n    };\n}\nexports.loadGCPCredentials = loadGCPCredentials; //# sourceMappingURL=gcp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvZ2NwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLDREQUFZO0FBQ25DLGNBQWMsR0FDZCxlQUFlRixtQkFBbUJHLFlBQVk7SUFDMUMsTUFBTUMsY0FBYyxDQUFDLEdBQUdILE9BQU9JLGNBQWM7SUFDN0MsSUFBSSxrQkFBa0JELGFBQWE7UUFDL0IsT0FBT0Q7SUFDWDtJQUNBLE1BQU0sRUFBRUcsY0FBY0MsV0FBVyxFQUFFLEdBQUcsTUFBTUgsWUFBWUksUUFBUSxDQUFDO1FBQzdEQyxVQUFVO0lBQ2Q7SUFDQSxPQUFPO1FBQUUsR0FBR04sWUFBWTtRQUFFTyxLQUFLO1lBQUVIO1FBQVk7SUFBRTtBQUNuRDtBQUNBVCwwQkFBMEIsR0FBR0Usb0JBQzdCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvZ2NwLmpzP2YzODIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRHQ1BDcmVkZW50aWFscyA9IHZvaWQgMDtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kZXBzXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZEdDUENyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IGdjcE1ldGFkYXRhID0gKDAsIGRlcHNfMS5nZXRHY3BNZXRhZGF0YSkoKTtcbiAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gZ2NwTWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGttc1Byb3ZpZGVycztcbiAgICB9XG4gICAgY29uc3QgeyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH0gPSBhd2FpdCBnY3BNZXRhZGF0YS5pbnN0YW5jZSh7XG4gICAgICAgIHByb3BlcnR5OiAnc2VydmljZS1hY2NvdW50cy9kZWZhdWx0L3Rva2VuJ1xuICAgIH0pO1xuICAgIHJldHVybiB7IC4uLmttc1Byb3ZpZGVycywgZ2NwOiB7IGFjY2Vzc1Rva2VuIH0gfTtcbn1cbmV4cG9ydHMubG9hZEdDUENyZWRlbnRpYWxzID0gbG9hZEdDUENyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2NwLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRHQ1BDcmVkZW50aWFscyIsImRlcHNfMSIsInJlcXVpcmUiLCJrbXNQcm92aWRlcnMiLCJnY3BNZXRhZGF0YSIsImdldEdjcE1ldGFkYXRhIiwiYWNjZXNzX3Rva2VuIiwiYWNjZXNzVG9rZW4iLCJpbnN0YW5jZSIsInByb3BlcnR5IiwiZ2NwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = __webpack_require__(/*! ./aws */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\");\nconst azure_1 = __webpack_require__(/*! ./azure */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst gcp_1 = __webpack_require__(/*! ./gcp */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */ function isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === \"object\" && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */ async function refreshKMSCredentials(kmsProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials(\"aws\", kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials(\"gcp\", kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials(\"azure\", kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xFLE1BQU1JLFFBQVFDLG1CQUFPQSxDQUFDLHVGQUFPO0FBQzdCLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDJGQUFTO0FBQ2pDLE1BQU1FLFFBQVFGLG1CQUFPQSxDQUFDLHVGQUFPO0FBQzdCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRixtQkFBbUJLLFlBQVksRUFBRUMsWUFBWTtJQUNsRCxNQUFNQyxXQUFXRCxZQUFZLENBQUNELGFBQWE7SUFDM0MsSUFBSUUsWUFBWSxNQUFNO1FBQ2xCLE9BQU87SUFDWDtJQUNBLE9BQU8sT0FBT0EsYUFBYSxZQUFZWixPQUFPYSxJQUFJLENBQUNELFVBQVVFLE1BQU0sS0FBSztBQUM1RTtBQUNBWiwwQkFBMEIsR0FBR0c7QUFDN0I7Ozs7OztDQU1DLEdBQ0QsZUFBZUQsc0JBQXNCTyxZQUFZO0lBQzdDLElBQUlJLG9CQUFvQko7SUFDeEIsSUFBSU4sbUJBQW1CLE9BQU9NLGVBQWU7UUFDekNJLG9CQUFvQixNQUFNLENBQUMsR0FBR1QsTUFBTVUsa0JBQWtCLEVBQUVEO0lBQzVEO0lBQ0EsSUFBSVYsbUJBQW1CLE9BQU9NLGVBQWU7UUFDekNJLG9CQUFvQixNQUFNLENBQUMsR0FBR04sTUFBTVEsa0JBQWtCLEVBQUVGO0lBQzVEO0lBQ0EsSUFBSVYsbUJBQW1CLFNBQVNNLGVBQWU7UUFDM0NJLG9CQUFvQixNQUFNLENBQUMsR0FBR1AsUUFBUVUsb0JBQW9CLEVBQUVIO0lBQ2hFO0lBQ0EsT0FBT0E7QUFDWDtBQUNBYiw2QkFBNkIsR0FBR0UsdUJBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvaW5kZXguanM/N2IyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVmcmVzaEtNU0NyZWRlbnRpYWxzID0gZXhwb3J0cy5pc0VtcHR5Q3JlZGVudGlhbHMgPSB2b2lkIDA7XG5jb25zdCBhd3NfMSA9IHJlcXVpcmUoXCIuL2F3c1wiKTtcbmNvbnN0IGF6dXJlXzEgPSByZXF1aXJlKFwiLi9henVyZVwiKTtcbmNvbnN0IGdjcF8xID0gcmVxdWlyZShcIi4vZ2NwXCIpO1xuLyoqXG4gKiBBdXRvIGNyZWRlbnRpYWwgZmV0Y2hpbmcgc2hvdWxkIG9ubHkgb2NjdXIgd2hlbiB0aGUgcHJvdmlkZXIgaXMgZGVmaW5lZCBvbiB0aGUga21zUHJvdmlkZXJzIG1hcFxuICogYW5kIHRoZSBzZXR0aW5ncyBhcmUgYW4gZW1wdHkgb2JqZWN0LlxuICpcbiAqIFRoaXMgaXMgZGlzdGluY3QgZnJvbSBhIG51bGxpc2ggcHJvdmlkZXIga2V5LlxuICpcbiAqIEBpbnRlcm5hbCAtIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seVxuICovXG5mdW5jdGlvbiBpc0VtcHR5Q3JlZGVudGlhbHMocHJvdmlkZXJOYW1lLCBrbXNQcm92aWRlcnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGttc1Byb3ZpZGVyc1twcm92aWRlck5hbWVdO1xuICAgIGlmIChwcm92aWRlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBwcm92aWRlciA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMocHJvdmlkZXIpLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydHMuaXNFbXB0eUNyZWRlbnRpYWxzID0gaXNFbXB0eUNyZWRlbnRpYWxzO1xuLyoqXG4gKiBMb2FkIGNsb3VkIHByb3ZpZGVyIGNyZWRlbnRpYWxzIGZvciB0aGUgdXNlciBwcm92aWRlZCBLTVMgcHJvdmlkZXJzLlxuICogQ3JlZGVudGlhbHMgd2lsbCBvbmx5IGF0dGVtcHQgdG8gZ2V0IGxvYWRlZCBpZiB0aGV5IGRvIG5vdCBleGlzdFxuICogYW5kIG5vIGV4aXN0aW5nIGNyZWRlbnRpYWxzIHdpbGwgZ2V0IG92ZXJ3cml0dGVuLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoS01TQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgbGV0IGZpbmFsS01TUHJvdmlkZXJzID0ga21zUHJvdmlkZXJzO1xuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2F3cycsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgYXdzXzEubG9hZEFXU0NyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2djcCcsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgZ2NwXzEubG9hZEdDUENyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2F6dXJlJywga21zUHJvdmlkZXJzKSkge1xuICAgICAgICBmaW5hbEtNU1Byb3ZpZGVycyA9IGF3YWl0ICgwLCBhenVyZV8xLmxvYWRBenVyZUNyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIHJldHVybiBmaW5hbEtNU1Byb3ZpZGVycztcbn1cbmV4cG9ydHMucmVmcmVzaEtNU0NyZWRlbnRpYWxzID0gcmVmcmVzaEtNU0NyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVmcmVzaEtNU0NyZWRlbnRpYWxzIiwiaXNFbXB0eUNyZWRlbnRpYWxzIiwiYXdzXzEiLCJyZXF1aXJlIiwiYXp1cmVfMSIsImdjcF8xIiwicHJvdmlkZXJOYW1lIiwia21zUHJvdmlkZXJzIiwicHJvdmlkZXIiLCJrZXlzIiwibGVuZ3RoIiwiZmluYWxLTVNQcm92aWRlcnMiLCJsb2FkQVdTQ3JlZGVudGlhbHMiLCJsb2FkR0NQQ3JlZGVudGlhbHMiLCJsb2FkQXp1cmVDcmVkZW50aWFscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.get = void 0;\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\n/**\n * @internal\n */ function get(url, options = {}) {\n    return new Promise((resolve, reject)=>{\n        /* eslint-disable prefer-const */ let timeoutId;\n        const request = http.get(url, options, (response)=>{\n            response.setEncoding(\"utf8\");\n            let body = \"\";\n            response.on(\"data\", (chunk)=>body += chunk);\n            response.on(\"end\", ()=>{\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({\n                    status: response.statusCode,\n                    body\n                });\n            });\n        }).on(\"error\", (error)=>{\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        }).end();\n        timeoutId = (0, timers_1.setTimeout)(()=>{\n            request.destroy(new errors_1.MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nexports.get = get; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFdBQVcsR0FBRyxLQUFLO0FBQ25CLE1BQU1HLE9BQU9DLG1CQUFPQSxDQUFDLGtCQUFNO0FBQzNCLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLG9GQUFXO0FBQ3BDOztDQUVDLEdBQ0QsU0FBU0YsSUFBSUssR0FBRyxFQUFFQyxVQUFVLENBQUMsQ0FBQztJQUMxQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDekIsK0JBQStCLEdBQy9CLElBQUlDO1FBQ0osTUFBTUMsVUFBVVYsS0FDWEQsR0FBRyxDQUFDSyxLQUFLQyxTQUFTTSxDQUFBQTtZQUNuQkEsU0FBU0MsV0FBVyxDQUFDO1lBQ3JCLElBQUlDLE9BQU87WUFDWEYsU0FBU0csRUFBRSxDQUFDLFFBQVFDLENBQUFBLFFBQVVGLFFBQVFFO1lBQ3RDSixTQUFTRyxFQUFFLENBQUMsT0FBTztnQkFDZCxJQUFHWixTQUFTYyxZQUFZLEVBQUVQO2dCQUMzQkYsUUFBUTtvQkFBRVUsUUFBUU4sU0FBU08sVUFBVTtvQkFBRUw7Z0JBQUs7WUFDaEQ7UUFDSixHQUNLQyxFQUFFLENBQUMsU0FBU0ssQ0FBQUE7WUFDWixJQUFHakIsU0FBU2MsWUFBWSxFQUFFUDtZQUMzQkQsT0FBT1c7UUFDWCxHQUNLQyxHQUFHO1FBQ1JYLFlBQVksQ0FBQyxHQUFHUCxTQUFTbUIsVUFBVSxFQUFFO1lBQ2pDWCxRQUFRWSxPQUFPLENBQUMsSUFBSW5CLFNBQVNvQix1Q0FBdUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDO1FBQzdHLEdBQUc7SUFDUDtBQUNKO0FBQ0ExQixXQUFXLEdBQUdFLEtBQ2QsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy91dGlscy5qcz84NzRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXQgPSB2b2lkIDA7XG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG5jb25zdCB0aW1lcnNfMSA9IHJlcXVpcmUoXCJ0aW1lcnNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXQodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItY29uc3QgKi9cbiAgICAgICAgbGV0IHRpbWVvdXRJZDtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGh0dHBcbiAgICAgICAgICAgIC5nZXQodXJsLCBvcHRpb25zLCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgICAgICAgIHJlc3BvbnNlLm9uKCdkYXRhJywgY2h1bmsgPT4gKGJvZHkgKz0gY2h1bmspKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNDb2RlLCBib2R5IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGltZW91dElkKTtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZW5kKCk7XG4gICAgICAgIHRpbWVvdXRJZCA9ICgwLCB0aW1lcnNfMS5zZXRUaW1lb3V0KSgoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LmRlc3Ryb3kobmV3IGVycm9yc18xLk1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvcihgcmVxdWVzdCB0aW1lZCBvdXQgYWZ0ZXIgMTAgc2Vjb25kc2ApKTtcbiAgICAgICAgfSwgMTAwMDApO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXQgPSBnZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXQiLCJodHRwIiwicmVxdWlyZSIsInRpbWVyc18xIiwiZXJyb3JzXzEiLCJ1cmwiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aW1lb3V0SWQiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJzZXRFbmNvZGluZyIsImJvZHkiLCJvbiIsImNodW5rIiwiY2xlYXJUaW1lb3V0Iiwic3RhdHVzIiwic3RhdHVzQ29kZSIsImVycm9yIiwiZW5kIiwic2V0VGltZW91dCIsImRlc3Ryb3kiLCJNb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/state_machine.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StateMachine = void 0;\nconst fs = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if (\"kModuleError\" in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [\n        MONGOCRYPT_CTX_ERROR,\n        \"MONGOCRYPT_CTX_ERROR\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_MONGO_COLLINFO,\n        \"MONGOCRYPT_CTX_NEED_MONGO_COLLINFO\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_MONGO_MARKINGS,\n        \"MONGOCRYPT_CTX_NEED_MONGO_MARKINGS\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_MONGO_KEYS,\n        \"MONGOCRYPT_CTX_NEED_MONGO_KEYS\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS,\n        \"MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_KMS,\n        \"MONGOCRYPT_CTX_NEED_KMS\"\n    ],\n    [\n        MONGOCRYPT_CTX_READY,\n        \"MONGOCRYPT_CTX_READY\"\n    ],\n    [\n        MONGOCRYPT_CTX_DONE,\n        \"MONGOCRYPT_CTX_DONE\"\n    ]\n]);\nconst INSECURE_TLS_OPTIONS = [\n    \"tlsInsecure\",\n    \"tlsAllowInvalidCertificates\",\n    \"tlsAllowInvalidHostnames\",\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    \"tlsDisableOCSPEndpointCheck\",\n    \"tlsDisableCertificateRevocationCheck\"\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */ function debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */ class StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)){\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */ async execute(executor, context) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        while(context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR){\n            debug(`[context#${context.id}] ${stateToString.get(context.state) || context.state}`);\n            switch(context.state){\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO:\n                    {\n                        const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                        if (!metaDataClient) {\n                            throw new errors_1.MongoCryptError(\"unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined\");\n                        }\n                        const collInfo = await this.fetchCollectionInfo(metaDataClient, context.ns, filter);\n                        if (collInfo) {\n                            context.addMongoOperationResponse(collInfo);\n                        }\n                        context.finishMongoOperation();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS:\n                    {\n                        const command = context.nextMongoOperation();\n                        if (!mongocryptdClient) {\n                            throw new errors_1.MongoCryptError(\"unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined\");\n                        }\n                        // When we are using the shared library, we don't have a mongocryptd manager.\n                        const markedCommand = mongocryptdManager ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command)) : await this.markCommand(mongocryptdClient, context.ns, command);\n                        context.addMongoOperationResponse(markedCommand);\n                        context.finishMongoOperation();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS:\n                    {\n                        const filter = context.nextMongoOperation();\n                        const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter);\n                        if (keys.length === 0) {\n                            // This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n                            // guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n                            // nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n                            // we return an error when there are no matching keys.  This error is generated in\n                            // subsequent iterations of the state machine.\n                            // Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n                            // do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n                            // will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n                            // otherwise we'll return `{ v: [] }`.\n                            result = {\n                                v: []\n                            };\n                        }\n                        for await (const key of keys){\n                            context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                        }\n                        context.finishMongoOperation();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS:\n                    {\n                        const kmsProviders = await executor.askForKMSCredentials();\n                        context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_KMS:\n                    {\n                        const requests = Array.from(this.requests(context));\n                        await Promise.all(requests);\n                        context.finishKMSRequests();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_READY:\n                    {\n                        const finalizedContext = context.finalize();\n                        // @ts-expect-error finalize can change the state, check for error\n                        if (context.state === MONGOCRYPT_CTX_ERROR) {\n                            const message = context.status.message || \"Finalization error\";\n                            throw new errors_1.MongoCryptError(message);\n                        }\n                        result = (0, bson_1.deserialize)(finalizedContext, this.options);\n                        break;\n                    }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${context.state}`);\n            }\n        }\n        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = context.status.message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ?? \"unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.\");\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */ async kmsRequest(request) {\n        const parsedUrl = request.endpoint.split(\":\");\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const options = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port\n        };\n        const message = request.message;\n        const buffer = new utils_1.BufferPool();\n        const netSocket = new net.Socket();\n        let socket;\n        function destroySockets() {\n            for (const sock of [\n                socket,\n                netSocket\n            ]){\n                if (sock) {\n                    sock.removeAllListeners();\n                    sock.destroy();\n                }\n            }\n        }\n        function ontimeout() {\n            return new errors_1.MongoCryptError(\"KMS request timed out\");\n        }\n        function onerror(cause) {\n            return new errors_1.MongoCryptError(\"KMS request failed\", {\n                cause\n            });\n        }\n        function onclose() {\n            return new errors_1.MongoCryptError(\"KMS request closed\");\n        }\n        const tlsOptions = this.options.tlsOptions;\n        if (tlsOptions) {\n            const kmsProvider = request.kmsProvider;\n            const providerTlsOptions = tlsOptions[kmsProvider];\n            if (providerTlsOptions) {\n                const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                if (error) {\n                    throw error;\n                }\n                try {\n                    await this.setTlsOptions(providerTlsOptions, options);\n                } catch (err) {\n                    throw onerror(err);\n                }\n            }\n        }\n        const { promise: willConnect, reject: rejectOnNetSocketError, resolve: resolveOnNetSocketConnect } = (0, utils_1.promiseWithResolvers)();\n        netSocket.once(\"timeout\", ()=>rejectOnNetSocketError(ontimeout())).once(\"error\", (err)=>rejectOnNetSocketError(onerror(err))).once(\"close\", ()=>rejectOnNetSocketError(onclose())).once(\"connect\", ()=>resolveOnNetSocketConnect());\n        try {\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                netSocket.connect({\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                });\n                await willConnect;\n                try {\n                    socks ??= loadSocks();\n                    options.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: netSocket,\n                        command: \"connect\",\n                        destination: {\n                            host: options.host,\n                            port: options.port\n                        },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: \"iLoveJavaScript\",\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                } catch (err) {\n                    throw onerror(err);\n                }\n            }\n            socket = tls.connect(options, ()=>{\n                socket.write(message);\n            });\n            const { promise: willResolveKmsRequest, reject: rejectOnTlsSocketError, resolve } = (0, utils_1.promiseWithResolvers)();\n            socket.once(\"timeout\", ()=>rejectOnTlsSocketError(ontimeout())).once(\"error\", (err)=>rejectOnTlsSocketError(onerror(err))).once(\"close\", ()=>rejectOnTlsSocketError(onclose())).on(\"data\", (data)=>{\n                buffer.append(data);\n                while(request.bytesNeeded > 0 && buffer.length){\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    resolve();\n                }\n            });\n            await willResolveKmsRequest;\n        } finally{\n            // There's no need for any more activity on this socket at this point.\n            destroySockets();\n        }\n    }\n    *requests(context) {\n        for(let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()){\n            yield this.kmsRequest(request);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */ validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS){\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */ async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */ async fetchCollectionInfo(client, ns, filter) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const collections = await client.db(db).listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false\n        }).toArray();\n        const info = collections.length > 0 ? (0, bson_1.serialize)(collections[0]) : null;\n        return info;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */ async markCommand(client, ns, command) {\n        const options = {\n            promoteLongs: false,\n            promoteValues: false\n        };\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const rawCommand = (0, bson_1.deserialize)(command, options);\n        const response = await client.db(db).command(rawCommand, options);\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */ fetchKeys(client, keyVaultNamespace, filter) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        return client.db(dbName).collection(collectionName, {\n            readConcern: {\n                level: \"majority\"\n            }\n        }).find((0, bson_1.deserialize)(filter)).toArray();\n    }\n}\nexports.StateMachine = StateMachine; //# sourceMappingURL=state_machine.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/auth_provider.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * Context used during authentication\n * @internal\n */ class AuthContext {\n    constructor(connection, credentials, options){\n        /** If the context is for reauthentication. */ this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\n/**\n * Provider used during authentication.\n * @internal\n */ class AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */ async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */ async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError(\"Reauthentication already in progress.\");\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        } finally{\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider; //# sourceMappingURL=auth_provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQ2xELE1BQU1JLFVBQVVDLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDOzs7Q0FHQyxHQUNELE1BQU1GO0lBQ0ZHLFlBQVlDLFVBQVUsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLENBQUU7UUFDMUMsNENBQTRDLEdBQzVDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDSCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNDLE9BQU8sR0FBR0E7SUFDbkI7QUFDSjtBQUNBVCxtQkFBbUIsR0FBR0c7QUFDdEI7OztDQUdDLEdBQ0QsTUFBTUQ7SUFDRjs7Ozs7S0FLQyxHQUNELE1BQU1TLFFBQVFDLFlBQVksRUFBRUMsWUFBWSxFQUFFO1FBQ3RDLE9BQU9EO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRCxNQUFNRSxPQUFPQyxPQUFPLEVBQUU7UUFDbEIsSUFBSUEsUUFBUUwsZ0JBQWdCLEVBQUU7WUFDMUIsTUFBTSxJQUFJTixRQUFRWSxpQkFBaUIsQ0FBQztRQUN4QztRQUNBLElBQUk7WUFDQUQsUUFBUUwsZ0JBQWdCLEdBQUc7WUFDM0IsTUFBTSxJQUFJLENBQUNPLElBQUksQ0FBQ0Y7UUFDcEIsU0FDUTtZQUNKQSxRQUFRTCxnQkFBZ0IsR0FBRztRQUMvQjtJQUNKO0FBQ0o7QUFDQVYsb0JBQW9CLEdBQUdFLGNBQ3ZCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanM/MmU1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gZXhwb3J0cy5BdXRoQ29udGV4dCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG4vKipcbiAqIENvbnRleHQgdXNlZCBkdXJpbmcgYXV0aGVudGljYXRpb25cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBdXRoQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIElmIHRoZSBjb250ZXh0IGlzIGZvciByZWF1dGhlbnRpY2F0aW9uLiAqL1xuICAgICAgICB0aGlzLnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQXV0aENvbnRleHQgPSBBdXRoQ29udGV4dDtcbi8qKlxuICogUHJvdmlkZXIgdXNlZCBkdXJpbmcgYXV0aGVudGljYXRpb24uXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXV0aFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHRoZSBoYW5kc2hha2UgZG9jdW1lbnQgYmVmb3JlIHRoZSBpbml0aWFsIGhhbmRzaGFrZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kc2hha2VEb2MgLSBUaGUgZG9jdW1lbnQgdXNlZCBmb3IgdGhlIGluaXRpYWwgaGFuZHNoYWtlIG9uIGEgY29ubmVjdGlvblxuICAgICAqIEBwYXJhbSBhdXRoQ29udGV4dCAtIENvbnRleHQgZm9yIGF1dGhlbnRpY2F0aW9uIGZsb3dcbiAgICAgKi9cbiAgICBhc3luYyBwcmVwYXJlKGhhbmRzaGFrZURvYywgX2F1dGhDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBoYW5kc2hha2VEb2M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYXV0aGVudGljYXRlLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IC0gVGhlIHNoYXJlZCBhdXRoIGNvbnRleHQuXG4gICAgICovXG4gICAgYXN5bmMgcmVhdXRoKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQucmVhdXRoZW50aWNhdGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ1JlYXV0aGVudGljYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcy4nKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29udGV4dC5yZWF1dGhlbnRpY2F0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXV0aChjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNvbnRleHQucmVhdXRoZW50aWNhdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BdXRoUHJvdmlkZXIgPSBBdXRoUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoX3Byb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkF1dGhQcm92aWRlciIsIkF1dGhDb250ZXh0IiwiZXJyb3JfMSIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb24iLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJyZWF1dGhlbnRpY2F0aW5nIiwicHJlcGFyZSIsImhhbmRzaGFrZURvYyIsIl9hdXRoQ29udGV4dCIsInJlYXV0aCIsImNvbnRleHQiLCJNb25nb1J1bnRpbWVFcnJvciIsImF1dGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/gssapi.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\n/** @public */ exports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: \"none\",\n    forward: \"forward\",\n    forwardAndReverse: \"forwardAndReverse\"\n});\nasync function externalCommand(connection, command) {\n    return connection.command((0, utils_1.ns)(\"$external.$cmd\"), command, undefined);\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError(\"Credentials required for GSSAPI authentication\");\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step(\"\");\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== \"string\" || !credentials) {\n        throw new error_1.MongoInvalidArgumentError(\"Connection must have host and port and credentials defined.\");\n    }\n    loadKrb();\n    if (\"kModuleError\" in krb) {\n        throw krb[\"kModuleError\"];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? \"mongodb\";\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, {\n            user: username,\n            password: password\n        });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === \"win32\" ? \"/\" : \"@\"}${spnHost}`;\n    if (\"SERVICE_REALM\" in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: \"GSSAPI\",\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || \"\";\n    } catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return client.wrap(response || \"\", {\n        user\n    });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on || mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        } catch (error) {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return resolveCname(host);\n        }\n    } else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return resolveCname(host);\n    }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    } catch  {\n        return host;\n    }\n}\nexports.resolveCname = resolveCname;\n/**\n * Load the Kerberos library.\n */ function loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n} //# sourceMappingURL=gssapi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2dzc2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLHlDQUF5QyxHQUFHQSxjQUFjLEdBQUdBLG1DQUFtQyxHQUFHLEtBQUs7QUFDL0gsTUFBTU0sTUFBTUMsbUJBQU9BLENBQUMsZ0JBQUs7QUFDekIsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsNERBQVk7QUFDbkMsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUcsVUFBVUgsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUksa0JBQWtCSixtQkFBT0EsQ0FBQyxvRkFBaUI7QUFDakQsWUFBWSxHQUNaUCxtQ0FBbUMsR0FBR0YsT0FBT2MsTUFBTSxDQUFDO0lBQ2hEQyxJQUFJO0lBQ0pDLEtBQUs7SUFDTEMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLG1CQUFtQjtBQUN2QjtBQUNBLGVBQWVDLGdCQUFnQkMsVUFBVSxFQUFFQyxPQUFPO0lBQzlDLE9BQU9ELFdBQVdDLE9BQU8sQ0FBQyxDQUFDLEdBQUdWLFFBQVFXLEVBQUUsRUFBRSxtQkFBbUJELFNBQVNFO0FBQzFFO0FBQ0EsSUFBSUM7QUFDSixNQUFNbkIsZUFBZU8sZ0JBQWdCYSxZQUFZO0lBQzdDLE1BQU1DLEtBQUtDLFdBQVcsRUFBRTtRQUNwQixNQUFNLEVBQUVQLFVBQVUsRUFBRVEsV0FBVyxFQUFFLEdBQUdEO1FBQ3BDLElBQUlDLGVBQWUsTUFBTTtZQUNyQixNQUFNLElBQUlsQixRQUFRbUIsNEJBQTRCLENBQUM7UUFDbkQ7UUFDQSxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHRjtRQUNyQixNQUFNRyxTQUFTLE1BQU1DLG1CQUFtQkw7UUFDeEMsTUFBTU0sVUFBVSxNQUFNRixPQUFPRyxJQUFJLENBQUM7UUFDbEMsTUFBTUMsb0JBQW9CLE1BQU1oQixnQkFBZ0JDLFlBQVlnQixVQUFVSDtRQUN0RSxNQUFNSSxvQkFBb0IsTUFBTUMsVUFBVVAsUUFBUSxJQUFJSSxrQkFBa0JGLE9BQU87UUFDL0UsTUFBTU0sdUJBQXVCLE1BQU1wQixnQkFBZ0JDLFlBQVlvQixhQUFhSCxtQkFBbUJGLGtCQUFrQk0sY0FBYztRQUMvSCxNQUFNQyxrQkFBa0IsTUFBTUMsU0FBU1osUUFBUUQsVUFBVVMscUJBQXFCTixPQUFPO1FBQ3JGLE1BQU1kLGdCQUFnQkMsWUFBWTtZQUM5Qm9CLGNBQWM7WUFDZEMsZ0JBQWdCRixxQkFBcUJFLGNBQWM7WUFDbkRSLFNBQVNTO1FBQ2I7SUFDSjtBQUNKO0FBQ0F6QyxjQUFjLEdBQUdJO0FBQ2pCLGVBQWUyQixtQkFBbUJMLFdBQVc7SUFDekMsTUFBTSxFQUFFaUIsV0FBVyxFQUFFLEdBQUdqQixZQUFZa0IsT0FBTztJQUMzQyxNQUFNLEVBQUVqQixXQUFXLEVBQUUsR0FBR0Q7SUFDeEIsSUFBSSxDQUFDaUIsZUFBZSxPQUFPQSxZQUFZRSxJQUFJLEtBQUssWUFBWSxDQUFDbEIsYUFBYTtRQUN0RSxNQUFNLElBQUlsQixRQUFRcUMseUJBQXlCLENBQUM7SUFDaEQ7SUFDQUM7SUFDQSxJQUFJLGtCQUFrQnhCLEtBQUs7UUFDdkIsTUFBTUEsR0FBRyxDQUFDLGVBQWU7SUFDN0I7SUFDQSxNQUFNLEVBQUV5QixnQkFBZ0IsRUFBRSxHQUFHekI7SUFDN0IsTUFBTSxFQUFFTSxRQUFRLEVBQUVvQixRQUFRLEVBQUUsR0FBR3RCO0lBQy9CLE1BQU11QixzQkFBc0J2QixZQUFZdUIsbUJBQW1CO0lBQzNELE1BQU1DLGNBQWNELG9CQUFvQkUsWUFBWSxJQUFJO0lBQ3hELE1BQU1QLE9BQU8sTUFBTTFDLGtDQUFrQ3dDLFlBQVlFLElBQUksRUFBRUs7SUFDdkUsTUFBTUcsY0FBYyxDQUFDO0lBQ3JCLElBQUlKLFlBQVksTUFBTTtRQUNsQixpRkFBaUY7UUFDakZuRCxPQUFPd0QsTUFBTSxDQUFDRCxhQUFhO1lBQUVFLE1BQU0xQjtZQUFVb0IsVUFBVUE7UUFBUztJQUNwRTtJQUNBLE1BQU1PLFVBQVVOLG9CQUFvQk8sWUFBWSxJQUFJWjtJQUNwRCxJQUFJYSxNQUFNLENBQUMsRUFBRVAsWUFBWSxFQUFFUSxRQUFRQyxRQUFRLEtBQUssVUFBVSxNQUFNLElBQUksRUFBRUosUUFBUSxDQUFDO0lBQy9FLElBQUksbUJBQW1CTixxQkFBcUI7UUFDeENRLE1BQU0sQ0FBQyxFQUFFQSxJQUFJLENBQUMsRUFBRVIsb0JBQW9CVyxhQUFhLENBQUMsQ0FBQztJQUN2RDtJQUNBLE9BQU9iLGlCQUFpQlUsS0FBS0w7QUFDakM7QUFDQSxTQUFTbEIsVUFBVUgsT0FBTztJQUN0QixPQUFPO1FBQ0hHLFdBQVc7UUFDWDJCLFdBQVc7UUFDWDlCO1FBQ0ErQixlQUFlO0lBQ25CO0FBQ0o7QUFDQSxTQUFTeEIsYUFBYVAsT0FBTyxFQUFFUSxjQUFjO0lBQ3pDLE9BQU87UUFDSEQsY0FBYztRQUNkQztRQUNBUjtJQUNKO0FBQ0o7QUFDQSxlQUFlSyxVQUFVUCxNQUFNLEVBQUVrQyxPQUFPLEVBQUVoQyxPQUFPO0lBQzdDLElBQUk7UUFDQSxNQUFNaUMsV0FBVyxNQUFNbkMsT0FBT0csSUFBSSxDQUFDRDtRQUNuQyxPQUFPaUMsWUFBWTtJQUN2QixFQUNBLE9BQU9DLE9BQU87UUFDVixJQUFJRixZQUFZLEdBQUc7WUFDZixpQ0FBaUM7WUFDakMsTUFBTUU7UUFDVjtRQUNBLCtDQUErQztRQUMvQyxPQUFPN0IsVUFBVVAsUUFBUWtDLFVBQVUsR0FBR2hDO0lBQzFDO0FBQ0o7QUFDQSxlQUFlVSxTQUFTWixNQUFNLEVBQUV5QixJQUFJLEVBQUV2QixPQUFPO0lBQ3pDLG9CQUFvQjtJQUNwQixNQUFNaUMsV0FBVyxNQUFNbkMsT0FBT3FDLE1BQU0sQ0FBQ25DO0lBQ3JDLE9BQU9GLE9BQU9zQyxJQUFJLENBQUNILFlBQVksSUFBSTtRQUFFVjtJQUFLO0FBQzlDO0FBQ0EsZUFBZXBELGtDQUFrQzBDLElBQUksRUFBRUssbUJBQW1CO0lBQ3RFLE1BQU1tQixPQUFPbkIsb0JBQW9Cb0Isc0JBQXNCO0lBQ3ZELElBQUksQ0FBQ0QsUUFBUUEsU0FBU3JFLFFBQVFLLDJCQUEyQixDQUFDVSxJQUFJLEVBQUU7UUFDNUQsT0FBTzhCO0lBQ1g7SUFDQSxpQ0FBaUM7SUFDakMsSUFBSXdCLFNBQVNyRSxRQUFRSywyQkFBMkIsQ0FBQ1EsRUFBRSxJQUMvQ3dELFNBQVNyRSxRQUFRSywyQkFBMkIsQ0FBQ1ksaUJBQWlCLEVBQUU7UUFDaEUsd0NBQXdDO1FBQ3hDLE1BQU0sRUFBRXNELE9BQU8sRUFBRSxHQUFHLE1BQU1qRSxJQUFJa0UsUUFBUSxDQUFDQyxNQUFNLENBQUM1QjtRQUM5QyxJQUFJO1lBQ0Esa0RBQWtEO1lBQ2xELE1BQU02QixVQUFVLE1BQU1wRSxJQUFJa0UsUUFBUSxDQUFDRyxVQUFVLENBQUNKO1lBQzlDLGdFQUFnRTtZQUNoRSxPQUFPRyxRQUFRRSxNQUFNLEdBQUcsSUFBSUYsT0FBTyxDQUFDLEVBQUUsR0FBRzdCO1FBQzdDLEVBQ0EsT0FBT3FCLE9BQU87WUFDVix3RUFBd0U7WUFDeEUsaUVBQWlFO1lBQ2pFLFNBQVM7WUFDVCxPQUFPaEUsYUFBYTJDO1FBQ3hCO0lBQ0osT0FDSztRQUNELG9FQUFvRTtRQUNwRSxzQkFBc0I7UUFDdEIsT0FBTzNDLGFBQWEyQztJQUN4QjtBQUNKO0FBQ0E3Qyx5Q0FBeUMsR0FBR0c7QUFDNUMsZUFBZUQsYUFBYTJDLElBQUk7SUFDNUIsbUNBQW1DO0lBQ25DLElBQUk7UUFDQSxNQUFNNkIsVUFBVSxNQUFNcEUsSUFBSWtFLFFBQVEsQ0FBQ3RFLFlBQVksQ0FBQzJDO1FBQ2hELGlDQUFpQztRQUNqQyxPQUFPNkIsUUFBUUUsTUFBTSxHQUFHLElBQUlGLE9BQU8sQ0FBQyxFQUFFLEdBQUc3QjtJQUM3QyxFQUNBLE9BQU07UUFDRixPQUFPQTtJQUNYO0FBQ0o7QUFDQTdDLG9CQUFvQixHQUFHRTtBQUN2Qjs7Q0FFQyxHQUNELFNBQVM2QztJQUNMLElBQUksQ0FBQ3hCLEtBQUs7UUFDTkEsTUFBTSxDQUFDLEdBQUdmLE9BQU9xRSxXQUFXO0lBQ2hDO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9nc3NhcGkuanM/NmE3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzb2x2ZUNuYW1lID0gZXhwb3J0cy5wZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWUgPSBleHBvcnRzLkdTU0FQSSA9IGV4cG9ydHMuR1NTQVBJQ2Fub25pY2FsaXphdGlvblZhbHVlID0gdm9pZCAwO1xuY29uc3QgZG5zID0gcmVxdWlyZShcImRuc1wiKTtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kZXBzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuR1NTQVBJQ2Fub25pY2FsaXphdGlvblZhbHVlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgb246IHRydWUsXG4gICAgb2ZmOiBmYWxzZSxcbiAgICBub25lOiAnbm9uZScsXG4gICAgZm9yd2FyZDogJ2ZvcndhcmQnLFxuICAgIGZvcndhcmRBbmRSZXZlcnNlOiAnZm9yd2FyZEFuZFJldmVyc2UnXG59KTtcbmFzeW5jIGZ1bmN0aW9uIGV4dGVybmFsQ29tbWFuZChjb25uZWN0aW9uLCBjb21tYW5kKSB7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG59XG5sZXQga3JiO1xuY2xhc3MgR1NTQVBJIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0NyZWRlbnRpYWxzIHJlcXVpcmVkIGZvciBHU1NBUEkgYXV0aGVudGljYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgbWFrZUtlcmJlcm9zQ2xpZW50KGF1dGhDb250ZXh0KTtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IGNsaWVudC5zdGVwKCcnKTtcbiAgICAgICAgY29uc3Qgc2FzbFN0YXJ0UmVzcG9uc2UgPSBhd2FpdCBleHRlcm5hbENvbW1hbmQoY29ubmVjdGlvbiwgc2FzbFN0YXJ0KHBheWxvYWQpKTtcbiAgICAgICAgY29uc3QgbmVnb3RpYXRlZFBheWxvYWQgPSBhd2FpdCBuZWdvdGlhdGUoY2xpZW50LCAxMCwgc2FzbFN0YXJ0UmVzcG9uc2UucGF5bG9hZCk7XG4gICAgICAgIGNvbnN0IHNhc2xDb250aW51ZVJlc3BvbnNlID0gYXdhaXQgZXh0ZXJuYWxDb21tYW5kKGNvbm5lY3Rpb24sIHNhc2xDb250aW51ZShuZWdvdGlhdGVkUGF5bG9hZCwgc2FzbFN0YXJ0UmVzcG9uc2UuY29udmVyc2F0aW9uSWQpKTtcbiAgICAgICAgY29uc3QgZmluYWxpemVQYXlsb2FkID0gYXdhaXQgZmluYWxpemUoY2xpZW50LCB1c2VybmFtZSwgc2FzbENvbnRpbnVlUmVzcG9uc2UucGF5bG9hZCk7XG4gICAgICAgIGF3YWl0IGV4dGVybmFsQ29tbWFuZChjb25uZWN0aW9uLCB7XG4gICAgICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgICAgICBjb252ZXJzYXRpb25JZDogc2FzbENvbnRpbnVlUmVzcG9uc2UuY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICBwYXlsb2FkOiBmaW5hbGl6ZVBheWxvYWRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5HU1NBUEkgPSBHU1NBUEk7XG5hc3luYyBmdW5jdGlvbiBtYWtlS2VyYmVyb3NDbGllbnQoYXV0aENvbnRleHQpIHtcbiAgICBjb25zdCB7IGhvc3RBZGRyZXNzIH0gPSBhdXRoQ29udGV4dC5vcHRpb25zO1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgIGlmICghaG9zdEFkZHJlc3MgfHwgdHlwZW9mIGhvc3RBZGRyZXNzLmhvc3QgIT09ICdzdHJpbmcnIHx8ICFjcmVkZW50aWFscykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDb25uZWN0aW9uIG11c3QgaGF2ZSBob3N0IGFuZCBwb3J0IGFuZCBjcmVkZW50aWFscyBkZWZpbmVkLicpO1xuICAgIH1cbiAgICBsb2FkS3JiKCk7XG4gICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGtyYikge1xuICAgICAgICB0aHJvdyBrcmJbJ2tNb2R1bGVFcnJvciddO1xuICAgIH1cbiAgICBjb25zdCB7IGluaXRpYWxpemVDbGllbnQgfSA9IGtyYjtcbiAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gY3JlZGVudGlhbHM7XG4gICAgY29uc3QgbWVjaGFuaXNtUHJvcGVydGllcyA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXM7XG4gICAgY29uc3Qgc2VydmljZU5hbWUgPSBtZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfTkFNRSA/PyAnbW9uZ29kYic7XG4gICAgY29uc3QgaG9zdCA9IGF3YWl0IHBlcmZvcm1HU1NBUElDYW5vbmljYWxpemVIb3N0TmFtZShob3N0QWRkcmVzcy5ob3N0LCBtZWNoYW5pc21Qcm9wZXJ0aWVzKTtcbiAgICBjb25zdCBpbml0T3B0aW9ucyA9IHt9O1xuICAgIGlmIChwYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE8oTk9ERS01MTM5KTogVGhlc2UgZG8gbm90IG1hdGNoIHRoZSB0eXBlc2NyaXB0IG9wdGlvbnMgaW4gaW5pdGlhbGl6ZUNsaWVudFxuICAgICAgICBPYmplY3QuYXNzaWduKGluaXRPcHRpb25zLCB7IHVzZXI6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmQgfSk7XG4gICAgfVxuICAgIGNvbnN0IHNwbkhvc3QgPSBtZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfSE9TVCA/PyBob3N0O1xuICAgIGxldCBzcG4gPSBgJHtzZXJ2aWNlTmFtZX0ke3Byb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyAnLycgOiAnQCd9JHtzcG5Ib3N0fWA7XG4gICAgaWYgKCdTRVJWSUNFX1JFQUxNJyBpbiBtZWNoYW5pc21Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHNwbiA9IGAke3Nwbn1AJHttZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfUkVBTE19YDtcbiAgICB9XG4gICAgcmV0dXJuIGluaXRpYWxpemVDbGllbnQoc3BuLCBpbml0T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBzYXNsU3RhcnQocGF5bG9hZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgbWVjaGFuaXNtOiAnR1NTQVBJJyxcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgYXV0b0F1dGhvcml6ZTogMVxuICAgIH07XG59XG5mdW5jdGlvbiBzYXNsQ29udGludWUocGF5bG9hZCwgY29udmVyc2F0aW9uSWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgIGNvbnZlcnNhdGlvbklkLFxuICAgICAgICBwYXlsb2FkXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIG5lZ290aWF0ZShjbGllbnQsIHJldHJpZXMsIHBheWxvYWQpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5zdGVwKHBheWxvYWQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgJyc7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgICAgICAgLy8gUmV0cmllcyBleGhhdXN0ZWQsIHJhaXNlIGVycm9yXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGp1c3QgbnVtYmVyIG9mIHJldHJpZXMgYW5kIGNhbGwgc3RlcCBhZ2FpblxuICAgICAgICByZXR1cm4gbmVnb3RpYXRlKGNsaWVudCwgcmV0cmllcyAtIDEsIHBheWxvYWQpO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGZpbmFsaXplKGNsaWVudCwgdXNlciwgcGF5bG9hZCkge1xuICAgIC8vIEdTUyBDbGllbnQgVW53cmFwXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQudW53cmFwKHBheWxvYWQpO1xuICAgIHJldHVybiBjbGllbnQud3JhcChyZXNwb25zZSB8fCAnJywgeyB1c2VyIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gcGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lKGhvc3QsIG1lY2hhbmlzbVByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBtb2RlID0gbWVjaGFuaXNtUHJvcGVydGllcy5DQU5PTklDQUxJWkVfSE9TVF9OQU1FO1xuICAgIGlmICghbW9kZSB8fCBtb2RlID09PSBleHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZS5ub25lKSB7XG4gICAgICAgIHJldHVybiBob3N0O1xuICAgIH1cbiAgICAvLyBJZiBmb3J3YXJkIGFuZCByZXZlcnNlIG9yIHRydWVcbiAgICBpZiAobW9kZSA9PT0gZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUub24gfHxcbiAgICAgICAgbW9kZSA9PT0gZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUuZm9yd2FyZEFuZFJldmVyc2UpIHtcbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgbG9va3VwIG9mIHRoZSBpcCBhZGRyZXNzLlxuICAgICAgICBjb25zdCB7IGFkZHJlc3MgfSA9IGF3YWl0IGRucy5wcm9taXNlcy5sb29rdXAoaG9zdCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBQZXJmb3JtIGEgcmV2ZXJzZSBwdHIgbG9va3VwIG9uIHRoZSBpcCBhZGRyZXNzLlxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlUHRyKGFkZHJlc3MpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHB0ciBkaWQgbm90IGVycm9yIGJ1dCBoYWQgbm8gcmVzdWx0cywgcmV0dXJuIHRoZSBob3N0LlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMubGVuZ3RoID4gMCA/IHJlc3VsdHNbMF0gOiBob3N0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVGhpcyBjYW4gZXJyb3IgYXMgcHRyIHJlY29yZHMgbWF5IG5vdCBleGlzdCBmb3IgYWxsIGlwcy4gSW4gdGhpcyBjYXNlXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0byBhIGNuYW1lIGxvb2t1cCBhcyBkbnMubG9va3VwKCkgZG9lcyBub3QgcmV0dXJuIHRoZVxuICAgICAgICAgICAgLy8gY25hbWUuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUNuYW1lKGhvc3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBUaGUgY2FzZSBmb3IgZm9yd2FyZCBpcyBqdXN0IHRvIHJlc29sdmUgdGhlIGNuYW1lIGFzIGRucy5sb29rdXAoKVxuICAgICAgICAvLyB3aWxsIG5vdCByZXR1cm4gaXQuXG4gICAgICAgIHJldHVybiByZXNvbHZlQ25hbWUoaG9zdCk7XG4gICAgfVxufVxuZXhwb3J0cy5wZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWUgPSBwZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWU7XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlQ25hbWUoaG9zdCkge1xuICAgIC8vIEF0dGVtcHQgdG8gcmVzb2x2ZSB0aGUgaG9zdCBuYW1lXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlQ25hbWUoaG9zdCk7XG4gICAgICAgIC8vIEdldCB0aGUgZmlyc3QgcmVzb2x2ZWQgaG9zdCBpZFxuICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPiAwID8gcmVzdWx0c1swXSA6IGhvc3Q7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGhvc3Q7XG4gICAgfVxufVxuZXhwb3J0cy5yZXNvbHZlQ25hbWUgPSByZXNvbHZlQ25hbWU7XG4vKipcbiAqIExvYWQgdGhlIEtlcmJlcm9zIGxpYnJhcnkuXG4gKi9cbmZ1bmN0aW9uIGxvYWRLcmIoKSB7XG4gICAgaWYgKCFrcmIpIHtcbiAgICAgICAga3JiID0gKDAsIGRlcHNfMS5nZXRLZXJiZXJvcykoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nc3NhcGkuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVzb2x2ZUNuYW1lIiwicGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lIiwiR1NTQVBJIiwiR1NTQVBJQ2Fub25pY2FsaXphdGlvblZhbHVlIiwiZG5zIiwicmVxdWlyZSIsImRlcHNfMSIsImVycm9yXzEiLCJ1dGlsc18xIiwiYXV0aF9wcm92aWRlcl8xIiwiZnJlZXplIiwib24iLCJvZmYiLCJub25lIiwiZm9yd2FyZCIsImZvcndhcmRBbmRSZXZlcnNlIiwiZXh0ZXJuYWxDb21tYW5kIiwiY29ubmVjdGlvbiIsImNvbW1hbmQiLCJucyIsInVuZGVmaW5lZCIsImtyYiIsIkF1dGhQcm92aWRlciIsImF1dGgiLCJhdXRoQ29udGV4dCIsImNyZWRlbnRpYWxzIiwiTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvciIsInVzZXJuYW1lIiwiY2xpZW50IiwibWFrZUtlcmJlcm9zQ2xpZW50IiwicGF5bG9hZCIsInN0ZXAiLCJzYXNsU3RhcnRSZXNwb25zZSIsInNhc2xTdGFydCIsIm5lZ290aWF0ZWRQYXlsb2FkIiwibmVnb3RpYXRlIiwic2FzbENvbnRpbnVlUmVzcG9uc2UiLCJzYXNsQ29udGludWUiLCJjb252ZXJzYXRpb25JZCIsImZpbmFsaXplUGF5bG9hZCIsImZpbmFsaXplIiwiaG9zdEFkZHJlc3MiLCJvcHRpb25zIiwiaG9zdCIsIk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJsb2FkS3JiIiwiaW5pdGlhbGl6ZUNsaWVudCIsInBhc3N3b3JkIiwibWVjaGFuaXNtUHJvcGVydGllcyIsInNlcnZpY2VOYW1lIiwiU0VSVklDRV9OQU1FIiwiaW5pdE9wdGlvbnMiLCJhc3NpZ24iLCJ1c2VyIiwic3BuSG9zdCIsIlNFUlZJQ0VfSE9TVCIsInNwbiIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsIlNFUlZJQ0VfUkVBTE0iLCJtZWNoYW5pc20iLCJhdXRvQXV0aG9yaXplIiwicmV0cmllcyIsInJlc3BvbnNlIiwiZXJyb3IiLCJ1bndyYXAiLCJ3cmFwIiwibW9kZSIsIkNBTk9OSUNBTElaRV9IT1NUX05BTUUiLCJhZGRyZXNzIiwicHJvbWlzZXMiLCJsb29rdXAiLCJyZXN1bHRzIiwicmVzb2x2ZVB0ciIsImxlbmd0aCIsImdldEtlcmJlcm9zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst gssapi_1 = __webpack_require__(/*! ./gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (hello.maxWireVersion >= 3) {\n            return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_PROVIDER_NAMES = [\n    \"aws\",\n    \"azure\"\n];\nconst ALLOWED_HOSTS_ERROR = \"Auth mechanism property ALLOWED_HOSTS must be an array of strings.\";\n/** @internal */ exports.DEFAULT_ALLOWED_HOSTS = [\n    \"*.mongodb.net\",\n    \"*.mongodb-dev.net\",\n    \"*.mongodbgov.net\",\n    \"localhost\",\n    \"127.0.0.1\",\n    \"::1\"\n];\n/** Error for when the token audience is missing in the environment. */ const TOKEN_AUDIENCE_MISSING_ERROR = \"TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.\";\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */ class MongoCredentials {\n    constructor(options){\n        this.username = options.username ?? \"\";\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */ equals(other) {\n        return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */ resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n                throw new error_1.MongoInvalidArgumentError(`username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME === \"azure\" && !this.mechanismProperties.TOKEN_AUDIENCE) {\n                throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME && !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(\",\")} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`);\n            }\n            if (!this.mechanismProperties.PROVIDER_NAME && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts){\n                    if (typeof host !== \"string\") {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== \"$external\") {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(\"PLAIN Authentication Mechanism needs an auth source\");\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === \"\") {\n                Reflect.set(this, \"password\", undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? \"\",\n            password: options.password ?? creds?.password ?? \"\",\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? \"admin\"\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials; //# sourceMappingURL=mongo_credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongocr.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoCR = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const { username, password, source } = credentials;\n        const { nonce } = await connection.command((0, utils_1.ns)(`${source}.$cmd`), {\n            getnonce: 1\n        }, undefined);\n        const hashPassword = crypto.createHash(\"md5\").update(`${username}:mongo:${password}`, \"utf8\").digest(\"hex\");\n        // Final key\n        const key = crypto.createHash(\"md5\").update(`${nonce}${username}${hashPassword}`, \"utf8\").digest(\"hex\");\n        const authenticateCommand = {\n            authenticate: 1,\n            user: username,\n            nonce,\n            key\n        };\n        await connection.command((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    }\n}\nexports.MongoCR = MongoCR; //# sourceMappingURL=mongocr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvY3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQy9CLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1FLFVBQVVGLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1HLGtCQUFrQkgsbUJBQU9BLENBQUMsb0ZBQWlCO0FBQ2pELE1BQU1GLGdCQUFnQkssZ0JBQWdCQyxZQUFZO0lBQzlDLE1BQU1DLEtBQUtDLFdBQVcsRUFBRTtRQUNwQixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsV0FBVyxFQUFFLEdBQUdGO1FBQ3BDLElBQUksQ0FBQ0UsYUFBYTtZQUNkLE1BQU0sSUFBSVAsUUFBUVEsNEJBQTRCLENBQUM7UUFDbkQ7UUFDQSxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUUsR0FBR0o7UUFDdkMsTUFBTSxFQUFFSyxLQUFLLEVBQUUsR0FBRyxNQUFNTixXQUFXTyxPQUFPLENBQUMsQ0FBQyxHQUFHWixRQUFRYSxFQUFFLEVBQUUsQ0FBQyxFQUFFSCxPQUFPLEtBQUssQ0FBQyxHQUFHO1lBQUVJLFVBQVU7UUFBRSxHQUFHQztRQUMvRixNQUFNQyxlQUFlbkIsT0FDaEJvQixVQUFVLENBQUMsT0FDWEMsTUFBTSxDQUFDLENBQUMsRUFBRVYsU0FBUyxPQUFPLEVBQUVDLFNBQVMsQ0FBQyxFQUFFLFFBQ3hDVSxNQUFNLENBQUM7UUFDWixZQUFZO1FBQ1osTUFBTUMsTUFBTXZCLE9BQ1BvQixVQUFVLENBQUMsT0FDWEMsTUFBTSxDQUFDLENBQUMsRUFBRVAsTUFBTSxFQUFFSCxTQUFTLEVBQUVRLGFBQWEsQ0FBQyxFQUFFLFFBQzdDRyxNQUFNLENBQUM7UUFDWixNQUFNRSxzQkFBc0I7WUFDeEJDLGNBQWM7WUFDZEMsTUFBTWY7WUFDTkc7WUFDQVM7UUFDSjtRQUNBLE1BQU1mLFdBQVdPLE9BQU8sQ0FBQyxDQUFDLEdBQUdaLFFBQVFhLEVBQUUsRUFBRSxDQUFDLEVBQUVILE9BQU8sS0FBSyxDQUFDLEdBQUdXLHFCQUFxQk47SUFDckY7QUFDSjtBQUNBckIsZUFBZSxHQUFHRSxTQUNsQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2NyLmpzPzAyM2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvQ1IgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgTW9uZ29DUiBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgc291cmNlIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgeyBub25jZSB9ID0gYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKShgJHtzb3VyY2V9LiRjbWRgKSwgeyBnZXRub25jZTogMSB9LCB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCBoYXNoUGFzc3dvcmQgPSBjcnlwdG9cbiAgICAgICAgICAgIC5jcmVhdGVIYXNoKCdtZDUnKVxuICAgICAgICAgICAgLnVwZGF0ZShgJHt1c2VybmFtZX06bW9uZ286JHtwYXNzd29yZH1gLCAndXRmOCcpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICAgICAgLy8gRmluYWwga2V5XG4gICAgICAgIGNvbnN0IGtleSA9IGNyeXB0b1xuICAgICAgICAgICAgLmNyZWF0ZUhhc2goJ21kNScpXG4gICAgICAgICAgICAudXBkYXRlKGAke25vbmNlfSR7dXNlcm5hbWV9JHtoYXNoUGFzc3dvcmR9YCwgJ3V0ZjgnKVxuICAgICAgICAgICAgLmRpZ2VzdCgnaGV4Jyk7XG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0ZUNvbW1hbmQgPSB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGU6IDEsXG4gICAgICAgICAgICB1c2VyOiB1c2VybmFtZSxcbiAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAga2V5XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoYCR7c291cmNlfS4kY21kYCksIGF1dGhlbnRpY2F0ZUNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NSID0gTW9uZ29DUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvY3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTW9uZ29DUiIsImNyeXB0byIsInJlcXVpcmUiLCJlcnJvcl8xIiwidXRpbHNfMSIsImF1dGhfcHJvdmlkZXJfMSIsIkF1dGhQcm92aWRlciIsImF1dGgiLCJhdXRoQ29udGV4dCIsImNvbm5lY3Rpb24iLCJjcmVkZW50aWFscyIsIk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic291cmNlIiwibm9uY2UiLCJjb21tYW5kIiwibnMiLCJnZXRub25jZSIsInVuZGVmaW5lZCIsImhhc2hQYXNzd29yZCIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJrZXkiLCJhdXRoZW50aWNhdGVDb21tYW5kIiwiYXV0aGVudGljYXRlIiwidXNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoDBAWS = void 0;\nconst process = __webpack_require__(/*! process */ \"process\");\nconst BSON = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n */ const LEGACY_REGIONS = new Set([\n    \"ap-northeast-1\",\n    \"ap-south-1\",\n    \"ap-southeast-1\",\n    \"ap-southeast-2\",\n    \"aws-global\",\n    \"ca-central-1\",\n    \"eu-central-1\",\n    \"eu-north-1\",\n    \"eu-west-1\",\n    \"eu-west-2\",\n    \"eu-west-3\",\n    \"sa-east-1\",\n    \"us-east-1\",\n    \"us-east-2\",\n    \"us-west-1\",\n    \"us-west-2\"\n]);\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = \"http://169.254.170.2\";\nconst AWS_EC2_URI = \"http://169.254.169.254\";\nconst AWS_EC2_PATH = \"/latest/meta-data/iam/security-credentials\";\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor(){\n        super();\n        MongoDBAWS.credentialProvider ??= (0, deps_1.getAwsCredentialProvider)();\n        let { AWS_STS_REGIONAL_ENDPOINTS = \"\", AWS_REGION = \"\" } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */ const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */ const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === \"regional\" || AWS_STS_REGIONAL_ENDPOINTS === \"legacy\" && !LEGACY_REGIONS.has(AWS_REGION);\n        if (\"fromNodeProviderChain\" in MongoDBAWS.credentialProvider) {\n            this.provider = awsRegionSettingsExist && useRegionalSts ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\n                clientConfig: {\n                    region: AWS_REGION\n                }\n            }) : MongoDBAWS.credentialProvider.fromNodeProviderChain();\n        }\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        if (\"kModuleError\" in deps_1.aws4) {\n            throw deps_1.aws4[\"kModuleError\"];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError(\"MONGODB-AWS authentication requires MongoDB version 4.4 or later\");\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials, this.provider);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        // Allow the user to specify an AWS session token for authentication with temporary credentials.\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n            accessKeyId,\n            secretAccessKey,\n            sessionToken\n        } : accessKeyId && secretAccessKey ? {\n            accessKeyId,\n            secretAccessKey\n        } : undefined;\n        const db = credentials.source;\n        const nonce = await (0, utils_1.randomBytes)(32);\n        // All messages between MongoDB clients and servers are sent as BSON objects\n        // in the payload field of saslStart and saslContinue.\n        const saslStart = {\n            saslStart: 1,\n            mechanism: \"MONGODB-AWS\",\n            payload: BSON.serialize({\n                r: nonce,\n                p: ASCII_N\n            }, bsonOptions)\n        };\n        const saslStartResponse = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(\"Server nonce does not begin with client nonce\");\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf(\"..\") !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = \"Action=GetCallerIdentity&Version=2011-06-15\";\n        const options = sign({\n            method: \"POST\",\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: \"sts\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Content-Length\": body.length,\n                \"X-MongoDB-Server-Nonce\": utils_1.ByteUtils.toBase64(serverNonce),\n                \"X-MongoDB-GS2-CB-Flag\": \"n\"\n            },\n            path: \"/\",\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers[\"X-Amz-Date\"]\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials, provider) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        // The AWS session token (creds.Token) may or may not be set.\n        if (!creds.AccessKeyId || !creds.SecretAccessKey) {\n            throw new error_1.MongoMissingCredentialsError(\"Could not obtain temporary MONGODB-AWS credentials\");\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n    if (provider && !(\"kModuleError\" in MongoDBAWS.credentialProvider)) {\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */ try {\n            const creds = await provider();\n            return makeMongoCredentialsFromAWSTemp({\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            });\n        } catch (error) {\n            throw new error_1.MongoAWSError(error.message);\n        }\n    } else {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: \"PUT\",\n            json: false,\n            headers: {\n                \"X-aws-ec2-metadata-token-ttl-seconds\": 30\n            }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: {\n                \"X-aws-ec2-metadata-token\": token\n            }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: {\n                \"X-aws-ec2-metadata-token\": token\n            }\n        });\n        return makeMongoCredentialsFromAWSTemp(creds);\n    }\n}\nfunction deriveRegion(host) {\n    const parts = host.split(\".\");\n    if (parts.length === 1 || parts[1] === \"amazonaws\") {\n        return \"us-east-1\";\n    }\n    return parts[1];\n} //# sourceMappingURL=mongodb_aws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst aws_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/aws_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\");\nconst azure_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/azure_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/callback_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/** Error when credentials are missing. */ const MISSING_CREDENTIALS_ERROR = \"AuthContext must provide credentials.\";\n/** @internal */ exports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set(\"callback\", new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set(\"aws\", new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set(\"azure\", new azure_service_workflow_1.AzureServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */ class MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */ constructor(){\n        super();\n    }\n    /**\n     * Authenticate using OIDC\n     */ async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        await workflow.execute(connection, credentials, reauthenticating, response);\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */ async prepare(handshakeDoc, authContext) {\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        const result = await workflow.speculativeAuth(credentials);\n        return {\n            ...handshakeDoc,\n            ...result\n        };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */ function getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n/**\n * Gets either a device workflow or callback workflow.\n */ function getWorkflow(credentials) {\n    const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n    const workflow = exports.OIDC_WORKFLOWS.get(providerName || \"callback\");\n    if (!workflow) {\n        throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n    }\n    return workflow;\n} //# sourceMappingURL=mongodb_oidc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDcEQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyxvRkFBaUI7QUFDakQsTUFBTUUseUJBQXlCRixtQkFBT0EsQ0FBQyw0SEFBcUM7QUFDNUUsTUFBTUcsMkJBQTJCSCxtQkFBT0EsQ0FBQyxnSUFBdUM7QUFDaEYsTUFBTUksc0JBQXNCSixtQkFBT0EsQ0FBQyxzSEFBa0M7QUFDdEUsd0NBQXdDLEdBQ3hDLE1BQU1LLDRCQUE0QjtBQUNsQyxjQUFjLEdBQ2RWLHNCQUFzQixHQUFHLElBQUlXO0FBQzdCWCxRQUFRRyxjQUFjLENBQUNTLEdBQUcsQ0FBQyxZQUFZLElBQUlILG9CQUFvQkksZ0JBQWdCO0FBQy9FYixRQUFRRyxjQUFjLENBQUNTLEdBQUcsQ0FBQyxPQUFPLElBQUlMLHVCQUF1Qk8sa0JBQWtCO0FBQy9FZCxRQUFRRyxjQUFjLENBQUNTLEdBQUcsQ0FBQyxTQUFTLElBQUlKLHlCQUF5Qk8sb0JBQW9CO0FBQ3JGOzs7Q0FHQyxHQUNELE1BQU1iLG9CQUFvQkksZ0JBQWdCVSxZQUFZO0lBQ2xEOztLQUVDLEdBQ0RDLGFBQWM7UUFDVixLQUFLO0lBQ1Q7SUFDQTs7S0FFQyxHQUNELE1BQU1DLEtBQUtDLFdBQVcsRUFBRTtRQUNwQixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsZ0JBQWdCLEVBQUVDLFFBQVEsRUFBRSxHQUFHSDtRQUNuRCxNQUFNSSxjQUFjQyxlQUFlTDtRQUNuQyxNQUFNTSxXQUFXQyxZQUFZSDtRQUM3QixNQUFNRSxTQUFTRSxPQUFPLENBQUNQLFlBQVlHLGFBQWFGLGtCQUFrQkM7SUFDdEU7SUFDQTs7S0FFQyxHQUNELE1BQU1NLFFBQVFDLFlBQVksRUFBRVYsV0FBVyxFQUFFO1FBQ3JDLE1BQU1JLGNBQWNDLGVBQWVMO1FBQ25DLE1BQU1NLFdBQVdDLFlBQVlIO1FBQzdCLE1BQU1PLFNBQVMsTUFBTUwsU0FBU00sZUFBZSxDQUFDUjtRQUM5QyxPQUFPO1lBQUUsR0FBR00sWUFBWTtZQUFFLEdBQUdDLE1BQU07UUFBQztJQUN4QztBQUNKO0FBQ0E5QixtQkFBbUIsR0FBR0U7QUFDdEI7O0NBRUMsR0FDRCxTQUFTc0IsZUFBZUwsV0FBVztJQUMvQixNQUFNLEVBQUVJLFdBQVcsRUFBRSxHQUFHSjtJQUN4QixJQUFJLENBQUNJLGFBQWE7UUFDZCxNQUFNLElBQUluQixRQUFRNEIsNEJBQTRCLENBQUN0QjtJQUNuRDtJQUNBLE9BQU9hO0FBQ1g7QUFDQTs7Q0FFQyxHQUNELFNBQVNHLFlBQVlILFdBQVc7SUFDNUIsTUFBTVUsZUFBZVYsWUFBWVcsbUJBQW1CLENBQUNDLGFBQWE7SUFDbEUsTUFBTVYsV0FBV3pCLFFBQVFHLGNBQWMsQ0FBQ2lDLEdBQUcsQ0FBQ0gsZ0JBQWdCO0lBQzVELElBQUksQ0FBQ1IsVUFBVTtRQUNYLE1BQU0sSUFBSXJCLFFBQVFpQyx5QkFBeUIsQ0FBQyxDQUFDLHFDQUFxQyxFQUFFZCxZQUFZVyxtQkFBbUIsQ0FBQ0MsYUFBYSxDQUFDLENBQUM7SUFDdkk7SUFDQSxPQUFPVjtBQUNYLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjLmpzPzdmZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvREJPSURDID0gZXhwb3J0cy5PSURDX1dPUktGTE9XUyA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY29uc3QgYXdzX3NlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvd1wiKTtcbmNvbnN0IGF6dXJlX3NlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93XCIpO1xuY29uc3QgY2FsbGJhY2tfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9jYWxsYmFja193b3JrZmxvd1wiKTtcbi8qKiBFcnJvciB3aGVuIGNyZWRlbnRpYWxzIGFyZSBtaXNzaW5nLiAqL1xuY29uc3QgTUlTU0lOR19DUkVERU5USUFMU19FUlJPUiA9ICdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1MgPSBuZXcgTWFwKCk7XG5leHBvcnRzLk9JRENfV09SS0ZMT1dTLnNldCgnY2FsbGJhY2snLCBuZXcgY2FsbGJhY2tfd29ya2Zsb3dfMS5DYWxsYmFja1dvcmtmbG93KCkpO1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUy5zZXQoJ2F3cycsIG5ldyBhd3Nfc2VydmljZV93b3JrZmxvd18xLkF3c1NlcnZpY2VXb3JrZmxvdygpKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCdhenVyZScsIG5ldyBhenVyZV9zZXJ2aWNlX3dvcmtmbG93XzEuQXp1cmVTZXJ2aWNlV29ya2Zsb3coKSk7XG4vKipcbiAqIE9JREMgYXV0aCBwcm92aWRlci5cbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY2xhc3MgTW9uZ29EQk9JREMgZXh0ZW5kcyBhdXRoX3Byb3ZpZGVyXzEuQXV0aFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgYXV0aCBwcm92aWRlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXV0aGVudGljYXRlIHVzaW5nIE9JRENcbiAgICAgKi9cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiwgcmVhdXRoZW50aWNhdGluZywgcmVzcG9uc2UgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGdldENyZWRlbnRpYWxzKGF1dGhDb250ZXh0KTtcbiAgICAgICAgY29uc3Qgd29ya2Zsb3cgPSBnZXRXb3JrZmxvdyhjcmVkZW50aWFscyk7XG4gICAgICAgIGF3YWl0IHdvcmtmbG93LmV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIHJlYXV0aGVudGljYXRpbmcsIHJlc3BvbnNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBzcGVjdWxhdGl2ZSBhdXRoIGZvciB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpO1xuICAgICAgICBjb25zdCB3b3JrZmxvdyA9IGdldFdvcmtmbG93KGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd29ya2Zsb3cuc3BlY3VsYXRpdmVBdXRoKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgcmV0dXJuIHsgLi4uaGFuZHNoYWtlRG9jLCAuLi5yZXN1bHQgfTtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvREJPSURDID0gTW9uZ29EQk9JREM7XG4vKipcbiAqIEdldCBjcmVkZW50aWFscyBmcm9tIHRoZSBhdXRoIGNvbnRleHQsIHRocm93aW5nIGlmIHRoZXkgZG8gbm90IGV4aXN0LlxuICovXG5mdW5jdGlvbiBnZXRDcmVkZW50aWFscyhhdXRoQ29udGV4dCkge1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcihNSVNTSU5HX0NSRURFTlRJQUxTX0VSUk9SKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xufVxuLyoqXG4gKiBHZXRzIGVpdGhlciBhIGRldmljZSB3b3JrZmxvdyBvciBjYWxsYmFjayB3b3JrZmxvdy5cbiAqL1xuZnVuY3Rpb24gZ2V0V29ya2Zsb3coY3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCBwcm92aWRlck5hbWUgPSBjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUU7XG4gICAgY29uc3Qgd29ya2Zsb3cgPSBleHBvcnRzLk9JRENfV09SS0ZMT1dTLmdldChwcm92aWRlck5hbWUgfHwgJ2NhbGxiYWNrJyk7XG4gICAgaWYgKCF3b3JrZmxvdykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBDb3VsZCBub3QgbG9hZCB3b3JrZmxvdyBmb3IgcHJvdmlkZXIgJHtjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUV9YCk7XG4gICAgfVxuICAgIHJldHVybiB3b3JrZmxvdztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvZGJfb2lkYy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNb25nb0RCT0lEQyIsIk9JRENfV09SS0ZMT1dTIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJhdXRoX3Byb3ZpZGVyXzEiLCJhd3Nfc2VydmljZV93b3JrZmxvd18xIiwiYXp1cmVfc2VydmljZV93b3JrZmxvd18xIiwiY2FsbGJhY2tfd29ya2Zsb3dfMSIsIk1JU1NJTkdfQ1JFREVOVElBTFNfRVJST1IiLCJNYXAiLCJzZXQiLCJDYWxsYmFja1dvcmtmbG93IiwiQXdzU2VydmljZVdvcmtmbG93IiwiQXp1cmVTZXJ2aWNlV29ya2Zsb3ciLCJBdXRoUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsImF1dGgiLCJhdXRoQ29udGV4dCIsImNvbm5lY3Rpb24iLCJyZWF1dGhlbnRpY2F0aW5nIiwicmVzcG9uc2UiLCJjcmVkZW50aWFscyIsImdldENyZWRlbnRpYWxzIiwid29ya2Zsb3ciLCJnZXRXb3JrZmxvdyIsImV4ZWN1dGUiLCJwcmVwYXJlIiwiaGFuZHNoYWtlRG9jIiwicmVzdWx0Iiwic3BlY3VsYXRpdmVBdXRoIiwiTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvciIsInByb3ZpZGVyTmFtZSIsIm1lY2hhbmlzbVByb3BlcnRpZXMiLCJQUk9WSURFUl9OQU1FIiwiZ2V0IiwiTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AwsServiceWorkflow = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Error for when the token is missing in the environment. */ const TOKEN_MISSING_ERROR = \"AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.\";\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */ class AwsServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor(){\n        super();\n    }\n    /**\n     * Get the token from the environment.\n     */ async getToken() {\n        const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        return fs.promises.readFile(tokenFile, \"utf8\");\n    }\n}\nexports.AwsServiceWorkflow = AwsServiceWorkflow; //# sourceMappingURL=aws_service_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUcsS0FBSztBQUNsQyxNQUFNRyxLQUFLQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3ZCLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLGlFQUFnQjtBQUN4QyxNQUFNRSxxQkFBcUJGLG1CQUFPQSxDQUFDLHVHQUFvQjtBQUN2RCw0REFBNEQsR0FDNUQsTUFBTUcsc0JBQXNCO0FBQzVCOzs7O0NBSUMsR0FDRCxNQUFNTCwyQkFBMkJJLG1CQUFtQkUsZUFBZTtJQUMvREMsYUFBYztRQUNWLEtBQUs7SUFDVDtJQUNBOztLQUVDLEdBQ0QsTUFBTUMsV0FBVztRQUNiLE1BQU1DLFlBQVlDLFFBQVFDLEdBQUcsQ0FBQ0MsMkJBQTJCO1FBQ3pELElBQUksQ0FBQ0gsV0FBVztZQUNaLE1BQU0sSUFBSU4sUUFBUVUsYUFBYSxDQUFDUjtRQUNwQztRQUNBLE9BQU9KLEdBQUdhLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDTixXQUFXO0lBQzNDO0FBQ0o7QUFDQVgsMEJBQTBCLEdBQUdFLG9CQUM3QixnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXdzX3NlcnZpY2Vfd29ya2Zsb3cuanM/N2FhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXdzU2VydmljZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3Qgc2VydmljZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vc2VydmljZV93b3JrZmxvd1wiKTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9NSVNTSU5HX0VSUk9SID0gJ0FXU19XRUJfSURFTlRJVFlfVE9LRU5fRklMRSBtdXN0IGJlIHNldCBpbiB0aGUgZW52aXJvbm1lbnQuJztcbi8qKlxuICogRGV2aWNlIHdvcmtmbG93IGltcGxlbWVudGF0aW9uIGZvciBBV1MuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF3c1NlcnZpY2VXb3JrZmxvdyBleHRlbmRzIHNlcnZpY2Vfd29ya2Zsb3dfMS5TZXJ2aWNlV29ya2Zsb3cge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKCkge1xuICAgICAgICBjb25zdCB0b2tlbkZpbGUgPSBwcm9jZXNzLmVudi5BV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEU7XG4gICAgICAgIGlmICghdG9rZW5GaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FXU0Vycm9yKFRPS0VOX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcy5wcm9taXNlcy5yZWFkRmlsZSh0b2tlbkZpbGUsICd1dGY4Jyk7XG4gICAgfVxufVxuZXhwb3J0cy5Bd3NTZXJ2aWNlV29ya2Zsb3cgPSBBd3NTZXJ2aWNlV29ya2Zsb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hd3Nfc2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBd3NTZXJ2aWNlV29ya2Zsb3ciLCJmcyIsInJlcXVpcmUiLCJlcnJvcl8xIiwic2VydmljZV93b3JrZmxvd18xIiwiVE9LRU5fTUlTU0lOR19FUlJPUiIsIlNlcnZpY2VXb3JrZmxvdyIsImNvbnN0cnVjdG9yIiwiZ2V0VG9rZW4iLCJ0b2tlbkZpbGUiLCJwcm9jZXNzIiwiZW52IiwiQVdTX1dFQl9JREVOVElUWV9UT0tFTl9GSUxFIiwiTW9uZ29BV1NFcnJvciIsInByb21pc2VzIiwicmVhZEZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AzureServiceWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst azure_token_cache_1 = __webpack_require__(/*! ./azure_token_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Base URL for getting Azure tokens. */ const AZURE_BASE_URL = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n/** Azure request headers. */ const AZURE_HEADERS = Object.freeze({\n    Metadata: \"true\",\n    Accept: \"application/json\"\n});\n/** Invalid endpoint result error. */ const ENDPOINT_RESULT_ERROR = \"Azure endpoint did not return a value with only access_token and expires_in properties\";\n/** Error for when the token audience is missing in the environment. */ const TOKEN_AUDIENCE_MISSING_ERROR = \"TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.\";\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */ class AzureServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor(){\n        super(...arguments);\n        this.cache = new azure_token_cache_1.AzureTokenCache();\n    }\n    /**\n     * Get the token from the environment.\n     */ async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n        }\n        let token;\n        const entry = this.cache.getEntry(tokenAudience);\n        if (entry?.isValid()) {\n            token = entry.token;\n        } else {\n            this.cache.deleteEntry(tokenAudience);\n            const response = await getAzureTokenData(tokenAudience);\n            if (!isEndpointResultValid(response)) {\n                throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n            }\n            this.cache.addEntry(tokenAudience, response);\n            token = response.access_token;\n        }\n        return token;\n    }\n}\nexports.AzureServiceWorkflow = AzureServiceWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */ async function getAzureTokenData(tokenAudience) {\n    const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\n    const data = await (0, utils_1.request)(url, {\n        json: true,\n        headers: AZURE_HEADERS\n    });\n    return data;\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */ function isEndpointResultValid(token) {\n    if (token == null || typeof token !== \"object\") return false;\n    return \"access_token\" in token && \"expires_in\" in token;\n} //# sourceMappingURL=azure_service_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLGlFQUFnQjtBQUN4QyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyxpRUFBZ0I7QUFDeEMsTUFBTUUsc0JBQXNCRixtQkFBT0EsQ0FBQyx5R0FBcUI7QUFDekQsTUFBTUcscUJBQXFCSCxtQkFBT0EsQ0FBQyx1R0FBb0I7QUFDdkQsdUNBQXVDLEdBQ3ZDLE1BQU1JLGlCQUFpQjtBQUN2QiwyQkFBMkIsR0FDM0IsTUFBTUMsZ0JBQWdCWCxPQUFPWSxNQUFNLENBQUM7SUFBRUMsVUFBVTtJQUFRQyxRQUFRO0FBQW1CO0FBQ25GLG1DQUFtQyxHQUNuQyxNQUFNQyx3QkFBd0I7QUFDOUIscUVBQXFFLEdBQ3JFLE1BQU1DLCtCQUErQjtBQUNyQzs7OztDQUlDLEdBQ0QsTUFBTVosNkJBQTZCSyxtQkFBbUJRLGVBQWU7SUFDakVDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSVosb0JBQW9CYSxlQUFlO0lBQ3hEO0lBQ0E7O0tBRUMsR0FDRCxNQUFNQyxTQUFTQyxXQUFXLEVBQUU7UUFDeEIsTUFBTUMsZ0JBQWdCRCxhQUFhRSxvQkFBb0JDO1FBQ3ZELElBQUksQ0FBQ0YsZUFBZTtZQUNoQixNQUFNLElBQUluQixRQUFRc0IsZUFBZSxDQUFDWDtRQUN0QztRQUNBLElBQUlZO1FBQ0osTUFBTUMsUUFBUSxJQUFJLENBQUNULEtBQUssQ0FBQ1UsUUFBUSxDQUFDTjtRQUNsQyxJQUFJSyxPQUFPRSxXQUFXO1lBQ2xCSCxRQUFRQyxNQUFNRCxLQUFLO1FBQ3ZCLE9BQ0s7WUFDRCxJQUFJLENBQUNSLEtBQUssQ0FBQ1ksV0FBVyxDQUFDUjtZQUN2QixNQUFNUyxXQUFXLE1BQU1DLGtCQUFrQlY7WUFDekMsSUFBSSxDQUFDVyxzQkFBc0JGLFdBQVc7Z0JBQ2xDLE1BQU0sSUFBSTVCLFFBQVFzQixlQUFlLENBQUNaO1lBQ3RDO1lBQ0EsSUFBSSxDQUFDSyxLQUFLLENBQUNnQixRQUFRLENBQUNaLGVBQWVTO1lBQ25DTCxRQUFRSyxTQUFTSSxZQUFZO1FBQ2pDO1FBQ0EsT0FBT1Q7SUFDWDtBQUNKO0FBQ0ExQiw0QkFBNEIsR0FBR0U7QUFDL0I7O0NBRUMsR0FDRCxlQUFlOEIsa0JBQWtCVixhQUFhO0lBQzFDLE1BQU1jLE1BQU0sQ0FBQyxFQUFFNUIsZUFBZSxVQUFVLEVBQUVjLGNBQWMsQ0FBQztJQUN6RCxNQUFNZSxPQUFPLE1BQU0sQ0FBQyxHQUFHaEMsUUFBUWlDLE9BQU8sRUFBRUYsS0FBSztRQUN6Q0csTUFBTTtRQUNOQyxTQUFTL0I7SUFDYjtJQUNBLE9BQU80QjtBQUNYO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNKLHNCQUFzQlAsS0FBSztJQUNoQyxJQUFJQSxTQUFTLFFBQVEsT0FBT0EsVUFBVSxVQUNsQyxPQUFPO0lBQ1gsT0FBTyxrQkFBa0JBLFNBQVMsZ0JBQWdCQTtBQUN0RCxFQUNBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzP2NiNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF6dXJlU2VydmljZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhenVyZV90b2tlbl9jYWNoZV8xID0gcmVxdWlyZShcIi4vYXp1cmVfdG9rZW5fY2FjaGVcIik7XG5jb25zdCBzZXJ2aWNlX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9zZXJ2aWNlX3dvcmtmbG93XCIpO1xuLyoqIEJhc2UgVVJMIGZvciBnZXR0aW5nIEF6dXJlIHRva2Vucy4gKi9cbmNvbnN0IEFaVVJFX0JBU0VfVVJMID0gJ2h0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbWV0YWRhdGEvaWRlbnRpdHkvb2F1dGgyL3Rva2VuP2FwaS12ZXJzaW9uPTIwMTgtMDItMDEnO1xuLyoqIEF6dXJlIHJlcXVlc3QgaGVhZGVycy4gKi9cbmNvbnN0IEFaVVJFX0hFQURFUlMgPSBPYmplY3QuZnJlZXplKHsgTWV0YWRhdGE6ICd0cnVlJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSk7XG4vKiogSW52YWxpZCBlbmRwb2ludCByZXN1bHQgZXJyb3IuICovXG5jb25zdCBFTkRQT0lOVF9SRVNVTFRfRVJST1IgPSAnQXp1cmUgZW5kcG9pbnQgZGlkIG5vdCByZXR1cm4gYSB2YWx1ZSB3aXRoIG9ubHkgYWNjZXNzX3Rva2VuIGFuZCBleHBpcmVzX2luIHByb3BlcnRpZXMnO1xuLyoqIEVycm9yIGZvciB3aGVuIHRoZSB0b2tlbiBhdWRpZW5jZSBpcyBtaXNzaW5nIGluIHRoZSBlbnZpcm9ubWVudC4gKi9cbmNvbnN0IFRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IgPSAnVE9LRU5fQVVESUVOQ0UgbXVzdCBiZSBzZXQgaW4gdGhlIGF1dGggbWVjaGFuaXNtIHByb3BlcnRpZXMgd2hlbiBQUk9WSURFUl9OQU1FIGlzIGF6dXJlLic7XG4vKipcbiAqIERldmljZSB3b3JrZmxvdyBpbXBsZW1lbnRhdGlvbiBmb3IgQXp1cmUuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF6dXJlU2VydmljZVdvcmtmbG93IGV4dGVuZHMgc2VydmljZV93b3JrZmxvd18xLlNlcnZpY2VXb3JrZmxvdyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgYXp1cmVfdG9rZW5fY2FjaGVfMS5BenVyZVRva2VuQ2FjaGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbkF1ZGllbmNlID0gY3JlZGVudGlhbHM/Lm1lY2hhbmlzbVByb3BlcnRpZXMuVE9LRU5fQVVESUVOQ0U7XG4gICAgICAgIGlmICghdG9rZW5BdWRpZW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKFRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0b2tlbjtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmNhY2hlLmdldEVudHJ5KHRva2VuQXVkaWVuY2UpO1xuICAgICAgICBpZiAoZW50cnk/LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdG9rZW4gPSBlbnRyeS50b2tlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlRW50cnkodG9rZW5BdWRpZW5jZSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldEF6dXJlVG9rZW5EYXRhKHRva2VuQXVkaWVuY2UpO1xuICAgICAgICAgICAgaWYgKCFpc0VuZHBvaW50UmVzdWx0VmFsaWQocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKEVORFBPSU5UX1JFU1VMVF9FUlJPUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmFkZEVudHJ5KHRva2VuQXVkaWVuY2UsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRva2VuID0gcmVzcG9uc2UuYWNjZXNzX3Rva2VuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlU2VydmljZVdvcmtmbG93ID0gQXp1cmVTZXJ2aWNlV29ya2Zsb3c7XG4vKipcbiAqIEhpdCB0aGUgQXp1cmUgZW5kcG9pbnQgdG8gZ2V0IHRoZSB0b2tlbiBkYXRhLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRBenVyZVRva2VuRGF0YSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgY29uc3QgdXJsID0gYCR7QVpVUkVfQkFTRV9VUkx9JnJlc291cmNlPSR7dG9rZW5BdWRpZW5jZX1gO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgdXRpbHNfMS5yZXF1ZXN0KSh1cmwsIHtcbiAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgaGVhZGVyczogQVpVUkVfSEVBREVSU1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVzdWx0IHJldHVybmVkIGZyb20gdGhlIGVuZHBvaW50IGlzIHZhbGlkLlxuICogVGhpcyBtZWFucyB0aGUgcmVzdWx0IGlzIG5vdCBudWxsaXNoLCBjb250YWlucyB0aGUgYWNjZXNzX3Rva2VuIHJlcXVpcmVkIGZpZWxkXG4gKiBhbmQgdGhlIGV4cGlyZXNfaW4gcmVxdWlyZWQgZmllbGQuXG4gKi9cbmZ1bmN0aW9uIGlzRW5kcG9pbnRSZXN1bHRWYWxpZCh0b2tlbikge1xuICAgIGlmICh0b2tlbiA9PSBudWxsIHx8IHR5cGVvZiB0b2tlbiAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gJ2FjY2Vzc190b2tlbicgaW4gdG9rZW4gJiYgJ2V4cGlyZXNfaW4nIGluIHRva2VuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfc2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBenVyZVNlcnZpY2VXb3JrZmxvdyIsImVycm9yXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsImF6dXJlX3Rva2VuX2NhY2hlXzEiLCJzZXJ2aWNlX3dvcmtmbG93XzEiLCJBWlVSRV9CQVNFX1VSTCIsIkFaVVJFX0hFQURFUlMiLCJmcmVlemUiLCJNZXRhZGF0YSIsIkFjY2VwdCIsIkVORFBPSU5UX1JFU1VMVF9FUlJPUiIsIlRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IiLCJTZXJ2aWNlV29ya2Zsb3ciLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNhY2hlIiwiQXp1cmVUb2tlbkNhY2hlIiwiZ2V0VG9rZW4iLCJjcmVkZW50aWFscyIsInRva2VuQXVkaWVuY2UiLCJtZWNoYW5pc21Qcm9wZXJ0aWVzIiwiVE9LRU5fQVVESUVOQ0UiLCJNb25nb0F6dXJlRXJyb3IiLCJ0b2tlbiIsImVudHJ5IiwiZ2V0RW50cnkiLCJpc1ZhbGlkIiwiZGVsZXRlRW50cnkiLCJyZXNwb25zZSIsImdldEF6dXJlVG9rZW5EYXRhIiwiaXNFbmRwb2ludFJlc3VsdFZhbGlkIiwiYWRkRW50cnkiLCJhY2Nlc3NfdG9rZW4iLCJ1cmwiLCJkYXRhIiwicmVxdWVzdCIsImpzb24iLCJoZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** @internal */ class AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */ constructor(token, expiration){\n        super(expiration);\n        this.token = token;\n    }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */ class AzureTokenCache extends cache_1.Cache {\n    /**\n     * Add an entry to the cache.\n     */ addEntry(tokenAudience, token) {\n        const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n        this.entries.set(tokenAudience, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key.\n     */ cacheKey(tokenAudience) {\n        return tokenAudience;\n    }\n    /**\n     * Delete an entry from the cache.\n     */ deleteEntry(tokenAudience) {\n        this.entries.delete(tokenAudience);\n    }\n    /**\n     * Get an Azure token entry from the cache.\n     */ getEntry(tokenAudience) {\n        return this.entries.get(tokenAudience);\n    }\n}\nexports.AzureTokenCache = AzureTokenCache; //# sourceMappingURL=azure_token_cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV90b2tlbl9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDekQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsaUZBQVM7QUFDakMsY0FBYyxHQUNkLE1BQU1GLHdCQUF3QkMsUUFBUUUsa0JBQWtCO0lBQ3BEOztLQUVDLEdBQ0RDLFlBQVlDLEtBQUssRUFBRUMsVUFBVSxDQUFFO1FBQzNCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNELEtBQUssR0FBR0E7SUFDakI7QUFDSjtBQUNBUix1QkFBdUIsR0FBR0c7QUFDMUI7OztDQUdDLEdBQ0QsTUFBTUQsd0JBQXdCRSxRQUFRTSxLQUFLO0lBQ3ZDOztLQUVDLEdBQ0RDLFNBQVNDLGFBQWEsRUFBRUosS0FBSyxFQUFFO1FBQzNCLE1BQU1LLFFBQVEsSUFBSVYsZ0JBQWdCSyxNQUFNTSxZQUFZLEVBQUVOLE1BQU1PLFVBQVU7UUFDdEUsSUFBSSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0wsZUFBZUM7UUFDaEMsT0FBT0E7SUFDWDtJQUNBOztLQUVDLEdBQ0RLLFNBQVNOLGFBQWEsRUFBRTtRQUNwQixPQUFPQTtJQUNYO0lBQ0E7O0tBRUMsR0FDRE8sWUFBWVAsYUFBYSxFQUFFO1FBQ3ZCLElBQUksQ0FBQ0ksT0FBTyxDQUFDSSxNQUFNLENBQUNSO0lBQ3hCO0lBQ0E7O0tBRUMsR0FDRFMsU0FBU1QsYUFBYSxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDSSxPQUFPLENBQUNNLEdBQUcsQ0FBQ1Y7SUFDNUI7QUFDSjtBQUNBWix1QkFBdUIsR0FBR0UsaUJBQzFCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV90b2tlbl9jYWNoZS5qcz9iMDNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BenVyZVRva2VuQ2FjaGUgPSBleHBvcnRzLkF6dXJlVG9rZW5FbnRyeSA9IHZvaWQgMDtcbmNvbnN0IGNhY2hlXzEgPSByZXF1aXJlKFwiLi9jYWNoZVwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEF6dXJlVG9rZW5FbnRyeSBleHRlbmRzIGNhY2hlXzEuRXhwaXJpbmdDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgZW50cnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodG9rZW4sIGV4cGlyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoZXhwaXJhdGlvbik7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlVG9rZW5FbnRyeSA9IEF6dXJlVG9rZW5FbnRyeTtcbi8qKlxuICogQSBjYWNoZSBvZiBhY2Nlc3MgdG9rZW5zIGZyb20gQXp1cmUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXp1cmVUb2tlbkNhY2hlIGV4dGVuZHMgY2FjaGVfMS5DYWNoZSB7XG4gICAgLyoqXG4gICAgICogQWRkIGFuIGVudHJ5IHRvIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBhZGRFbnRyeSh0b2tlbkF1ZGllbmNlLCB0b2tlbikge1xuICAgICAgICBjb25zdCBlbnRyeSA9IG5ldyBBenVyZVRva2VuRW50cnkodG9rZW4uYWNjZXNzX3Rva2VuLCB0b2tlbi5leHBpcmVzX2luKTtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnNldCh0b2tlbkF1ZGllbmNlLCBlbnRyeSk7XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5LlxuICAgICAqL1xuICAgIGNhY2hlS2V5KHRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuQXVkaWVuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFbnRyeSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUodG9rZW5BdWRpZW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBBenVyZSB0b2tlbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBnZXRFbnRyeSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuZ2V0KHRva2VuQXVkaWVuY2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVUb2tlbkNhY2hlID0gQXp1cmVUb2tlbkNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfdG9rZW5fY2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXp1cmVUb2tlbkNhY2hlIiwiQXp1cmVUb2tlbkVudHJ5IiwiY2FjaGVfMSIsInJlcXVpcmUiLCJFeHBpcmluZ0NhY2hlRW50cnkiLCJjb25zdHJ1Y3RvciIsInRva2VuIiwiZXhwaXJhdGlvbiIsIkNhY2hlIiwiYWRkRW50cnkiLCJ0b2tlbkF1ZGllbmNlIiwiZW50cnkiLCJhY2Nlc3NfdG9rZW4iLCJleHBpcmVzX2luIiwiZW50cmllcyIsInNldCIsImNhY2hlS2V5IiwiZGVsZXRlRW50cnkiLCJkZWxldGUiLCJnZXRFbnRyeSIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */ const EXPIRATION_BUFFER_MS = 300000;\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */ class ExpiringCacheEntry {\n    /**\n     * Create a new expiring token entry.\n     */ constructor(expiration){\n        this.expiration = this.expirationTime(expiration);\n    }\n    /**\n     * The entry is still valid if the expiration is more than\n     * 5 minutes from the expiration time.\n     */ isValid() {\n        return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n    }\n    /**\n     * Get an expiration time in milliseconds past epoch.\n     */ expirationTime(expiresInSeconds) {\n        return Date.now() + expiresInSeconds * 1000;\n    }\n}\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\n * Base class for OIDC caches.\n */ class Cache {\n    /**\n     * Create a new cache.\n     */ constructor(){\n        this.entries = new Map();\n    }\n    /**\n     * Clear the cache.\n     */ clear() {\n        this.entries.clear();\n    }\n    /**\n     * Create a cache key from the address and username.\n     */ hashedCacheKey(address, username, callbackHash) {\n        return JSON.stringify([\n            address,\n            username,\n            callbackHash\n        ]);\n    }\n}\nexports.Cache = Cache; //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xELDZCQUE2QixHQUM3QixNQUFNSSx1QkFBdUI7QUFDN0I7O0NBRUMsR0FDRCxNQUFNRDtJQUNGOztLQUVDLEdBQ0RFLFlBQVlDLFVBQVUsQ0FBRTtRQUNwQixJQUFJLENBQUNBLFVBQVUsR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0Q7SUFDMUM7SUFDQTs7O0tBR0MsR0FDREUsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDRixVQUFVLEdBQUdHLEtBQUtDLEdBQUcsS0FBS047SUFDMUM7SUFDQTs7S0FFQyxHQUNERyxlQUFlSSxnQkFBZ0IsRUFBRTtRQUM3QixPQUFPRixLQUFLQyxHQUFHLEtBQUtDLG1CQUFtQjtJQUMzQztBQUNKO0FBQ0FYLDBCQUEwQixHQUFHRztBQUM3Qjs7Q0FFQyxHQUNELE1BQU1EO0lBQ0Y7O0tBRUMsR0FDREcsYUFBYztRQUNWLElBQUksQ0FBQ08sT0FBTyxHQUFHLElBQUlDO0lBQ3ZCO0lBQ0E7O0tBRUMsR0FDREMsUUFBUTtRQUNKLElBQUksQ0FBQ0YsT0FBTyxDQUFDRSxLQUFLO0lBQ3RCO0lBQ0E7O0tBRUMsR0FDREMsZUFBZUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFlBQVksRUFBRTtRQUM1QyxPQUFPQyxLQUFLQyxTQUFTLENBQUM7WUFBQ0o7WUFBU0M7WUFBVUM7U0FBYTtJQUMzRDtBQUNKO0FBQ0FsQixhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWNoZS5qcz81ODEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYWNoZSA9IGV4cG9ydHMuRXhwaXJpbmdDYWNoZUVudHJ5ID0gdm9pZCAwO1xuLyogNSBtaW51dGVzIGluIG1pbGxpc2Vjb25kcyAqL1xuY29uc3QgRVhQSVJBVElPTl9CVUZGRVJfTVMgPSAzMDAwMDA7XG4vKipcbiAqIEFuIGVudHJ5IGluIGEgY2FjaGUgdGhhdCBjYW4gZXhwaXJlIGluIGEgY2VydGFpbiBhbW91bnQgb2YgdGltZS5cbiAqL1xuY2xhc3MgRXhwaXJpbmdDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZXhwaXJpbmcgdG9rZW4gZW50cnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXhwaXJhdGlvbikge1xuICAgICAgICB0aGlzLmV4cGlyYXRpb24gPSB0aGlzLmV4cGlyYXRpb25UaW1lKGV4cGlyYXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZW50cnkgaXMgc3RpbGwgdmFsaWQgaWYgdGhlIGV4cGlyYXRpb24gaXMgbW9yZSB0aGFuXG4gICAgICogNSBtaW51dGVzIGZyb20gdGhlIGV4cGlyYXRpb24gdGltZS5cbiAgICAgKi9cbiAgICBpc1ZhbGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBpcmF0aW9uIC0gRGF0ZS5ub3coKSA+IEVYUElSQVRJT05fQlVGRkVSX01TO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gZXhwaXJhdGlvbiB0aW1lIGluIG1pbGxpc2Vjb25kcyBwYXN0IGVwb2NoLlxuICAgICAqL1xuICAgIGV4cGlyYXRpb25UaW1lKGV4cGlyZXNJblNlY29uZHMpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgKyBleHBpcmVzSW5TZWNvbmRzICogMTAwMDtcbiAgICB9XG59XG5leHBvcnRzLkV4cGlyaW5nQ2FjaGVFbnRyeSA9IEV4cGlyaW5nQ2FjaGVFbnRyeTtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgT0lEQyBjYWNoZXMuXG4gKi9cbmNsYXNzIENhY2hlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY2FjaGUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmVudHJpZXMuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5IGZyb20gdGhlIGFkZHJlc3MgYW5kIHVzZXJuYW1lLlxuICAgICAqL1xuICAgIGhhc2hlZENhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KFthZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoXSk7XG4gICAgfVxufVxuZXhwb3J0cy5DYWNoZSA9IENhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2FjaGUiLCJFeHBpcmluZ0NhY2hlRW50cnkiLCJFWFBJUkFUSU9OX0JVRkZFUl9NUyIsImNvbnN0cnVjdG9yIiwiZXhwaXJhdGlvbiIsImV4cGlyYXRpb25UaW1lIiwiaXNWYWxpZCIsIkRhdGUiLCJub3ciLCJleHBpcmVzSW5TZWNvbmRzIiwiZW50cmllcyIsIk1hcCIsImNsZWFyIiwiaGFzaGVkQ2FjaGVLZXkiLCJhZGRyZXNzIiwidXNlcm5hbWUiLCJjYWxsYmFja0hhc2giLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallbackLockCache = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** Error message for when request callback is missing. */ const REQUEST_CALLBACK_REQUIRED_ERROR = \"Auth mechanism property REQUEST_TOKEN_CALLBACK is required.\";\n/* Counter for function \"hashes\".*/ let FN_HASH_COUNTER = 0;\n/* No function present function */ const NO_FUNCTION = async ()=>({\n        accessToken: \"test\"\n    });\n/* The map of function hashes */ const FN_HASHES = new WeakMap();\n/* Put the no function hash in the map. */ FN_HASHES.set(NO_FUNCTION, FN_HASH_COUNTER);\n/**\n * A cache of request and refresh callbacks per server/user.\n */ class CallbackLockCache extends cache_1.Cache {\n    /**\n     * Get the callbacks for the connection and credentials. If an entry does not\n     * exist a new one will get set.\n     */ getEntry(connection, credentials) {\n        const requestCallback = credentials.mechanismProperties.REQUEST_TOKEN_CALLBACK;\n        const refreshCallback = credentials.mechanismProperties.REFRESH_TOKEN_CALLBACK;\n        if (!requestCallback) {\n            throw new error_1.MongoInvalidArgumentError(REQUEST_CALLBACK_REQUIRED_ERROR);\n        }\n        const callbackHash = hashFunctions(requestCallback, refreshCallback);\n        const key = this.cacheKey(connection.address, credentials.username, callbackHash);\n        const entry = this.entries.get(key);\n        if (entry) {\n            return entry;\n        }\n        return this.addEntry(key, callbackHash, requestCallback, refreshCallback);\n    }\n    /**\n     * Set locked callbacks on for connection and credentials.\n     */ addEntry(key, callbackHash, requestCallback, refreshCallback) {\n        const entry = {\n            requestCallback: withLock(requestCallback),\n            refreshCallback: refreshCallback ? withLock(refreshCallback) : undefined,\n            callbackHash: callbackHash\n        };\n        this.entries.set(key, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key from the address and username.\n     */ cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.CallbackLockCache = CallbackLockCache;\n/**\n * Ensure the callback is only executed one at a time.\n */ function withLock(callback) {\n    let lock = Promise.resolve();\n    return async (info, context)=>{\n        await lock;\n        lock = lock.then(()=>callback(info, context));\n        return lock;\n    };\n}\n/**\n * Get the hash string for the request and refresh functions.\n */ function hashFunctions(requestFn, refreshFn) {\n    let requestHash = FN_HASHES.get(requestFn);\n    let refreshHash = FN_HASHES.get(refreshFn ?? NO_FUNCTION);\n    if (requestHash == null) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        requestHash = FN_HASH_COUNTER;\n        FN_HASHES.set(requestFn, FN_HASH_COUNTER);\n    }\n    if (refreshHash == null && refreshFn) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        refreshHash = FN_HASH_COUNTER;\n        FN_HASHES.set(refreshFn, FN_HASH_COUNTER);\n    }\n    return `${requestHash}-${refreshHash}`;\n} //# sourceMappingURL=callback_lock_cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallbackWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst callback_lock_cache_1 = __webpack_require__(/*! ./callback_lock_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\");\nconst token_entry_cache_1 = __webpack_require__(/*! ./token_entry_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\");\n/** The current version of OIDC implementation. */ const OIDC_VERSION = 0;\n/** 5 minutes in seconds */ const TIMEOUT_S = 300;\n/** Properties allowed on results of callbacks. */ const RESULT_PROPERTIES = [\n    \"accessToken\",\n    \"expiresInSeconds\",\n    \"refreshToken\"\n];\n/** Error message when the callback result is invalid. */ const CALLBACK_RESULT_ERROR = \"User provided OIDC callbacks must return a valid object with an accessToken.\";\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */ class CallbackWorkflow {\n    /**\n     * Instantiate the workflow\n     */ constructor(){\n        this.cache = new token_entry_cache_1.TokenEntryCache();\n        this.callbackCache = new callback_lock_cache_1.CallbackLockCache();\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */ async speculativeAuth(credentials) {\n        const document = startCommandDocument(credentials);\n        document.db = credentials.source;\n        return {\n            speculativeAuthenticate: document\n        };\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */ async execute(connection, credentials, reauthenticating, response) {\n        // Get the callbacks with locks from the callback lock cache.\n        const { requestCallback, refreshCallback, callbackHash } = this.callbackCache.getEntry(connection, credentials);\n        // Look for an existing entry in the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        if (entry) {\n            // Reauthentication cannot use a token from the cache since the server has\n            // stated it is invalid by the request for reauthentication.\n            if (entry.isValid() && !reauthenticating) {\n                // Presence of a valid cache entry means we can skip to the finishing step.\n                result = await this.finishAuthentication(connection, credentials, entry.tokenResult, response?.speculativeAuthenticate?.conversationId);\n            } else {\n                // Presence of an expired cache entry means we must fetch a new one and\n                // then execute the final step.\n                const tokenResult = await this.fetchAccessToken(connection, credentials, entry.serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback);\n                try {\n                    result = await this.finishAuthentication(connection, credentials, tokenResult, reauthenticating ? undefined : response?.speculativeAuthenticate?.conversationId);\n                } catch (error) {\n                    // If we are reauthenticating and this errors with reauthentication\n                    // required, we need to do the entire process over again and clear\n                    // the cache entry.\n                    if (reauthenticating && error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                        this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n                        result = await this.execute(connection, credentials, reauthenticating);\n                    } else {\n                        throw error;\n                    }\n                }\n            }\n        } else {\n            // No entry in the cache requires us to do all authentication steps\n            // from start to finish, including getting a fresh token for the cache.\n            const startDocument = await this.startAuthentication(connection, credentials, reauthenticating, response);\n            const conversationId = startDocument.conversationId;\n            const serverResult = bson_1.BSON.deserialize(startDocument.payload.buffer);\n            const tokenResult = await this.fetchAccessToken(connection, credentials, serverResult, reauthenticating, callbackHash, requestCallback, refreshCallback);\n            result = await this.finishAuthentication(connection, credentials, tokenResult, conversationId);\n        }\n        return result;\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */ async startAuthentication(connection, credentials, reauthenticating, response) {\n        let result;\n        if (!reauthenticating && response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        } else {\n            result = await connection.command((0, utils_1.ns)(credentials.source), startCommandDocument(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */ async finishAuthentication(connection, credentials, tokenResult, conversationId) {\n        const result = await connection.command((0, utils_1.ns)(credentials.source), finishCommandDocument(tokenResult.accessToken, conversationId), undefined);\n        return result;\n    }\n    /**\n     * Fetches an access token using either the request or refresh callbacks and\n     * puts it in the cache.\n     */ async fetchAccessToken(connection, credentials, serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback) {\n        // Get the token from the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        const context = {\n            timeoutSeconds: TIMEOUT_S,\n            version: OIDC_VERSION\n        };\n        // Check if there's a token in the cache.\n        if (entry) {\n            // If the cache entry is valid, return the token result.\n            if (entry.isValid() && !reauthenticating) {\n                return entry.tokenResult;\n            }\n            // If the cache entry is not valid, remove it from the cache and first attempt\n            // to use the refresh callback to get a new token. If no refresh callback\n            // exists, then fallback to the request callback.\n            if (refreshCallback) {\n                context.refreshToken = entry.tokenResult.refreshToken;\n                result = await refreshCallback(serverInfo, context);\n            } else {\n                result = await requestCallback(serverInfo, context);\n            }\n        } else {\n            // With no token in the cache we use the request callback.\n            result = await requestCallback(serverInfo, context);\n        }\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        // Cleanup the cache.\n        this.cache.deleteExpiredEntries();\n        // Put the new entry into the cache.\n        this.cache.addEntry(connection.address, credentials.username || \"\", callbackHash, result, serverInfo);\n        return result;\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */ function finishCommandDocument(token, conversationId) {\n    if (conversationId != null && typeof conversationId === \"number\") {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({\n                jwt: token\n            }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({\n            jwt: token\n        }))\n    };\n}\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */ function isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== \"object\") return true;\n    if (!(\"accessToken\" in tokenResult)) return true;\n    return !Object.getOwnPropertyNames(tokenResult).every((prop)=>RESULT_PROPERTIES.includes(prop));\n}\n/**\n * Generate the saslStart command document.\n */ function startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n} //# sourceMappingURL=callback_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */ class ServiceWorkflow {\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */ async execute(connection, credentials) {\n        const token = await this.getToken(credentials);\n        const command = commandDocument(token);\n        return connection.command((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */ async speculativeAuth(credentials) {\n        const token = await this.getToken(credentials);\n        const document = commandDocument(token);\n        document.db = credentials.source;\n        return {\n            speculativeAuthenticate: document\n        };\n    }\n}\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */ function commandDocument(token) {\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: bson_1.BSON.serialize({\n            jwt: token\n        })\n    };\n}\nexports.commandDocument = commandDocument; //# sourceMappingURL=service_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUN6RCxNQUFNSSxTQUFTQyxtQkFBT0EsQ0FBQyxvREFBTTtBQUM3QixNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyxpRUFBZ0I7QUFDeEMsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsNkVBQWM7QUFDMUM7OztDQUdDLEdBQ0QsTUFBTUY7SUFDRjs7O0tBR0MsR0FDRCxNQUFNSyxRQUFRQyxVQUFVLEVBQUVDLFdBQVcsRUFBRTtRQUNuQyxNQUFNQyxRQUFRLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNGO1FBQ2xDLE1BQU1HLFVBQVVYLGdCQUFnQlM7UUFDaEMsT0FBT0YsV0FBV0ksT0FBTyxDQUFDLENBQUMsR0FBR1AsUUFBUVEsRUFBRSxFQUFFSixZQUFZSyxNQUFNLEdBQUdGLFNBQVNHO0lBQzVFO0lBQ0E7O0tBRUMsR0FDRCxNQUFNQyxnQkFBZ0JQLFdBQVcsRUFBRTtRQUMvQixNQUFNQyxRQUFRLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNGO1FBQ2xDLE1BQU1RLFdBQVdoQixnQkFBZ0JTO1FBQ2pDTyxTQUFTQyxFQUFFLEdBQUdULFlBQVlLLE1BQU07UUFDaEMsT0FBTztZQUFFSyx5QkFBeUJGO1FBQVM7SUFDL0M7QUFDSjtBQUNBbEIsdUJBQXVCLEdBQUdHO0FBQzFCOztDQUVDLEdBQ0QsU0FBU0QsZ0JBQWdCUyxLQUFLO0lBQzFCLE9BQU87UUFDSFUsV0FBVztRQUNYQyxXQUFXZixZQUFZZ0IsYUFBYSxDQUFDQyxZQUFZO1FBQ2pEQyxTQUFTckIsT0FBT3NCLElBQUksQ0FBQ0MsU0FBUyxDQUFDO1lBQUVDLEtBQUtqQjtRQUFNO0lBQ2hEO0FBQ0o7QUFDQVgsdUJBQXVCLEdBQUdFLGlCQUMxQiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvc2VydmljZV93b3JrZmxvdy5qcz9mNDAwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21tYW5kRG9jdW1lbnQgPSBleHBvcnRzLlNlcnZpY2VXb3JrZmxvdyA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCJic29uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlsc1wiKTtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4uL3Byb3ZpZGVyc1wiKTtcbi8qKlxuICogQ29tbW9uIGJlaGF2aW91ciBmb3IgT0lEQyBkZXZpY2Ugd29ya2Zsb3dzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFNlcnZpY2VXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSB0aGUgd29ya2Zsb3cuIExvb2tzIGZvciBBV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEUgaW4gdGhlIGVudmlyb25tZW50XG4gICAgICogYW5kIHRoZW4gYXR0ZW1wdHMgdG8gcmVhZCB0aGUgdG9rZW4gZnJvbSB0aGF0IHBhdGguXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0VG9rZW4oY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBjb21tYW5kID0gY29tbWFuZERvY3VtZW50KHRva2VuKTtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoY3JlZGVudGlhbHMuc291cmNlKSwgY29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkb2N1bWVudCB0byBhZGQgZm9yIHNwZWN1bGF0aXZlIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHNwZWN1bGF0aXZlQXV0aChjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0VG9rZW4oY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGNvbW1hbmREb2N1bWVudCh0b2tlbik7XG4gICAgICAgIGRvY3VtZW50LmRiID0gY3JlZGVudGlhbHMuc291cmNlO1xuICAgICAgICByZXR1cm4geyBzcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZTogZG9jdW1lbnQgfTtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZpY2VXb3JrZmxvdyA9IFNlcnZpY2VXb3JrZmxvdztcbi8qKlxuICogQ3JlYXRlIHRoZSBzYXNsU3RhcnQgY29tbWFuZCBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gY29tbWFuZERvY3VtZW50KHRva2VuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICBtZWNoYW5pc206IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLFxuICAgICAgICBwYXlsb2FkOiBic29uXzEuQlNPTi5zZXJpYWxpemUoeyBqd3Q6IHRva2VuIH0pXG4gICAgfTtcbn1cbmV4cG9ydHMuY29tbWFuZERvY3VtZW50ID0gY29tbWFuZERvY3VtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb21tYW5kRG9jdW1lbnQiLCJTZXJ2aWNlV29ya2Zsb3ciLCJic29uXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsInByb3ZpZGVyc18xIiwiZXhlY3V0ZSIsImNvbm5lY3Rpb24iLCJjcmVkZW50aWFscyIsInRva2VuIiwiZ2V0VG9rZW4iLCJjb21tYW5kIiwibnMiLCJzb3VyY2UiLCJ1bmRlZmluZWQiLCJzcGVjdWxhdGl2ZUF1dGgiLCJkb2N1bWVudCIsImRiIiwic3BlY3VsYXRpdmVBdXRoZW50aWNhdGUiLCJzYXNsU3RhcnQiLCJtZWNoYW5pc20iLCJBdXRoTWVjaGFuaXNtIiwiTU9OR09EQl9PSURDIiwicGF5bG9hZCIsIkJTT04iLCJzZXJpYWxpemUiLCJqd3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/* Default expiration is now for when no expiration provided */ const DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */ class TokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */ constructor(tokenResult, serverInfo, expiration){\n        super(expiration);\n        this.tokenResult = tokenResult;\n        this.serverInfo = serverInfo;\n    }\n}\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */ class TokenEntryCache extends cache_1.Cache {\n    /**\n     * Set an entry in the token cache.\n     */ addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n        const entry = new TokenEntry(tokenResult, serverInfo, tokenResult.expiresInSeconds ?? DEFAULT_EXPIRATION_SECS);\n        this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n        return entry;\n    }\n    /**\n     * Delete an entry from the cache.\n     */ deleteEntry(address, username, callbackHash) {\n        this.entries.delete(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Get an entry from the cache.\n     */ getEntry(address, username, callbackHash) {\n        return this.entries.get(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Delete all expired entries from the cache.\n     */ deleteExpiredEntries() {\n        for (const [key, entry] of this.entries){\n            if (!entry.isValid()) {\n                this.entries.delete(key);\n            }\n        }\n    }\n    /**\n     * Create a cache key from the address and username.\n     */ cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.TokenEntryCache = TokenEntryCache; //# sourceMappingURL=token_entry_cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9lbnRyeV9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDcEQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsaUZBQVM7QUFDakMsNkRBQTZELEdBQzdELE1BQU1DLDBCQUEwQjtBQUNoQyxjQUFjLEdBQ2QsTUFBTUgsbUJBQW1CQyxRQUFRRyxrQkFBa0I7SUFDL0M7O0tBRUMsR0FDREMsWUFBWUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsQ0FBRTtRQUM3QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRixXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtJQUN0QjtBQUNKO0FBQ0FWLGtCQUFrQixHQUFHRztBQUNyQjs7O0NBR0MsR0FDRCxNQUFNRCx3QkFBd0JFLFFBQVFRLEtBQUs7SUFDdkM7O0tBRUMsR0FDREMsU0FBU0MsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFlBQVksRUFBRVAsV0FBVyxFQUFFQyxVQUFVLEVBQUU7UUFDL0QsTUFBTU8sUUFBUSxJQUFJZCxXQUFXTSxhQUFhQyxZQUFZRCxZQUFZUyxnQkFBZ0IsSUFBSVo7UUFDdEYsSUFBSSxDQUFDYSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNDLFFBQVEsQ0FBQ1AsU0FBU0MsVUFBVUMsZUFBZUM7UUFDakUsT0FBT0E7SUFDWDtJQUNBOztLQUVDLEdBQ0RLLFlBQVlSLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxZQUFZLEVBQUU7UUFDekMsSUFBSSxDQUFDRyxPQUFPLENBQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUNGLFFBQVEsQ0FBQ1AsU0FBU0MsVUFBVUM7SUFDekQ7SUFDQTs7S0FFQyxHQUNEUSxTQUFTVixPQUFPLEVBQUVDLFFBQVEsRUFBRUMsWUFBWSxFQUFFO1FBQ3RDLE9BQU8sSUFBSSxDQUFDRyxPQUFPLENBQUNNLEdBQUcsQ0FBQyxJQUFJLENBQUNKLFFBQVEsQ0FBQ1AsU0FBU0MsVUFBVUM7SUFDN0Q7SUFDQTs7S0FFQyxHQUNEVSx1QkFBdUI7UUFDbkIsS0FBSyxNQUFNLENBQUNDLEtBQUtWLE1BQU0sSUFBSSxJQUFJLENBQUNFLE9BQU8sQ0FBRTtZQUNyQyxJQUFJLENBQUNGLE1BQU1XLE9BQU8sSUFBSTtnQkFDbEIsSUFBSSxDQUFDVCxPQUFPLENBQUNJLE1BQU0sQ0FBQ0k7WUFDeEI7UUFDSjtJQUNKO0lBQ0E7O0tBRUMsR0FDRE4sU0FBU1AsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFlBQVksRUFBRTtRQUN0QyxPQUFPLElBQUksQ0FBQ2EsY0FBYyxDQUFDZixTQUFTQyxVQUFVQztJQUNsRDtBQUNKO0FBQ0FoQix1QkFBdUIsR0FBR0UsaUJBQzFCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9lbnRyeV9jYWNoZS5qcz8wMWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub2tlbkVudHJ5Q2FjaGUgPSBleHBvcnRzLlRva2VuRW50cnkgPSB2b2lkIDA7XG5jb25zdCBjYWNoZV8xID0gcmVxdWlyZShcIi4vY2FjaGVcIik7XG4vKiBEZWZhdWx0IGV4cGlyYXRpb24gaXMgbm93IGZvciB3aGVuIG5vIGV4cGlyYXRpb24gcHJvdmlkZWQgKi9cbmNvbnN0IERFRkFVTFRfRVhQSVJBVElPTl9TRUNTID0gMDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFRva2VuRW50cnkgZXh0ZW5kcyBjYWNoZV8xLkV4cGlyaW5nQ2FjaGVFbnRyeSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGVudHJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRva2VuUmVzdWx0LCBzZXJ2ZXJJbmZvLCBleHBpcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKGV4cGlyYXRpb24pO1xuICAgICAgICB0aGlzLnRva2VuUmVzdWx0ID0gdG9rZW5SZXN1bHQ7XG4gICAgICAgIHRoaXMuc2VydmVySW5mbyA9IHNlcnZlckluZm87XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbkVudHJ5ID0gVG9rZW5FbnRyeTtcbi8qKlxuICogQ2FjaGUgb2YgT0lEQyB0b2tlbiBlbnRyaWVzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFRva2VuRW50cnlDYWNoZSBleHRlbmRzIGNhY2hlXzEuQ2FjaGUge1xuICAgIC8qKlxuICAgICAqIFNldCBhbiBlbnRyeSBpbiB0aGUgdG9rZW4gY2FjaGUuXG4gICAgICovXG4gICAgYWRkRW50cnkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCwgdG9rZW5SZXN1bHQsIHNlcnZlckluZm8pIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBuZXcgVG9rZW5FbnRyeSh0b2tlblJlc3VsdCwgc2VydmVySW5mbywgdG9rZW5SZXN1bHQuZXhwaXJlc0luU2Vjb25kcyA/PyBERUZBVUxUX0VYUElSQVRJT05fU0VDUyk7XG4gICAgICAgIHRoaXMuZW50cmllcy5zZXQodGhpcy5jYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSwgZW50cnkpO1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFbnRyeShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUodGhpcy5jYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBnZXRFbnRyeShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuZ2V0KHRoaXMuY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYWxsIGV4cGlyZWQgZW50cmllcyBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFeHBpcmVkRW50cmllcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBlbnRyeV0gb2YgdGhpcy5lbnRyaWVzKSB7XG4gICAgICAgICAgICBpZiAoIWVudHJ5LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjYWNoZSBrZXkgZnJvbSB0aGUgYWRkcmVzcyBhbmQgdXNlcm5hbWUuXG4gICAgICovXG4gICAgY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoZWRDYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKTtcbiAgICB9XG59XG5leHBvcnRzLlRva2VuRW50cnlDYWNoZSA9IFRva2VuRW50cnlDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuX2VudHJ5X2NhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRva2VuRW50cnlDYWNoZSIsIlRva2VuRW50cnkiLCJjYWNoZV8xIiwicmVxdWlyZSIsIkRFRkFVTFRfRVhQSVJBVElPTl9TRUNTIiwiRXhwaXJpbmdDYWNoZUVudHJ5IiwiY29uc3RydWN0b3IiLCJ0b2tlblJlc3VsdCIsInNlcnZlckluZm8iLCJleHBpcmF0aW9uIiwiQ2FjaGUiLCJhZGRFbnRyeSIsImFkZHJlc3MiLCJ1c2VybmFtZSIsImNhbGxiYWNrSGFzaCIsImVudHJ5IiwiZXhwaXJlc0luU2Vjb25kcyIsImVudHJpZXMiLCJzZXQiLCJjYWNoZUtleSIsImRlbGV0ZUVudHJ5IiwiZGVsZXRlIiwiZ2V0RW50cnkiLCJnZXQiLCJkZWxldGVFeHBpcmVkRW50cmllcyIsImtleSIsImlzVmFsaWQiLCJoYXNoZWRDYWNoZUtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/plain.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Plain = void 0;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: \"PLAIN\",\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.command((0, utils_1.ns)(\"$external.$cmd\"), command, undefined);\n    }\n}\nexports.Plain = Plain; //# sourceMappingURL=plain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3BsYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUcsS0FBSztBQUNyQixNQUFNRyxTQUFTQyxtQkFBT0EsQ0FBQyw0REFBWTtBQUNuQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyw4REFBYTtBQUNyQyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQyw4REFBYTtBQUNyQyxNQUFNRyxrQkFBa0JILG1CQUFPQSxDQUFDLG9GQUFpQjtBQUNqRCxNQUFNRixjQUFjSyxnQkFBZ0JDLFlBQVk7SUFDNUMsTUFBTUMsS0FBS0MsV0FBVyxFQUFFO1FBQ3BCLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUUsR0FBR0Y7UUFDcEMsSUFBSSxDQUFDRSxhQUFhO1lBQ2QsTUFBTSxJQUFJUCxRQUFRUSw0QkFBNEIsQ0FBQztRQUNuRDtRQUNBLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUUsR0FBR0g7UUFDL0IsTUFBTUksVUFBVSxJQUFJYixPQUFPYyxNQUFNLENBQUNDLE9BQU9DLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRUwsU0FBUyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztRQUM5RSxNQUFNSyxVQUFVO1lBQ1pDLFdBQVc7WUFDWEMsV0FBVztZQUNYTixTQUFTQTtZQUNUTyxlQUFlO1FBQ25CO1FBQ0EsTUFBTVosV0FBV1MsT0FBTyxDQUFDLENBQUMsR0FBR2QsUUFBUWtCLEVBQUUsRUFBRSxtQkFBbUJKLFNBQVNLO0lBQ3pFO0FBQ0o7QUFDQXpCLGFBQWEsR0FBR0UsT0FDaEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcGxhaW4uanM/MDA2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGxhaW4gPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbmNsYXNzIFBsYWluIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBic29uXzEuQmluYXJ5KEJ1ZmZlci5mcm9tKGBcXHgwMCR7dXNlcm5hbWV9XFx4MDAke3Bhc3N3b3JkfWApKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgICAgIG1lY2hhbmlzbTogJ1BMQUlOJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICAgICAgICBhdXRvQXV0aG9yaXplOiAxXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5QbGFpbiA9IFBsYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUGxhaW4iLCJic29uXzEiLCJyZXF1aXJlIiwiZXJyb3JfMSIsInV0aWxzXzEiLCJhdXRoX3Byb3ZpZGVyXzEiLCJBdXRoUHJvdmlkZXIiLCJhdXRoIiwiYXV0aENvbnRleHQiLCJjb25uZWN0aW9uIiwiY3JlZGVudGlhbHMiLCJNb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInBheWxvYWQiLCJCaW5hcnkiLCJCdWZmZXIiLCJmcm9tIiwiY29tbWFuZCIsInNhc2xTdGFydCIsIm1lY2hhbmlzbSIsImF1dG9BdXRob3JpemUiLCJucyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/providers.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */ exports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: \"MONGODB-AWS\",\n    MONGODB_CR: \"MONGODB-CR\",\n    MONGODB_DEFAULT: \"DEFAULT\",\n    MONGODB_GSSAPI: \"GSSAPI\",\n    MONGODB_PLAIN: \"PLAIN\",\n    MONGODB_SCRAM_SHA1: \"SCRAM-SHA-1\",\n    MONGODB_SCRAM_SHA256: \"SCRAM-SHA-256\",\n    MONGODB_X509: \"MONGODB-X509\",\n    /** @experimental */ MONGODB_OIDC: \"MONGODB-OIDC\"\n});\n/** @internal */ exports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]); //# sourceMappingURL=providers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3Byb3ZpZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0NBQW9DLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDcEUsWUFBWSxHQUNaQSxxQkFBcUIsR0FBR0YsT0FBT00sTUFBTSxDQUFDO0lBQ2xDQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsaUJBQWlCO0lBQ2pCQyxnQkFBZ0I7SUFDaEJDLGVBQWU7SUFDZkMsb0JBQW9CO0lBQ3BCQyxzQkFBc0I7SUFDdEJDLGNBQWM7SUFDZCxrQkFBa0IsR0FDbEJDLGNBQWM7QUFDbEI7QUFDQSxjQUFjLEdBQ2RiLG9DQUFvQyxHQUFHLElBQUljLElBQUk7SUFDM0NkLFFBQVFHLGFBQWEsQ0FBQ0ssY0FBYztJQUNwQ1IsUUFBUUcsYUFBYSxDQUFDRSxXQUFXO0lBQ2pDTCxRQUFRRyxhQUFhLENBQUNVLFlBQVk7SUFDbENiLFFBQVFHLGFBQWEsQ0FBQ1MsWUFBWTtDQUNyQyxHQUNELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3Byb3ZpZGVycy5qcz83ZTNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BVVRIX01FQ0hTX0FVVEhfU1JDX0VYVEVSTkFMID0gZXhwb3J0cy5BdXRoTWVjaGFuaXNtID0gdm9pZCAwO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuQXV0aE1lY2hhbmlzbSA9IE9iamVjdC5mcmVlemUoe1xuICAgIE1PTkdPREJfQVdTOiAnTU9OR09EQi1BV1MnLFxuICAgIE1PTkdPREJfQ1I6ICdNT05HT0RCLUNSJyxcbiAgICBNT05HT0RCX0RFRkFVTFQ6ICdERUZBVUxUJyxcbiAgICBNT05HT0RCX0dTU0FQSTogJ0dTU0FQSScsXG4gICAgTU9OR09EQl9QTEFJTjogJ1BMQUlOJyxcbiAgICBNT05HT0RCX1NDUkFNX1NIQTE6ICdTQ1JBTS1TSEEtMScsXG4gICAgTU9OR09EQl9TQ1JBTV9TSEEyNTY6ICdTQ1JBTS1TSEEtMjU2JyxcbiAgICBNT05HT0RCX1g1MDk6ICdNT05HT0RCLVg1MDknLFxuICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgTU9OR09EQl9PSURDOiAnTU9OR09EQi1PSURDJ1xufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkFVVEhfTUVDSFNfQVVUSF9TUkNfRVhURVJOQUwgPSBuZXcgU2V0KFtcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9HU1NBUEksXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfQVdTLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX09JREMsXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfWDUwOVxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQVVUSF9NRUNIU19BVVRIX1NSQ19FWFRFUk5BTCIsIkF1dGhNZWNoYW5pc20iLCJmcmVlemUiLCJNT05HT0RCX0FXUyIsIk1PTkdPREJfQ1IiLCJNT05HT0RCX0RFRkFVTFQiLCJNT05HT0RCX0dTU0FQSSIsIk1PTkdPREJfUExBSU4iLCJNT05HT0RCX1NDUkFNX1NIQTEiLCJNT05HT0RCX1NDUkFNX1NIQTI1NiIsIk1PTkdPREJfWDUwOSIsIk1PTkdPREJfT0lEQyIsIlNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/scram.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = __webpack_require__(/*! @mongodb-js/saslprep */ \"(ssr)/./node_modules/@mongodb-js/saslprep/dist/node.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod){\n        super();\n        this.cryptoMethod = cryptoMethod || \"sha1\";\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const nonce = await (0, utils_1.randomBytes)(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace(\"=\", \"=3D\").replace(\",\", \"=2C\");\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from(\"n=\", \"utf8\"),\n        Buffer.from(username, \"utf8\"),\n        Buffer.from(\",r=\", \"utf8\"),\n        Buffer.from(nonce.toString(\"base64\"), \"utf8\")\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === \"sha1\" ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([\n            Buffer.from(\"n,,\", \"utf8\"),\n            clientFirstMessageBare(username, nonce)\n        ])),\n        autoAuthorize: 1,\n        options: {\n            skipEmptyExchange: true\n        }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError(\"AuthContext must contain a valid nonce property\");\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError(\"Unable to continue SCRAM without valid nonce\");\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === \"sha256\" ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload) ? new bson_1.Binary(response.payload) : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith(\"nonce\")) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, \"base64\"), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, \"Client Key\");\n    const serverKey = HMAC(cryptoMethod, saltedPassword, \"Server Key\");\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString(\"utf8\"),\n        withoutProof\n    ].join(\",\");\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [\n        withoutProof,\n        clientProof\n    ].join(\",\");\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, \"base64\"), serverSignature)) {\n        throw new error_1.MongoRuntimeError(\"Server returned an invalid signature\");\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.command((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString(\"utf8\");\n    const dict = {};\n    const parts = payloadStr.split(\",\");\n    for(let i = 0; i < parts.length; i++){\n        const valueParts = (parts[i].match(/^([^=]*)=(.*)$/) ?? []).slice(1);\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== \"string\") {\n        throw new error_1.MongoInvalidArgumentError(\"Username must be a string\");\n    }\n    if (typeof password !== \"string\") {\n        throw new error_1.MongoInvalidArgumentError(\"Password must be a string\");\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError(\"Password cannot be empty\");\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash(\"md5\");\n    } catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error(\"Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode\");\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, \"utf8\");\n    return md5.digest(\"hex\");\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for(let i = 0; i < length; i += 1){\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString(\"base64\");\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [\n        data,\n        salt.toString(\"base64\"),\n        iterations\n    ].join(\"_\");\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === \"function\") {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for(let i = 0; i < lhs.length; i++){\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor(){\n        super(\"sha1\");\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor(){\n        super(\"sha256\");\n    }\n}\nexports.ScramSHA256 = ScramSHA256; //# sourceMappingURL=scram.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/x509.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.X509 = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        return {\n            ...handshakeDoc,\n            speculativeAuthenticate: x509AuthenticateCommand(credentials)\n        };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.command((0, utils_1.ns)(\"$external.$cmd\"), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = {\n        authenticate: 1,\n        mechanism: \"MONGODB-X509\"\n    };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n} //# sourceMappingURL=x509.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3g1MDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFlBQVksR0FBRyxLQUFLO0FBQ3BCLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsb0ZBQWlCO0FBQ2pELE1BQU1GLGFBQWFJLGdCQUFnQkMsWUFBWTtJQUMzQyxNQUFNQyxRQUFRQyxZQUFZLEVBQUVDLFdBQVcsRUFBRTtRQUNyQyxNQUFNLEVBQUVDLFdBQVcsRUFBRSxHQUFHRDtRQUN4QixJQUFJLENBQUNDLGFBQWE7WUFDZCxNQUFNLElBQUlSLFFBQVFTLDRCQUE0QixDQUFDO1FBQ25EO1FBQ0EsT0FBTztZQUFFLEdBQUdILFlBQVk7WUFBRUkseUJBQXlCQyx3QkFBd0JIO1FBQWE7SUFDNUY7SUFDQSxNQUFNSSxLQUFLTCxXQUFXLEVBQUU7UUFDcEIsTUFBTU0sYUFBYU4sWUFBWU0sVUFBVTtRQUN6QyxNQUFNTCxjQUFjRCxZQUFZQyxXQUFXO1FBQzNDLElBQUksQ0FBQ0EsYUFBYTtZQUNkLE1BQU0sSUFBSVIsUUFBUVMsNEJBQTRCLENBQUM7UUFDbkQ7UUFDQSxNQUFNSyxXQUFXUCxZQUFZTyxRQUFRO1FBQ3JDLElBQUlBLFVBQVVKLHlCQUF5QjtZQUNuQztRQUNKO1FBQ0EsTUFBTUcsV0FBV0UsT0FBTyxDQUFDLENBQUMsR0FBR2IsUUFBUWMsRUFBRSxFQUFFLG1CQUFtQkwsd0JBQXdCSCxjQUFjUztJQUN0RztBQUNKO0FBQ0FwQixZQUFZLEdBQUdFO0FBQ2YsU0FBU1ksd0JBQXdCSCxXQUFXO0lBQ3hDLE1BQU1PLFVBQVU7UUFBRUcsY0FBYztRQUFHQyxXQUFXO0lBQWU7SUFDN0QsSUFBSVgsWUFBWVksUUFBUSxFQUFFO1FBQ3RCTCxRQUFRTSxJQUFJLEdBQUdiLFlBQVlZLFFBQVE7SUFDdkM7SUFDQSxPQUFPTDtBQUNYLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgveDUwOS5qcz8zN2JkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5YNTA5ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgWDUwOSBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIHByZXBhcmUoaGFuZHNoYWtlRG9jLCBhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLmhhbmRzaGFrZURvYywgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IHg1MDlBdXRoZW50aWNhdGVDb21tYW5kKGNyZWRlbnRpYWxzKSB9O1xuICAgIH1cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhdXRoQ29udGV4dC5jb25uZWN0aW9uO1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF1dGhDb250ZXh0LmNyZWRlbnRpYWxzO1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhdXRoQ29udGV4dC5yZXNwb25zZTtcbiAgICAgICAgaWYgKHJlc3BvbnNlPy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIHg1MDlBdXRoZW50aWNhdGVDb21tYW5kKGNyZWRlbnRpYWxzKSwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnRzLlg1MDkgPSBYNTA5O1xuZnVuY3Rpb24geDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0geyBhdXRoZW50aWNhdGU6IDEsIG1lY2hhbmlzbTogJ01PTkdPREItWDUwOScgfTtcbiAgICBpZiAoY3JlZGVudGlhbHMudXNlcm5hbWUpIHtcbiAgICAgICAgY29tbWFuZC51c2VyID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgfVxuICAgIHJldHVybiBjb21tYW5kO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eDUwOS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJYNTA5IiwiZXJyb3JfMSIsInJlcXVpcmUiLCJ1dGlsc18xIiwiYXV0aF9wcm92aWRlcl8xIiwiQXV0aFByb3ZpZGVyIiwicHJlcGFyZSIsImhhbmRzaGFrZURvYyIsImF1dGhDb250ZXh0IiwiY3JlZGVudGlhbHMiLCJNb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yIiwic3BlY3VsYXRpdmVBdXRoZW50aWNhdGUiLCJ4NTA5QXV0aGVudGljYXRlQ29tbWFuZCIsImF1dGgiLCJjb25uZWN0aW9uIiwicmVzcG9uc2UiLCJjb21tYW5kIiwibnMiLCJ1bmRlZmluZWQiLCJhdXRoZW50aWNhdGUiLCJtZWNoYW5pc20iLCJ1c2VybmFtZSIsInVzZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/command_monitoring_events.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */ class CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */ constructor(connection, command, serverConnectionId){\n        /** @internal */ this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */ get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */ class CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */ constructor(connection, command, reply, started, serverConnectionId){\n        /** @internal */ this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */ get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */ class CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */ constructor(connection, command, error, started, serverConnectionId){\n        /** @internal */ this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */ get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */ exports.SENSITIVE_COMMANDS = new Set([\n    \"authenticate\",\n    \"saslStart\",\n    \"saslContinue\",\n    \"getnonce\",\n    \"createUser\",\n    \"updateUser\",\n    \"copydbgetnonce\",\n    \"copydbsaslstart\",\n    \"copydb\"\n]);\nconst HELLO_COMMANDS = new Set([\n    \"hello\",\n    constants_1.LEGACY_HELLO_COMMAND,\n    constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE\n]);\n// helper methods\nconst extractCommandName = (commandDoc)=>Object.keys(commandDoc)[0];\nconst namespace = (command)=>command.ns;\nconst collectionName = (command)=>command.ns.split(\".\")[1];\nconst maybeRedact = (commandName, commandDoc, result)=>exports.SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate ? {} : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: \"filter\",\n    $orderby: \"sort\",\n    $hint: \"hint\",\n    $comment: \"comment\",\n    $maxScan: \"maxScan\",\n    $max: \"max\",\n    $min: \"min\",\n    $returnKey: \"returnKey\",\n    $showDiskLoc: \"showRecordId\",\n    $maxTimeMS: \"maxTimeMS\",\n    $snapshot: \"snapshot\"\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: \"skip\",\n    numberToReturn: \"batchSize\",\n    returnFieldSelector: \"projection\"\n};\nconst OP_QUERY_KEYS = [\n    \"tailable\",\n    \"oplogReplay\",\n    \"noCursorTimeout\",\n    \"awaitData\",\n    \"partial\",\n    \"exhaust\"\n];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */ function extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(command.command);\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === \"admin.$cmd\") {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        } else {\n            // up-convert legacy find command\n            result = {\n                find: collectionName(command)\n            };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach((key)=>{\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach((key)=>{\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n            }\n        });\n        OP_QUERY_KEYS.forEach((key)=>{\n            if (command[key]) {\n                result[key] = command[key];\n            }\n        });\n        if (command.pre32Limit != null) {\n            result.limit = command.pre32Limit;\n        }\n        if (command.query.$explain) {\n            return {\n                explain: result\n            };\n        }\n        return result;\n    }\n    const clonedQuery = {};\n    const clonedCommand = {};\n    if (command.query) {\n        for(const k in command.query){\n            clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n        }\n        clonedCommand.query = clonedQuery;\n    }\n    for(const k in command){\n        if (k === \"query\") continue;\n        clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n    if (!reply) {\n        return reply;\n    }\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n    }\n    // is this a legacy find command?\n    if (command.query && command.query.$query != null) {\n        return {\n            ok: 1,\n            cursor: {\n                id: (0, utils_1.deepCopy)(reply.cursorId),\n                ns: namespace(command),\n                firstBatch: (0, utils_1.deepCopy)(reply.documents)\n            }\n        };\n    }\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if (\"id\" in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n} //# sourceMappingURL=command_monitoring_events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9jb21tYW5kX21vbml0b3JpbmdfZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0EsMEJBQTBCLEdBQUdBLDZCQUE2QixHQUFHQSwyQkFBMkIsR0FBRyxLQUFLO0FBQzdILE1BQU1NLGNBQWNDLG1CQUFPQSxDQUFDLG1FQUFjO0FBQzFDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1FLGFBQWFGLG1CQUFPQSxDQUFDLHFFQUFZO0FBQ3ZDOzs7O0NBSUMsR0FDRCxNQUFNRjtJQUNGOzs7Ozs7S0FNQyxHQUNESyxZQUFZQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsa0JBQWtCLENBQUU7UUFDakQsY0FBYyxHQUNkLElBQUksQ0FBQ0MsSUFBSSxHQUFHUixZQUFZUyxlQUFlO1FBQ3ZDLE1BQU1DLE1BQU1DLGVBQWVMO1FBQzNCLE1BQU1NLGNBQWNDLG1CQUFtQkg7UUFDdkMsTUFBTSxFQUFFSSxPQUFPLEVBQUVDLFlBQVksRUFBRUMsU0FBUyxFQUFFLEdBQUdDLHlCQUF5Qlo7UUFDdEUsNERBQTREO1FBQzVELElBQUlYLFFBQVFFLGtCQUFrQixDQUFDc0IsR0FBRyxDQUFDTixjQUFjO1lBQzdDLElBQUksQ0FBQ08sVUFBVSxHQUFHLENBQUM7WUFDbkIsSUFBSSxDQUFDQSxVQUFVLENBQUNQLFlBQVksR0FBRztRQUNuQztRQUNBLElBQUksQ0FBQ0UsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNDLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDSSxTQUFTLEdBQUdkLFFBQVFjLFNBQVM7UUFDbEMsSUFBSSxDQUFDQyxZQUFZLEdBQUdmLFFBQVFlLFlBQVk7UUFDeEMsSUFBSSxDQUFDVCxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ04sT0FBTyxHQUFHZ0IsWUFBWVYsYUFBYUYsS0FBS0E7UUFDN0MsSUFBSSxDQUFDSCxrQkFBa0IsR0FBR0E7SUFDOUI7SUFDQSxhQUFhLEdBQ2IsSUFBSWdCLGVBQWU7UUFDZixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNQLFNBQVM7SUFDM0I7QUFDSjtBQUNBdEIsMkJBQTJCLEdBQUdLO0FBQzlCOzs7O0NBSUMsR0FDRCxNQUFNRDtJQUNGOzs7Ozs7OztLQVFDLEdBQ0RNLFlBQVlDLFVBQVUsRUFBRUMsT0FBTyxFQUFFa0IsS0FBSyxFQUFFQyxPQUFPLEVBQUVsQixrQkFBa0IsQ0FBRTtRQUNqRSxjQUFjLEdBQ2QsSUFBSSxDQUFDQyxJQUFJLEdBQUdSLFlBQVkwQixpQkFBaUI7UUFDekMsTUFBTWhCLE1BQU1DLGVBQWVMO1FBQzNCLE1BQU1NLGNBQWNDLG1CQUFtQkg7UUFDdkMsTUFBTSxFQUFFSSxPQUFPLEVBQUVDLFlBQVksRUFBRUMsU0FBUyxFQUFFLEdBQUdDLHlCQUF5Qlo7UUFDdEUsSUFBSSxDQUFDUyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNJLFNBQVMsR0FBR2QsUUFBUWMsU0FBUztRQUNsQyxJQUFJLENBQUNSLFdBQVcsR0FBR0E7UUFDbkIsSUFBSSxDQUFDZSxRQUFRLEdBQUcsQ0FBQyxHQUFHekIsUUFBUTBCLHFCQUFxQixFQUFFSDtRQUNuRCxJQUFJLENBQUNELEtBQUssR0FBR0YsWUFBWVYsYUFBYUYsS0FBS21CLGFBQWF2QixTQUFTa0I7UUFDakUsSUFBSSxDQUFDakIsa0JBQWtCLEdBQUdBO0lBQzlCO0lBQ0EsYUFBYSxHQUNiLElBQUlnQixlQUFlO1FBQ2YsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDUCxTQUFTO0lBQzNCO0FBQ0o7QUFDQXRCLDZCQUE2QixHQUFHSTtBQUNoQzs7OztDQUlDLEdBQ0QsTUFBTUQ7SUFDRjs7Ozs7Ozs7S0FRQyxHQUNETyxZQUFZQyxVQUFVLEVBQUVDLE9BQU8sRUFBRXdCLEtBQUssRUFBRUwsT0FBTyxFQUFFbEIsa0JBQWtCLENBQUU7UUFDakUsY0FBYyxHQUNkLElBQUksQ0FBQ0MsSUFBSSxHQUFHUixZQUFZK0IsY0FBYztRQUN0QyxNQUFNckIsTUFBTUMsZUFBZUw7UUFDM0IsTUFBTU0sY0FBY0MsbUJBQW1CSDtRQUN2QyxNQUFNLEVBQUVJLE9BQU8sRUFBRUMsWUFBWSxFQUFFQyxTQUFTLEVBQUUsR0FBR0MseUJBQXlCWjtRQUN0RSxJQUFJLENBQUNTLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0ksU0FBUyxHQUFHZCxRQUFRYyxTQUFTO1FBQ2xDLElBQUksQ0FBQ1IsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNlLFFBQVEsR0FBRyxDQUFDLEdBQUd6QixRQUFRMEIscUJBQXFCLEVBQUVIO1FBQ25ELElBQUksQ0FBQ08sT0FBTyxHQUFHVixZQUFZVixhQUFhRixLQUFLb0I7UUFDN0MsSUFBSSxDQUFDdkIsa0JBQWtCLEdBQUdBO0lBQzlCO0lBQ0EsYUFBYSxHQUNiLElBQUlnQixlQUFlO1FBQ2YsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDUCxTQUFTO0lBQzNCO0FBQ0o7QUFDQXRCLDBCQUEwQixHQUFHRztBQUM3Qjs7O0NBR0MsR0FDREgsMEJBQTBCLEdBQUcsSUFBSXVDLElBQUk7SUFDakM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxNQUFNQyxpQkFBaUIsSUFBSUQsSUFBSTtJQUFDO0lBQVNqQyxZQUFZbUMsb0JBQW9CO0lBQUVuQyxZQUFZb0MsK0JBQStCO0NBQUM7QUFDdkgsaUJBQWlCO0FBQ2pCLE1BQU12QixxQkFBcUIsQ0FBQ3dCLGFBQWU3QyxPQUFPOEMsSUFBSSxDQUFDRCxXQUFXLENBQUMsRUFBRTtBQUNyRSxNQUFNRSxZQUFZLENBQUNqQyxVQUFZQSxRQUFRa0MsRUFBRTtBQUN6QyxNQUFNQyxpQkFBaUIsQ0FBQ25DLFVBQVlBLFFBQVFrQyxFQUFFLENBQUNFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM1RCxNQUFNcEIsY0FBYyxDQUFDVixhQUFheUIsWUFBWU0sU0FBV2pELFFBQVFFLGtCQUFrQixDQUFDc0IsR0FBRyxDQUFDTixnQkFDbkZzQixlQUFlaEIsR0FBRyxDQUFDTixnQkFBZ0J5QixXQUFXTyx1QkFBdUIsR0FDcEUsQ0FBQyxJQUNERDtBQUNOLE1BQU1FLHdCQUF3QjtJQUMxQkMsUUFBUTtJQUNSQyxVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsVUFBVTtJQUNWQyxVQUFVO0lBQ1ZDLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxZQUFZO0lBQ1pDLGNBQWM7SUFDZEMsWUFBWTtJQUNaQyxXQUFXO0FBQ2Y7QUFDQSxNQUFNQywwQkFBMEI7SUFDNUJDLGNBQWM7SUFDZEMsZ0JBQWdCO0lBQ2hCQyxxQkFBcUI7QUFDekI7QUFDQSxNQUFNQyxnQkFBZ0I7SUFDbEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCw4RkFBOEYsR0FDOUYsU0FBU2xELGVBQWVMLE9BQU87SUFDM0IsSUFBSUEsbUJBQW1CSCxXQUFXMkQsWUFBWSxFQUFFO1FBQzVDLE9BQU8sQ0FBQyxHQUFHNUQsUUFBUTZELFFBQVEsRUFBRXpELFFBQVFBLE9BQU87SUFDaEQ7SUFDQSxJQUFJQSxRQUFRMEQsS0FBSyxFQUFFbEIsUUFBUTtRQUN2QixJQUFJSDtRQUNKLElBQUlyQyxRQUFRa0MsRUFBRSxLQUFLLGNBQWM7WUFDN0IsNEJBQTRCO1lBQzVCRyxTQUFTbkQsT0FBT3lFLE1BQU0sQ0FBQyxDQUFDLEdBQUczRCxRQUFRMEQsS0FBSyxDQUFDbEIsTUFBTTtRQUNuRCxPQUNLO1lBQ0QsaUNBQWlDO1lBQ2pDSCxTQUFTO2dCQUFFdUIsTUFBTXpCLGVBQWVuQztZQUFTO1lBQ3pDZCxPQUFPOEMsSUFBSSxDQUFDTyx1QkFBdUJzQixPQUFPLENBQUNDLENBQUFBO2dCQUN2QyxJQUFJOUQsUUFBUTBELEtBQUssQ0FBQ0ksSUFBSSxJQUFJLE1BQU07b0JBQzVCekIsTUFBTSxDQUFDRSxxQkFBcUIsQ0FBQ3VCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBR2xFLFFBQVE2RCxRQUFRLEVBQUV6RCxRQUFRMEQsS0FBSyxDQUFDSSxJQUFJO2dCQUNqRjtZQUNKO1FBQ0o7UUFDQTVFLE9BQU84QyxJQUFJLENBQUNtQix5QkFBeUJVLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDekMsTUFBTUMsWUFBWUQ7WUFDbEIsSUFBSTlELE9BQU8sQ0FBQytELFVBQVUsSUFBSSxNQUFNO2dCQUM1QjFCLE1BQU0sQ0FBQ2MsdUJBQXVCLENBQUNZLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBR25FLFFBQVE2RCxRQUFRLEVBQUV6RCxPQUFPLENBQUMrRCxVQUFVO1lBQ3pGO1FBQ0o7UUFDQVIsY0FBY00sT0FBTyxDQUFDQyxDQUFBQTtZQUNsQixJQUFJOUQsT0FBTyxDQUFDOEQsSUFBSSxFQUFFO2dCQUNkekIsTUFBTSxDQUFDeUIsSUFBSSxHQUFHOUQsT0FBTyxDQUFDOEQsSUFBSTtZQUM5QjtRQUNKO1FBQ0EsSUFBSTlELFFBQVFnRSxVQUFVLElBQUksTUFBTTtZQUM1QjNCLE9BQU80QixLQUFLLEdBQUdqRSxRQUFRZ0UsVUFBVTtRQUNyQztRQUNBLElBQUloRSxRQUFRMEQsS0FBSyxDQUFDUSxRQUFRLEVBQUU7WUFDeEIsT0FBTztnQkFBRUMsU0FBUzlCO1lBQU87UUFDN0I7UUFDQSxPQUFPQTtJQUNYO0lBQ0EsTUFBTStCLGNBQWMsQ0FBQztJQUNyQixNQUFNQyxnQkFBZ0IsQ0FBQztJQUN2QixJQUFJckUsUUFBUTBELEtBQUssRUFBRTtRQUNmLElBQUssTUFBTVksS0FBS3RFLFFBQVEwRCxLQUFLLENBQUU7WUFDM0JVLFdBQVcsQ0FBQ0UsRUFBRSxHQUFHLENBQUMsR0FBRzFFLFFBQVE2RCxRQUFRLEVBQUV6RCxRQUFRMEQsS0FBSyxDQUFDWSxFQUFFO1FBQzNEO1FBQ0FELGNBQWNYLEtBQUssR0FBR1U7SUFDMUI7SUFDQSxJQUFLLE1BQU1FLEtBQUt0RSxRQUFTO1FBQ3JCLElBQUlzRSxNQUFNLFNBQ047UUFDSkQsYUFBYSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxHQUFHMUUsUUFBUTZELFFBQVEsRUFBRXpELE9BQU8sQ0FBQ3NFLEVBQUU7SUFDdkQ7SUFDQSxPQUFPdEUsUUFBUTBELEtBQUssR0FBR1UsY0FBY0M7QUFDekM7QUFDQSxTQUFTOUMsYUFBYXZCLE9BQU8sRUFBRWtCLEtBQUs7SUFDaEMsSUFBSSxDQUFDQSxPQUFPO1FBQ1IsT0FBT0E7SUFDWDtJQUNBLElBQUlsQixtQkFBbUJILFdBQVcyRCxZQUFZLEVBQUU7UUFDNUMsT0FBTyxDQUFDLEdBQUc1RCxRQUFRNkQsUUFBUSxFQUFFdkMsTUFBTW1CLE1BQU0sR0FBR25CLE1BQU1tQixNQUFNLEdBQUduQjtJQUMvRDtJQUNBLGlDQUFpQztJQUNqQyxJQUFJbEIsUUFBUTBELEtBQUssSUFBSTFELFFBQVEwRCxLQUFLLENBQUNsQixNQUFNLElBQUksTUFBTTtRQUMvQyxPQUFPO1lBQ0grQixJQUFJO1lBQ0pDLFFBQVE7Z0JBQ0pDLElBQUksQ0FBQyxHQUFHN0UsUUFBUTZELFFBQVEsRUFBRXZDLE1BQU13RCxRQUFRO2dCQUN4Q3hDLElBQUlELFVBQVVqQztnQkFDZDJFLFlBQVksQ0FBQyxHQUFHL0UsUUFBUTZELFFBQVEsRUFBRXZDLE1BQU0wRCxTQUFTO1lBQ3JEO1FBQ0o7SUFDSjtJQUNBLE9BQU8sQ0FBQyxHQUFHaEYsUUFBUTZELFFBQVEsRUFBRXZDLE1BQU1tQixNQUFNLEdBQUduQixNQUFNbUIsTUFBTSxHQUFHbkI7QUFDL0Q7QUFDQSxTQUFTUCx5QkFBeUJaLFVBQVU7SUFDeEMsSUFBSVU7SUFDSixJQUFJLFFBQVFWLFlBQVk7UUFDcEJVLGVBQWVWLFdBQVcwRSxFQUFFO0lBQ2hDO0lBQ0EsT0FBTztRQUNIakUsU0FBU1QsV0FBV1MsT0FBTztRQUMzQkUsV0FBV1gsV0FBV1csU0FBUztRQUMvQkQ7SUFDSjtBQUNKLEVBQ0EscURBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2NvbW1hbmRfbW9uaXRvcmluZ19ldmVudHMuanM/MGQ5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU0VOU0lUSVZFX0NPTU1BTkRTID0gZXhwb3J0cy5Db21tYW5kRmFpbGVkRXZlbnQgPSBleHBvcnRzLkNvbW1hbmRTdWNjZWVkZWRFdmVudCA9IGV4cG9ydHMuQ29tbWFuZFN0YXJ0ZWRFdmVudCA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kc18xID0gcmVxdWlyZShcIi4vY29tbWFuZHNcIik7XG4vKipcbiAqIEFuIGV2ZW50IGluZGljYXRpbmcgdGhlIHN0YXJ0IG9mIGEgZ2l2ZW4gY29tbWFuZFxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIENvbW1hbmRTdGFydGVkRXZlbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHN0YXJ0ZWQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBwb29sIC0gdGhlIHBvb2wgdGhhdCBvcmlnaW5hdGVkIHRoZSBjb21tYW5kXG4gICAgICogQHBhcmFtIGNvbW1hbmQgLSB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIGNvbW1hbmQsIHNlcnZlckNvbm5lY3Rpb25JZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLkNPTU1BTkRfU1RBUlRFRDtcbiAgICAgICAgY29uc3QgY21kID0gZXh0cmFjdENvbW1hbmQoY29tbWFuZCk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmROYW1lID0gZXh0cmFjdENvbW1hbmROYW1lKGNtZCk7XG4gICAgICAgIGNvbnN0IHsgYWRkcmVzcywgY29ubmVjdGlvbklkLCBzZXJ2aWNlSWQgfSA9IGV4dHJhY3RDb25uZWN0aW9uRGV0YWlscyhjb25uZWN0aW9uKTtcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGluIG1ham9yIHJldmlzaW9uLCB0aGlzIGlzIG5vdCBzcGVjIGJlaGF2aW9yXG4gICAgICAgIGlmIChleHBvcnRzLlNFTlNJVElWRV9DT01NQU5EUy5oYXMoY29tbWFuZE5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRPYmogPSB7fTtcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZE9ialtjb21tYW5kTmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLnNlcnZpY2VJZCA9IHNlcnZpY2VJZDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SWQgPSBjb21tYW5kLnJlcXVlc3RJZDtcbiAgICAgICAgdGhpcy5kYXRhYmFzZU5hbWUgPSBjb21tYW5kLmRhdGFiYXNlTmFtZTtcbiAgICAgICAgdGhpcy5jb21tYW5kTmFtZSA9IGNvbW1hbmROYW1lO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBtYXliZVJlZGFjdChjb21tYW5kTmFtZSwgY21kLCBjbWQpO1xuICAgICAgICB0aGlzLnNlcnZlckNvbm5lY3Rpb25JZCA9IHNlcnZlckNvbm5lY3Rpb25JZDtcbiAgICB9XG4gICAgLyogQGludGVybmFsICovXG4gICAgZ2V0IGhhc1NlcnZpY2VJZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zZXJ2aWNlSWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Db21tYW5kU3RhcnRlZEV2ZW50ID0gQ29tbWFuZFN0YXJ0ZWRFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgaW5kaWNhdGluZyB0aGUgc3VjY2VzcyBvZiBhIGdpdmVuIGNvbW1hbmRcbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBDb21tYW5kU3VjY2VlZGVkRXZlbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHN1Y2NlZWRlZCBldmVudFxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIHBvb2wgLSB0aGUgcG9vbCB0aGF0IG9yaWdpbmF0ZWQgdGhlIGNvbW1hbmRcbiAgICAgKiBAcGFyYW0gY29tbWFuZCAtIHRoZSBjb21tYW5kXG4gICAgICogQHBhcmFtIHJlcGx5IC0gdGhlIHJlcGx5IGZvciB0aGlzIGNvbW1hbmQgZnJvbSB0aGUgc2VydmVyXG4gICAgICogQHBhcmFtIHN0YXJ0ZWQgLSBhIGhpZ2ggcmVzb2x1dGlvbiB0dXBsZSB0aW1lc3RhbXAgb2Ygd2hlbiB0aGUgY29tbWFuZCB3YXMgZmlyc3Qgc2VudCwgdG8gY2FsY3VsYXRlIGR1cmF0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgY29tbWFuZCwgcmVwbHksIHN0YXJ0ZWQsIHNlcnZlckNvbm5lY3Rpb25JZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLkNPTU1BTkRfU1VDQ0VFREVEO1xuICAgICAgICBjb25zdCBjbWQgPSBleHRyYWN0Q29tbWFuZChjb21tYW5kKTtcbiAgICAgICAgY29uc3QgY29tbWFuZE5hbWUgPSBleHRyYWN0Q29tbWFuZE5hbWUoY21kKTtcbiAgICAgICAgY29uc3QgeyBhZGRyZXNzLCBjb25uZWN0aW9uSWQsIHNlcnZpY2VJZCB9ID0gZXh0cmFjdENvbm5lY3Rpb25EZXRhaWxzKGNvbm5lY3Rpb24pO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgdGhpcy5zZXJ2aWNlSWQgPSBzZXJ2aWNlSWQ7XG4gICAgICAgIHRoaXMucmVxdWVzdElkID0gY29tbWFuZC5yZXF1ZXN0SWQ7XG4gICAgICAgIHRoaXMuY29tbWFuZE5hbWUgPSBjb21tYW5kTmFtZTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9ICgwLCB1dGlsc18xLmNhbGN1bGF0ZUR1cmF0aW9uSW5Ncykoc3RhcnRlZCk7XG4gICAgICAgIHRoaXMucmVwbHkgPSBtYXliZVJlZGFjdChjb21tYW5kTmFtZSwgY21kLCBleHRyYWN0UmVwbHkoY29tbWFuZCwgcmVwbHkpKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJDb25uZWN0aW9uSWQgPSBzZXJ2ZXJDb25uZWN0aW9uSWQ7XG4gICAgfVxuICAgIC8qIEBpbnRlcm5hbCAqL1xuICAgIGdldCBoYXNTZXJ2aWNlSWQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc2VydmljZUlkO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tbWFuZFN1Y2NlZWRlZEV2ZW50ID0gQ29tbWFuZFN1Y2NlZWRlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBpbmRpY2F0aW5nIHRoZSBmYWlsdXJlIG9mIGEgZ2l2ZW4gY29tbWFuZFxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIENvbW1hbmRGYWlsZWRFdmVudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZmFpbHVyZSBldmVudFxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIHBvb2wgLSB0aGUgcG9vbCB0aGF0IG9yaWdpbmF0ZWQgdGhlIGNvbW1hbmRcbiAgICAgKiBAcGFyYW0gY29tbWFuZCAtIHRoZSBjb21tYW5kXG4gICAgICogQHBhcmFtIGVycm9yIC0gdGhlIGdlbmVyYXRlZCBlcnJvciBvciBhIHNlcnZlciBlcnJvciByZXNwb25zZVxuICAgICAqIEBwYXJhbSBzdGFydGVkIC0gYSBoaWdoIHJlc29sdXRpb24gdHVwbGUgdGltZXN0YW1wIG9mIHdoZW4gdGhlIGNvbW1hbmQgd2FzIGZpcnN0IHNlbnQsIHRvIGNhbGN1bGF0ZSBkdXJhdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIGNvbW1hbmQsIGVycm9yLCBzdGFydGVkLCBzZXJ2ZXJDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5DT01NQU5EX0ZBSUxFRDtcbiAgICAgICAgY29uc3QgY21kID0gZXh0cmFjdENvbW1hbmQoY29tbWFuZCk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmROYW1lID0gZXh0cmFjdENvbW1hbmROYW1lKGNtZCk7XG4gICAgICAgIGNvbnN0IHsgYWRkcmVzcywgY29ubmVjdGlvbklkLCBzZXJ2aWNlSWQgfSA9IGV4dHJhY3RDb25uZWN0aW9uRGV0YWlscyhjb25uZWN0aW9uKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuc2VydmljZUlkID0gc2VydmljZUlkO1xuICAgICAgICB0aGlzLnJlcXVlc3RJZCA9IGNvbW1hbmQucmVxdWVzdElkO1xuICAgICAgICB0aGlzLmNvbW1hbmROYW1lID0gY29tbWFuZE5hbWU7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAoMCwgdXRpbHNfMS5jYWxjdWxhdGVEdXJhdGlvbkluTXMpKHN0YXJ0ZWQpO1xuICAgICAgICB0aGlzLmZhaWx1cmUgPSBtYXliZVJlZGFjdChjb21tYW5kTmFtZSwgY21kLCBlcnJvcik7XG4gICAgICAgIHRoaXMuc2VydmVyQ29ubmVjdGlvbklkID0gc2VydmVyQ29ubmVjdGlvbklkO1xuICAgIH1cbiAgICAvKiBAaW50ZXJuYWwgKi9cbiAgICBnZXQgaGFzU2VydmljZUlkKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnNlcnZpY2VJZDtcbiAgICB9XG59XG5leHBvcnRzLkNvbW1hbmRGYWlsZWRFdmVudCA9IENvbW1hbmRGYWlsZWRFdmVudDtcbi8qKlxuICogQ29tbWFuZHMgdGhhdCB3ZSB3YW50IHRvIHJlZGFjdCBiZWNhdXNlIG9mIHRoZSBzZW5zaXRpdmUgbmF0dXJlIG9mIHRoZWlyIGNvbnRlbnRzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0cy5TRU5TSVRJVkVfQ09NTUFORFMgPSBuZXcgU2V0KFtcbiAgICAnYXV0aGVudGljYXRlJyxcbiAgICAnc2FzbFN0YXJ0JyxcbiAgICAnc2FzbENvbnRpbnVlJyxcbiAgICAnZ2V0bm9uY2UnLFxuICAgICdjcmVhdGVVc2VyJyxcbiAgICAndXBkYXRlVXNlcicsXG4gICAgJ2NvcHlkYmdldG5vbmNlJyxcbiAgICAnY29weWRic2FzbHN0YXJ0JyxcbiAgICAnY29weWRiJ1xuXSk7XG5jb25zdCBIRUxMT19DT01NQU5EUyA9IG5ldyBTZXQoWydoZWxsbycsIGNvbnN0YW50c18xLkxFR0FDWV9IRUxMT19DT01NQU5ELCBjb25zdGFudHNfMS5MRUdBQ1lfSEVMTE9fQ09NTUFORF9DQU1FTF9DQVNFXSk7XG4vLyBoZWxwZXIgbWV0aG9kc1xuY29uc3QgZXh0cmFjdENvbW1hbmROYW1lID0gKGNvbW1hbmREb2MpID0+IE9iamVjdC5rZXlzKGNvbW1hbmREb2MpWzBdO1xuY29uc3QgbmFtZXNwYWNlID0gKGNvbW1hbmQpID0+IGNvbW1hbmQubnM7XG5jb25zdCBjb2xsZWN0aW9uTmFtZSA9IChjb21tYW5kKSA9PiBjb21tYW5kLm5zLnNwbGl0KCcuJylbMV07XG5jb25zdCBtYXliZVJlZGFjdCA9IChjb21tYW5kTmFtZSwgY29tbWFuZERvYywgcmVzdWx0KSA9PiBleHBvcnRzLlNFTlNJVElWRV9DT01NQU5EUy5oYXMoY29tbWFuZE5hbWUpIHx8XG4gICAgKEhFTExPX0NPTU1BTkRTLmhhcyhjb21tYW5kTmFtZSkgJiYgY29tbWFuZERvYy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZSlcbiAgICA/IHt9XG4gICAgOiByZXN1bHQ7XG5jb25zdCBMRUdBQ1lfRklORF9RVUVSWV9NQVAgPSB7XG4gICAgJHF1ZXJ5OiAnZmlsdGVyJyxcbiAgICAkb3JkZXJieTogJ3NvcnQnLFxuICAgICRoaW50OiAnaGludCcsXG4gICAgJGNvbW1lbnQ6ICdjb21tZW50JyxcbiAgICAkbWF4U2NhbjogJ21heFNjYW4nLFxuICAgICRtYXg6ICdtYXgnLFxuICAgICRtaW46ICdtaW4nLFxuICAgICRyZXR1cm5LZXk6ICdyZXR1cm5LZXknLFxuICAgICRzaG93RGlza0xvYzogJ3Nob3dSZWNvcmRJZCcsXG4gICAgJG1heFRpbWVNUzogJ21heFRpbWVNUycsXG4gICAgJHNuYXBzaG90OiAnc25hcHNob3QnXG59O1xuY29uc3QgTEVHQUNZX0ZJTkRfT1BUSU9OU19NQVAgPSB7XG4gICAgbnVtYmVyVG9Ta2lwOiAnc2tpcCcsXG4gICAgbnVtYmVyVG9SZXR1cm46ICdiYXRjaFNpemUnLFxuICAgIHJldHVybkZpZWxkU2VsZWN0b3I6ICdwcm9qZWN0aW9uJ1xufTtcbmNvbnN0IE9QX1FVRVJZX0tFWVMgPSBbXG4gICAgJ3RhaWxhYmxlJyxcbiAgICAnb3Bsb2dSZXBsYXknLFxuICAgICdub0N1cnNvclRpbWVvdXQnLFxuICAgICdhd2FpdERhdGEnLFxuICAgICdwYXJ0aWFsJyxcbiAgICAnZXhoYXVzdCdcbl07XG4vKiogRXh0cmFjdCB0aGUgYWN0dWFsIGNvbW1hbmQgZnJvbSB0aGUgcXVlcnksIHBvc3NpYmx5IHVwLWNvbnZlcnRpbmcgaWYgaXQncyBhIGxlZ2FjeSBmb3JtYXQgKi9cbmZ1bmN0aW9uIGV4dHJhY3RDb21tYW5kKGNvbW1hbmQpIHtcbiAgICBpZiAoY29tbWFuZCBpbnN0YW5jZW9mIGNvbW1hbmRzXzEuT3BNc2dSZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5kZWVwQ29weSkoY29tbWFuZC5jb21tYW5kKTtcbiAgICB9XG4gICAgaWYgKGNvbW1hbmQucXVlcnk/LiRxdWVyeSkge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAoY29tbWFuZC5ucyA9PT0gJ2FkbWluLiRjbWQnKSB7XG4gICAgICAgICAgICAvLyB1cC1jb252ZXJ0IGxlZ2FjeSBjb21tYW5kXG4gICAgICAgICAgICByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjb21tYW5kLnF1ZXJ5LiRxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB1cC1jb252ZXJ0IGxlZ2FjeSBmaW5kIGNvbW1hbmRcbiAgICAgICAgICAgIHJlc3VsdCA9IHsgZmluZDogY29sbGVjdGlvbk5hbWUoY29tbWFuZCkgfTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKExFR0FDWV9GSU5EX1FVRVJZX01BUCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kLnF1ZXJ5W2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbTEVHQUNZX0ZJTkRfUVVFUllfTUFQW2tleV1dID0gKDAsIHV0aWxzXzEuZGVlcENvcHkpKGNvbW1hbmQucXVlcnlba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmtleXMoTEVHQUNZX0ZJTkRfT1BUSU9OU19NQVApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2FjeUtleSA9IGtleTtcbiAgICAgICAgICAgIGlmIChjb21tYW5kW2xlZ2FjeUtleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtMRUdBQ1lfRklORF9PUFRJT05TX01BUFtsZWdhY3lLZXldXSA9ICgwLCB1dGlsc18xLmRlZXBDb3B5KShjb21tYW5kW2xlZ2FjeUtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgT1BfUVVFUllfS0VZUy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBpZiAoY29tbWFuZFtrZXldKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBjb21tYW5kW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY29tbWFuZC5wcmUzMkxpbWl0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5saW1pdCA9IGNvbW1hbmQucHJlMzJMaW1pdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tbWFuZC5xdWVyeS4kZXhwbGFpbikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXhwbGFpbjogcmVzdWx0IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY29uc3QgY2xvbmVkUXVlcnkgPSB7fTtcbiAgICBjb25zdCBjbG9uZWRDb21tYW5kID0ge307XG4gICAgaWYgKGNvbW1hbmQucXVlcnkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrIGluIGNvbW1hbmQucXVlcnkpIHtcbiAgICAgICAgICAgIGNsb25lZFF1ZXJ5W2tdID0gKDAsIHV0aWxzXzEuZGVlcENvcHkpKGNvbW1hbmQucXVlcnlba10pO1xuICAgICAgICB9XG4gICAgICAgIGNsb25lZENvbW1hbmQucXVlcnkgPSBjbG9uZWRRdWVyeTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrIGluIGNvbW1hbmQpIHtcbiAgICAgICAgaWYgKGsgPT09ICdxdWVyeScpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2xvbmVkQ29tbWFuZFtrXSA9ICgwLCB1dGlsc18xLmRlZXBDb3B5KShjb21tYW5kW2tdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1hbmQucXVlcnkgPyBjbG9uZWRRdWVyeSA6IGNsb25lZENvbW1hbmQ7XG59XG5mdW5jdGlvbiBleHRyYWN0UmVwbHkoY29tbWFuZCwgcmVwbHkpIHtcbiAgICBpZiAoIXJlcGx5KSB7XG4gICAgICAgIHJldHVybiByZXBseTtcbiAgICB9XG4gICAgaWYgKGNvbW1hbmQgaW5zdGFuY2VvZiBjb21tYW5kc18xLk9wTXNnUmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZGVlcENvcHkpKHJlcGx5LnJlc3VsdCA/IHJlcGx5LnJlc3VsdCA6IHJlcGx5KTtcbiAgICB9XG4gICAgLy8gaXMgdGhpcyBhIGxlZ2FjeSBmaW5kIGNvbW1hbmQ/XG4gICAgaWYgKGNvbW1hbmQucXVlcnkgJiYgY29tbWFuZC5xdWVyeS4kcXVlcnkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2s6IDEsXG4gICAgICAgICAgICBjdXJzb3I6IHtcbiAgICAgICAgICAgICAgICBpZDogKDAsIHV0aWxzXzEuZGVlcENvcHkpKHJlcGx5LmN1cnNvcklkKSxcbiAgICAgICAgICAgICAgICBuczogbmFtZXNwYWNlKGNvbW1hbmQpLFxuICAgICAgICAgICAgICAgIGZpcnN0QmF0Y2g6ICgwLCB1dGlsc18xLmRlZXBDb3B5KShyZXBseS5kb2N1bWVudHMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiAoMCwgdXRpbHNfMS5kZWVwQ29weSkocmVwbHkucmVzdWx0ID8gcmVwbHkucmVzdWx0IDogcmVwbHkpO1xufVxuZnVuY3Rpb24gZXh0cmFjdENvbm5lY3Rpb25EZXRhaWxzKGNvbm5lY3Rpb24pIHtcbiAgICBsZXQgY29ubmVjdGlvbklkO1xuICAgIGlmICgnaWQnIGluIGNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29ubmVjdGlvbklkID0gY29ubmVjdGlvbi5pZDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkcmVzczogY29ubmVjdGlvbi5hZGRyZXNzLFxuICAgICAgICBzZXJ2aWNlSWQ6IGNvbm5lY3Rpb24uc2VydmljZUlkLFxuICAgICAgICBjb25uZWN0aW9uSWRcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbWFuZF9tb25pdG9yaW5nX2V2ZW50cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTRU5TSVRJVkVfQ09NTUFORFMiLCJDb21tYW5kRmFpbGVkRXZlbnQiLCJDb21tYW5kU3VjY2VlZGVkRXZlbnQiLCJDb21tYW5kU3RhcnRlZEV2ZW50IiwiY29uc3RhbnRzXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsImNvbW1hbmRzXzEiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb24iLCJjb21tYW5kIiwic2VydmVyQ29ubmVjdGlvbklkIiwibmFtZSIsIkNPTU1BTkRfU1RBUlRFRCIsImNtZCIsImV4dHJhY3RDb21tYW5kIiwiY29tbWFuZE5hbWUiLCJleHRyYWN0Q29tbWFuZE5hbWUiLCJhZGRyZXNzIiwiY29ubmVjdGlvbklkIiwic2VydmljZUlkIiwiZXh0cmFjdENvbm5lY3Rpb25EZXRhaWxzIiwiaGFzIiwiY29tbWFuZE9iaiIsInJlcXVlc3RJZCIsImRhdGFiYXNlTmFtZSIsIm1heWJlUmVkYWN0IiwiaGFzU2VydmljZUlkIiwicmVwbHkiLCJzdGFydGVkIiwiQ09NTUFORF9TVUNDRUVERUQiLCJkdXJhdGlvbiIsImNhbGN1bGF0ZUR1cmF0aW9uSW5NcyIsImV4dHJhY3RSZXBseSIsImVycm9yIiwiQ09NTUFORF9GQUlMRUQiLCJmYWlsdXJlIiwiU2V0IiwiSEVMTE9fQ09NTUFORFMiLCJMRUdBQ1lfSEVMTE9fQ09NTUFORCIsIkxFR0FDWV9IRUxMT19DT01NQU5EX0NBTUVMX0NBU0UiLCJjb21tYW5kRG9jIiwia2V5cyIsIm5hbWVzcGFjZSIsIm5zIiwiY29sbGVjdGlvbk5hbWUiLCJzcGxpdCIsInJlc3VsdCIsInNwZWN1bGF0aXZlQXV0aGVudGljYXRlIiwiTEVHQUNZX0ZJTkRfUVVFUllfTUFQIiwiJHF1ZXJ5IiwiJG9yZGVyYnkiLCIkaGludCIsIiRjb21tZW50IiwiJG1heFNjYW4iLCIkbWF4IiwiJG1pbiIsIiRyZXR1cm5LZXkiLCIkc2hvd0Rpc2tMb2MiLCIkbWF4VGltZU1TIiwiJHNuYXBzaG90IiwiTEVHQUNZX0ZJTkRfT1BUSU9OU19NQVAiLCJudW1iZXJUb1NraXAiLCJudW1iZXJUb1JldHVybiIsInJldHVybkZpZWxkU2VsZWN0b3IiLCJPUF9RVUVSWV9LRVlTIiwiT3BNc2dSZXF1ZXN0IiwiZGVlcENvcHkiLCJxdWVyeSIsImFzc2lnbiIsImZpbmQiLCJmb3JFYWNoIiwia2V5IiwibGVnYWN5S2V5IiwicHJlMzJMaW1pdCIsImxpbWl0IiwiJGV4cGxhaW4iLCJleHBsYWluIiwiY2xvbmVkUXVlcnkiLCJjbG9uZWRDb21tYW5kIiwiayIsIm9rIiwiY3Vyc29yIiwiaWQiLCJjdXJzb3JJZCIsImZpcnN0QmF0Y2giLCJkb2N1bWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/commands.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/commands.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.OpQueryResponse = exports.OpQueryRequest = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/ /** @internal */ class OpQueryRequest {\n    constructor(databaseName, query, options){\n        this.databaseName = databaseName;\n        this.query = query;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== \"string\") {\n            throw new error_1.MongoRuntimeError(\"Database name must be a string for a query\");\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null) throw new error_1.MongoRuntimeError(\"A query document must be specified for query\");\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf(\"\\x00\") !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError(\"Namespace cannot contain a null character\");\n        }\n        // Basic options\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions = typeof options.serializeFunctions === \"boolean\" ? options.serializeFunctions : false;\n        this.ignoreUndefined = typeof options.ignoreUndefined === \"boolean\" ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === \"boolean\" ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === \"boolean\" ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */ incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */ nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */ static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn) this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n        4 + // Flags\n        Buffer.byteLength(this.ns) + 1 + // namespace\n        4 + // numberToSkip\n        4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = totalLength >> 24 & 0xff;\n        header[2] = totalLength >> 16 & 0xff;\n        header[1] = totalLength >> 8 & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = this.requestId >> 24 & 0xff;\n        header[index + 2] = this.requestId >> 16 & 0xff;\n        header[index + 1] = this.requestId >> 8 & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = 0 >> 24 & 0xff;\n        header[index + 2] = 0 >> 16 & 0xff;\n        header[index + 1] = 0 >> 8 & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = constants_1.OP_QUERY >> 24 & 0xff;\n        header[index + 2] = constants_1.OP_QUERY >> 16 & 0xff;\n        header[index + 1] = constants_1.OP_QUERY >> 8 & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = flags >> 24 & 0xff;\n        header[index + 2] = flags >> 16 & 0xff;\n        header[index + 1] = flags >> 8 & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, \"utf8\") + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = this.numberToSkip >> 24 & 0xff;\n        header[index + 2] = this.numberToSkip >> 16 & 0xff;\n        header[index + 1] = this.numberToSkip >> 8 & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = this.numberToReturn >> 24 & 0xff;\n        header[index + 2] = this.numberToReturn >> 16 & 0xff;\n        header[index + 1] = this.numberToReturn >> 8 & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */ class OpQueryResponse {\n    constructor(message, msgHeader, msgBody, opts){\n        this.documents = new Array(0);\n        /** moreToCome is an OP_MSG only concept */ this.moreToCome = false;\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === \"boolean\" ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === \"boolean\" ? this.opts.promoteLongs : true;\n        this.promoteValues = typeof this.opts.promoteValues === \"boolean\" ? this.opts.promoteValues : true;\n        this.promoteBuffers = typeof this.opts.promoteBuffers === \"boolean\" ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === \"boolean\" ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed) return;\n        options = options ?? {};\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        let bsonSize;\n        // Set up the options\n        const _options = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp\n        };\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        // Preallocate document array\n        this.documents = new Array(this.numberReturned);\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for(let i = 0; i < this.numberReturned; i++){\n            bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;\n            // If we have raw results specified slice the return document\n            if (raw) {\n                this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n            } else {\n                this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n            }\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            _options.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], _options);\n            this.documents = [\n                doc\n            ];\n        }\n        // Set parsed\n        this.parsed = true;\n    }\n}\nexports.OpQueryResponse = OpQueryResponse;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */ class OpMsgRequest {\n    constructor(databaseName, command, options){\n        this.databaseName = databaseName;\n        this.command = command;\n        this.options = options;\n        // Basic options needed to be passed in\n        if (command == null) throw new error_1.MongoInvalidArgumentError(\"Query document must be specified for query\");\n        // Basic options\n        this.command.$db = databaseName;\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions = typeof options.serializeFunctions === \"boolean\" ? options.serializeFunctions : false;\n        this.ignoreUndefined = typeof options.ignoreUndefined === \"boolean\" ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === \"boolean\" ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome || false;\n        this.exhaustAllowed = typeof options.exhaustAllowed === \"boolean\" ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n        4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeDocumentSegment(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    makeDocumentSegment(buffers, document) {\n        const payloadTypeBuffer = Buffer.alloc(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length;\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = _requestId + 1 & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */ class OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts){\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === \"boolean\" ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === \"boolean\" ? this.opts.promoteLongs : true;\n        this.promoteValues = typeof this.opts.promoteValues === \"boolean\" ? this.opts.promoteValues : true;\n        this.promoteBuffers = typeof this.opts.promoteBuffers === \"boolean\" ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === \"boolean\" ? this.opts.bsonRegExp : false;\n        this.documents = [];\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed) return;\n        options = options ?? {};\n        this.index = 4;\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        const validation = this.parseBsonSerializationOptions(options);\n        // Set up the options\n        const bsonOptions = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp,\n            validation\n        };\n        while(this.index < this.data.length){\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.slice(this.index, this.index + bsonSize);\n                this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n                this.index += bsonSize;\n            } else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError(\"OP_MSG Payload Type 1 detected unsupported protocol\");\n            }\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            bsonOptions.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], bsonOptions);\n            this.documents = [\n                doc\n            ];\n        }\n        this.parsed = true;\n    }\n    parseBsonSerializationOptions({ enableUtf8Validation }) {\n        if (enableUtf8Validation === false) {\n            return {\n                utf8: false\n            };\n        }\n        return {\n            utf8: {\n                writeErrors: false\n            }\n        };\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */ class OpCompressedRequest {\n    constructor(command, options){\n        this.command = command;\n        this.options = options;\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [\n            msgHeader,\n            compressionDetails,\n            compressedMessage\n        ];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest; //# sourceMappingURL=commands.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/commands.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connect.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connect.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.makeSocket = exports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.performInitialHandshake = exports.makeConnection = exports.connect = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth/auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_2 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nasync function connect(options) {\n    let connection = null;\n    try {\n        const socket = await makeSocket(options);\n        connection = makeConnection(options, socket);\n        await performInitialHandshake(connection, options);\n        return connection;\n    } catch (error) {\n        connection?.destroy();\n        throw error;\n    }\n}\nexports.connect = connect;\nfunction makeConnection(options, socket) {\n    let ConnectionType = options.connectionType ?? connection_1.Connection;\n    if (options.autoEncrypter) {\n        ConnectionType = connection_1.CryptoConnection;\n    }\n    return new ConnectionType(socket, options);\n}\nexports.makeConnection = makeConnection;\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) && !options.authProviders.getOrCreateProvider(credentials.mechanism)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = {\n        ...options\n    };\n    if (typeof options.connectTimeoutMS === \"number\") {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await conn.command((0, utils_1.ns)(\"admin.$cmd\"), handshakeDoc, handshakeOptions);\n    if (!(\"isWritablePrimary\" in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError(\"Driver attempted to initialize in load balancing mode, \" + \"but the server does not support this mode.\");\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        } catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n    // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n    // Once connection is established, command logging can log events (if enabled)\n    conn.established = true;\n}\nexports.performInitialHandshake = performInitialHandshake;\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */ async function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const clientMetadata = await options.extendedMetadata;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? \"hello\" : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: clientMetadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */ exports.LEGAL_TLS_SOCKET_OPTIONS = [\n    \"ALPNProtocols\",\n    \"ca\",\n    \"cert\",\n    \"checkServerIdentity\",\n    \"ciphers\",\n    \"crl\",\n    \"ecdhCurve\",\n    \"key\",\n    \"minDHSize\",\n    \"passphrase\",\n    \"pfx\",\n    \"rejectUnauthorized\",\n    \"secureContext\",\n    \"secureProtocol\",\n    \"servername\",\n    \"session\"\n];\n/** @public */ exports.LEGAL_TCP_SOCKET_OPTIONS = [\n    \"family\",\n    \"hints\",\n    \"localAddress\",\n    \"localPort\",\n    \"lookup\"\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress) throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS){\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === \"string\") {\n        result.path = hostAddress.socketPath;\n        return result;\n    } else if (typeof hostAddress.host === \"string\") {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    } else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS){\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nasync function makeSocket(options) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const existingSocket = options.existingSocket;\n    let socket;\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return makeSocks5Connection({\n            ...options,\n            connectTimeoutMS\n        });\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === \"function\") {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    } else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    } else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    let cancellationHandler = null;\n    const { promise: connectedSocket, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n    if (existingSocket) {\n        resolve(socket);\n    } else {\n        const connectEvent = useTLS ? \"secureConnect\" : \"connect\";\n        socket.once(connectEvent, ()=>resolve(socket)).once(\"error\", (error)=>reject(connectionFailureError(\"error\", error))).once(\"timeout\", ()=>reject(connectionFailureError(\"timeout\"))).once(\"close\", ()=>reject(connectionFailureError(\"close\")));\n        if (options.cancellationToken != null) {\n            cancellationHandler = ()=>reject(connectionFailureError(\"cancel\"));\n            options.cancellationToken.once(\"cancel\", cancellationHandler);\n        }\n    }\n    try {\n        socket = await connectedSocket;\n        return socket;\n    } catch (error) {\n        socket.destroy();\n        throw error;\n    } finally{\n        socket.setTimeout(0);\n        socket.removeAllListeners();\n        if (cancellationHandler != null) {\n            options.cancellationToken?.removeListener(\"cancel\", cancellationHandler);\n        }\n    }\n}\nexports.makeSocket = makeSocket;\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if (\"kModuleError\" in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nasync function makeSocks5Connection(options) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? \"\", options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    const rawSocket = await makeSocket({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    });\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== \"string\" || typeof destination.port !== \"number\") {\n        throw new error_1.MongoInvalidArgumentError(\"Can only make Socks5 connections to TCP hosts\");\n    }\n    socks ??= loadSocks();\n    try {\n        // Then, establish the Socks5 proxy connection:\n        const { socket } = await socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: \"connect\",\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: \"iLoveJavaScript\",\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        });\n        // Finally, now treat the resulting duplex stream as the\n        // socket over which we send and receive wire protocol messages:\n        return await makeSocket({\n            ...options,\n            existingSocket: socket,\n            proxyHost: undefined\n        });\n    } catch (error) {\n        throw connectionFailureError(\"error\", error);\n    }\n}\nfunction connectionFailureError(type, cause) {\n    switch(type){\n        case \"error\":\n            return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), {\n                cause\n            });\n        case \"timeout\":\n            return new error_1.MongoNetworkTimeoutError(\"connection timed out\");\n        case \"close\":\n            return new error_1.MongoNetworkError(\"connection closed\");\n        case \"cancel\":\n            return new error_1.MongoNetworkError(\"connection establishment was cancelled\");\n        default:\n            return new error_1.MongoNetworkError(\"unknown network error\");\n    }\n} //# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9jb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0EsZ0NBQWdDLEdBQUdBLGdDQUFnQyxHQUFHQSxnQ0FBZ0MsR0FBR0EsK0JBQStCLEdBQUdBLHNCQUFzQixHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUNoTixNQUFNUyxNQUFNQyxtQkFBT0EsQ0FBQyxnQkFBSztBQUN6QixNQUFNQyxNQUFNRCxtQkFBT0EsQ0FBQyxnQkFBSztBQUN6QixNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyxtRUFBYztBQUMxQyxNQUFNRyxTQUFTSCxtQkFBT0EsQ0FBQyx5REFBUztBQUNoQyxNQUFNSSxVQUFVSixtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNSyxVQUFVTCxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNTSxrQkFBa0JOLG1CQUFPQSxDQUFDLHlGQUFzQjtBQUN0RCxNQUFNTyxjQUFjUCxtQkFBT0EsQ0FBQyxpRkFBa0I7QUFDOUMsTUFBTVEsZUFBZVIsbUJBQU9BLENBQUMseUVBQWM7QUFDM0MsTUFBTVMsY0FBY1QsbUJBQU9BLENBQUMsbUdBQTJCO0FBQ3ZELGVBQWVGLFFBQVFZLE9BQU87SUFDMUIsSUFBSUMsYUFBYTtJQUNqQixJQUFJO1FBQ0EsTUFBTUMsU0FBUyxNQUFNcEIsV0FBV2tCO1FBQ2hDQyxhQUFhZCxlQUFlYSxTQUFTRTtRQUNyQyxNQUFNaEIsd0JBQXdCZSxZQUFZRDtRQUMxQyxPQUFPQztJQUNYLEVBQ0EsT0FBT0UsT0FBTztRQUNWRixZQUFZRztRQUNaLE1BQU1EO0lBQ1Y7QUFDSjtBQUNBdkIsZUFBZSxHQUFHUTtBQUNsQixTQUFTRCxlQUFlYSxPQUFPLEVBQUVFLE1BQU07SUFDbkMsSUFBSUcsaUJBQWlCTCxRQUFRTSxjQUFjLElBQUlSLGFBQWFTLFVBQVU7SUFDdEUsSUFBSVAsUUFBUVEsYUFBYSxFQUFFO1FBQ3ZCSCxpQkFBaUJQLGFBQWFXLGdCQUFnQjtJQUNsRDtJQUNBLE9BQU8sSUFBSUosZUFBZUgsUUFBUUY7QUFDdEM7QUFDQXBCLHNCQUFzQixHQUFHTztBQUN6QixTQUFTdUIscUJBQXFCQyxLQUFLLEVBQUVYLE9BQU87SUFDeEMsTUFBTVksaUJBQWlCQyxPQUFPRixNQUFNQyxjQUFjO0lBQ2xELE1BQU1FLGlCQUFpQkQsT0FBT0YsTUFBTUcsY0FBYztJQUNsRCxNQUFNQywwQkFBMEIsQ0FBQ0YsT0FBT0csS0FBSyxDQUFDSixtQkFBbUJBLGtCQUFrQmIsWUFBWWtCLDBCQUEwQjtJQUN6SCxNQUFNQyx5QkFBeUIsQ0FBQ0wsT0FBT0csS0FBSyxDQUFDRixtQkFBbUJBLGtCQUFrQmYsWUFBWW9CLDBCQUEwQjtJQUN4SCxJQUFJSix5QkFBeUI7UUFDekIsSUFBSUcsd0JBQXdCO1lBQ3hCLE9BQU87UUFDWDtRQUNBLE1BQU1FLFVBQVUsQ0FBQyxVQUFVLEVBQUVwQixRQUFRcUIsV0FBVyxDQUFDLDhCQUE4QixFQUFFQyxLQUFLQyxTQUFTLENBQUNaLE1BQU1HLGNBQWMsRUFBRSwwREFBMEQsRUFBRWYsWUFBWW9CLDBCQUEwQixDQUFDLFVBQVUsRUFBRXBCLFlBQVl5Qiw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7UUFDaFIsT0FBTyxJQUFJOUIsUUFBUStCLHVCQUF1QixDQUFDTDtJQUMvQztJQUNBLE1BQU1BLFVBQVUsQ0FBQyxVQUFVLEVBQUVwQixRQUFRcUIsV0FBVyxDQUFDLDhCQUE4QixFQUFFQyxLQUFLQyxTQUFTLENBQUNaLE1BQU1DLGNBQWMsS0FBSyxFQUFFLDJEQUEyRCxFQUFFYixZQUFZa0IsMEJBQTBCLENBQUMsVUFBVSxFQUFFbEIsWUFBWTJCLDRCQUE0QixDQUFDLENBQUMsQ0FBQztJQUN0UixPQUFPLElBQUloQyxRQUFRK0IsdUJBQXVCLENBQUNMO0FBQy9DO0FBQ0EsZUFBZWxDLHdCQUF3QnlDLElBQUksRUFBRTNCLE9BQU87SUFDaEQsTUFBTTRCLGNBQWM1QixRQUFRNEIsV0FBVztJQUN2QyxJQUFJQSxhQUFhO1FBQ2IsSUFBSSxDQUFFQSxDQUFBQSxZQUFZQyxTQUFTLEtBQUtoQyxZQUFZaUMsYUFBYSxDQUFDQyxlQUFlLEtBQ3JFLENBQUMvQixRQUFRZ0MsYUFBYSxDQUFDQyxtQkFBbUIsQ0FBQ0wsWUFBWUMsU0FBUyxHQUFHO1lBQ25FLE1BQU0sSUFBSW5DLFFBQVF3Qyx5QkFBeUIsQ0FBQyxDQUFDLGVBQWUsRUFBRU4sWUFBWUMsU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUN4RztJQUNKO0lBQ0EsTUFBTU0sY0FBYyxJQUFJdkMsZ0JBQWdCd0MsV0FBVyxDQUFDVCxNQUFNQyxhQUFhNUI7SUFDdkUyQixLQUFLUSxXQUFXLEdBQUdBO0lBQ25CLE1BQU1FLGVBQWUsTUFBTXBELHlCQUF5QmtEO0lBQ3BELDhIQUE4SDtJQUM5SCxNQUFNRyxtQkFBbUI7UUFBRSxHQUFHdEMsT0FBTztJQUFDO0lBQ3RDLElBQUksT0FBT0EsUUFBUXVDLGdCQUFnQixLQUFLLFVBQVU7UUFDOUMsb0dBQW9HO1FBQ3BHRCxpQkFBaUJFLGVBQWUsR0FBR3hDLFFBQVF1QyxnQkFBZ0I7SUFDL0Q7SUFDQSxNQUFNRSxRQUFRLElBQUlDLE9BQU9DLE9BQU87SUFDaEMsTUFBTUMsV0FBVyxNQUFNakIsS0FBS2tCLE9BQU8sQ0FBQyxDQUFDLEdBQUdsRCxRQUFRbUQsRUFBRSxFQUFFLGVBQWVULGNBQWNDO0lBQ2pGLElBQUksQ0FBRSx3QkFBdUJNLFFBQU8sR0FBSTtRQUNwQyx5Q0FBeUM7UUFDekNBLFNBQVNHLGlCQUFpQixHQUFHSCxRQUFRLENBQUNwRCxZQUFZd0Qsb0JBQW9CLENBQUM7SUFDM0U7SUFDQSxJQUFJSixTQUFTSyxPQUFPLEVBQUU7UUFDbEJ0QixLQUFLc0IsT0FBTyxHQUFHO0lBQ25CO0lBQ0EsTUFBTUMscUJBQXFCeEMscUJBQXFCa0MsVUFBVTVDO0lBQzFELElBQUlrRCxvQkFBb0I7UUFDcEIsTUFBTUE7SUFDVjtJQUNBLElBQUlsRCxRQUFRbUQsWUFBWSxFQUFFO1FBQ3RCLElBQUksQ0FBQ1AsU0FBU1EsU0FBUyxFQUFFO1lBQ3JCLE1BQU0sSUFBSTFELFFBQVErQix1QkFBdUIsQ0FBQyw0REFDdEM7UUFDUjtJQUNKO0lBQ0EsNEVBQTRFO0lBQzVFLHlFQUF5RTtJQUN6RSxrREFBa0Q7SUFDbERFLEtBQUtoQixLQUFLLEdBQUdpQztJQUNiakIsS0FBSzBCLFdBQVcsR0FBRyxJQUFJWCxPQUFPQyxPQUFPLEtBQUtGO0lBQzFDLElBQUksQ0FBQ0csU0FBU1UsV0FBVyxJQUFJMUIsYUFBYTtRQUN0QyxxQ0FBcUM7UUFDckNPLFlBQVlTLFFBQVEsR0FBR0E7UUFDdkIsTUFBTVcsc0JBQXNCM0IsWUFBWTRCLG9CQUFvQixDQUFDWjtRQUM3RCxNQUFNYSxXQUFXekQsUUFBUWdDLGFBQWEsQ0FBQ0MsbUJBQW1CLENBQUNzQixvQkFBb0IxQixTQUFTO1FBQ3hGLElBQUksQ0FBQzRCLFVBQVU7WUFDWCxNQUFNLElBQUkvRCxRQUFRd0MseUJBQXlCLENBQUMsQ0FBQyxvQkFBb0IsRUFBRXFCLG9CQUFvQjFCLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDL0c7UUFDQSxJQUFJO1lBQ0EsTUFBTTRCLFNBQVNDLElBQUksQ0FBQ3ZCO1FBQ3hCLEVBQ0EsT0FBT2hDLE9BQU87WUFDVixJQUFJQSxpQkFBaUJULFFBQVFpRSxVQUFVLEVBQUU7Z0JBQ3JDeEQsTUFBTXlELGFBQWEsQ0FBQ2xFLFFBQVFtRSxlQUFlLENBQUNDLGNBQWM7Z0JBQzFELElBQUksQ0FBQyxHQUFHcEUsUUFBUXFFLHdCQUF3QixFQUFFNUQsT0FBT3lDLFNBQVNoQyxjQUFjLEdBQUc7b0JBQ3ZFVCxNQUFNeUQsYUFBYSxDQUFDbEUsUUFBUW1FLGVBQWUsQ0FBQ0csbUJBQW1CO2dCQUNuRTtZQUNKO1lBQ0EsTUFBTTdEO1FBQ1Y7SUFDSjtJQUNBLDBIQUEwSDtJQUMxSCw4RUFBOEU7SUFDOUV3QixLQUFLc0MsV0FBVyxHQUFHO0FBQ3ZCO0FBQ0FyRiwrQkFBK0IsR0FBR007QUFDbEM7Ozs7Q0FJQyxHQUNELGVBQWVELHlCQUF5QmtELFdBQVc7SUFDL0MsTUFBTW5DLFVBQVVtQyxZQUFZbkMsT0FBTztJQUNuQyxNQUFNa0UsY0FBY2xFLFFBQVFrRSxXQUFXLEdBQUdsRSxRQUFRa0UsV0FBVyxHQUFHLEVBQUU7SUFDbEUsTUFBTSxFQUFFQyxTQUFTLEVBQUUsR0FBR2hDLFlBQVlsQyxVQUFVO0lBQzVDLE1BQU1tRSxpQkFBaUIsTUFBTXBFLFFBQVFxRSxnQkFBZ0I7SUFDckQsTUFBTWhDLGVBQWU7UUFDakIsQ0FBQzhCLFdBQVdHLFdBQVd0RSxRQUFRbUQsWUFBWSxLQUFLLE9BQU8sVUFBVTNELFlBQVl3RCxvQkFBb0IsQ0FBQyxFQUFFO1FBQ3BHQyxTQUFTO1FBQ1RzQixRQUFRSDtRQUNSSSxhQUFhTjtJQUNqQjtJQUNBLElBQUlsRSxRQUFRbUQsWUFBWSxLQUFLLE1BQU07UUFDL0JkLGFBQWFjLFlBQVksR0FBRztJQUNoQztJQUNBLE1BQU12QixjQUFjTyxZQUFZUCxXQUFXO0lBQzNDLElBQUlBLGFBQWE7UUFDYixJQUFJQSxZQUFZQyxTQUFTLEtBQUtoQyxZQUFZaUMsYUFBYSxDQUFDQyxlQUFlLElBQUlILFlBQVk2QyxRQUFRLEVBQUU7WUFDN0ZwQyxhQUFhcUMsa0JBQWtCLEdBQUcsQ0FBQyxFQUFFOUMsWUFBWStDLE1BQU0sQ0FBQyxDQUFDLEVBQUUvQyxZQUFZNkMsUUFBUSxDQUFDLENBQUM7WUFDakYsTUFBTWhCLFdBQVd0QixZQUFZbkMsT0FBTyxDQUFDZ0MsYUFBYSxDQUFDQyxtQkFBbUIsQ0FBQ3BDLFlBQVlpQyxhQUFhLENBQUM4QyxvQkFBb0I7WUFDckgsSUFBSSxDQUFDbkIsVUFBVTtnQkFDWCx5Q0FBeUM7Z0JBQ3pDLE1BQU0sSUFBSS9ELFFBQVF3Qyx5QkFBeUIsQ0FBQyxDQUFDLG9CQUFvQixFQUFFckMsWUFBWWlDLGFBQWEsQ0FBQzhDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQztZQUNoSTtZQUNBLE9BQU9uQixTQUFTb0IsT0FBTyxDQUFDeEMsY0FBY0Y7UUFDMUM7UUFDQSxNQUFNc0IsV0FBV3RCLFlBQVluQyxPQUFPLENBQUNnQyxhQUFhLENBQUNDLG1CQUFtQixDQUFDTCxZQUFZQyxTQUFTO1FBQzVGLElBQUksQ0FBQzRCLFVBQVU7WUFDWCxNQUFNLElBQUkvRCxRQUFRd0MseUJBQXlCLENBQUMsQ0FBQyxvQkFBb0IsRUFBRU4sWUFBWUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUN2RztRQUNBLE9BQU80QixTQUFTb0IsT0FBTyxDQUFDeEMsY0FBY0Y7SUFDMUM7SUFDQSxPQUFPRTtBQUNYO0FBQ0F6RCxnQ0FBZ0MsR0FBR0s7QUFDbkMsWUFBWSxHQUNaTCxnQ0FBZ0MsR0FBRztJQUMvQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsWUFBWSxHQUNaQSxnQ0FBZ0MsR0FBRztJQUMvQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxTQUFTa0csb0JBQW9COUUsT0FBTztJQUNoQyxNQUFNcUIsY0FBY3JCLFFBQVFxQixXQUFXO0lBQ3ZDLElBQUksQ0FBQ0EsYUFDRCxNQUFNLElBQUkzQixRQUFRd0MseUJBQXlCLENBQUM7SUFDaEQsTUFBTTZDLFNBQVMsQ0FBQztJQUNoQixLQUFLLE1BQU1DLFFBQVFwRyxRQUFRRyx3QkFBd0IsQ0FBRTtRQUNqRCxJQUFJaUIsT0FBTyxDQUFDZ0YsS0FBSyxJQUFJLE1BQU07WUFDdkJELE1BQU0sQ0FBQ0MsS0FBSyxHQUFHaEYsT0FBTyxDQUFDZ0YsS0FBSztRQUNoQztJQUNKO0lBQ0EsSUFBSSxPQUFPM0QsWUFBWTRELFVBQVUsS0FBSyxVQUFVO1FBQzVDRixPQUFPRyxJQUFJLEdBQUc3RCxZQUFZNEQsVUFBVTtRQUNwQyxPQUFPRjtJQUNYLE9BQ0ssSUFBSSxPQUFPMUQsWUFBWThELElBQUksS0FBSyxVQUFVO1FBQzNDSixPQUFPSSxJQUFJLEdBQUc5RCxZQUFZOEQsSUFBSTtRQUM5QkosT0FBT0ssSUFBSSxHQUFHL0QsWUFBWStELElBQUk7UUFDOUIsT0FBT0w7SUFDWCxPQUNLO1FBQ0QseURBQXlEO1FBQ3pELGlFQUFpRTtRQUNqRSxrQkFBa0I7UUFDbEIsTUFBTSxJQUFJckYsUUFBUTJGLGlCQUFpQixDQUFDLENBQUMsdUJBQXVCLEVBQUUvRCxLQUFLQyxTQUFTLENBQUNGLGFBQWEsQ0FBQztJQUMvRjtBQUNKO0FBQ0EsU0FBU2lFLGdCQUFnQnRGLE9BQU87SUFDNUIsTUFBTStFLFNBQVNELG9CQUFvQjlFO0lBQ25DLDZCQUE2QjtJQUM3QixLQUFLLE1BQU1nRixRQUFRcEcsUUFBUUksd0JBQXdCLENBQUU7UUFDakQsSUFBSWdCLE9BQU8sQ0FBQ2dGLEtBQUssSUFBSSxNQUFNO1lBQ3ZCRCxNQUFNLENBQUNDLEtBQUssR0FBR2hGLE9BQU8sQ0FBQ2dGLEtBQUs7UUFDaEM7SUFDSjtJQUNBLElBQUloRixRQUFRdUYsY0FBYyxFQUFFO1FBQ3hCUixPQUFPN0UsTUFBTSxHQUFHRixRQUFRdUYsY0FBYztJQUMxQztJQUNBLG9EQUFvRDtJQUNwRCxJQUFJUixPQUFPUyxVQUFVLElBQUksUUFBUVQsT0FBT0ksSUFBSSxJQUFJLENBQUM5RixJQUFJb0csSUFBSSxDQUFDVixPQUFPSSxJQUFJLEdBQUc7UUFDcEVKLE9BQU9TLFVBQVUsR0FBR1QsT0FBT0ksSUFBSTtJQUNuQztJQUNBLE9BQU9KO0FBQ1g7QUFDQSxlQUFlakcsV0FBV2tCLE9BQU87SUFDN0IsTUFBTTBGLFNBQVMxRixRQUFRVCxHQUFHLElBQUk7SUFDOUIsTUFBTW9HLFVBQVUzRixRQUFRMkYsT0FBTyxJQUFJO0lBQ25DLE1BQU1wRCxtQkFBbUJ2QyxRQUFRdUMsZ0JBQWdCLElBQUk7SUFDckQsTUFBTWdELGlCQUFpQnZGLFFBQVF1RixjQUFjO0lBQzdDLElBQUlyRjtJQUNKLElBQUlGLFFBQVE0RixTQUFTLElBQUksTUFBTTtRQUMzQix1Q0FBdUM7UUFDdkMsT0FBT0MscUJBQXFCO1lBQ3hCLEdBQUc3RixPQUFPO1lBQ1Z1QztRQUNKO0lBQ0o7SUFDQSxJQUFJbUQsUUFBUTtRQUNSLE1BQU1JLFlBQVl2RyxJQUFJSCxPQUFPLENBQUNrRyxnQkFBZ0J0RjtRQUM5QyxJQUFJLE9BQU84RixVQUFVQyxvQkFBb0IsS0FBSyxZQUFZO1lBQ3RERCxVQUFVQyxvQkFBb0I7UUFDbEM7UUFDQTdGLFNBQVM0RjtJQUNiLE9BQ0ssSUFBSVAsZ0JBQWdCO1FBQ3JCLDRFQUE0RTtRQUM1RSx3RUFBd0U7UUFDeEUsd0NBQXdDO1FBQ3hDckYsU0FBU3FGO0lBQ2IsT0FDSztRQUNEckYsU0FBU2IsSUFBSTJHLGdCQUFnQixDQUFDbEIsb0JBQW9COUU7SUFDdEQ7SUFDQUUsT0FBTytGLFlBQVksQ0FBQyxNQUFNO0lBQzFCL0YsT0FBT2dHLFVBQVUsQ0FBQzNEO0lBQ2xCckMsT0FBT2lHLFVBQVUsQ0FBQ1I7SUFDbEIsSUFBSVMsc0JBQXNCO0lBQzFCLE1BQU0sRUFBRUMsU0FBU0MsZUFBZSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRzdHLFFBQVE4RyxvQkFBb0I7SUFDdEYsSUFBSWxCLGdCQUFnQjtRQUNoQmdCLFFBQVFyRztJQUNaLE9BQ0s7UUFDRCxNQUFNd0csZUFBZWhCLFNBQVMsa0JBQWtCO1FBQ2hEeEYsT0FDS3lHLElBQUksQ0FBQ0QsY0FBYyxJQUFNSCxRQUFRckcsU0FDakN5RyxJQUFJLENBQUMsU0FBU3hHLENBQUFBLFFBQVNxRyxPQUFPSSx1QkFBdUIsU0FBU3pHLFNBQzlEd0csSUFBSSxDQUFDLFdBQVcsSUFBTUgsT0FBT0ksdUJBQXVCLGFBQ3BERCxJQUFJLENBQUMsU0FBUyxJQUFNSCxPQUFPSSx1QkFBdUI7UUFDdkQsSUFBSTVHLFFBQVE2RyxpQkFBaUIsSUFBSSxNQUFNO1lBQ25DVCxzQkFBc0IsSUFBTUksT0FBT0ksdUJBQXVCO1lBQzFENUcsUUFBUTZHLGlCQUFpQixDQUFDRixJQUFJLENBQUMsVUFBVVA7UUFDN0M7SUFDSjtJQUNBLElBQUk7UUFDQWxHLFNBQVMsTUFBTW9HO1FBQ2YsT0FBT3BHO0lBQ1gsRUFDQSxPQUFPQyxPQUFPO1FBQ1ZELE9BQU9FLE9BQU87UUFDZCxNQUFNRDtJQUNWLFNBQ1E7UUFDSkQsT0FBT2dHLFVBQVUsQ0FBQztRQUNsQmhHLE9BQU80RyxrQkFBa0I7UUFDekIsSUFBSVYsdUJBQXVCLE1BQU07WUFDN0JwRyxRQUFRNkcsaUJBQWlCLEVBQUVFLGVBQWUsVUFBVVg7UUFDeEQ7SUFDSjtBQUNKO0FBQ0F4SCxrQkFBa0IsR0FBR0U7QUFDckIsSUFBSWtJLFFBQVE7QUFDWixTQUFTQztJQUNMLElBQUlELFNBQVMsTUFBTTtRQUNmLE1BQU1FLGNBQWMsQ0FBQyxHQUFHekgsT0FBTzBILFFBQVE7UUFDdkMsSUFBSSxrQkFBa0JELGFBQWE7WUFDL0IsTUFBTUEsWUFBWUUsWUFBWTtRQUNsQztRQUNBSixRQUFRRTtJQUNaO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLGVBQWVuQixxQkFBcUI3RixPQUFPO0lBQ3ZDLE1BQU1xQixjQUFjMUIsUUFBUTBILFdBQVcsQ0FBQ0MsWUFBWSxDQUFDdEgsUUFBUTRGLFNBQVMsSUFBSSxJQUMxRTVGLFFBQVF1SCxTQUFTLElBQUk7SUFDckIsNkNBQTZDO0lBQzdDLE1BQU1DLFlBQVksTUFBTTFJLFdBQVc7UUFDL0IsR0FBR2tCLE9BQU87UUFDVnFCO1FBQ0E5QixLQUFLO1FBQ0xxRyxXQUFXNkI7SUFDZjtJQUNBLE1BQU1DLGNBQWM1QyxvQkFBb0I5RTtJQUN4QyxJQUFJLE9BQU8wSCxZQUFZdkMsSUFBSSxLQUFLLFlBQVksT0FBT3VDLFlBQVl0QyxJQUFJLEtBQUssVUFBVTtRQUM5RSxNQUFNLElBQUkxRixRQUFRd0MseUJBQXlCLENBQUM7SUFDaEQ7SUFDQThFLFVBQVVDO0lBQ1YsSUFBSTtRQUNBLCtDQUErQztRQUMvQyxNQUFNLEVBQUUvRyxNQUFNLEVBQUUsR0FBRyxNQUFNOEcsTUFBTVcsV0FBVyxDQUFDM0IsZ0JBQWdCLENBQUM7WUFDeEQ0QixpQkFBaUJKO1lBQ2pCSyxTQUFTN0gsUUFBUXVDLGdCQUFnQjtZQUNqQ00sU0FBUztZQUNUNkUsYUFBYTtnQkFDVHZDLE1BQU11QyxZQUFZdkMsSUFBSTtnQkFDdEJDLE1BQU1zQyxZQUFZdEMsSUFBSTtZQUMxQjtZQUNBMEMsT0FBTztnQkFDSCw0REFBNEQ7Z0JBQzVEM0MsTUFBTTtnQkFDTkMsTUFBTTtnQkFDTjJDLE1BQU07Z0JBQ05DLFFBQVFoSSxRQUFRaUksYUFBYSxJQUFJUjtnQkFDakNTLFVBQVVsSSxRQUFRbUksYUFBYSxJQUFJVjtZQUN2QztRQUNKO1FBQ0Esd0RBQXdEO1FBQ3hELGdFQUFnRTtRQUNoRSxPQUFPLE1BQU0zSSxXQUFXO1lBQ3BCLEdBQUdrQixPQUFPO1lBQ1Z1RixnQkFBZ0JyRjtZQUNoQjBGLFdBQVc2QjtRQUNmO0lBQ0osRUFDQSxPQUFPdEgsT0FBTztRQUNWLE1BQU15Ryx1QkFBdUIsU0FBU3pHO0lBQzFDO0FBQ0o7QUFDQSxTQUFTeUcsdUJBQXVCbUIsSUFBSSxFQUFFSyxLQUFLO0lBQ3ZDLE9BQVFMO1FBQ0osS0FBSztZQUNELE9BQU8sSUFBSXJJLFFBQVEySSxpQkFBaUIsQ0FBQzNJLFFBQVFpRSxVQUFVLENBQUMyRSxpQkFBaUIsQ0FBQ0YsUUFBUTtnQkFBRUE7WUFBTTtRQUM5RixLQUFLO1lBQ0QsT0FBTyxJQUFJMUksUUFBUTZJLHdCQUF3QixDQUFDO1FBQ2hELEtBQUs7WUFDRCxPQUFPLElBQUk3SSxRQUFRMkksaUJBQWlCLENBQUM7UUFDekMsS0FBSztZQUNELE9BQU8sSUFBSTNJLFFBQVEySSxpQkFBaUIsQ0FBQztRQUN6QztZQUNJLE9BQU8sSUFBSTNJLFFBQVEySSxpQkFBaUIsQ0FBQztJQUM3QztBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2Nvbm5lY3QuanM/NzM0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFrZVNvY2tldCA9IGV4cG9ydHMuTEVHQUxfVENQX1NPQ0tFVF9PUFRJT05TID0gZXhwb3J0cy5MRUdBTF9UTFNfU09DS0VUX09QVElPTlMgPSBleHBvcnRzLnByZXBhcmVIYW5kc2hha2VEb2N1bWVudCA9IGV4cG9ydHMucGVyZm9ybUluaXRpYWxIYW5kc2hha2UgPSBleHBvcnRzLm1ha2VDb25uZWN0aW9uID0gZXhwb3J0cy5jb25uZWN0ID0gdm9pZCAwO1xuY29uc3QgbmV0ID0gcmVxdWlyZShcIm5ldFwiKTtcbmNvbnN0IHRscyA9IHJlcXVpcmUoXCJ0bHNcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5jb25zdCBkZXBzXzEgPSByZXF1aXJlKFwiLi4vZGVwc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aC9hdXRoX3Byb3ZpZGVyXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi9hdXRoL3Byb3ZpZGVyc1wiKTtcbmNvbnN0IGNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2Nvbm5lY3Rpb25cIik7XG5jb25zdCBjb25zdGFudHNfMiA9IHJlcXVpcmUoXCIuL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzXCIpO1xuYXN5bmMgZnVuY3Rpb24gY29ubmVjdChvcHRpb25zKSB7XG4gICAgbGV0IGNvbm5lY3Rpb24gPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNvY2tldCA9IGF3YWl0IG1ha2VTb2NrZXQob3B0aW9ucyk7XG4gICAgICAgIGNvbm5lY3Rpb24gPSBtYWtlQ29ubmVjdGlvbihvcHRpb25zLCBzb2NrZXQpO1xuICAgICAgICBhd2FpdCBwZXJmb3JtSW5pdGlhbEhhbmRzaGFrZShjb25uZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25uZWN0aW9uPy5kZXN0cm95KCk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cbmV4cG9ydHMuY29ubmVjdCA9IGNvbm5lY3Q7XG5mdW5jdGlvbiBtYWtlQ29ubmVjdGlvbihvcHRpb25zLCBzb2NrZXQpIHtcbiAgICBsZXQgQ29ubmVjdGlvblR5cGUgPSBvcHRpb25zLmNvbm5lY3Rpb25UeXBlID8/IGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uO1xuICAgIGlmIChvcHRpb25zLmF1dG9FbmNyeXB0ZXIpIHtcbiAgICAgICAgQ29ubmVjdGlvblR5cGUgPSBjb25uZWN0aW9uXzEuQ3J5cHRvQ29ubmVjdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb25uZWN0aW9uVHlwZShzb2NrZXQsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5tYWtlQ29ubmVjdGlvbiA9IG1ha2VDb25uZWN0aW9uO1xuZnVuY3Rpb24gY2hlY2tTdXBwb3J0ZWRTZXJ2ZXIoaGVsbG8sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBtYXhXaXJlVmVyc2lvbiA9IE51bWJlcihoZWxsby5tYXhXaXJlVmVyc2lvbik7XG4gICAgY29uc3QgbWluV2lyZVZlcnNpb24gPSBOdW1iZXIoaGVsbG8ubWluV2lyZVZlcnNpb24pO1xuICAgIGNvbnN0IHNlcnZlclZlcnNpb25IaWdoRW5vdWdoID0gIU51bWJlci5pc05hTihtYXhXaXJlVmVyc2lvbikgJiYgbWF4V2lyZVZlcnNpb24gPj0gY29uc3RhbnRzXzIuTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT047XG4gICAgY29uc3Qgc2VydmVyVmVyc2lvbkxvd0Vub3VnaCA9ICFOdW1iZXIuaXNOYU4obWluV2lyZVZlcnNpb24pICYmIG1pbldpcmVWZXJzaW9uIDw9IGNvbnN0YW50c18yLk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OO1xuICAgIGlmIChzZXJ2ZXJWZXJzaW9uSGlnaEVub3VnaCkge1xuICAgICAgICBpZiAoc2VydmVyVmVyc2lvbkxvd0Vub3VnaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBTZXJ2ZXIgYXQgJHtvcHRpb25zLmhvc3RBZGRyZXNzfSByZXBvcnRzIG1pbmltdW0gd2lyZSB2ZXJzaW9uICR7SlNPTi5zdHJpbmdpZnkoaGVsbG8ubWluV2lyZVZlcnNpb24pfSwgYnV0IHRoaXMgdmVyc2lvbiBvZiB0aGUgTm9kZS5qcyBEcml2ZXIgcmVxdWlyZXMgYXQgbW9zdCAke2NvbnN0YW50c18yLk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OfSAoTW9uZ29EQiAke2NvbnN0YW50c18yLk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT059KWA7XG4gICAgICAgIHJldHVybiBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IGBTZXJ2ZXIgYXQgJHtvcHRpb25zLmhvc3RBZGRyZXNzfSByZXBvcnRzIG1heGltdW0gd2lyZSB2ZXJzaW9uICR7SlNPTi5zdHJpbmdpZnkoaGVsbG8ubWF4V2lyZVZlcnNpb24pID8/IDB9LCBidXQgdGhpcyB2ZXJzaW9uIG9mIHRoZSBOb2RlLmpzIERyaXZlciByZXF1aXJlcyBhdCBsZWFzdCAke2NvbnN0YW50c18yLk1JTl9TVVBQT1JURURfV0lSRV9WRVJTSU9OfSAoTW9uZ29EQiAke2NvbnN0YW50c18yLk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT059KWA7XG4gICAgcmV0dXJuIG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKG1lc3NhZ2UpO1xufVxuYXN5bmMgZnVuY3Rpb24gcGVyZm9ybUluaXRpYWxIYW5kc2hha2UoY29ubiwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscztcbiAgICBpZiAoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKCEoY3JlZGVudGlhbHMubWVjaGFuaXNtID09PSBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfREVGQVVMVCkgJiZcbiAgICAgICAgICAgICFvcHRpb25zLmF1dGhQcm92aWRlcnMuZ2V0T3JDcmVhdGVQcm92aWRlcihjcmVkZW50aWFscy5tZWNoYW5pc20pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBBdXRoTWVjaGFuaXNtICcke2NyZWRlbnRpYWxzLm1lY2hhbmlzbX0nIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhdXRoQ29udGV4dCA9IG5ldyBhdXRoX3Byb3ZpZGVyXzEuQXV0aENvbnRleHQoY29ubiwgY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuICAgIGNvbm4uYXV0aENvbnRleHQgPSBhdXRoQ29udGV4dDtcbiAgICBjb25zdCBoYW5kc2hha2VEb2MgPSBhd2FpdCBwcmVwYXJlSGFuZHNoYWtlRG9jdW1lbnQoYXV0aENvbnRleHQpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IFRPRE8oTk9ERS01MTQxKTogVGhlIG9wdGlvbnMgbmVlZCB0byBiZSBmaWx0ZXJlZCBwcm9wZXJseSwgQ29ubmVjdGlvbiBvcHRpb25zIGRpZmZlciBmcm9tIENvbW1hbmQgb3B0aW9uc1xuICAgIGNvbnN0IGhhbmRzaGFrZU9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29ubmVjdFRpbWVvdXRNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gVGhlIGhhbmRzaGFrZSB0ZWNobmljYWxseSBpcyBhIG1vbml0b3JpbmcgY2hlY2ssIHNvIGl0cyBzb2NrZXQgdGltZW91dCBzaG91bGQgYmUgY29ubmVjdFRpbWVvdXRNU1xuICAgICAgICBoYW5kc2hha2VPcHRpb25zLnNvY2tldFRpbWVvdXRNUyA9IG9wdGlvbnMuY29ubmVjdFRpbWVvdXRNUztcbiAgICB9XG4gICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvbm4uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJ2FkbWluLiRjbWQnKSwgaGFuZHNoYWtlRG9jLCBoYW5kc2hha2VPcHRpb25zKTtcbiAgICBpZiAoISgnaXNXcml0YWJsZVByaW1hcnknIGluIHJlc3BvbnNlKSkge1xuICAgICAgICAvLyBQcm92aWRlIGhlbGxvLXN0eWxlIHJlc3BvbnNlIGRvY3VtZW50LlxuICAgICAgICByZXNwb25zZS5pc1dyaXRhYmxlUHJpbWFyeSA9IHJlc3BvbnNlW2NvbnN0YW50c18xLkxFR0FDWV9IRUxMT19DT01NQU5EXTtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlLmhlbGxvT2spIHtcbiAgICAgICAgY29ubi5oZWxsb09rID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3VwcG9ydGVkU2VydmVyRXJyID0gY2hlY2tTdXBwb3J0ZWRTZXJ2ZXIocmVzcG9uc2UsIG9wdGlvbnMpO1xuICAgIGlmIChzdXBwb3J0ZWRTZXJ2ZXJFcnIpIHtcbiAgICAgICAgdGhyb3cgc3VwcG9ydGVkU2VydmVyRXJyO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5zZXJ2aWNlSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKCdEcml2ZXIgYXR0ZW1wdGVkIHRvIGluaXRpYWxpemUgaW4gbG9hZCBiYWxhbmNpbmcgbW9kZSwgJyArXG4gICAgICAgICAgICAgICAgJ2J1dCB0aGUgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBtb2RlLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoaXMgaXMgbWV0YWRhdGEgYXR0YWNoZWQgdG8gdGhlIGNvbm5lY3Rpb24gd2hpbGUgcG9ydGluZyBhd2F5IGZyb21cbiAgICAvLyAgICAgICBoYW5kc2hha2UgYmVpbmcgZG9uZSBpbiB0aGUgYFNlcnZlcmAgY2xhc3MuIExpa2VseSwgaXQgc2hvdWxkIGJlXG4gICAgLy8gICAgICAgcmVsb2NhdGVkLCBvciBhdCB2ZXJ5IGxlYXN0IHJlc3RydWN0dXJlZC5cbiAgICBjb25uLmhlbGxvID0gcmVzcG9uc2U7XG4gICAgY29ubi5sYXN0SGVsbG9NUyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQ7XG4gICAgaWYgKCFyZXNwb25zZS5hcmJpdGVyT25seSAmJiBjcmVkZW50aWFscykge1xuICAgICAgICAvLyBzdG9yZSB0aGUgcmVzcG9uc2Ugb24gYXV0aCBjb250ZXh0XG4gICAgICAgIGF1dGhDb250ZXh0LnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkQ3JlZGVudGlhbHMgPSBjcmVkZW50aWFscy5yZXNvbHZlQXV0aE1lY2hhbmlzbShyZXNwb25zZSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gb3B0aW9ucy5hdXRoUHJvdmlkZXJzLmdldE9yQ3JlYXRlUHJvdmlkZXIocmVzb2x2ZWRDcmVkZW50aWFscy5tZWNoYW5pc20pO1xuICAgICAgICBpZiAoIXByb3ZpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBObyBBdXRoUHJvdmlkZXIgZm9yICR7cmVzb2x2ZWRDcmVkZW50aWFscy5tZWNoYW5pc219IGRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHByb3ZpZGVyLmF1dGgoYXV0aENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IuYWRkRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5IYW5kc2hha2VFcnJvcik7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBlcnJvcl8xLm5lZWRzUmV0cnlhYmxlV3JpdGVMYWJlbCkoZXJyb3IsIHJlc3BvbnNlLm1heFdpcmVWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlJldHJ5YWJsZVdyaXRlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbm5lY3Rpb24gZXN0YWJsaXNobWVudCBpcyBzb2NrZXQgY3JlYXRpb24gKHRjcCBoYW5kc2hha2UsIHRscyBoYW5kc2hha2UsIE1vbmdvREIgaGFuZHNoYWtlIChzYXNsU3RhcnQsIHNhc2xDb250aW51ZSkpXG4gICAgLy8gT25jZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLCBjb21tYW5kIGxvZ2dpbmcgY2FuIGxvZyBldmVudHMgKGlmIGVuYWJsZWQpXG4gICAgY29ubi5lc3RhYmxpc2hlZCA9IHRydWU7XG59XG5leHBvcnRzLnBlcmZvcm1Jbml0aWFsSGFuZHNoYWtlID0gcGVyZm9ybUluaXRpYWxIYW5kc2hha2U7XG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgb25seSBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICovXG5hc3luYyBmdW5jdGlvbiBwcmVwYXJlSGFuZHNoYWtlRG9jdW1lbnQoYXV0aENvbnRleHQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gYXV0aENvbnRleHQub3B0aW9ucztcbiAgICBjb25zdCBjb21wcmVzc29ycyA9IG9wdGlvbnMuY29tcHJlc3NvcnMgPyBvcHRpb25zLmNvbXByZXNzb3JzIDogW107XG4gICAgY29uc3QgeyBzZXJ2ZXJBcGkgfSA9IGF1dGhDb250ZXh0LmNvbm5lY3Rpb247XG4gICAgY29uc3QgY2xpZW50TWV0YWRhdGEgPSBhd2FpdCBvcHRpb25zLmV4dGVuZGVkTWV0YWRhdGE7XG4gICAgY29uc3QgaGFuZHNoYWtlRG9jID0ge1xuICAgICAgICBbc2VydmVyQXBpPy52ZXJzaW9uIHx8IG9wdGlvbnMubG9hZEJhbGFuY2VkID09PSB0cnVlID8gJ2hlbGxvJyA6IGNvbnN0YW50c18xLkxFR0FDWV9IRUxMT19DT01NQU5EXTogMSxcbiAgICAgICAgaGVsbG9PazogdHJ1ZSxcbiAgICAgICAgY2xpZW50OiBjbGllbnRNZXRhZGF0YSxcbiAgICAgICAgY29tcHJlc3Npb246IGNvbXByZXNzb3JzXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5sb2FkQmFsYW5jZWQgPT09IHRydWUpIHtcbiAgICAgICAgaGFuZHNoYWtlRG9jLmxvYWRCYWxhbmNlZCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXV0aENvbnRleHQuY3JlZGVudGlhbHM7XG4gICAgaWYgKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGlmIChjcmVkZW50aWFscy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9ERUZBVUxUICYmIGNyZWRlbnRpYWxzLnVzZXJuYW1lKSB7XG4gICAgICAgICAgICBoYW5kc2hha2VEb2Muc2FzbFN1cHBvcnRlZE1lY2hzID0gYCR7Y3JlZGVudGlhbHMuc291cmNlfS4ke2NyZWRlbnRpYWxzLnVzZXJuYW1lfWA7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF1dGhDb250ZXh0Lm9wdGlvbnMuYXV0aFByb3ZpZGVycy5nZXRPckNyZWF0ZVByb3ZpZGVyKHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9TQ1JBTV9TSEEyNTYpO1xuICAgICAgICAgICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgYXV0aCBtZWNoYW5pc20gaXMgYWx3YXlzIHByZXNlbnQuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgTm8gQXV0aFByb3ZpZGVyIGZvciAke3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9TQ1JBTV9TSEEyNTZ9IGRlZmluZWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXIucHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm92aWRlciA9IGF1dGhDb250ZXh0Lm9wdGlvbnMuYXV0aFByb3ZpZGVycy5nZXRPckNyZWF0ZVByb3ZpZGVyKGNyZWRlbnRpYWxzLm1lY2hhbmlzbSk7XG4gICAgICAgIGlmICghcHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYE5vIEF1dGhQcm92aWRlciBmb3IgJHtjcmVkZW50aWFscy5tZWNoYW5pc219IGRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyLnByZXBhcmUoaGFuZHNoYWtlRG9jLCBhdXRoQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBoYW5kc2hha2VEb2M7XG59XG5leHBvcnRzLnByZXBhcmVIYW5kc2hha2VEb2N1bWVudCA9IHByZXBhcmVIYW5kc2hha2VEb2N1bWVudDtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkxFR0FMX1RMU19TT0NLRVRfT1BUSU9OUyA9IFtcbiAgICAnQUxQTlByb3RvY29scycsXG4gICAgJ2NhJyxcbiAgICAnY2VydCcsXG4gICAgJ2NoZWNrU2VydmVySWRlbnRpdHknLFxuICAgICdjaXBoZXJzJyxcbiAgICAnY3JsJyxcbiAgICAnZWNkaEN1cnZlJyxcbiAgICAna2V5JyxcbiAgICAnbWluREhTaXplJyxcbiAgICAncGFzc3BocmFzZScsXG4gICAgJ3BmeCcsXG4gICAgJ3JlamVjdFVuYXV0aG9yaXplZCcsXG4gICAgJ3NlY3VyZUNvbnRleHQnLFxuICAgICdzZWN1cmVQcm90b2NvbCcsXG4gICAgJ3NlcnZlcm5hbWUnLFxuICAgICdzZXNzaW9uJ1xuXTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkxFR0FMX1RDUF9TT0NLRVRfT1BUSU9OUyA9IFtcbiAgICAnZmFtaWx5JyxcbiAgICAnaGludHMnLFxuICAgICdsb2NhbEFkZHJlc3MnLFxuICAgICdsb2NhbFBvcnQnLFxuICAgICdsb29rdXAnXG5dO1xuZnVuY3Rpb24gcGFyc2VDb25uZWN0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgY29uc3QgaG9zdEFkZHJlc3MgPSBvcHRpb25zLmhvc3RBZGRyZXNzO1xuICAgIGlmICghaG9zdEFkZHJlc3MpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcImhvc3RBZGRyZXNzXCIgaXMgcmVxdWlyZWQnKTtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgZXhwb3J0cy5MRUdBTF9UQ1BfU09DS0VUX09QVElPTlMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGhvc3RBZGRyZXNzLnNvY2tldFBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc3VsdC5wYXRoID0gaG9zdEFkZHJlc3Muc29ja2V0UGF0aDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGhvc3RBZGRyZXNzLmhvc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc3VsdC5ob3N0ID0gaG9zdEFkZHJlc3MuaG9zdDtcbiAgICAgICAgcmVzdWx0LnBvcnQgPSBob3N0QWRkcmVzcy5wb3J0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIHNpbmNlIHdlIHNldCB1cCBIb3N0QWRkcmVzc2VzXG4gICAgICAgIC8vIEJ1dCBpZiB3ZSBkb24ndCB0aHJvdyBoZXJlIHRoZSBzb2NrZXQgY291bGQgaGFuZyB1bnRpbCB0aW1lb3V0XG4gICAgICAgIC8vIFRPRE8oTk9ERS0zNDgzKVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcihgVW5leHBlY3RlZCBIb3N0QWRkcmVzcyAke0pTT04uc3RyaW5naWZ5KGhvc3RBZGRyZXNzKX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYXJzZVNzbE9wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlQ29ubmVjdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgLy8gTWVyZ2UgaW4gdmFsaWQgU1NMIG9wdGlvbnNcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgZXhwb3J0cy5MRUdBTF9UTFNfU09DS0VUX09QVElPTlMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5leGlzdGluZ1NvY2tldCkge1xuICAgICAgICByZXN1bHQuc29ja2V0ID0gb3B0aW9ucy5leGlzdGluZ1NvY2tldDtcbiAgICB9XG4gICAgLy8gU2V0IGRlZmF1bHQgc25pIHNlcnZlcm5hbWUgdG8gYmUgdGhlIHNhbWUgYXMgaG9zdFxuICAgIGlmIChyZXN1bHQuc2VydmVybmFtZSA9PSBudWxsICYmIHJlc3VsdC5ob3N0ICYmICFuZXQuaXNJUChyZXN1bHQuaG9zdCkpIHtcbiAgICAgICAgcmVzdWx0LnNlcnZlcm5hbWUgPSByZXN1bHQuaG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmFzeW5jIGZ1bmN0aW9uIG1ha2VTb2NrZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHVzZVRMUyA9IG9wdGlvbnMudGxzID8/IGZhbHNlO1xuICAgIGNvbnN0IG5vRGVsYXkgPSBvcHRpb25zLm5vRGVsYXkgPz8gdHJ1ZTtcbiAgICBjb25zdCBjb25uZWN0VGltZW91dE1TID0gb3B0aW9ucy5jb25uZWN0VGltZW91dE1TID8/IDMwMDAwO1xuICAgIGNvbnN0IGV4aXN0aW5nU29ja2V0ID0gb3B0aW9ucy5leGlzdGluZ1NvY2tldDtcbiAgICBsZXQgc29ja2V0O1xuICAgIGlmIChvcHRpb25zLnByb3h5SG9zdCAhPSBudWxsKSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSwgb25seSBTb2NrczUgaXMgc3VwcG9ydGVkLlxuICAgICAgICByZXR1cm4gbWFrZVNvY2tzNUNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGNvbm5lY3RUaW1lb3V0TVMgLy8gU2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50IGZvciBTb2NrczVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh1c2VUTFMpIHtcbiAgICAgICAgY29uc3QgdGxzU29ja2V0ID0gdGxzLmNvbm5lY3QocGFyc2VTc2xPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0bHNTb2NrZXQuZGlzYWJsZVJlbmVnb3RpYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRsc1NvY2tldC5kaXNhYmxlUmVuZWdvdGlhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHNvY2tldCA9IHRsc1NvY2tldDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXhpc3RpbmdTb2NrZXQpIHtcbiAgICAgICAgLy8gSW4gdGhlIFRMUyBjYXNlLCBwYXJzZVNzbE9wdGlvbnMoKSBzZXRzIG9wdGlvbnMuc29ja2V0IHRvIGV4aXN0aW5nU29ja2V0LFxuICAgICAgICAvLyBzbyB3ZSBvbmx5IG5lZWQgdG8gaGFuZGxlIHRoZSBub24tVExTIGNhc2UgaGVyZSAod2hlcmUgZXhpc3RpbmdTb2NrZXRcbiAgICAgICAgLy8gZ2l2ZXMgdXMgYWxsIHdlIG5lZWQgb3V0IG9mIHRoZSBib3gpLlxuICAgICAgICBzb2NrZXQgPSBleGlzdGluZ1NvY2tldDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNvY2tldCA9IG5ldC5jcmVhdGVDb25uZWN0aW9uKHBhcnNlQ29ubmVjdE9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cbiAgICBzb2NrZXQuc2V0S2VlcEFsaXZlKHRydWUsIDMwMDAwMCk7XG4gICAgc29ja2V0LnNldFRpbWVvdXQoY29ubmVjdFRpbWVvdXRNUyk7XG4gICAgc29ja2V0LnNldE5vRGVsYXkobm9EZWxheSk7XG4gICAgbGV0IGNhbmNlbGxhdGlvbkhhbmRsZXIgPSBudWxsO1xuICAgIGNvbnN0IHsgcHJvbWlzZTogY29ubmVjdGVkU29ja2V0LCByZXNvbHZlLCByZWplY3QgfSA9ICgwLCB1dGlsc18xLnByb21pc2VXaXRoUmVzb2x2ZXJzKSgpO1xuICAgIGlmIChleGlzdGluZ1NvY2tldCkge1xuICAgICAgICByZXNvbHZlKHNvY2tldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBjb25uZWN0RXZlbnQgPSB1c2VUTFMgPyAnc2VjdXJlQ29ubmVjdCcgOiAnY29ubmVjdCc7XG4gICAgICAgIHNvY2tldFxuICAgICAgICAgICAgLm9uY2UoY29ubmVjdEV2ZW50LCAoKSA9PiByZXNvbHZlKHNvY2tldCkpXG4gICAgICAgICAgICAub25jZSgnZXJyb3InLCBlcnJvciA9PiByZWplY3QoY29ubmVjdGlvbkZhaWx1cmVFcnJvcignZXJyb3InLCBlcnJvcikpKVxuICAgICAgICAgICAgLm9uY2UoJ3RpbWVvdXQnLCAoKSA9PiByZWplY3QoY29ubmVjdGlvbkZhaWx1cmVFcnJvcigndGltZW91dCcpKSlcbiAgICAgICAgICAgIC5vbmNlKCdjbG9zZScsICgpID0+IHJlamVjdChjb25uZWN0aW9uRmFpbHVyZUVycm9yKCdjbG9zZScpKSk7XG4gICAgICAgIGlmIChvcHRpb25zLmNhbmNlbGxhdGlvblRva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNhbmNlbGxhdGlvbkhhbmRsZXIgPSAoKSA9PiByZWplY3QoY29ubmVjdGlvbkZhaWx1cmVFcnJvcignY2FuY2VsJykpO1xuICAgICAgICAgICAgb3B0aW9ucy5jYW5jZWxsYXRpb25Ub2tlbi5vbmNlKCdjYW5jZWwnLCBjYW5jZWxsYXRpb25IYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzb2NrZXQgPSBhd2FpdCBjb25uZWN0ZWRTb2NrZXQ7XG4gICAgICAgIHJldHVybiBzb2NrZXQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBzb2NrZXQuZGVzdHJveSgpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHNvY2tldC5zZXRUaW1lb3V0KDApO1xuICAgICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIGlmIChjYW5jZWxsYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuY2FuY2VsbGF0aW9uVG9rZW4/LnJlbW92ZUxpc3RlbmVyKCdjYW5jZWwnLCBjYW5jZWxsYXRpb25IYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMubWFrZVNvY2tldCA9IG1ha2VTb2NrZXQ7XG5sZXQgc29ja3MgPSBudWxsO1xuZnVuY3Rpb24gbG9hZFNvY2tzKCkge1xuICAgIGlmIChzb2NrcyA9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHNvY2tzSW1wb3J0ID0gKDAsIGRlcHNfMS5nZXRTb2NrcykoKTtcbiAgICAgICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIHNvY2tzSW1wb3J0KSB7XG4gICAgICAgICAgICB0aHJvdyBzb2Nrc0ltcG9ydC5rTW9kdWxlRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgc29ja3MgPSBzb2Nrc0ltcG9ydDtcbiAgICB9XG4gICAgcmV0dXJuIHNvY2tzO1xufVxuYXN5bmMgZnVuY3Rpb24gbWFrZVNvY2tzNUNvbm5lY3Rpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IGhvc3RBZGRyZXNzID0gdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tSG9zdFBvcnQob3B0aW9ucy5wcm94eUhvc3QgPz8gJycsIC8vIHByb3h5SG9zdCBpcyBndWFyYW50ZWVkIHRvIHNldCBoZXJlXG4gICAgb3B0aW9ucy5wcm94eVBvcnQgPz8gMTA4MCk7XG4gICAgLy8gRmlyc3QsIGNvbm5lY3QgdG8gdGhlIHByb3h5IHNlcnZlciBpdHNlbGY6XG4gICAgY29uc3QgcmF3U29ja2V0ID0gYXdhaXQgbWFrZVNvY2tldCh7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGhvc3RBZGRyZXNzLFxuICAgICAgICB0bHM6IGZhbHNlLFxuICAgICAgICBwcm94eUhvc3Q6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gcGFyc2VDb25uZWN0T3B0aW9ucyhvcHRpb25zKTtcbiAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uLmhvc3QgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBkZXN0aW5hdGlvbi5wb3J0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDYW4gb25seSBtYWtlIFNvY2tzNSBjb25uZWN0aW9ucyB0byBUQ1AgaG9zdHMnKTtcbiAgICB9XG4gICAgc29ja3MgPz89IGxvYWRTb2NrcygpO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFRoZW4sIGVzdGFibGlzaCB0aGUgU29ja3M1IHByb3h5IGNvbm5lY3Rpb246XG4gICAgICAgIGNvbnN0IHsgc29ja2V0IH0gPSBhd2FpdCBzb2Nrcy5Tb2Nrc0NsaWVudC5jcmVhdGVDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGV4aXN0aW5nX3NvY2tldDogcmF3U29ja2V0LFxuICAgICAgICAgICAgdGltZW91dDogb3B0aW9ucy5jb25uZWN0VGltZW91dE1TLFxuICAgICAgICAgICAgY29tbWFuZDogJ2Nvbm5lY3QnLFxuICAgICAgICAgICAgZGVzdGluYXRpb246IHtcbiAgICAgICAgICAgICAgICBob3N0OiBkZXN0aW5hdGlvbi5ob3N0LFxuICAgICAgICAgICAgICAgIHBvcnQ6IGRlc3RpbmF0aW9uLnBvcnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm94eToge1xuICAgICAgICAgICAgICAgIC8vIGhvc3QgYW5kIHBvcnQgYXJlIGlnbm9yZWQgYmVjYXVzZSB3ZSBwYXNzIGV4aXN0aW5nX3NvY2tldFxuICAgICAgICAgICAgICAgIGhvc3Q6ICdpTG92ZUphdmFTY3JpcHQnLFxuICAgICAgICAgICAgICAgIHBvcnQ6IDAsXG4gICAgICAgICAgICAgICAgdHlwZTogNSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IG9wdGlvbnMucHJveHlVc2VybmFtZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IG9wdGlvbnMucHJveHlQYXNzd29yZCB8fCB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZpbmFsbHksIG5vdyB0cmVhdCB0aGUgcmVzdWx0aW5nIGR1cGxleCBzdHJlYW0gYXMgdGhlXG4gICAgICAgIC8vIHNvY2tldCBvdmVyIHdoaWNoIHdlIHNlbmQgYW5kIHJlY2VpdmUgd2lyZSBwcm90b2NvbCBtZXNzYWdlczpcbiAgICAgICAgcmV0dXJuIGF3YWl0IG1ha2VTb2NrZXQoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGV4aXN0aW5nU29ja2V0OiBzb2NrZXQsXG4gICAgICAgICAgICBwcm94eUhvc3Q6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IGNvbm5lY3Rpb25GYWlsdXJlRXJyb3IoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbm5lY3Rpb25GYWlsdXJlRXJyb3IodHlwZSwgY2F1c2UpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yKGVycm9yXzEuTW9uZ29FcnJvci5idWlsZEVycm9yTWVzc2FnZShjYXVzZSksIHsgY2F1c2UgfSk7XG4gICAgICAgIGNhc2UgJ3RpbWVvdXQnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBlcnJvcl8xLk1vbmdvTmV0d29ya1RpbWVvdXRFcnJvcignY29ubmVjdGlvbiB0aW1lZCBvdXQnKTtcbiAgICAgICAgY2FzZSAnY2xvc2UnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yKCdjb25uZWN0aW9uIGNsb3NlZCcpO1xuICAgICAgICBjYXNlICdjYW5jZWwnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yKCdjb25uZWN0aW9uIGVzdGFibGlzaG1lbnQgd2FzIGNhbmNlbGxlZCcpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yKCd1bmtub3duIG5ldHdvcmsgZXJyb3InKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1ha2VTb2NrZXQiLCJMRUdBTF9UQ1BfU09DS0VUX09QVElPTlMiLCJMRUdBTF9UTFNfU09DS0VUX09QVElPTlMiLCJwcmVwYXJlSGFuZHNoYWtlRG9jdW1lbnQiLCJwZXJmb3JtSW5pdGlhbEhhbmRzaGFrZSIsIm1ha2VDb25uZWN0aW9uIiwiY29ubmVjdCIsIm5ldCIsInJlcXVpcmUiLCJ0bHMiLCJjb25zdGFudHNfMSIsImRlcHNfMSIsImVycm9yXzEiLCJ1dGlsc18xIiwiYXV0aF9wcm92aWRlcl8xIiwicHJvdmlkZXJzXzEiLCJjb25uZWN0aW9uXzEiLCJjb25zdGFudHNfMiIsIm9wdGlvbnMiLCJjb25uZWN0aW9uIiwic29ja2V0IiwiZXJyb3IiLCJkZXN0cm95IiwiQ29ubmVjdGlvblR5cGUiLCJjb25uZWN0aW9uVHlwZSIsIkNvbm5lY3Rpb24iLCJhdXRvRW5jcnlwdGVyIiwiQ3J5cHRvQ29ubmVjdGlvbiIsImNoZWNrU3VwcG9ydGVkU2VydmVyIiwiaGVsbG8iLCJtYXhXaXJlVmVyc2lvbiIsIk51bWJlciIsIm1pbldpcmVWZXJzaW9uIiwic2VydmVyVmVyc2lvbkhpZ2hFbm91Z2giLCJpc05hTiIsIk1JTl9TVVBQT1JURURfV0lSRV9WRVJTSU9OIiwic2VydmVyVmVyc2lvbkxvd0Vub3VnaCIsIk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OIiwibWVzc2FnZSIsImhvc3RBZGRyZXNzIiwiSlNPTiIsInN0cmluZ2lmeSIsIk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04iLCJNb25nb0NvbXBhdGliaWxpdHlFcnJvciIsIk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04iLCJjb25uIiwiY3JlZGVudGlhbHMiLCJtZWNoYW5pc20iLCJBdXRoTWVjaGFuaXNtIiwiTU9OR09EQl9ERUZBVUxUIiwiYXV0aFByb3ZpZGVycyIsImdldE9yQ3JlYXRlUHJvdmlkZXIiLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIiwiYXV0aENvbnRleHQiLCJBdXRoQ29udGV4dCIsImhhbmRzaGFrZURvYyIsImhhbmRzaGFrZU9wdGlvbnMiLCJjb25uZWN0VGltZW91dE1TIiwic29ja2V0VGltZW91dE1TIiwic3RhcnQiLCJEYXRlIiwiZ2V0VGltZSIsInJlc3BvbnNlIiwiY29tbWFuZCIsIm5zIiwiaXNXcml0YWJsZVByaW1hcnkiLCJMRUdBQ1lfSEVMTE9fQ09NTUFORCIsImhlbGxvT2siLCJzdXBwb3J0ZWRTZXJ2ZXJFcnIiLCJsb2FkQmFsYW5jZWQiLCJzZXJ2aWNlSWQiLCJsYXN0SGVsbG9NUyIsImFyYml0ZXJPbmx5IiwicmVzb2x2ZWRDcmVkZW50aWFscyIsInJlc29sdmVBdXRoTWVjaGFuaXNtIiwicHJvdmlkZXIiLCJhdXRoIiwiTW9uZ29FcnJvciIsImFkZEVycm9yTGFiZWwiLCJNb25nb0Vycm9yTGFiZWwiLCJIYW5kc2hha2VFcnJvciIsIm5lZWRzUmV0cnlhYmxlV3JpdGVMYWJlbCIsIlJldHJ5YWJsZVdyaXRlRXJyb3IiLCJlc3RhYmxpc2hlZCIsImNvbXByZXNzb3JzIiwic2VydmVyQXBpIiwiY2xpZW50TWV0YWRhdGEiLCJleHRlbmRlZE1ldGFkYXRhIiwidmVyc2lvbiIsImNsaWVudCIsImNvbXByZXNzaW9uIiwidXNlcm5hbWUiLCJzYXNsU3VwcG9ydGVkTWVjaHMiLCJzb3VyY2UiLCJNT05HT0RCX1NDUkFNX1NIQTI1NiIsInByZXBhcmUiLCJwYXJzZUNvbm5lY3RPcHRpb25zIiwicmVzdWx0IiwibmFtZSIsInNvY2tldFBhdGgiLCJwYXRoIiwiaG9zdCIsInBvcnQiLCJNb25nb1J1bnRpbWVFcnJvciIsInBhcnNlU3NsT3B0aW9ucyIsImV4aXN0aW5nU29ja2V0Iiwic2VydmVybmFtZSIsImlzSVAiLCJ1c2VUTFMiLCJub0RlbGF5IiwicHJveHlIb3N0IiwibWFrZVNvY2tzNUNvbm5lY3Rpb24iLCJ0bHNTb2NrZXQiLCJkaXNhYmxlUmVuZWdvdGlhdGlvbiIsImNyZWF0ZUNvbm5lY3Rpb24iLCJzZXRLZWVwQWxpdmUiLCJzZXRUaW1lb3V0Iiwic2V0Tm9EZWxheSIsImNhbmNlbGxhdGlvbkhhbmRsZXIiLCJwcm9taXNlIiwiY29ubmVjdGVkU29ja2V0IiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2VXaXRoUmVzb2x2ZXJzIiwiY29ubmVjdEV2ZW50Iiwib25jZSIsImNvbm5lY3Rpb25GYWlsdXJlRXJyb3IiLCJjYW5jZWxsYXRpb25Ub2tlbiIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVyIiwic29ja3MiLCJsb2FkU29ja3MiLCJzb2Nrc0ltcG9ydCIsImdldFNvY2tzIiwia01vZHVsZUVycm9yIiwiSG9zdEFkZHJlc3MiLCJmcm9tSG9zdFBvcnQiLCJwcm94eVBvcnQiLCJyYXdTb2NrZXQiLCJ1bmRlZmluZWQiLCJkZXN0aW5hdGlvbiIsIlNvY2tzQ2xpZW50IiwiZXhpc3Rpbmdfc29ja2V0IiwidGltZW91dCIsInByb3h5IiwidHlwZSIsInVzZXJJZCIsInByb3h5VXNlcm5hbWUiLCJwYXNzd29yZCIsInByb3h5UGFzc3dvcmQiLCJjYXVzZSIsIk1vbmdvTmV0d29ya0Vycm9yIiwiYnVpbGRFcnJvck1lc3NhZ2UiLCJNb25nb05ldHdvcmtUaW1lb3V0RXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = exports.hasSessionSupport = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_monitoring_events_1 = __webpack_require__(/*! ./command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst stream_description_1 = __webpack_require__(/*! ./stream_description */ \"(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst on_data_1 = __webpack_require__(/*! ./wire_protocol/on_data */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\");\nconst shared_1 = __webpack_require__(/*! ./wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\n/** @internal */ function hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === \"string\" && typeof remotePort === \"number\") {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString(\"hex\");\n}\n/** @internal */ class Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options){\n        super();\n        this.lastHelloMS = -1;\n        this.helloOk = false;\n        this.delayedTimeoutId = null;\n        /** Indicates that the connection (including underlying TCP socket) has been closed. */ this.closed = false;\n        this.clusterTime = null;\n        this.error = null;\n        this.dataEvents = null;\n        this.socket = stream;\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.mongoLogger = options.mongoLogger;\n        this.established = false;\n        this.description = new stream_description_1.StreamDescription(this.address, options);\n        this.generation = options.generation;\n        this.lastUseTime = (0, utils_1.now)();\n        this.messageStream = this.socket.on(\"error\", this.onError.bind(this)).pipe(new SizedMessageTransform({\n            connection: this\n        })).on(\"error\", this.onError.bind(this));\n        this.socket.on(\"close\", this.onClose.bind(this));\n        this.socket.on(\"timeout\", this.onTimeout.bind(this));\n    }\n    get hello() {\n        return this.description.hello;\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this.description.receiveResponse(response);\n        Object.freeze(this.description);\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return this.description != null && (0, utils_1.maxWireVersion)(this) >= 6 && !this.description.__nodejs_mock_server__;\n    }\n    get shouldEmitAndLogCommand() {\n        return (this.monitorCommands || this.established && !this.authContext?.reauthenticating && this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG)) ?? false;\n    }\n    markAvailable() {\n        this.lastUseTime = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this.delayedTimeoutId = (0, timers_1.setTimeout)(()=>{\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(new error_1.MongoNetworkTimeoutError(message, {\n                beforeHandshake\n            }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    destroy() {\n        if (this.closed) {\n            return;\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */ cleanup(error) {\n        if (this.closed) {\n            return;\n        }\n        this.socket.destroy();\n        this.error = error;\n        this.dataEvents?.throw(error).then(undefined, ()=>null); // squash unhandled rejection\n        this.closed = true;\n        this.emit(Connection.CLOSE);\n    }\n    prepareCommand(db, command, options) {\n        let cmd = {\n            ...command\n        };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null) cmd.apiStrict = strict;\n            if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n            if (sessionError) throw sessionError;\n        } else if (session?.explicit) {\n            throw new error_1.MongoCompatibilityError(\"Current topology does not support sessions\");\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        // For standalone, drivers MUST NOT set $readPreference.\n        if (this.description.type !== common_1.ServerType.Standalone) {\n            if (!(0, shared_1.isSharded)(this) && !this.description.loadBalanced && this.supportsOpMsg && options.directConnection === true && readPreference?.mode === \"primary\") {\n                // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n                // For all other types with a direct connection, if the read preference is 'primary'\n                // (driver sets 'primary' as default if no read preference is configured),\n                // the $readPreference MUST be set to 'primaryPreferred'\n                // to ensure that any server type can handle the request.\n                cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();\n            } else if ((0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference?.mode !== \"primary\") {\n                // When sending a read operation via OP_QUERY and the $readPreference modifier,\n                // the query MUST be provided using the $query modifier.\n                cmd = {\n                    $query: cmd,\n                    $readPreference: readPreference.toJSON()\n                };\n            } else if (readPreference?.mode !== \"primary\") {\n                // For mode 'primary', drivers MUST NOT set $readPreference.\n                // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n                // drivers MUST set $readPreference\n                cmd.$readPreference = readPreference.toJSON();\n            }\n        }\n        const commandOptions = {\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk(),\n            ...options\n        };\n        const message = this.supportsOpMsg ? new commands_1.OpMsgRequest(db, cmd, commandOptions) : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n        return message;\n    }\n    async *sendWire(message, options) {\n        this.throwIfAborted();\n        if (typeof options.socketTimeoutMS === \"number\") {\n            this.socket.setTimeout(options.socketTimeoutMS);\n        } else if (this.socketTimeoutMS !== 0) {\n            this.socket.setTimeout(this.socketTimeoutMS);\n        }\n        try {\n            await this.writeCommand(message, {\n                agreedCompressor: this.description.compressor ?? \"none\",\n                zlibCompressionLevel: this.description.zlibCompressionLevel\n            });\n            if (options.noResponse) {\n                yield {\n                    ok: 1\n                };\n                return;\n            }\n            this.throwIfAborted();\n            for await (const response of this.readMany()){\n                this.socket.setTimeout(0);\n                response.parse(options);\n                const [document] = response.documents;\n                if (!Buffer.isBuffer(document)) {\n                    const { session } = options;\n                    if (session) {\n                        (0, sessions_1.updateSessionFromResponse)(session, document);\n                    }\n                    if (document.$clusterTime) {\n                        this.clusterTime = document.$clusterTime;\n                        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n                    }\n                }\n                yield document;\n                this.throwIfAborted();\n                if (typeof options.socketTimeoutMS === \"number\") {\n                    this.socket.setTimeout(options.socketTimeoutMS);\n                } else if (this.socketTimeoutMS !== 0) {\n                    this.socket.setTimeout(this.socketTimeoutMS);\n                }\n            }\n        } finally{\n            this.socket.setTimeout(0);\n        }\n    }\n    async *sendCommand(ns, command, options = {}) {\n        const message = this.prepareCommand(ns.db, command, options);\n        let started = 0;\n        if (this.shouldEmitAndLogCommand) {\n            started = (0, utils_1.now)();\n            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n        }\n        let document;\n        try {\n            this.throwIfAborted();\n            for await (document of this.sendWire(message, options)){\n                if (!Buffer.isBuffer(document) && document.writeConcernError) {\n                    throw new error_1.MongoWriteConcernError(document.writeConcernError, document);\n                }\n                if (!Buffer.isBuffer(document) && (document.ok === 0 || document.$err || document.errmsg || document.code)) {\n                    throw new error_1.MongoServerError(document);\n                }\n                if (this.shouldEmitAndLogCommand) {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n                }\n                yield document;\n                this.throwIfAborted();\n            }\n        } catch (error) {\n            if (this.shouldEmitAndLogCommand) {\n                if (error.name === \"MongoWriteConcernError\") {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n                } else {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n                }\n            }\n            throw error;\n        }\n    }\n    async command(ns, command, options = {}) {\n        this.throwIfAborted();\n        for await (const document of this.sendCommand(ns, command, options)){\n            return document;\n        }\n        throw new error_1.MongoUnexpectedServerResponseError(\"Unable to get response from server\");\n    }\n    exhaustCommand(ns, command, options, replyListener) {\n        const exhaustLoop = async ()=>{\n            this.throwIfAborted();\n            for await (const reply of this.sendCommand(ns, command, options)){\n                replyListener(undefined, reply);\n                this.throwIfAborted();\n            }\n            throw new error_1.MongoUnexpectedServerResponseError(\"Server ended moreToCome unexpectedly\");\n        };\n        exhaustLoop().catch(replyListener);\n    }\n    throwIfAborted() {\n        if (this.error) throw this.error;\n    }\n    /**\n     * @internal\n     *\n     * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n     * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n     */ async writeCommand(command, options) {\n        const finalCommand = options.agreedCompressor === \"none\" || !commands_1.OpCompressedRequest.canCompress(command) ? command : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: options.agreedCompressor ?? \"none\",\n            zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n        });\n        const buffer = Buffer.concat(await finalCommand.toBin());\n        if (this.socket.write(buffer)) return;\n        return (0, utils_1.once)(this.socket, \"drain\");\n    }\n    /**\n     * @internal\n     *\n     * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n     * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n     * by calling `return` on the generator.\n     *\n     * Note that `for-await` loops call `return` automatically when the loop is exited.\n     */ async *readMany() {\n        try {\n            this.dataEvents = (0, on_data_1.onData)(this.messageStream);\n            for await (const message of this.dataEvents){\n                const response = await (0, compression_1.decompressResponse)(message);\n                yield response;\n                if (!response.moreToCome) {\n                    return;\n                }\n            }\n        } finally{\n            this.dataEvents = null;\n            this.throwIfAborted();\n        }\n    }\n}\n/** @event */ Connection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */ Connection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */ Connection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */ Connection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */ Connection.CLOSE = constants_1.CLOSE;\n/** @event */ Connection.PINNED = constants_1.PINNED;\n/** @event */ Connection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */ class SizedMessageTransform extends stream_1.Transform {\n    constructor({ connection }){\n        super({\n            objectMode: false\n        });\n        this.bufferPool = new utils_1.BufferPool();\n        this.connection = connection;\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.connection.delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n            this.connection.delayedTimeoutId = null;\n        }\n        this.bufferPool.append(chunk);\n        const sizeOfMessage = this.bufferPool.getInt32();\n        if (sizeOfMessage == null) {\n            return callback();\n        }\n        if (sizeOfMessage < 0) {\n            return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n        }\n        if (sizeOfMessage > this.bufferPool.length) {\n            return callback();\n        }\n        const message = this.bufferPool.read(sizeOfMessage);\n        return callback(null, message);\n    }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */ class CryptoConnection extends Connection {\n    constructor(stream, options){\n        super(stream, options);\n        this.autoEncrypter = options.autoEncrypter;\n    }\n    /** @internal @override */ async command(ns, cmd, options) {\n        const { autoEncrypter } = this;\n        if (!autoEncrypter) {\n            throw new error_1.MongoMissingDependencyError(\"No AutoEncrypter available for encryption\");\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return super.command(ns, cmd, options);\n        }\n        if (serverWireVersion < 8) {\n            throw new error_1.MongoCompatibilityError(\"Auto-encryption requires a minimum MongoDB version of 4.2\");\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes ? cmd.indexes.map((index)=>index.key) : null;\n        const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n        // Replace the saved values\n        if (sort != null && (cmd.find || cmd.findAndModify)) {\n            encrypted.sort = sort;\n        }\n        if (indexKeys != null && cmd.createIndexes) {\n            for (const [offset, index] of indexKeys.entries()){\n                // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                encrypted.indexes[offset].key = index;\n            }\n        }\n        const response = await super.command(ns, encrypted, options);\n        return autoEncrypter.decrypt(response, options);\n    }\n}\nexports.CryptoConnection = CryptoConnection; //# sourceMappingURL=connection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst connect_1 = __webpack_require__(/*! ./connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_events_1 = __webpack_require__(/*! ./connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst metrics_1 = __webpack_require__(/*! ./metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\n/** @internal */ const kServer = Symbol(\"server\");\n/** @internal */ const kConnections = Symbol(\"connections\");\n/** @internal */ const kPending = Symbol(\"pending\");\n/** @internal */ const kCheckedOut = Symbol(\"checkedOut\");\n/** @internal */ const kMinPoolSizeTimer = Symbol(\"minPoolSizeTimer\");\n/** @internal */ const kGeneration = Symbol(\"generation\");\n/** @internal */ const kServiceGenerations = Symbol(\"serviceGenerations\");\n/** @internal */ const kConnectionCounter = Symbol(\"connectionCounter\");\n/** @internal */ const kCancellationToken = Symbol(\"cancellationToken\");\n/** @internal */ const kWaitQueue = Symbol(\"waitQueue\");\n/** @internal */ const kCancelled = Symbol(\"cancelled\");\n/** @internal */ const kMetrics = Symbol(\"metrics\");\n/** @internal */ const kProcessingWaitQueue = Symbol(\"processingWaitQueue\");\n/** @internal */ const kPoolState = Symbol(\"poolState\");\n/** @internal */ exports.PoolState = Object.freeze({\n    paused: \"paused\",\n    ready: \"ready\",\n    closed: \"closed\"\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */ class ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options){\n        super();\n        this.options = Object.freeze({\n            connectionType: connection_1.Connection,\n            ...options,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError(\"Connection pool minimum size must not be greater than maximum pool size\");\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kServer] = server;\n        this[kConnections] = new utils_1.List();\n        this[kPending] = 0;\n        this[kCheckedOut] = new Set();\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new utils_1.List();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        this.component = \"connection\";\n        process.nextTick(()=>{\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */ get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */ get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */ get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */ get totalConnectionCount() {\n        return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n    }\n    /** An integer expressing how many connections are currently available in the pool. */ get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut].size;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get serverError() {\n        return this[kServer].description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */ get checkedOutConnections() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */ waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */ ready() {\n        if (this[kPoolState] !== exports.PoolState.paused) {\n            return;\n        }\n        this[kPoolState] = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */ async checkOut() {\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const waitQueueMember = {\n            resolve,\n            reject,\n            timeoutController: new utils_1.TimeoutController(waitQueueTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener(\"abort\", ()=>{\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, \"timeout\"));\n            waitQueueMember.reject(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : \"Timed out while checking out a connection from connection pool\", this.address));\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(()=>this.processWaitQueue());\n        return promise;\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */ checkIn(connection) {\n        if (!this[kCheckedOut].has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut].delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? \"error\" : poolClosed ? \"poolClosed\" : \"stale\";\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(()=>this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */ clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError(\"ConnectionPool.clear() called in load balanced mode with no serviceId.\");\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError(\"Service generations are required in load balancer mode.\");\n            } else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                serviceId\n            }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this[kGeneration];\n        this[kGeneration] += 1;\n        const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n        this[kPoolState] = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(()=>this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */ interruptInUseConnections(minGeneration) {\n        for (const connection of this[kCheckedOut]){\n            if (connection.generation <= minGeneration) {\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n                this.checkIn(connection);\n            }\n        }\n    }\n    /** Close the pool */ close() {\n        if (this.closed) {\n            return;\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit(\"cancel\");\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === \"function\") {\n            this[kConnectionCounter].return(undefined);\n        }\n        this[kPoolState] = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        for (const conn of this[kConnections]){\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, \"poolClosed\"));\n            conn.destroy();\n        }\n        this[kConnections].clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n    }\n    /**\n     * @internal\n     * Reauthenticate a connection\n     */ async reauthenticate(connection) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            throw new error_1.MongoRuntimeError(\"No auth context found on connection.\");\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"Connection is missing credentials when asked to reauthenticate\");\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n        const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n        }\n        await provider.reauth(authContext);\n        return;\n    }\n    /** Clear the min pool size timer */ clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        connection.destroy();\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */ destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? \"error\" : isStale ? \"stale\" : \"idle\";\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken],\n            mongoLogger: this.mongoLogger,\n            authProviders: this[kServer].topology.client.s.authProviders\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n            id: connectOptions.id\n        }));\n        (0, connect_1.connect)(connectOptions).then((connection)=>{\n            // The pool might have closed since we started trying to create a connection\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                this[kPending]--;\n                connection.destroy();\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [\n                ...constants_1.APM_EVENTS,\n                connection_1.Connection.CLUSTER_TIME_RECEIVED\n            ]){\n                connection.on(event, (e)=>this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, (pinType)=>this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, (pinType)=>this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if (generation = this.serviceGenerations.get(sid)) {\n                        connection.generation = generation;\n                    } else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n            this[kPending]--;\n            callback(undefined, connection);\n        }, (error)=>{\n            this[kPending]--;\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, {\n                id: connectOptions.id,\n                serviceId: undefined\n            }, \"error\", // TODO(NODE-5192): Remove this cast\n            error));\n            if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n                error.connectionGeneration = connectOptions.generation;\n            }\n            callback(error ?? new error_1.MongoRuntimeError(\"Connection creation failed without error\"));\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this[kConnections].prune((connection)=>this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection)=>{\n                if (err) {\n                    this[kServer].handleError(err);\n                }\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(()=>this.processWaitQueue());\n                }\n                if (this[kPoolState] === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n                    this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(()=>this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        } else {\n            (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(()=>this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while(this.waitQueueSize){\n            const waitQueueMember = this[kWaitQueue].first();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                const reason = this.closed ? \"poolClosed\" : \"connectionError\";\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, error));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.reject(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this[kCheckedOut].add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.resolve(connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while(this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)){\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection)=>{\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                } else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, \"connectionError\", err));\n                        waitQueueMember.reject(err);\n                    } else if (connection) {\n                        this[kCheckedOut].add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                        waitQueueMember.resolve(connection);\n                    }\n                    waitQueueMember.timeoutController.clear();\n                }\n                process.nextTick(()=>this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\n/**\n * Emitted when the connection pool is created.\n * @event\n */ ConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */ ConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */ ConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */ ConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */ ConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */ ConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */ ConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */ ConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */ ConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */ ConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */ ConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\nexports.ConnectionPool = ConnectionPool; //# sourceMappingURL=connection_pool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool_events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */ class ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */ class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = {\n            maxConnecting,\n            maxPoolSize,\n            minPoolSize,\n            maxIdleTimeMS,\n            waitQueueTimeoutMS\n        };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */ class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */ class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */ class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */ class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_READY;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */ class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection, reason, error){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */ class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */ class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, reason, error){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */ class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */ class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */ class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, options = {}){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent; //# sourceMappingURL=connection_pool_events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/errors.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/errors.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */ class PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(pool){\n        super(\"Attempted to check out a connection from closed connection pool\");\n        this.address = pool.address;\n    }\n    get name() {\n        return \"MongoPoolClosedError\";\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */ class PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(pool, message){\n        const errorMessage = message ? message : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? {\n            cause: pool.serverError\n        } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return \"MongoPoolClearedError\";\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */ class PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(pool){\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return \"PoolClearedOnNetworkError\";\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */ class WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, address){\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return \"MongoWaitQueueTimeoutError\";\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHQSxpQ0FBaUMsR0FBR0Esd0JBQXdCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDOUgsTUFBTU0sVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEM7OztDQUdDLEdBQ0QsTUFBTUYsd0JBQXdCQyxRQUFRRSxnQkFBZ0I7SUFDbEQ7Ozs7Ozs7Ozs7TUFVRSxHQUNGQyxZQUFZQyxJQUFJLENBQUU7UUFDZCxLQUFLLENBQUM7UUFDTixJQUFJLENBQUNDLE9BQU8sR0FBR0QsS0FBS0MsT0FBTztJQUMvQjtJQUNBLElBQUlDLE9BQU87UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBWix1QkFBdUIsR0FBR0s7QUFDMUI7OztDQUdDLEdBQ0QsTUFBTUQseUJBQXlCRSxRQUFRTyxpQkFBaUI7SUFDcEQ7Ozs7Ozs7Ozs7TUFVRSxHQUNGSixZQUFZQyxJQUFJLEVBQUVJLE9BQU8sQ0FBRTtRQUN2QixNQUFNQyxlQUFlRCxVQUNmQSxVQUNBLENBQUMsb0JBQW9CLEVBQUVKLEtBQUtDLE9BQU8sQ0FBQyxxREFBcUQsRUFBRUQsS0FBS00sV0FBVyxFQUFFRixRQUFRLENBQUMsQ0FBQztRQUM3SCxLQUFLLENBQUNDLGNBQWNMLEtBQUtNLFdBQVcsR0FBRztZQUFFQyxPQUFPUCxLQUFLTSxXQUFXO1FBQUMsSUFBSUU7UUFDckUsSUFBSSxDQUFDUCxPQUFPLEdBQUdELEtBQUtDLE9BQU87UUFDM0IsSUFBSSxDQUFDUSxhQUFhLENBQUNiLFFBQVFjLGVBQWUsQ0FBQ0MsaUJBQWlCO0lBQ2hFO0lBQ0EsSUFBSVQsT0FBTztRQUNQLE9BQU87SUFDWDtBQUNKO0FBQ0FaLHdCQUF3QixHQUFHSTtBQUMzQjs7O0NBR0MsR0FDRCxNQUFNRCxrQ0FBa0NDO0lBQ3BDOzs7Ozs7Ozs7O01BVUUsR0FDRkssWUFBWUMsSUFBSSxDQUFFO1FBQ2QsS0FBSyxDQUFDQSxNQUFNLENBQUMsY0FBYyxFQUFFQSxLQUFLQyxPQUFPLENBQUMsMENBQTBDLENBQUM7SUFDekY7SUFDQSxJQUFJQyxPQUFPO1FBQ1AsT0FBTztJQUNYO0FBQ0o7QUFDQVosaUNBQWlDLEdBQUdHO0FBQ3BDOzs7Q0FHQyxHQUNELE1BQU1ELDhCQUE4QkksUUFBUUUsZ0JBQWdCO0lBQ3hEOzs7Ozs7Ozs7O01BVUUsR0FDRkMsWUFBWUssT0FBTyxFQUFFSCxPQUFPLENBQUU7UUFDMUIsS0FBSyxDQUFDRztRQUNOLElBQUksQ0FBQ0gsT0FBTyxHQUFHQTtJQUNuQjtJQUNBLElBQUlDLE9BQU87UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBWiw2QkFBNkIsR0FBR0UsdUJBQ2hDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanM/NWRjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2FpdFF1ZXVlVGltZW91dEVycm9yID0gZXhwb3J0cy5Qb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yID0gZXhwb3J0cy5Qb29sQ2xlYXJlZEVycm9yID0gZXhwb3J0cy5Qb29sQ2xvc2VkRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuLyoqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIGEgY29ubmVjdGlvbiBwb29sIGlzIGNsb3NlZFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFBvb2xDbG9zZWRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29Ecml2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIoJ0F0dGVtcHRlZCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIGZyb20gY2xvc2VkIGNvbm5lY3Rpb24gcG9vbCcpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBwb29sLmFkZHJlc3M7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvUG9vbENsb3NlZEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlBvb2xDbG9zZWRFcnJvciA9IFBvb2xDbG9zZWRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyBhIGNvbm5lY3Rpb24gcG9vbCBpcyBjdXJyZW50bHkgcGF1c2VkXG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgUG9vbENsZWFyZWRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sLCBtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IG1lc3NhZ2VcbiAgICAgICAgICAgID8gbWVzc2FnZVxuICAgICAgICAgICAgOiBgQ29ubmVjdGlvbiBwb29sIGZvciAke3Bvb2wuYWRkcmVzc30gd2FzIGNsZWFyZWQgYmVjYXVzZSBhbm90aGVyIG9wZXJhdGlvbiBmYWlsZWQgd2l0aDogXCIke3Bvb2wuc2VydmVyRXJyb3I/Lm1lc3NhZ2V9XCJgO1xuICAgICAgICBzdXBlcihlcnJvck1lc3NhZ2UsIHBvb2wuc2VydmVyRXJyb3IgPyB7IGNhdXNlOiBwb29sLnNlcnZlckVycm9yIH0gOiB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBwb29sLmFkZHJlc3M7XG4gICAgICAgIHRoaXMuYWRkRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5Qb29sUmVxdXN0ZWRSZXRyeSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvUG9vbENsZWFyZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xlYXJlZEVycm9yID0gUG9vbENsZWFyZWRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGEgY29ubmVjdGlvbiBwb29sIGhhcyBiZWVuIGNsZWFyZWQgYWZ0ZXIgdGhlIG1vbml0b3IgZm9yIHRoYXQgc2VydmVyIHRpbWVkIG91dC5cbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yIGV4dGVuZHMgUG9vbENsZWFyZWRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIocG9vbCwgYENvbm5lY3Rpb24gdG8gJHtwb29sLmFkZHJlc3N9IGludGVycnVwdGVkIGR1ZSB0byBzZXJ2ZXIgbW9uaXRvciB0aW1lb3V0YCk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1Bvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvciA9IFBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIGEgcmVxdWVzdCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIHRpbWVzIG91dFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFdhaXRRdWV1ZVRpbWVvdXRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29Ecml2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGFkZHJlc3MpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvV2FpdFF1ZXVlVGltZW91dEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLldhaXRRdWV1ZVRpbWVvdXRFcnJvciA9IFdhaXRRdWV1ZVRpbWVvdXRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJXYWl0UXVldWVUaW1lb3V0RXJyb3IiLCJQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yIiwiUG9vbENsZWFyZWRFcnJvciIsIlBvb2xDbG9zZWRFcnJvciIsImVycm9yXzEiLCJyZXF1aXJlIiwiTW9uZ29Ecml2ZXJFcnJvciIsImNvbnN0cnVjdG9yIiwicG9vbCIsImFkZHJlc3MiLCJuYW1lIiwiTW9uZ29OZXR3b3JrRXJyb3IiLCJtZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwic2VydmVyRXJyb3IiLCJjYXVzZSIsInVuZGVmaW5lZCIsImFkZEVycm9yTGFiZWwiLCJNb25nb0Vycm9yTGFiZWwiLCJQb29sUmVxdXN0ZWRSZXRyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/handshake/client_metadata.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getFAASEnv = exports.addContainerMetadata = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = (__webpack_require__(/*! ../../../package.json */ \"(ssr)/./node_modules/mongodb/package.json\").version);\n/** @internal */ class LimitedSizeDocument {\n    constructor(maxSize){\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */ this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */ ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */ function makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = \"\" } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, \"utf8\") <= 128 ? options.appName : Buffer.from(appName, \"utf8\").subarray(0, 128).toString(\"utf8\");\n        metadataDocument.ifItFitsItSits(\"application\", {\n            name\n        });\n    }\n    const { name = \"\", version = \"\", platform = \"\" } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : \"nodejs\",\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits(\"driver\", driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError(\"Unable to include driverInfo name and version, metadata cannot exceed 512 bytes\");\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits(\"platform\", runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError(\"Unable to include driverInfo platform, metadata cannot exceed 512 bytes\");\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map().set(\"name\", process.platform).set(\"architecture\", process.arch).set(\"version\", os.release()).set(\"type\", os.type());\n    if (!metadataDocument.ifItFitsItSits(\"os\", osInfo)) {\n        for (const key of osInfo.keys()){\n            osInfo.delete(key);\n            if (osInfo.size === 0) break;\n            if (metadataDocument.ifItFitsItSits(\"os\", osInfo)) break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits(\"env\", faasEnv)) {\n            for (const key of faasEnv.keys()){\n                faasEnv.delete(key);\n                if (faasEnv.size === 0) break;\n                if (metadataDocument.ifItFitsItSits(\"env\", faasEnv)) break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\nlet dockerPromise;\n/** @internal */ async function getContainerMetadata() {\n    const containerMetadata = {};\n    dockerPromise ??= fs_1.promises.access(\"/.dockerenv\").then(()=>true, ()=>false);\n    const isDocker = await dockerPromise;\n    const { KUBERNETES_SERVICE_HOST = \"\" } = process.env;\n    const isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;\n    if (isDocker) containerMetadata.runtime = \"docker\";\n    if (isKubernetes) containerMetadata.orchestrator = \"kubernetes\";\n    return containerMetadata;\n}\n/**\n * @internal\n * Re-add each metadata value.\n * Attempt to add new env container metadata, but keep old data if it does not fit.\n */ async function addContainerMetadata(originalMetadata) {\n    const containerMetadata = await getContainerMetadata();\n    if (Object.keys(containerMetadata).length === 0) return originalMetadata;\n    const extendedMetadata = new LimitedSizeDocument(512);\n    const extendedEnvMetadata = {\n        ...originalMetadata?.env,\n        container: containerMetadata\n    };\n    for (const [key, val] of Object.entries(originalMetadata)){\n        if (key !== \"env\") {\n            extendedMetadata.ifItFitsItSits(key, val);\n        } else {\n            if (!extendedMetadata.ifItFitsItSits(\"env\", extendedEnvMetadata)) {\n                // add in old data if newer / extended metadata does not fit\n                extendedMetadata.ifItFitsItSits(\"env\", val);\n            }\n        }\n    }\n    if (!(\"env\" in originalMetadata)) {\n        extendedMetadata.ifItFitsItSits(\"env\", extendedEnvMetadata);\n    }\n    return extendedMetadata.toObject();\n}\nexports.addContainerMetadata = addContainerMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */ function getFAASEnv() {\n    const { AWS_EXECUTION_ENV = \"\", AWS_LAMBDA_RUNTIME_API = \"\", FUNCTIONS_WORKER_RUNTIME = \"\", K_SERVICE = \"\", FUNCTION_NAME = \"\", VERCEL = \"\", AWS_LAMBDA_FUNCTION_MEMORY_SIZE = \"\", AWS_REGION = \"\", FUNCTION_MEMORY_MB = \"\", FUNCTION_REGION = \"\", FUNCTION_TIMEOUT_SEC = \"\", VERCEL_REGION = \"\" } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith(\"AWS_Lambda_\") || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set(\"region\", VERCEL_REGION);\n        }\n        faasEnv.set(\"name\", \"vercel\");\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set(\"region\", AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 && Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set(\"memory_mb\", new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set(\"name\", \"aws.lambda\");\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set(\"name\", \"azure.func\");\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set(\"region\", FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set(\"memory_mb\", new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set(\"timeout_sec\", new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set(\"name\", \"gcp.func\");\n        return faasEnv;\n    }\n    return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */ function getRuntimeInfo() {\n    if (\"Deno\" in globalThis) {\n        const version = typeof Deno?.version?.deno === \"string\" ? Deno?.version?.deno : \"0.0.0-unknown\";\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if (\"Bun\" in globalThis) {\n        const version = typeof Bun?.version === \"string\" ? Bun?.version : \"0.0.0-unknown\";\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n} //# sourceMappingURL=client_metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/metrics.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/metrics.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */ class ConnectionPoolMetrics {\n    constructor(){\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */ markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        } else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */ markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        } else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */ info(maxPoolSize) {\n        return \"Timed out while checking out a connection from connection pool: \" + `maxPoolSize: ${maxPoolSize}, ` + `connections in use by cursors: ${this.cursorConnections}, ` + `connections in use by transactions: ${this.txnConnections}, ` + `connections in use by other operations: ${this.otherConnections}`;\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */ reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nConnectionPoolMetrics.TXN = \"txn\";\nConnectionPoolMetrics.CURSOR = \"cursor\";\nConnectionPoolMetrics.OTHER = \"other\";\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics; //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9tZXRyaWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDLGNBQWMsR0FDZCxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNDLGdCQUFnQixHQUFHO0lBQzVCO0lBQ0E7O0tBRUMsR0FDREMsV0FBV0MsT0FBTyxFQUFFO1FBQ2hCLElBQUlBLFlBQVlOLHNCQUFzQk8sR0FBRyxFQUFFO1lBQ3ZDLElBQUksQ0FBQ0wsY0FBYyxJQUFJO1FBQzNCLE9BQ0ssSUFBSUksWUFBWU4sc0JBQXNCUSxNQUFNLEVBQUU7WUFDL0MsSUFBSSxDQUFDTCxpQkFBaUIsSUFBSTtRQUM5QixPQUNLO1lBQ0QsSUFBSSxDQUFDQyxnQkFBZ0IsSUFBSTtRQUM3QjtJQUNKO0lBQ0E7O0tBRUMsR0FDREssYUFBYUgsT0FBTyxFQUFFO1FBQ2xCLElBQUlBLFlBQVlOLHNCQUFzQk8sR0FBRyxFQUFFO1lBQ3ZDLElBQUksQ0FBQ0wsY0FBYyxJQUFJO1FBQzNCLE9BQ0ssSUFBSUksWUFBWU4sc0JBQXNCUSxNQUFNLEVBQUU7WUFDL0MsSUFBSSxDQUFDTCxpQkFBaUIsSUFBSTtRQUM5QixPQUNLO1lBQ0QsSUFBSSxDQUFDQyxnQkFBZ0IsSUFBSTtRQUM3QjtJQUNKO0lBQ0E7O0tBRUMsR0FDRE0sS0FBS0MsV0FBVyxFQUFFO1FBQ2QsT0FBUSxxRUFDSixDQUFDLGFBQWEsRUFBRUEsWUFBWSxFQUFFLENBQUMsR0FDL0IsQ0FBQywrQkFBK0IsRUFBRSxJQUFJLENBQUNSLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxHQUM1RCxDQUFDLG9DQUFvQyxFQUFFLElBQUksQ0FBQ0QsY0FBYyxDQUFDLEVBQUUsQ0FBQyxHQUM5RCxDQUFDLHdDQUF3QyxFQUFFLElBQUksQ0FBQ0UsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRTtJQUNBOztLQUVDLEdBQ0RRLFFBQVE7UUFDSixJQUFJLENBQUNWLGNBQWMsR0FBRztRQUN0QixJQUFJLENBQUNDLGlCQUFpQixHQUFHO1FBQ3pCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7SUFDNUI7QUFDSjtBQUNBSixzQkFBc0JPLEdBQUcsR0FBRztBQUM1QlAsc0JBQXNCUSxNQUFNLEdBQUc7QUFDL0JSLHNCQUFzQmEsS0FBSyxHQUFHO0FBQzlCZiw2QkFBNkIsR0FBR0UsdUJBQ2hDLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9tZXRyaWNzLmpzP2ExNDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sTWV0cmljcyA9IHZvaWQgMDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbm5lY3Rpb25Qb29sTWV0cmljcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFyayBhIGNvbm5lY3Rpb24gYXMgcGlubmVkIGZvciBhIHNwZWNpZmljIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBtYXJrUGlubmVkKHBpblR5cGUpIHtcbiAgICAgICAgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4pIHtcbiAgICAgICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbm1hcmsgYSBjb25uZWN0aW9uIGFzIHBpbm5lZCBmb3IgYW4gb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIG1hcmtVbnBpbm5lZChwaW5UeXBlKSB7XG4gICAgICAgIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOKSB7XG4gICAgICAgICAgICB0aGlzLnR4bkNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLkNVUlNPUikge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JDb25uZWN0aW9ucyAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbWFwIG1ldHJpY3MgYXMgYSBzdHJpbmcuXG4gICAgICovXG4gICAgaW5mbyhtYXhQb29sU2l6ZSkge1xuICAgICAgICByZXR1cm4gKCdUaW1lZCBvdXQgd2hpbGUgY2hlY2tpbmcgb3V0IGEgY29ubmVjdGlvbiBmcm9tIGNvbm5lY3Rpb24gcG9vbDogJyArXG4gICAgICAgICAgICBgbWF4UG9vbFNpemU6ICR7bWF4UG9vbFNpemV9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgY3Vyc29yczogJHt0aGlzLmN1cnNvckNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IHRyYW5zYWN0aW9uczogJHt0aGlzLnR4bkNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IG90aGVyIG9wZXJhdGlvbnM6ICR7dGhpcy5vdGhlckNvbm5lY3Rpb25zfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgbWV0cmljcyB0byB0aGUgaW5pdGlhbCB2YWx1ZXMuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG59XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOID0gJ3R4bic7XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SID0gJ2N1cnNvcic7XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuT1RIRVIgPSAnb3RoZXInO1xuZXhwb3J0cy5Db25uZWN0aW9uUG9vbE1ldHJpY3MgPSBDb25uZWN0aW9uUG9vbE1ldHJpY3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNvbm5lY3Rpb25Qb29sTWV0cmljcyIsImNvbnN0cnVjdG9yIiwidHhuQ29ubmVjdGlvbnMiLCJjdXJzb3JDb25uZWN0aW9ucyIsIm90aGVyQ29ubmVjdGlvbnMiLCJtYXJrUGlubmVkIiwicGluVHlwZSIsIlRYTiIsIkNVUlNPUiIsIm1hcmtVbnBpbm5lZCIsImluZm8iLCJtYXhQb29sU2l6ZSIsInJlc2V0IiwiT1RIRVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/stream_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ../sdam/server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst RESPONSE_FIELDS = [\n    \"minWireVersion\",\n    \"maxWireVersion\",\n    \"maxBsonObjectSize\",\n    \"maxMessageSizeBytes\",\n    \"maxWriteBatchSize\",\n    \"logicalSessionTimeoutMinutes\"\n];\n/** @public */ class StreamDescription {\n    constructor(address, options){\n        this.hello = null;\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n        this.serverConnectionId = null;\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.hello = response;\n        this.type = (0, server_description_1.parseServerType)(response);\n        if (\"connectionId\" in response) {\n            this.serverConnectionId = this.parseServerConnectionID(response.connectionId);\n        } else {\n            this.serverConnectionId = null;\n        }\n        for (const field of RESPONSE_FIELDS){\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if (\"__nodejs_mock_server__\" in response) {\n                this.__nodejs_mock_server__ = response[\"__nodejs_mock_server__\"];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter((c)=>response.compression?.includes(c))[0];\n        }\n    }\n    /* @internal */ parseServerConnectionID(serverConnectionId) {\n        // Connection ids are always integral, so it's safe to coerce doubles as well as\n        // any integral type.\n        return bson_1.Long.isLong(serverConnectionId) ? serverConnectionId.toBigInt() : BigInt(serverConnectionId);\n    }\n}\nexports.StreamDescription = StreamDescription; //# sourceMappingURL=stream_description.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9zdHJlYW1fZGVzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMseURBQVM7QUFDaEMsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsdUVBQWdCO0FBQ3pDLE1BQU1FLHVCQUF1QkYsbUJBQU9BLENBQUMsK0ZBQTRCO0FBQ2pFLE1BQU1HLGtCQUFrQjtJQUNwQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELFlBQVksR0FDWixNQUFNTDtJQUNGTSxZQUFZQyxPQUFPLEVBQUVDLE9BQU8sQ0FBRTtRQUMxQixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0YsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0csSUFBSSxHQUFHUCxTQUFTUSxVQUFVLENBQUNDLE9BQU87UUFDdkMsSUFBSSxDQUFDQyxjQUFjLEdBQUdDO1FBQ3RCLElBQUksQ0FBQ0MsY0FBYyxHQUFHRDtRQUN0QixJQUFJLENBQUNFLGlCQUFpQixHQUFHO1FBQ3pCLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUc7UUFDM0IsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNDLDRCQUE0QixHQUFHWCxTQUFTVztRQUM3QyxJQUFJLENBQUNDLFlBQVksR0FBRyxDQUFDLENBQUNaLFNBQVNZO1FBQy9CLElBQUksQ0FBQ0MsV0FBVyxHQUNaYixXQUFXQSxRQUFRYSxXQUFXLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ2YsUUFBUWEsV0FBVyxJQUM3RGIsUUFBUWEsV0FBVyxHQUNuQixFQUFFO1FBQ1osSUFBSSxDQUFDRyxrQkFBa0IsR0FBRztJQUM5QjtJQUNBQyxnQkFBZ0JDLFFBQVEsRUFBRTtRQUN0QixJQUFJQSxZQUFZLE1BQU07WUFDbEI7UUFDSjtRQUNBLElBQUksQ0FBQ2pCLEtBQUssR0FBR2lCO1FBQ2IsSUFBSSxDQUFDaEIsSUFBSSxHQUFHLENBQUMsR0FBR04scUJBQXFCdUIsZUFBZSxFQUFFRDtRQUN0RCxJQUFJLGtCQUFrQkEsVUFBVTtZQUM1QixJQUFJLENBQUNGLGtCQUFrQixHQUFHLElBQUksQ0FBQ0ksdUJBQXVCLENBQUNGLFNBQVNHLFlBQVk7UUFDaEYsT0FDSztZQUNELElBQUksQ0FBQ0wsa0JBQWtCLEdBQUc7UUFDOUI7UUFDQSxLQUFLLE1BQU1NLFNBQVN6QixnQkFBaUI7WUFDakMsSUFBSXFCLFFBQVEsQ0FBQ0ksTUFBTSxJQUFJLE1BQU07Z0JBQ3pCLElBQUksQ0FBQ0EsTUFBTSxHQUFHSixRQUFRLENBQUNJLE1BQU07WUFDakM7WUFDQSxlQUFlO1lBQ2YsSUFBSSw0QkFBNEJKLFVBQVU7Z0JBQ3RDLElBQUksQ0FBQ0ssc0JBQXNCLEdBQUdMLFFBQVEsQ0FBQyx5QkFBeUI7WUFDcEU7UUFDSjtRQUNBLElBQUlBLFNBQVNNLFdBQVcsRUFBRTtZQUN0QixJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJLENBQUNaLFdBQVcsQ0FBQ2EsTUFBTSxDQUFDQyxDQUFBQSxJQUFLVCxTQUFTTSxXQUFXLEVBQUVJLFNBQVNELEdBQUcsQ0FBQyxFQUFFO1FBQ3hGO0lBQ0o7SUFDQSxhQUFhLEdBQ2JQLHdCQUF3Qkosa0JBQWtCLEVBQUU7UUFDeEMsZ0ZBQWdGO1FBQ2hGLHFCQUFxQjtRQUNyQixPQUFPdkIsT0FBT29DLElBQUksQ0FBQ0MsTUFBTSxDQUFDZCxzQkFDcEJBLG1CQUFtQmUsUUFBUSxLQUV6QkMsT0FBT2hCO0lBQ25CO0FBQ0o7QUFDQTFCLHlCQUF5QixHQUFHRSxtQkFDNUIsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3N0cmVhbV9kZXNjcmlwdGlvbi5qcz9iMjFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vc2RhbS9jb21tb25cIik7XG5jb25zdCBzZXJ2ZXJfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL3NlcnZlcl9kZXNjcmlwdGlvblwiKTtcbmNvbnN0IFJFU1BPTlNFX0ZJRUxEUyA9IFtcbiAgICAnbWluV2lyZVZlcnNpb24nLFxuICAgICdtYXhXaXJlVmVyc2lvbicsXG4gICAgJ21heEJzb25PYmplY3RTaXplJyxcbiAgICAnbWF4TWVzc2FnZVNpemVCeXRlcycsXG4gICAgJ21heFdyaXRlQmF0Y2hTaXplJyxcbiAgICAnbG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcydcbl07XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgU3RyZWFtRGVzY3JpcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5oZWxsbyA9IG51bGw7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMudHlwZSA9IGNvbW1vbl8xLlNlcnZlclR5cGUuVW5rbm93bjtcbiAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhCc29uT2JqZWN0U2l6ZSA9IDE2Nzc3MjE2O1xuICAgICAgICB0aGlzLm1heE1lc3NhZ2VTaXplQnl0ZXMgPSA0ODAwMDAwMDtcbiAgICAgICAgdGhpcy5tYXhXcml0ZUJhdGNoU2l6ZSA9IDEwMDAwMDtcbiAgICAgICAgdGhpcy5sb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzID0gb3B0aW9ucz8ubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcztcbiAgICAgICAgdGhpcy5sb2FkQmFsYW5jZWQgPSAhIW9wdGlvbnM/LmxvYWRCYWxhbmNlZDtcbiAgICAgICAgdGhpcy5jb21wcmVzc29ycyA9XG4gICAgICAgICAgICBvcHRpb25zICYmIG9wdGlvbnMuY29tcHJlc3NvcnMgJiYgQXJyYXkuaXNBcnJheShvcHRpb25zLmNvbXByZXNzb3JzKVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5jb21wcmVzc29yc1xuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgIHRoaXMuc2VydmVyQ29ubmVjdGlvbklkID0gbnVsbDtcbiAgICB9XG4gICAgcmVjZWl2ZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWxsbyA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnR5cGUgPSAoMCwgc2VydmVyX2Rlc2NyaXB0aW9uXzEucGFyc2VTZXJ2ZXJUeXBlKShyZXNwb25zZSk7XG4gICAgICAgIGlmICgnY29ubmVjdGlvbklkJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJDb25uZWN0aW9uSWQgPSB0aGlzLnBhcnNlU2VydmVyQ29ubmVjdGlvbklEKHJlc3BvbnNlLmNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlckNvbm5lY3Rpb25JZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBSRVNQT05TRV9GSUVMRFMpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVtmaWVsZF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXNbZmllbGRdID0gcmVzcG9uc2VbZmllbGRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdGluZyBjYXNlXG4gICAgICAgICAgICBpZiAoJ19fbm9kZWpzX21vY2tfc2VydmVyX18nIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX25vZGVqc19tb2NrX3NlcnZlcl9fID0gcmVzcG9uc2VbJ19fbm9kZWpzX21vY2tfc2VydmVyX18nXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2UuY29tcHJlc3Npb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29tcHJlc3NvciA9IHRoaXMuY29tcHJlc3NvcnMuZmlsdGVyKGMgPT4gcmVzcG9uc2UuY29tcHJlc3Npb24/LmluY2x1ZGVzKGMpKVswXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBAaW50ZXJuYWwgKi9cbiAgICBwYXJzZVNlcnZlckNvbm5lY3Rpb25JRChzZXJ2ZXJDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgLy8gQ29ubmVjdGlvbiBpZHMgYXJlIGFsd2F5cyBpbnRlZ3JhbCwgc28gaXQncyBzYWZlIHRvIGNvZXJjZSBkb3VibGVzIGFzIHdlbGwgYXNcbiAgICAgICAgLy8gYW55IGludGVncmFsIHR5cGUuXG4gICAgICAgIHJldHVybiBic29uXzEuTG9uZy5pc0xvbmcoc2VydmVyQ29ubmVjdGlvbklkKVxuICAgICAgICAgICAgPyBzZXJ2ZXJDb25uZWN0aW9uSWQudG9CaWdJbnQoKVxuICAgICAgICAgICAgOiAvLyBAdHMtZXhwZWN0LWVycm9yOiBEb3VibGVzIGFyZSBjb2VyY2libGUgdG8gbnVtYmVyXG4gICAgICAgICAgICAgICAgQmlnSW50KHNlcnZlckNvbm5lY3Rpb25JZCk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdGlvbiA9IFN0cmVhbURlc2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtX2Rlc2NyaXB0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0cmVhbURlc2NyaXB0aW9uIiwiYnNvbl8xIiwicmVxdWlyZSIsImNvbW1vbl8xIiwic2VydmVyX2Rlc2NyaXB0aW9uXzEiLCJSRVNQT05TRV9GSUVMRFMiLCJjb25zdHJ1Y3RvciIsImFkZHJlc3MiLCJvcHRpb25zIiwiaGVsbG8iLCJ0eXBlIiwiU2VydmVyVHlwZSIsIlVua25vd24iLCJtaW5XaXJlVmVyc2lvbiIsInVuZGVmaW5lZCIsIm1heFdpcmVWZXJzaW9uIiwibWF4QnNvbk9iamVjdFNpemUiLCJtYXhNZXNzYWdlU2l6ZUJ5dGVzIiwibWF4V3JpdGVCYXRjaFNpemUiLCJsb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzIiwibG9hZEJhbGFuY2VkIiwiY29tcHJlc3NvcnMiLCJBcnJheSIsImlzQXJyYXkiLCJzZXJ2ZXJDb25uZWN0aW9uSWQiLCJyZWNlaXZlUmVzcG9uc2UiLCJyZXNwb25zZSIsInBhcnNlU2VydmVyVHlwZSIsInBhcnNlU2VydmVyQ29ubmVjdGlvbklEIiwiY29ubmVjdGlvbklkIiwiZmllbGQiLCJfX25vZGVqc19tb2NrX3NlcnZlcl9fIiwiY29tcHJlc3Npb24iLCJjb21wcmVzc29yIiwiZmlsdGVyIiwiYyIsImluY2x1ZGVzIiwiTG9uZyIsImlzTG9uZyIsInRvQmlnSW50IiwiQmlnSW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/compression.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decompressResponse = exports.compressCommand = exports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst commands_1 = __webpack_require__(/*! ../commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @public */ exports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    \"saslStart\",\n    \"saslContinue\",\n    \"getnonce\",\n    \"authenticate\",\n    \"createUser\",\n    \"updateUser\",\n    \"copydbSaslStart\",\n    \"copydbgetnonce\",\n    \"copydb\"\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if (\"kModuleError\" in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch(options.agreedCompressor){\n        case \"snappy\":\n            {\n                Snappy ??= loadSnappy();\n                return Snappy.compress(dataToBeCompressed);\n            }\n        case \"zstd\":\n            {\n                loadZstd();\n                if (\"kModuleError\" in zstd) {\n                    throw zstd[\"kModuleError\"];\n                }\n                return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n            }\n        case \"zlib\":\n            {\n                if (options.zlibCompressionLevel) {\n                    zlibOptions.level = options.zlibCompressionLevel;\n                }\n                return zlibDeflate(dataToBeCompressed, zlibOptions);\n            }\n        default:\n            {\n                throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n            }\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch(compressorID){\n        case exports.Compressor.snappy:\n            {\n                Snappy ??= loadSnappy();\n                return Snappy.uncompress(compressedData, {\n                    asBuffer: true\n                });\n            }\n        case exports.Compressor.zstd:\n            {\n                loadZstd();\n                if (\"kModuleError\" in zstd) {\n                    throw zstd[\"kModuleError\"];\n                }\n                return zstd.decompress(compressedData);\n            }\n        case exports.Compressor.zlib:\n            {\n                return zlibInflate(compressedData);\n            }\n        default:\n            {\n                return compressedData;\n            }\n    }\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */ function loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */ async function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === \"none\" || !commands_1.OpCompressedRequest.canCompress(command) ? command : new commands_1.OpCompressedRequest(command, {\n        agreedCompressor: description.agreedCompressor ?? \"none\",\n        zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n    });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\nexports.compressCommand = compressCommand;\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */ async function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError(\"Message body and message header must be the same length\");\n    }\n    return new ResponseType(message, header, messageBody);\n}\nexports.decompressResponse = decompressResponse; //# sourceMappingURL=compression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = \"3.6\";\nexports.MAX_SUPPORTED_SERVER_VERSION = \"7.0\";\nexports.MIN_SUPPORTED_WIRE_VERSION = 6;\nexports.MAX_SUPPORTED_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = \"7.0\";\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHQSxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSxpQkFBaUIsR0FBR0EsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSx1Q0FBdUMsR0FBR0EscUNBQXFDLEdBQUdBLGtDQUFrQyxHQUFHQSxrQ0FBa0MsR0FBR0Esb0NBQW9DLEdBQUdBLG9DQUFvQyxHQUFHLEtBQUs7QUFDMVhBLG9DQUFvQyxHQUFHO0FBQ3ZDQSxvQ0FBb0MsR0FBRztBQUN2Q0Esa0NBQWtDLEdBQUc7QUFDckNBLGtDQUFrQyxHQUFHO0FBQ3JDQSxxQ0FBcUMsR0FBRztBQUN4Q0EsdUNBQXVDLEdBQUc7QUFDMUNBLGdCQUFnQixHQUFHO0FBQ25CQSxpQkFBaUIsR0FBRztBQUNwQkEsaUJBQWlCLEdBQUc7QUFDcEJBLGdCQUFnQixHQUFHO0FBQ25CQSxpQkFBaUIsR0FBRztBQUNwQkEscUJBQXFCLEdBQUc7QUFDeEJBLGNBQWMsR0FBRyxNQUNqQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9jb25zdGFudHMuanM/Yjg5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT1BfTVNHID0gZXhwb3J0cy5PUF9DT01QUkVTU0VEID0gZXhwb3J0cy5PUF9ERUxFVEUgPSBleHBvcnRzLk9QX1FVRVJZID0gZXhwb3J0cy5PUF9JTlNFUlQgPSBleHBvcnRzLk9QX1VQREFURSA9IGV4cG9ydHMuT1BfUkVQTFkgPSBleHBvcnRzLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OID0gZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSBleHBvcnRzLk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSB2b2lkIDA7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSAnMy42JztcbmV4cG9ydHMuTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9ICc3LjAnO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IDY7XG5leHBvcnRzLk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gMjE7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OID0gMjE7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT04gPSAnNy4wJztcbmV4cG9ydHMuT1BfUkVQTFkgPSAxO1xuZXhwb3J0cy5PUF9VUERBVEUgPSAyMDAxO1xuZXhwb3J0cy5PUF9JTlNFUlQgPSAyMDAyO1xuZXhwb3J0cy5PUF9RVUVSWSA9IDIwMDQ7XG5leHBvcnRzLk9QX0RFTEVURSA9IDIwMDY7XG5leHBvcnRzLk9QX0NPTVBSRVNTRUQgPSAyMDEyO1xuZXhwb3J0cy5PUF9NU0cgPSAyMDEzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk9QX01TRyIsIk9QX0NPTVBSRVNTRUQiLCJPUF9ERUxFVEUiLCJPUF9RVUVSWSIsIk9QX0lOU0VSVCIsIk9QX1VQREFURSIsIk9QX1JFUExZIiwiTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTiIsIk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OIiwiTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04iLCJNSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiIsIk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04iLCJNSU5fU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.onData = void 0;\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/**\n * onData is adapted from Node.js' events.on helper\n * https://nodejs.org/api/events.html#eventsonemitter-eventname-options\n *\n * Returns an AsyncIterator that iterates each 'data' event emitted from emitter.\n * It will reject upon an error event.\n */ function onData(emitter) {\n    // Setup pending events and pending promise lists\n    /**\n     * When the caller has not yet called .next(), we store the\n     * value from the event in this list. Next time they call .next()\n     * we pull the first value out of this list and resolve a promise with it.\n     */ const unconsumedEvents = new utils_1.List();\n    /**\n     * When there has not yet been an event, a new promise will be created\n     * and implicitly stored in this list. When an event occurs we take the first\n     * promise in this list and resolve it.\n     */ const unconsumedPromises = new utils_1.List();\n    /**\n     * Stored an error created by an error event.\n     * This error will turn into a rejection for the subsequent .next() call\n     */ let error = null;\n    /** Set to true only after event listeners have been removed. */ let finished = false;\n    const iterator = {\n        next () {\n            // First, we consume all unread events\n            const value = unconsumedEvents.shift();\n            if (value != null) {\n                return Promise.resolve({\n                    value,\n                    done: false\n                });\n            }\n            // Then we error, if an error happened\n            // This happens one time if at all, because after 'error'\n            // we stop listening\n            if (error != null) {\n                const p = Promise.reject(error);\n                // Only the first element errors\n                error = null;\n                return p;\n            }\n            // If the iterator is finished, resolve to done\n            if (finished) return closeHandler();\n            // Wait until an event happens\n            const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n            unconsumedPromises.push({\n                resolve,\n                reject\n            });\n            return promise;\n        },\n        return () {\n            return closeHandler();\n        },\n        throw (err) {\n            errorHandler(err);\n            return Promise.resolve({\n                value: undefined,\n                done: true\n            });\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n    // Adding event handlers\n    emitter.on(\"data\", eventHandler);\n    emitter.on(\"error\", errorHandler);\n    return iterator;\n    function eventHandler(value) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null) promise.resolve({\n            value,\n            done: false\n        });\n        else unconsumedEvents.push(value);\n    }\n    function errorHandler(err) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null) promise.reject(err);\n        else error = err;\n        void closeHandler();\n    }\n    function closeHandler() {\n        // Adding event handlers\n        emitter.off(\"data\", eventHandler);\n        emitter.off(\"error\", errorHandler);\n        finished = true;\n        const doneResult = {\n            value: undefined,\n            done: finished\n        };\n        for (const promise of unconsumedPromises){\n            promise.resolve(doneResult);\n        }\n        return Promise.resolve(doneResult);\n    }\n}\nexports.onData = onData; //# sourceMappingURL=on_data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL29uX2RhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBRyxLQUFLO0FBQ3RCLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDOzs7Ozs7Q0FNQyxHQUNELFNBQVNGLE9BQU9HLE9BQU87SUFDbkIsaURBQWlEO0lBQ2pEOzs7O0tBSUMsR0FDRCxNQUFNQyxtQkFBbUIsSUFBSUgsUUFBUUksSUFBSTtJQUN6Qzs7OztLQUlDLEdBQ0QsTUFBTUMscUJBQXFCLElBQUlMLFFBQVFJLElBQUk7SUFDM0M7OztLQUdDLEdBQ0QsSUFBSUUsUUFBUTtJQUNaLDhEQUE4RCxHQUM5RCxJQUFJQyxXQUFXO0lBQ2YsTUFBTUMsV0FBVztRQUNiQztZQUNJLHNDQUFzQztZQUN0QyxNQUFNWCxRQUFRSyxpQkFBaUJPLEtBQUs7WUFDcEMsSUFBSVosU0FBUyxNQUFNO2dCQUNmLE9BQU9hLFFBQVFDLE9BQU8sQ0FBQztvQkFBRWQ7b0JBQU9lLE1BQU07Z0JBQU07WUFDaEQ7WUFDQSxzQ0FBc0M7WUFDdEMseURBQXlEO1lBQ3pELG9CQUFvQjtZQUNwQixJQUFJUCxTQUFTLE1BQU07Z0JBQ2YsTUFBTVEsSUFBSUgsUUFBUUksTUFBTSxDQUFDVDtnQkFDekIsZ0NBQWdDO2dCQUNoQ0EsUUFBUTtnQkFDUixPQUFPUTtZQUNYO1lBQ0EsK0NBQStDO1lBQy9DLElBQUlQLFVBQ0EsT0FBT1M7WUFDWCw4QkFBOEI7WUFDOUIsTUFBTSxFQUFFQyxPQUFPLEVBQUVMLE9BQU8sRUFBRUcsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHZixRQUFRa0Isb0JBQW9CO1lBQ3JFYixtQkFBbUJjLElBQUksQ0FBQztnQkFBRVA7Z0JBQVNHO1lBQU87WUFDMUMsT0FBT0U7UUFDWDtRQUNBRztZQUNJLE9BQU9KO1FBQ1g7UUFDQUssT0FBTUMsR0FBRztZQUNMQyxhQUFhRDtZQUNiLE9BQU9YLFFBQVFDLE9BQU8sQ0FBQztnQkFBRWQsT0FBTzBCO2dCQUFXWCxNQUFNO1lBQUs7UUFDMUQ7UUFDQSxDQUFDWSxPQUFPQyxhQUFhLENBQUM7WUFDbEIsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtJQUNBLHdCQUF3QjtJQUN4QnhCLFFBQVF5QixFQUFFLENBQUMsUUFBUUM7SUFDbkIxQixRQUFReUIsRUFBRSxDQUFDLFNBQVNKO0lBQ3BCLE9BQU9mO0lBQ1AsU0FBU29CLGFBQWE5QixLQUFLO1FBQ3ZCLE1BQU1tQixVQUFVWixtQkFBbUJLLEtBQUs7UUFDeEMsSUFBSU8sV0FBVyxNQUNYQSxRQUFRTCxPQUFPLENBQUM7WUFBRWQ7WUFBT2UsTUFBTTtRQUFNO2FBRXJDVixpQkFBaUJnQixJQUFJLENBQUNyQjtJQUM5QjtJQUNBLFNBQVN5QixhQUFhRCxHQUFHO1FBQ3JCLE1BQU1MLFVBQVVaLG1CQUFtQkssS0FBSztRQUN4QyxJQUFJTyxXQUFXLE1BQ1hBLFFBQVFGLE1BQU0sQ0FBQ087YUFFZmhCLFFBQVFnQjtRQUNaLEtBQUtOO0lBQ1Q7SUFDQSxTQUFTQTtRQUNMLHdCQUF3QjtRQUN4QmQsUUFBUTJCLEdBQUcsQ0FBQyxRQUFRRDtRQUNwQjFCLFFBQVEyQixHQUFHLENBQUMsU0FBU047UUFDckJoQixXQUFXO1FBQ1gsTUFBTXVCLGFBQWE7WUFBRWhDLE9BQU8wQjtZQUFXWCxNQUFNTjtRQUFTO1FBQ3RELEtBQUssTUFBTVUsV0FBV1osbUJBQW9CO1lBQ3RDWSxRQUFRTCxPQUFPLENBQUNrQjtRQUNwQjtRQUNBLE9BQU9uQixRQUFRQyxPQUFPLENBQUNrQjtJQUMzQjtBQUNKO0FBQ0FqQyxjQUFjLEdBQUdFLFFBQ2pCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL29uX2RhdGEuanM/OWI0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25EYXRhID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbi8qKlxuICogb25EYXRhIGlzIGFkYXB0ZWQgZnJvbSBOb2RlLmpzJyBldmVudHMub24gaGVscGVyXG4gKiBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c29uZW1pdHRlci1ldmVudG5hbWUtb3B0aW9uc1xuICpcbiAqIFJldHVybnMgYW4gQXN5bmNJdGVyYXRvciB0aGF0IGl0ZXJhdGVzIGVhY2ggJ2RhdGEnIGV2ZW50IGVtaXR0ZWQgZnJvbSBlbWl0dGVyLlxuICogSXQgd2lsbCByZWplY3QgdXBvbiBhbiBlcnJvciBldmVudC5cbiAqL1xuZnVuY3Rpb24gb25EYXRhKGVtaXR0ZXIpIHtcbiAgICAvLyBTZXR1cCBwZW5kaW5nIGV2ZW50cyBhbmQgcGVuZGluZyBwcm9taXNlIGxpc3RzXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgY2FsbGVyIGhhcyBub3QgeWV0IGNhbGxlZCAubmV4dCgpLCB3ZSBzdG9yZSB0aGVcbiAgICAgKiB2YWx1ZSBmcm9tIHRoZSBldmVudCBpbiB0aGlzIGxpc3QuIE5leHQgdGltZSB0aGV5IGNhbGwgLm5leHQoKVxuICAgICAqIHdlIHB1bGwgdGhlIGZpcnN0IHZhbHVlIG91dCBvZiB0aGlzIGxpc3QgYW5kIHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXQuXG4gICAgICovXG4gICAgY29uc3QgdW5jb25zdW1lZEV2ZW50cyA9IG5ldyB1dGlsc18xLkxpc3QoKTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZXJlIGhhcyBub3QgeWV0IGJlZW4gYW4gZXZlbnQsIGEgbmV3IHByb21pc2Ugd2lsbCBiZSBjcmVhdGVkXG4gICAgICogYW5kIGltcGxpY2l0bHkgc3RvcmVkIGluIHRoaXMgbGlzdC4gV2hlbiBhbiBldmVudCBvY2N1cnMgd2UgdGFrZSB0aGUgZmlyc3RcbiAgICAgKiBwcm9taXNlIGluIHRoaXMgbGlzdCBhbmQgcmVzb2x2ZSBpdC5cbiAgICAgKi9cbiAgICBjb25zdCB1bmNvbnN1bWVkUHJvbWlzZXMgPSBuZXcgdXRpbHNfMS5MaXN0KCk7XG4gICAgLyoqXG4gICAgICogU3RvcmVkIGFuIGVycm9yIGNyZWF0ZWQgYnkgYW4gZXJyb3IgZXZlbnQuXG4gICAgICogVGhpcyBlcnJvciB3aWxsIHR1cm4gaW50byBhIHJlamVjdGlvbiBmb3IgdGhlIHN1YnNlcXVlbnQgLm5leHQoKSBjYWxsXG4gICAgICovXG4gICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAvKiogU2V0IHRvIHRydWUgb25seSBhZnRlciBldmVudCBsaXN0ZW5lcnMgaGF2ZSBiZWVuIHJlbW92ZWQuICovXG4gICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCwgd2UgY29uc3VtZSBhbGwgdW5yZWFkIGV2ZW50c1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB1bmNvbnN1bWVkRXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZSwgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGVuIHdlIGVycm9yLCBpZiBhbiBlcnJvciBoYXBwZW5lZFxuICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIG9uZSB0aW1lIGlmIGF0IGFsbCwgYmVjYXVzZSBhZnRlciAnZXJyb3InXG4gICAgICAgICAgICAvLyB3ZSBzdG9wIGxpc3RlbmluZ1xuICAgICAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgdGhlIGZpcnN0IGVsZW1lbnQgZXJyb3JzXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCByZXNvbHZlIHRvIGRvbmVcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VIYW5kbGVyKCk7XG4gICAgICAgICAgICAvLyBXYWl0IHVudGlsIGFuIGV2ZW50IGhhcHBlbnNcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0IH0gPSAoMCwgdXRpbHNfMS5wcm9taXNlV2l0aFJlc29sdmVycykoKTtcbiAgICAgICAgICAgIHVuY29uc3VtZWRQcm9taXNlcy5wdXNoKHsgcmVzb2x2ZSwgcmVqZWN0IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHJldHVybigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9zZUhhbmRsZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGhyb3coZXJyKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEFkZGluZyBldmVudCBoYW5kbGVyc1xuICAgIGVtaXR0ZXIub24oJ2RhdGEnLCBldmVudEhhbmRsZXIpO1xuICAgIGVtaXR0ZXIub24oJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgZnVuY3Rpb24gZXZlbnRIYW5kbGVyKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB1bmNvbnN1bWVkUHJvbWlzZXMuc2hpZnQoKTtcbiAgICAgICAgaWYgKHByb21pc2UgIT0gbnVsbClcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZSh7IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdW5jb25zdW1lZEV2ZW50cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGVycikge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdW5jb25zdW1lZFByb21pc2VzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChwcm9taXNlICE9IG51bGwpXG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgdm9pZCBjbG9zZUhhbmRsZXIoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VIYW5kbGVyKCkge1xuICAgICAgICAvLyBBZGRpbmcgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgZW1pdHRlci5vZmYoJ2RhdGEnLCBldmVudEhhbmRsZXIpO1xuICAgICAgICBlbWl0dGVyLm9mZignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGRvbmVSZXN1bHQgPSB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IGZpbmlzaGVkIH07XG4gICAgICAgIGZvciAoY29uc3QgcHJvbWlzZSBvZiB1bmNvbnN1bWVkUHJvbWlzZXMpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShkb25lUmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRvbmVSZXN1bHQpO1xuICAgIH1cbn1cbmV4cG9ydHMub25EYXRhID0gb25EYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25fZGF0YS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJvbkRhdGEiLCJ1dGlsc18xIiwicmVxdWlyZSIsImVtaXR0ZXIiLCJ1bmNvbnN1bWVkRXZlbnRzIiwiTGlzdCIsInVuY29uc3VtZWRQcm9taXNlcyIsImVycm9yIiwiZmluaXNoZWQiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZG9uZSIsInAiLCJyZWplY3QiLCJjbG9zZUhhbmRsZXIiLCJwcm9taXNlIiwicHJvbWlzZVdpdGhSZXNvbHZlcnMiLCJwdXNoIiwicmV0dXJuIiwidGhyb3ciLCJlcnIiLCJlcnJvckhhbmRsZXIiLCJ1bmRlZmluZWQiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwib24iLCJldmVudEhhbmRsZXIiLCJvZmYiLCJkb25lUmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/shared.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isSharded = exports.getReadPreference = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst topology_description_1 = __webpack_require__(/*! ../../sdam/topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference.\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    if (typeof readPreference === \"string\") {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    // happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server)=>server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\nexports.isSharded = isSharded; //# sourceMappingURL=shared.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLHlCQUF5QixHQUFHLEtBQUs7QUFDckQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxrRkFBdUI7QUFDekQsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsMEVBQW1CO0FBQzVDLE1BQU1HLHlCQUF5QkgsbUJBQU9BLENBQUMsc0dBQWlDO0FBQ3hFLFNBQVNGLGtCQUFrQk0sT0FBTztJQUM5QixvREFBb0Q7SUFDcEQsSUFBSUMsaUJBQWlCRCxTQUFTQyxrQkFBa0JKLGtCQUFrQkssY0FBYyxDQUFDQyxPQUFPO0lBQ3hGLElBQUksT0FBT0YsbUJBQW1CLFVBQVU7UUFDcENBLGlCQUFpQkosa0JBQWtCSyxjQUFjLENBQUNFLFVBQVUsQ0FBQ0g7SUFDakU7SUFDQSxJQUFJLENBQUVBLENBQUFBLDBCQUEwQkosa0JBQWtCSyxjQUFjLEdBQUc7UUFDL0QsTUFBTSxJQUFJUCxRQUFRVSx5QkFBeUIsQ0FBQztJQUNoRDtJQUNBLE9BQU9KO0FBQ1g7QUFDQVYseUJBQXlCLEdBQUdHO0FBQzVCLFNBQVNELFVBQVVhLGdCQUFnQjtJQUMvQixJQUFJQSxvQkFBb0IsTUFBTTtRQUMxQixPQUFPO0lBQ1g7SUFDQSxJQUFJQSxpQkFBaUJDLFdBQVcsSUFBSUQsaUJBQWlCQyxXQUFXLENBQUNDLElBQUksS0FBS1YsU0FBU1csVUFBVSxDQUFDQyxNQUFNLEVBQUU7UUFDbEcsT0FBTztJQUNYO0lBQ0Esd0ZBQXdGO0lBQ3hGLDRDQUE0QztJQUM1QyxJQUFJSixpQkFBaUJDLFdBQVcsSUFBSUQsaUJBQWlCQyxXQUFXLFlBQVlSLHVCQUF1QlksbUJBQW1CLEVBQUU7UUFDcEgsTUFBTUMsVUFBVUMsTUFBTUMsSUFBSSxDQUFDUixpQkFBaUJDLFdBQVcsQ0FBQ0ssT0FBTyxDQUFDRyxNQUFNO1FBQ3RFLE9BQU9ILFFBQVFJLElBQUksQ0FBQyxDQUFDQyxTQUFXQSxPQUFPVCxJQUFJLEtBQUtWLFNBQVNXLFVBQVUsQ0FBQ0MsTUFBTTtJQUM5RTtJQUNBLE9BQU87QUFDWDtBQUNBbkIsaUJBQWlCLEdBQUdFLFdBQ3BCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcz9mYjg1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1NoYXJkZWQgPSBleHBvcnRzLmdldFJlYWRQcmVmZXJlbmNlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uLy4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uL3NkYW0vY29tbW9uXCIpO1xuY29uc3QgdG9wb2xvZ3lfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9zZGFtL3RvcG9sb2d5X2Rlc2NyaXB0aW9uXCIpO1xuZnVuY3Rpb24gZ2V0UmVhZFByZWZlcmVuY2Uob3B0aW9ucykge1xuICAgIC8vIERlZmF1bHQgdG8gY29tbWFuZCB2ZXJzaW9uIG9mIHRoZSByZWFkUHJlZmVyZW5jZS5cbiAgICBsZXQgcmVhZFByZWZlcmVuY2UgPSBvcHRpb25zPy5yZWFkUHJlZmVyZW5jZSA/PyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5O1xuICAgIGlmICh0eXBlb2YgcmVhZFByZWZlcmVuY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlYWRQcmVmZXJlbmNlID0gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UuZnJvbVN0cmluZyhyZWFkUHJlZmVyZW5jZSk7XG4gICAgfVxuICAgIGlmICghKHJlYWRQcmVmZXJlbmNlIGluc3RhbmNlb2YgcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcInJlYWRQcmVmZXJlbmNlXCIgbXVzdCBiZSBhIFJlYWRQcmVmZXJlbmNlIGluc3RhbmNlJyk7XG4gICAgfVxuICAgIHJldHVybiByZWFkUHJlZmVyZW5jZTtcbn1cbmV4cG9ydHMuZ2V0UmVhZFByZWZlcmVuY2UgPSBnZXRSZWFkUHJlZmVyZW5jZTtcbmZ1bmN0aW9uIGlzU2hhcmRlZCh0b3BvbG9neU9yU2VydmVyKSB7XG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uICYmIHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24udHlwZSA9PT0gY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoaXMgaXMgaW5jcmVkaWJseSBpbmVmZmljaWVudCwgYW5kIHNob3VsZCBiZSByZW1vdmVkIG9uY2UgY29tbWFuZCBjb25zdHJ1Y3Rpb25cbiAgICAvLyBoYXBwZW5zIGJhc2VkIG9uIGBTZXJ2ZXJgIG5vdCBgVG9wb2xvZ3lgLlxuICAgIGlmICh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uICYmIHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gaW5zdGFuY2VvZiB0b3BvbG9neV9kZXNjcmlwdGlvbl8xLlRvcG9sb2d5RGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IEFycmF5LmZyb20odG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKTtcbiAgICAgICAgcmV0dXJuIHNlcnZlcnMuc29tZSgoc2VydmVyKSA9PiBzZXJ2ZXIudHlwZSA9PT0gY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzU2hhcmRlZCA9IGlzU2hhcmRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1NoYXJkZWQiLCJnZXRSZWFkUHJlZmVyZW5jZSIsImVycm9yXzEiLCJyZXF1aXJlIiwicmVhZF9wcmVmZXJlbmNlXzEiLCJjb21tb25fMSIsInRvcG9sb2d5X2Rlc2NyaXB0aW9uXzEiLCJvcHRpb25zIiwicmVhZFByZWZlcmVuY2UiLCJSZWFkUHJlZmVyZW5jZSIsInByaW1hcnkiLCJmcm9tU3RyaW5nIiwiTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciIsInRvcG9sb2d5T3JTZXJ2ZXIiLCJkZXNjcmlwdGlvbiIsInR5cGUiLCJTZXJ2ZXJUeXBlIiwiTW9uZ29zIiwiVG9wb2xvZ3lEZXNjcmlwdGlvbiIsInNlcnZlcnMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJzb21lIiwic2VydmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/collection.js":
/*!************************************************!*\
  !*** ./node_modules/mongodb/lib/collection.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Collection = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nconst list_search_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_search_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./operations/bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst count_1 = __webpack_require__(/*! ./operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst count_documents_1 = __webpack_require__(/*! ./operations/count_documents */ \"(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\");\nconst delete_1 = __webpack_require__(/*! ./operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst distinct_1 = __webpack_require__(/*! ./operations/distinct */ \"(ssr)/./node_modules/mongodb/lib/operations/distinct.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst estimated_document_count_1 = __webpack_require__(/*! ./operations/estimated_document_count */ \"(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst insert_1 = __webpack_require__(/*! ./operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst is_capped_1 = __webpack_require__(/*! ./operations/is_capped */ \"(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\");\nconst options_operation_1 = __webpack_require__(/*! ./operations/options_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst create_1 = __webpack_require__(/*! ./operations/search_indexes/create */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\");\nconst drop_2 = __webpack_require__(/*! ./operations/search_indexes/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\");\nconst update_1 = __webpack_require__(/*! ./operations/search_indexes/update */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\");\nconst update_2 = __webpack_require__(/*! ./operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */ class Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */ constructor(db, name, options){\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */ get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */ get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */ get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */ get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */ get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */ get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */ get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */ get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */ async insertOne(doc, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */ async insertMany(docs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? {\n            ordered: true\n        })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */ async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? {\n            ordered: true\n        })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */ async updateOne(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */ async replaceOne(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */ async updateMany(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */ async deleteOne(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */ async deleteMany(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */ async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */ async drop(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */ async options(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */ async isCapped(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */ async createIndex(indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */ async createIndexes(indexSpecs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, {\n            ...options,\n            maxTimeMS: undefined\n        })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */ async dropIndex(indexName, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */ async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, \"*\", (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */ listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */ async indexExists(indexes, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */ async indexInformation(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */ async estimatedDocumentCount(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */ async countDocuments(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */ async indexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndDelete(filter, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */ aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */ watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */ initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */ initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */ async count(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options = typeof indexNameOrOptions === \"object\" ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null ? null : typeof indexNameOrOptions === \"object\" ? null : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */ async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([\n            description\n        ]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */ async createSearchIndexes(descriptions) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */ async dropSearchIndex(name) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */ async updateSearchIndex(name, definition) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection; //# sourceMappingURL=collection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/connection_string.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/connection_string.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst mongodb_connection_string_url_1 = __webpack_require__(/*! mongodb-connection-string-url */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst client_metadata_1 = __webpack_require__(/*! ./cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst encrypter_1 = __webpack_require__(/*! ./encrypter */ \"(ssr)/./node_modules/mongodb/lib/encrypter.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst monitor_1 = __webpack_require__(/*! ./sdam/monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst VALID_TXT_RECORDS = [\n    \"authSource\",\n    \"replicaSet\",\n    \"loadBalanced\"\n];\nconst LB_SINGLE_HOST_ERROR = \"loadBalanced option only supported with a single host in the URI\";\nconst LB_REPLICA_SET_ERROR = \"loadBalanced option not supported with a replicaSet option\";\nconst LB_DIRECT_CONNECTION_ERROR = \"loadBalanced option not supported when directConnection is provided\";\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */ async function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== \"string\") {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    if (options.srvHost.split(\".\").length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        throw new error_1.MongoAPIError(\"URI must include hostname, domain name, and tld\");\n    }\n    // Asynchronously start TXT resolution so that we do not have to wait until\n    // the SRV record is resolved before starting a second DNS query.\n    const lookupAddress = options.srvHost;\n    const txtResolutionPromise = dns.promises.resolveTxt(lookupAddress);\n    txtResolutionPromise.catch(()=>{\n    /* rejections will be handled later */ });\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError(\"No addresses found at host\");\n    }\n    for (const { name } of addresses){\n        if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n            throw new error_1.MongoAPIError(\"Server record does not share hostname with parent URI\");\n        }\n    }\n    const hostAddresses = addresses.map((r)=>utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Use the result of resolving the TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await txtResolutionPromise;\n    } catch (error) {\n        if (error.code !== \"ENODATA\" && error.code !== \"ENOTFOUND\") {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError(\"Multiple text records not allowed\");\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(\"\"));\n    const txtRecordOptionKeys = [\n        ...txtRecordOptions.keys()\n    ];\n    if (txtRecordOptionKeys.some((key)=>!VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(\", \")}`);\n    }\n    if (VALID_TXT_RECORDS.some((option)=>txtRecordOptions.get(option) === \"\")) {\n        throw new error_1.MongoParseError(\"Cannot have empty URI params in DNS TXT Record\");\n    }\n    const source = txtRecordOptions.get(\"authSource\") ?? undefined;\n    const replicaSet = txtRecordOptions.get(\"replicaSet\") ?? undefined;\n    const loadBalanced = txtRecordOptions.get(\"loadBalanced\") ?? undefined;\n    if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n        });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === \"true\") {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError(\"Cannot combine replicaSet option with srvMaxHosts\");\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */ function checkTLSOptions(allOptions) {\n    if (!allOptions) return;\n    const check = (a, b)=>{\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check(\"tlsInsecure\", \"tlsAllowInvalidCertificates\");\n    check(\"tlsInsecure\", \"tlsAllowInvalidHostnames\");\n    check(\"tlsInsecure\", \"tlsDisableCertificateRevocationCheck\");\n    check(\"tlsInsecure\", \"tlsDisableOCSPEndpointCheck\");\n    check(\"tlsAllowInvalidCertificates\", \"tlsDisableCertificateRevocationCheck\");\n    check(\"tlsAllowInvalidCertificates\", \"tlsDisableOCSPEndpointCheck\");\n    check(\"tlsDisableCertificateRevocationCheck\", \"tlsDisableOCSPEndpointCheck\");\n}\nfunction getBoolean(name, value) {\n    if (typeof value === \"boolean\") return value;\n    switch(value){\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === \"\") {\n        return;\n    }\n    const keyValuePairs = value.split(\",\");\n    for (const keyValue of keyValuePairs){\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError(\"Cannot have undefined values in key value pairs\");\n        }\n        yield [\n            key,\n            value\n        ];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []){\n        super(entries.map(([k, v])=>[\n                k.toLowerCase(),\n                v\n            ]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === \"boolean\" && !options.promoteLongs) {\n        throw new error_1.MongoAPIError(\"Must request either bigint or Long for int64 deserialization\");\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === \"boolean\" && !options.promoteValues) {\n        throw new error_1.MongoAPIError(\"Must request either bigint or Long for int64 deserialization\");\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)){\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== \"/\" && url.pathname !== \"\") {\n        const dbName = decodeURIComponent(url.pathname[0] === \"/\" ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set(\"dbName\", [\n                dbName\n            ]);\n        }\n    }\n    if (url.username !== \"\") {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === \"string\") {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set(\"auth\", [\n            auth\n        ]);\n    }\n    for (const key of url.searchParams.keys()){\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes(\"\")) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v])=>v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has(\"serverApi\")) {\n        throw new error_1.MongoParseError(\"URI cannot contain `serverApi`, it can only be passed to the client\");\n    }\n    const uriMechanismProperties = urlOptions.get(\"authMechanismProperties\");\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties){\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError(\"Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.\");\n            }\n        }\n    }\n    if (objectOptions.has(\"loadBalanced\")) {\n        throw new error_1.MongoParseError(\"loadBalanced is only a valid option in the URI\");\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([\n        ...urlOptions.keys(),\n        ...objectOptions.keys()\n    ]);\n    for (const key of allProvidedKeys){\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has(\"tls\") || allProvidedOptions.has(\"ssl\")) {\n        const tlsAndSslOpts = (allProvidedOptions.get(\"tls\") || []).concat(allProvidedOptions.get(\"ssl\") || []).map(getBoolean.bind(null, \"tls/ssl\"));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError(\"All values of tls/ssl must be the same.\");\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map((s)=>s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? \"options\" : \"option\";\n        const isOrAre = unsupportedOptions.size > 1 ? \"are\" : \"is\";\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(\", \")} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)){\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [\n                    exports.DEFAULT_OPTIONS.get(key)\n                ]);\n            }\n        } else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === \"string\" ? `: ${deprecated}` : \"\";\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) && allProvidedOptions.has(\"authSource\") && mongoOptions.credentials.source !== \"$external\") {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allProvidedOptions.has(\"authSource\")) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === \"\" && mongoOptions.credentials.username === \"\" && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = \"test\";\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource = objectOptions.has(\"authSource\") || urlOptions.has(\"authSource\");\n    mongoOptions.userSpecifiedReplicaSet = objectOptions.has(\"replicaSet\") || urlOptions.has(\"replicaSet\");\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError(\"SRV URI does not support directConnection\");\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === \"string\") {\n            throw new error_1.MongoParseError(\"Cannot use srvMaxHosts option with replicaSet\");\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has(\"tls\") && !urlOptions.has(\"tls\");\n        const noUserSpecifiedSSL = !objectOptions.has(\"ssl\") && !urlOptions.has(\"ssl\");\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    } else {\n        const userSpecifiedSrvOptions = urlOptions.has(\"srvMaxHosts\") || objectOptions.has(\"srvMaxHosts\") || urlOptions.has(\"srvServiceName\") || objectOptions.has(\"srvServiceName\");\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError(\"Cannot use srvMaxHosts or srvServiceName with a non-srv connection string\");\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError(\"directConnection option requires exactly one host\");\n    }\n    if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError(\"Must specify proxyHost if other proxy options are passed\");\n    }\n    if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n        throw new error_1.MongoParseError(\"Can only specify both of proxy username/password or neither\");\n    }\n    const proxyOptions = [\n        \"proxyHost\",\n        \"proxyPort\",\n        \"proxyUsername\",\n        \"proxyPassword\"\n    ].map((key)=>urlOptions.get(key) ?? []);\n    if (proxyOptions.some((options)=>options.length > 1)) {\n        throw new error_1.MongoParseError(\"Proxy options cannot be specified multiple times in the connection string\");\n    }\n    const loggerFeatureFlag = Symbol.for(\"@@mdb.enableMongoLogger\");\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for(\"@@mdb.internalLoggerConfig\")]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath,\n            mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n            mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    mongoOptions.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(mongoOptions.metadata).catch(()=>{\n    /* rejections will be handled later */ });\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */ function validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError(\"Cannot limit srv hosts with loadBalanced enabled\");\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch(type){\n        case \"boolean\":\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case \"int\":\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case \"uint\":\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case \"string\":\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case \"record\":\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case \"any\":\n            mongoOptions[name] = values[0];\n            break;\n        default:\n            {\n                if (!transform) {\n                    throw new error_1.MongoParseError(\"Descriptors missing a type must define a transform\");\n                }\n                const transformValue = transform({\n                    name,\n                    options: mongoOptions,\n                    values\n                });\n                mongoOptions[name] = transformValue;\n                break;\n            }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: \"string\"\n    },\n    auth: {\n        target: \"credentials\",\n        transform ({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, [\n                \"username\",\n                \"password\"\n            ])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: \"credentials\",\n        transform ({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter((m)=>m.match(RegExp(String.raw`\\b${value}\\b`, \"i\")));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = \"$external\";\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === \"\") {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: \"credentials\",\n        transform ({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values){\n                if (typeof optionValue === \"string\") {\n                    for (const [key, value] of entriesFromString(optionValue)){\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        } catch  {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                } else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError(\"AuthMechanismProperties must be an object\");\n                    }\n                    mechanismProperties = {\n                        ...optionValue\n                    };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: \"credentials\",\n        transform ({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                source\n            });\n        }\n    },\n    autoEncryption: {\n        type: \"record\"\n    },\n    bsonRegExp: {\n        type: \"boolean\"\n    },\n    serverApi: {\n        target: \"serverApi\",\n        transform ({ values: [version] }) {\n            const serverApiToValidate = typeof version === \"string\" ? {\n                version\n            } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some((v)=>v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: \"boolean\"\n    },\n    compressors: {\n        default: \"none\",\n        target: \"compressors\",\n        transform ({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values){\n                const compValArray = typeof compVal === \"string\" ? compVal.split(\",\") : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError(\"compressors must be an array or a comma-delimited list of strings\");\n                }\n                for (const c of compValArray){\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    } else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [\n                ...compressionList\n            ];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: \"uint\"\n    },\n    dbName: {\n        type: \"string\"\n    },\n    directConnection: {\n        default: false,\n        type: \"boolean\"\n    },\n    driverInfo: {\n        default: {},\n        type: \"record\"\n    },\n    enableUtf8Validation: {\n        type: \"boolean\",\n        default: true\n    },\n    family: {\n        transform ({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: \"record\"\n    },\n    forceServerObjectId: {\n        default: false,\n        type: \"boolean\"\n    },\n    fsync: {\n        deprecated: \"Please use journal instead\",\n        target: \"writeConcern\",\n        transform ({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: \"uint\"\n    },\n    ignoreUndefined: {\n        type: \"boolean\"\n    },\n    j: {\n        deprecated: \"Please use journal instead\",\n        target: \"writeConcern\",\n        transform ({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: \"writeConcern\",\n        transform ({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: \"boolean\"\n    },\n    localThresholdMS: {\n        default: 15,\n        type: \"uint\"\n    },\n    maxConnecting: {\n        default: 2,\n        transform ({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError(\"maxConnecting must be > 0 if specified\");\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: \"uint\"\n    },\n    maxPoolSize: {\n        default: 100,\n        type: \"uint\"\n    },\n    maxStalenessSeconds: {\n        target: \"readPreference\",\n        transform ({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: {\n                        ...options.readPreference,\n                        maxStalenessSeconds\n                    }\n                });\n            } else {\n                return new read_preference_1.ReadPreference(\"secondary\", undefined, {\n                    maxStalenessSeconds\n                });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: \"uint\"\n    },\n    minPoolSize: {\n        default: 0,\n        type: \"uint\"\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: \"uint\"\n    },\n    monitorCommands: {\n        default: false,\n        type: \"boolean\"\n    },\n    name: {\n        target: \"driverInfo\",\n        transform ({ values: [value], options }) {\n            return {\n                ...options.driverInfo,\n                name: String(value)\n            };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: \"boolean\"\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform ({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, [\n                \"createPk\"\n            ]) && typeof value.createPk === \"function\") {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: \"boolean\"\n    },\n    promoteLongs: {\n        type: \"boolean\"\n    },\n    promoteValues: {\n        type: \"boolean\"\n    },\n    useBigInt64: {\n        type: \"boolean\"\n    },\n    proxyHost: {\n        type: \"string\"\n    },\n    proxyPassword: {\n        type: \"string\"\n    },\n    proxyPort: {\n        type: \"uint\"\n    },\n    proxyUsername: {\n        type: \"string\"\n    },\n    raw: {\n        default: false,\n        type: \"boolean\"\n    },\n    readConcern: {\n        transform ({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, [\n                \"level\"\n            ])) {\n                return read_concern_1.ReadConcern.fromOptions({\n                    ...options.readConcern,\n                    ...value\n                });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: \"readConcern\",\n        transform ({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform ({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: {\n                        ...options.readPreference,\n                        ...value\n                    },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, [\n                \"mode\"\n            ])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: {\n                        ...options.readPreference,\n                        ...value\n                    },\n                    ...value\n                });\n                if (rp) return rp;\n                else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === \"string\") {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: \"readPreference\",\n        transform ({ values, options }) {\n            const tags = Array.isArray(values[0]) ? values[0] : values;\n            const readPreferenceTags = [];\n            for (const tag of tags){\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === \"string\") {\n                    for (const [k, v] of entriesFromString(tag)){\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)){\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: \"string\"\n    },\n    retryReads: {\n        default: true,\n        type: \"boolean\"\n    },\n    retryWrites: {\n        default: true,\n        type: \"boolean\"\n    },\n    serializeFunctions: {\n        type: \"boolean\"\n    },\n    serverMonitoringMode: {\n        default: \"auto\",\n        transform ({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError(\"serverMonitoringMode must be one of `auto`, `poll`, or `stream`\");\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: \"uint\"\n    },\n    servername: {\n        type: \"string\"\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: \"uint\"\n    },\n    srvMaxHosts: {\n        type: \"uint\",\n        default: 0\n    },\n    srvServiceName: {\n        type: \"string\",\n        default: \"mongodb\"\n    },\n    ssl: {\n        target: \"tls\",\n        type: \"boolean\"\n    },\n    timeoutMS: {\n        type: \"uint\"\n    },\n    tls: {\n        type: \"boolean\"\n    },\n    tlsAllowInvalidCertificates: {\n        target: \"rejectUnauthorized\",\n        transform ({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: \"checkServerIdentity\",\n        transform ({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? ()=>undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: \"string\"\n    },\n    tlsCRLFile: {\n        type: \"string\"\n    },\n    tlsCertificateKeyFile: {\n        type: \"string\"\n    },\n    tlsCertificateKeyFilePassword: {\n        target: \"passphrase\",\n        type: \"any\"\n    },\n    tlsInsecure: {\n        transform ({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = ()=>undefined;\n                options.rejectUnauthorized = false;\n            } else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames ? ()=>undefined : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    w: value\n                }\n            });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: \"uint\"\n    },\n    writeConcern: {\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            } else if (value === \"majority\" || typeof value === \"number\") {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: \"Please use wtimeoutMS instead\",\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions(\"wtimeout\", value)\n                }\n            });\n            if (wc) return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions(\"wtimeoutMS\", value)\n                }\n            });\n            if (wc) return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: \"int\"\n    },\n    // Custom types for modifying core behavior\n    connectionType: {\n        type: \"any\"\n    },\n    srvPoller: {\n        type: \"any\"\n    },\n    // Accepted NodeJS Options\n    minDHSize: {\n        type: \"any\"\n    },\n    pskCallback: {\n        type: \"any\"\n    },\n    secureContext: {\n        type: \"any\"\n    },\n    enableTrace: {\n        type: \"any\"\n    },\n    requestCert: {\n        type: \"any\"\n    },\n    rejectUnauthorized: {\n        type: \"any\"\n    },\n    checkServerIdentity: {\n        type: \"any\"\n    },\n    ALPNProtocols: {\n        type: \"any\"\n    },\n    SNICallback: {\n        type: \"any\"\n    },\n    session: {\n        type: \"any\"\n    },\n    requestOCSP: {\n        type: \"any\"\n    },\n    localAddress: {\n        type: \"any\"\n    },\n    localPort: {\n        type: \"any\"\n    },\n    hints: {\n        type: \"any\"\n    },\n    lookup: {\n        type: \"any\"\n    },\n    ca: {\n        type: \"any\"\n    },\n    cert: {\n        type: \"any\"\n    },\n    ciphers: {\n        type: \"any\"\n    },\n    crl: {\n        type: \"any\"\n    },\n    ecdhCurve: {\n        type: \"any\"\n    },\n    key: {\n        type: \"any\"\n    },\n    passphrase: {\n        type: \"any\"\n    },\n    pfx: {\n        type: \"any\"\n    },\n    secureProtocol: {\n        type: \"any\"\n    },\n    index: {\n        type: \"any\"\n    },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: \"boolean\",\n        deprecated: \"useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\"\n    },\n    useUnifiedTopology: {\n        type: \"boolean\",\n        deprecated: \"useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\"\n    },\n    // MongoLogger\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */ mongodbLogPath: {\n        transform ({ values: [value] }) {\n            if (!(typeof value === \"string\" && [\n                \"stderr\",\n                \"stdout\"\n            ].includes(value) || value && typeof value === \"object\" && \"write\" in value && typeof value.write === \"function\")) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */ mongodbLogComponentSeverities: {\n        transform ({ values: [value] }) {\n            if (typeof value !== \"object\" || !value) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n            }\n            for (const [k, v] of Object.entries(value)){\n                if (typeof v !== \"string\" || typeof k !== \"string\") {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n                }\n                if (!Object.values(mongo_logger_1.MongoLoggableComponent).some((val)=>val === k) && k !== \"default\") {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n                }\n                if (!Object.values(mongo_logger_1.SeverityLevel).some((val)=>val === v)) {\n                    throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n                }\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */ mongodbLogMaxDocumentLength: {\n        type: \"uint\"\n    }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor])=>descriptor.default != null).map(([k, d])=>[\n        k,\n        d.default\n    ]));\n/**\n * Set of permitted feature flags\n * @internal\n */ exports.FEATURE_FLAGS = new Set([\n    Symbol.for(\"@@mdb.skipPingOnConnect\"),\n    Symbol.for(\"@@mdb.enableMongoLogger\"),\n    Symbol.for(\"@@mdb.internalLoggerConfig\")\n]); //# sourceMappingURL=connection_string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/connection_string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/constants.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.WAITING_FOR_SUITABLE_SERVER = exports.SERVER_SELECTION_SUCCEEDED = exports.SERVER_SELECTION_FAILED = exports.SERVER_SELECTION_STARTED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = exports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = void 0;\nexports.SYSTEM_NAMESPACE_COLLECTION = \"system.namespaces\";\nexports.SYSTEM_INDEX_COLLECTION = \"system.indexes\";\nexports.SYSTEM_PROFILE_COLLECTION = \"system.profile\";\nexports.SYSTEM_USER_COLLECTION = \"system.users\";\nexports.SYSTEM_COMMAND_COLLECTION = \"$cmd\";\nexports.SYSTEM_JS_COLLECTION = \"system.js\";\n// events\nexports.ERROR = \"error\";\nexports.TIMEOUT = \"timeout\";\nexports.CLOSE = \"close\";\nexports.OPEN = \"open\";\nexports.CONNECT = \"connect\";\nexports.CLOSED = \"closed\";\nexports.ENDED = \"ended\";\nexports.MESSAGE = \"message\";\nexports.PINNED = \"pinned\";\nexports.UNPINNED = \"unpinned\";\nexports.DESCRIPTION_RECEIVED = \"descriptionReceived\";\n/** @internal */ exports.SERVER_OPENING = \"serverOpening\";\n/** @internal */ exports.SERVER_CLOSED = \"serverClosed\";\n/** @internal */ exports.SERVER_DESCRIPTION_CHANGED = \"serverDescriptionChanged\";\n/** @internal */ exports.TOPOLOGY_OPENING = \"topologyOpening\";\n/** @internal */ exports.TOPOLOGY_CLOSED = \"topologyClosed\";\n/** @internal */ exports.TOPOLOGY_DESCRIPTION_CHANGED = \"topologyDescriptionChanged\";\n/** @internal */ exports.SERVER_SELECTION_STARTED = \"serverSelectionStarted\";\n/** @internal */ exports.SERVER_SELECTION_FAILED = \"serverSelectionFailed\";\n/** @internal */ exports.SERVER_SELECTION_SUCCEEDED = \"serverSelectionSucceeded\";\n/** @internal */ exports.WAITING_FOR_SUITABLE_SERVER = \"waitingForSuitableServer\";\n/** @internal */ exports.CONNECTION_POOL_CREATED = \"connectionPoolCreated\";\n/** @internal */ exports.CONNECTION_POOL_CLOSED = \"connectionPoolClosed\";\n/** @internal */ exports.CONNECTION_POOL_CLEARED = \"connectionPoolCleared\";\n/** @internal */ exports.CONNECTION_POOL_READY = \"connectionPoolReady\";\n/** @internal */ exports.CONNECTION_CREATED = \"connectionCreated\";\n/** @internal */ exports.CONNECTION_READY = \"connectionReady\";\n/** @internal */ exports.CONNECTION_CLOSED = \"connectionClosed\";\n/** @internal */ exports.CONNECTION_CHECK_OUT_STARTED = \"connectionCheckOutStarted\";\n/** @internal */ exports.CONNECTION_CHECK_OUT_FAILED = \"connectionCheckOutFailed\";\n/** @internal */ exports.CONNECTION_CHECKED_OUT = \"connectionCheckedOut\";\n/** @internal */ exports.CONNECTION_CHECKED_IN = \"connectionCheckedIn\";\nexports.CLUSTER_TIME_RECEIVED = \"clusterTimeReceived\";\n/** @internal */ exports.COMMAND_STARTED = \"commandStarted\";\n/** @internal */ exports.COMMAND_SUCCEEDED = \"commandSucceeded\";\n/** @internal */ exports.COMMAND_FAILED = \"commandFailed\";\n/** @internal */ exports.SERVER_HEARTBEAT_STARTED = \"serverHeartbeatStarted\";\n/** @internal */ exports.SERVER_HEARTBEAT_SUCCEEDED = \"serverHeartbeatSucceeded\";\n/** @internal */ exports.SERVER_HEARTBEAT_FAILED = \"serverHeartbeatFailed\";\nexports.RESPONSE = \"response\";\nexports.MORE = \"more\";\nexports.INIT = \"init\";\nexports.CHANGE = \"change\";\nexports.END = \"end\";\nexports.RESUME_TOKEN_CHANGED = \"resumeTokenChanged\";\n/** @public */ exports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */ exports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */ exports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */ exports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */ exports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */ exports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */ exports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */ exports.LEGACY_HELLO_COMMAND = \"ismaster\";\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */ exports.LEGACY_HELLO_COMMAND_CAMEL_CASE = \"isMaster\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/abstract_cursor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst kill_cursors_1 = __webpack_require__(/*! ../operations/kill_cursors */ \"(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */ const kId = Symbol(\"id\");\n/** @internal */ const kDocuments = Symbol(\"documents\");\n/** @internal */ const kServer = Symbol(\"server\");\n/** @internal */ const kNamespace = Symbol(\"namespace\");\n/** @internal */ const kClient = Symbol(\"client\");\n/** @internal */ const kSession = Symbol(\"session\");\n/** @internal */ const kOptions = Symbol(\"options\");\n/** @internal */ const kTransform = Symbol(\"transform\");\n/** @internal */ const kInitialized = Symbol(\"initialized\");\n/** @internal */ const kClosed = Symbol(\"closed\");\n/** @internal */ const kKilled = Symbol(\"killed\");\n/** @internal */ const kInit = Symbol(\"kInit\");\n/** @public */ exports.CURSOR_FLAGS = [\n    \"tailable\",\n    \"oplogReplay\",\n    \"noCursorTimeout\",\n    \"awaitData\",\n    \"exhaust\",\n    \"partial\"\n];\n/** @public */ class AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */ constructor(client, namespace, options = {}){\n        super();\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError(\"Cursor must be constructed with MongoClient\");\n        }\n        this[kClient] = client;\n        this[kNamespace] = namespace;\n        this[kId] = null;\n        this[kDocuments] = new utils_1.List();\n        this[kInitialized] = false;\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kOptions] = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options)\n        };\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this[kOptions].readConcern = readConcern;\n        }\n        if (typeof options.batchSize === \"number\") {\n            this[kOptions].batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this[kOptions].comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === \"number\") {\n            this[kOptions].maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === \"number\") {\n            this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this[kSession] = options.session;\n        } else {\n            this[kSession] = this[kClient].startSession({\n                owner: this,\n                explicit: false\n            });\n        }\n    }\n    get id() {\n        return this[kId] ?? undefined;\n    }\n    /** @internal */ get isDead() {\n        return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n    }\n    /** @internal */ get client() {\n        return this[kClient];\n    }\n    /** @internal */ get server() {\n        return this[kServer];\n    }\n    get namespace() {\n        return this[kNamespace];\n    }\n    get readPreference() {\n        return this[kOptions].readPreference;\n    }\n    get readConcern() {\n        return this[kOptions].readConcern;\n    }\n    /** @internal */ get session() {\n        return this[kSession];\n    }\n    set session(clientSession) {\n        this[kSession] = clientSession;\n    }\n    /** @internal */ get cursorOptions() {\n        return this[kOptions];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get killed() {\n        return this[kKilled];\n    }\n    get loadBalanced() {\n        return !!this[kClient].topology?.loadBalanced;\n    }\n    /** Returns current buffered documents length */ bufferedCount() {\n        return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */ readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n        for(let count = 0; count < documentsToRead; count++){\n            const document = this[kDocuments].shift();\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            while(true){\n                const document = await this.next();\n                // Intentional strict null check, because users can map cursors to falsey values.\n                // We allow mapping to all values except for null.\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    if (!this.closed) {\n                        const message = \"Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.\";\n                        await cleanupCursor(this, {\n                            needsToEmitClosed: true\n                        }).catch(()=>null);\n                        throw new error_1.MongoAPIError(message);\n                    }\n                    break;\n                }\n                yield document;\n                if (this[kId] === bson_1.Long.ZERO) {\n                    break;\n                }\n            }\n        } finally{\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.closed) {\n                await this.close().catch(()=>null);\n            }\n        }\n    }\n    stream(options) {\n        if (options?.transform) {\n            const transform = options.transform;\n            const readable = new ReadableCursorStream(this);\n            const transformedStream = readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform (chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    } catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n            // Bubble errors to transformed stream, because otherwise no way\n            // to handle this error.\n            readable.on(\"error\", (err)=>transformedStream.emit(\"error\", err));\n            return transformedStream;\n        }\n        return new ReadableCursorStream(this);\n    }\n    async hasNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this[kDocuments].length !== 0) {\n            return true;\n        }\n        const doc = await next(this, {\n            blocking: true,\n            transform: false\n        });\n        if (doc) {\n            this[kDocuments].unshift(doc);\n            return true;\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */ async next() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, {\n            blocking: true,\n            transform: true\n        });\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */ async tryNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, {\n            blocking: false,\n            transform: true\n        });\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */ async forEach(iterator) {\n        if (typeof iterator !== \"function\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this){\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    async close() {\n        const needsToEmitClosed = !this[kClosed];\n        this[kClosed] = true;\n        await cleanupCursor(this, {\n            needsToEmitClosed\n        });\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */ async toArray() {\n        const array = [];\n        for await (const document of this){\n            array.push(document);\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */ addCursorFlag(flag, value) {\n        assertUninitialized(this);\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== \"boolean\") {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this[kOptions][flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */ map(transform) {\n        assertUninitialized(this);\n        const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n        if (oldTransform) {\n            this[kTransform] = (doc)=>{\n                return transform(oldTransform(doc));\n            };\n        } else {\n            this[kTransform] = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */ withReadPreference(readPreference) {\n        assertUninitialized(this);\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this[kOptions].readPreference = readPreference;\n        } else if (typeof readPreference === \"string\") {\n            this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        } else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */ withReadConcern(readConcern) {\n        assertUninitialized(this);\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n            readConcern\n        });\n        if (resolvedReadConcern) {\n            this[kOptions].readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */ maxTimeMS(value) {\n        assertUninitialized(this);\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError(\"Argument for maxTimeMS must be a number\");\n        }\n        this[kOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */ batchSize(value) {\n        assertUninitialized(this);\n        if (this[kOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support batchSize\");\n        }\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this[kOptions].batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */ rewind() {\n        if (!this[kInitialized]) {\n            return;\n        }\n        this[kId] = null;\n        this[kDocuments].clear();\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kInitialized] = false;\n        const session = this[kSession];\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false) {\n                if (!session.hasEnded) {\n                    session.endSession().catch(()=>null);\n                }\n                this[kSession] = this.client.startSession({\n                    owner: this,\n                    explicit: false\n                });\n            }\n        }\n    }\n    /** @internal */ async getMore(batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], {\n            ...this[kOptions],\n            session: this[kSession],\n            batchSize\n        });\n        return (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */ async [kInit]() {\n        try {\n            const state = await this._initialize(this[kSession]);\n            const response = state.response;\n            this[kServer] = state.server;\n            if (response.cursor) {\n                // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                this[kId] = typeof response.cursor.id === \"number\" ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === \"bigint\" ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n                if (response.cursor.ns) {\n                    this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                }\n                this[kDocuments].pushMany(response.cursor.firstBatch);\n            }\n            // When server responses return without a cursor document, we close this cursor\n            // and return the raw server response. This is often the case for explain commands\n            // for example\n            if (this[kId] == null) {\n                this[kId] = bson_1.Long.ZERO;\n                // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                this[kDocuments].push(state.response);\n            }\n            // the cursor is now initialized, even if it is dead\n            this[kInitialized] = true;\n        } catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this[kInitialized] = true;\n            await cleanupCursor(this, {\n                error\n            });\n            throw error;\n        }\n        if (this.isDead) {\n            await cleanupCursor(this, undefined);\n        }\n        return;\n    }\n}\n/** @event */ AbstractCursor.CLOSE = \"close\";\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */ async function next(cursor, { blocking, transform }) {\n    if (cursor.closed) {\n        return null;\n    }\n    do {\n        if (cursor[kId] == null) {\n            // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n            await cursor[kInit]();\n        }\n        if (cursor[kDocuments].length !== 0) {\n            const doc = cursor[kDocuments].shift();\n            if (doc != null && transform && cursor[kTransform]) {\n                try {\n                    return cursor[kTransform](doc);\n                } catch (error) {\n                    // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n                    // error instead.\n                    await cleanupCursor(cursor, {\n                        error,\n                        needsToEmitClosed: true\n                    }).catch(()=>null);\n                    throw error;\n                }\n            }\n            return doc;\n        }\n        if (cursor.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n            return null;\n        }\n        // otherwise need to call getMore\n        const batchSize = cursor[kOptions].batchSize || 1000;\n        try {\n            const response = await cursor.getMore(batchSize);\n            if (response) {\n                const cursorId = typeof response.cursor.id === \"number\" ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === \"bigint\" ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n                cursor[kDocuments].pushMany(response.cursor.nextBatch);\n                cursor[kId] = cursorId;\n            }\n        } catch (error) {\n            // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n            // error instead.\n            await cleanupCursor(cursor, {\n                error\n            }).catch(()=>null);\n            throw error;\n        }\n        if (cursor.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n        }\n        if (cursor[kDocuments].length === 0 && blocking === false) {\n            return null;\n        }\n    }while (!cursor.isDead || cursor[kDocuments].length !== 0);\n    return null;\n}\nasync function cleanupCursor(cursor, options) {\n    const cursorId = cursor[kId];\n    const cursorNs = cursor[kNamespace];\n    const server = cursor[kServer];\n    const session = cursor[kSession];\n    const error = options?.error;\n    // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n    // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n    // cleanup the cursor but don't emit a `close` event.\n    const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n    if (error) {\n        if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n            return completeCleanup();\n        }\n    }\n    if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n        if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n        }\n        if (session) {\n            if (session.owner === cursor) {\n                await session.endSession({\n                    error\n                });\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, {\n                    error\n                });\n            }\n        }\n        return;\n    }\n    async function completeCleanup() {\n        if (session) {\n            if (session.owner === cursor) {\n                try {\n                    await session.endSession({\n                        error\n                    });\n                } finally{\n                    cursor.emit(AbstractCursor.CLOSE);\n                }\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, {\n                    error\n                });\n            }\n        }\n        cursor.emit(AbstractCursor.CLOSE);\n        return;\n    }\n    cursor[kKilled] = true;\n    if (session.hasEnded) {\n        return completeCleanup();\n    }\n    try {\n        await (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, {\n            session\n        })).catch(()=>null);\n    } finally{\n        await completeCleanup();\n    }\n}\n/** @internal */ function assertUninitialized(cursor) {\n    if (cursor[kInitialized]) {\n        throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.assertUninitialized = assertUninitialized;\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor){\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(()=>callback(error), (closeError)=>callback(closeError));\n    }\n    _readNext() {\n        next(this._cursor, {\n            blocking: true,\n            transform: true\n        }).then((result)=>{\n            if (result == null) {\n                this.push(null);\n            } else if (this.destroyed) {\n                this._cursor.close().catch(()=>null);\n            } else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, (err)=>{\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().catch(()=>null);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        });\n    }\n} //# sourceMappingURL=abstract_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2Fic3RyYWN0X2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUdBLHNCQUFzQixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQ25GLE1BQU1LLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLHlEQUFTO0FBQ2hDLE1BQU1FLFVBQVVGLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1HLGdCQUFnQkgsbUJBQU9BLENBQUMsdUVBQWdCO0FBQzlDLE1BQU1JLHNCQUFzQkosbUJBQU9BLENBQUMseUdBQWlDO0FBQ3JFLE1BQU1LLGFBQWFMLG1CQUFPQSxDQUFDLHVGQUF3QjtBQUNuRCxNQUFNTSxpQkFBaUJOLG1CQUFPQSxDQUFDLCtGQUE0QjtBQUMzRCxNQUFNTyxpQkFBaUJQLG1CQUFPQSxDQUFDLHlFQUFpQjtBQUNoRCxNQUFNUSxvQkFBb0JSLG1CQUFPQSxDQUFDLCtFQUFvQjtBQUN0RCxNQUFNUyxhQUFhVCxtQkFBT0EsQ0FBQyxpRUFBYTtBQUN4QyxNQUFNVSxVQUFVVixtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxjQUFjLEdBQ2QsTUFBTVcsTUFBTUMsT0FBTztBQUNuQixjQUFjLEdBQ2QsTUFBTUMsYUFBYUQsT0FBTztBQUMxQixjQUFjLEdBQ2QsTUFBTUUsVUFBVUYsT0FBTztBQUN2QixjQUFjLEdBQ2QsTUFBTUcsYUFBYUgsT0FBTztBQUMxQixjQUFjLEdBQ2QsTUFBTUksVUFBVUosT0FBTztBQUN2QixjQUFjLEdBQ2QsTUFBTUssV0FBV0wsT0FBTztBQUN4QixjQUFjLEdBQ2QsTUFBTU0sV0FBV04sT0FBTztBQUN4QixjQUFjLEdBQ2QsTUFBTU8sYUFBYVAsT0FBTztBQUMxQixjQUFjLEdBQ2QsTUFBTVEsZUFBZVIsT0FBTztBQUM1QixjQUFjLEdBQ2QsTUFBTVMsVUFBVVQsT0FBTztBQUN2QixjQUFjLEdBQ2QsTUFBTVUsVUFBVVYsT0FBTztBQUN2QixjQUFjLEdBQ2QsTUFBTVcsUUFBUVgsT0FBTztBQUNyQixZQUFZLEdBQ1psQixvQkFBb0IsR0FBRztJQUNuQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELFlBQVksR0FDWixNQUFNRyx1QkFBdUJNLGNBQWNxQixpQkFBaUI7SUFDeEQsY0FBYyxHQUNkQyxZQUFZQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsVUFBVSxDQUFDLENBQUMsQ0FBRTtRQUN6QyxLQUFLO1FBQ0wsSUFBSSxDQUFDRixPQUFPRyxDQUFDLENBQUNDLGFBQWEsRUFBRTtZQUN6QixNQUFNLElBQUk1QixRQUFRNkIsaUJBQWlCLENBQUM7UUFDeEM7UUFDQSxJQUFJLENBQUNmLFFBQVEsR0FBR1U7UUFDaEIsSUFBSSxDQUFDWCxXQUFXLEdBQUdZO1FBQ25CLElBQUksQ0FBQ2hCLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0UsV0FBVyxHQUFHLElBQUlILFFBQVFzQixJQUFJO1FBQ25DLElBQUksQ0FBQ1osYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0osU0FBUyxHQUFHO1lBQ2JlLGdCQUFnQkwsUUFBUUssY0FBYyxJQUFJTCxRQUFRSyxjQUFjLFlBQVl6QixrQkFBa0IwQixjQUFjLEdBQ3RHTixRQUFRSyxjQUFjLEdBQ3RCekIsa0JBQWtCMEIsY0FBYyxDQUFDQyxPQUFPO1lBQzlDLEdBQUcsQ0FBQyxHQUFHbEMsT0FBT21DLHlCQUF5QixFQUFFUixRQUFRO1FBQ3JEO1FBQ0EsTUFBTVMsY0FBYzlCLGVBQWUrQixXQUFXLENBQUNDLFdBQVcsQ0FBQ1g7UUFDM0QsSUFBSVMsYUFBYTtZQUNiLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ21CLFdBQVcsR0FBR0E7UUFDakM7UUFDQSxJQUFJLE9BQU9ULFFBQVFZLFNBQVMsS0FBSyxVQUFVO1lBQ3ZDLElBQUksQ0FBQ3RCLFNBQVMsQ0FBQ3NCLFNBQVMsR0FBR1osUUFBUVksU0FBUztRQUNoRDtRQUNBLGlFQUFpRTtRQUNqRSxnREFBZ0Q7UUFDaEQsSUFBSVosUUFBUWEsT0FBTyxLQUFLQyxXQUFXO1lBQy9CLElBQUksQ0FBQ3hCLFNBQVMsQ0FBQ3VCLE9BQU8sR0FBR2IsUUFBUWEsT0FBTztRQUM1QztRQUNBLElBQUksT0FBT2IsUUFBUWUsU0FBUyxLQUFLLFVBQVU7WUFDdkMsSUFBSSxDQUFDekIsU0FBUyxDQUFDeUIsU0FBUyxHQUFHZixRQUFRZSxTQUFTO1FBQ2hEO1FBQ0EsSUFBSSxPQUFPZixRQUFRZ0IsY0FBYyxLQUFLLFVBQVU7WUFDNUMsSUFBSSxDQUFDMUIsU0FBUyxDQUFDMEIsY0FBYyxHQUFHaEIsUUFBUWdCLGNBQWM7UUFDMUQ7UUFDQSxJQUFJaEIsUUFBUWlCLE9BQU8sWUFBWXBDLFdBQVdxQyxhQUFhLEVBQUU7WUFDckQsSUFBSSxDQUFDN0IsU0FBUyxHQUFHVyxRQUFRaUIsT0FBTztRQUNwQyxPQUNLO1lBQ0QsSUFBSSxDQUFDNUIsU0FBUyxHQUFHLElBQUksQ0FBQ0QsUUFBUSxDQUFDK0IsWUFBWSxDQUFDO2dCQUFFQyxPQUFPLElBQUk7Z0JBQUVDLFVBQVU7WUFBTTtRQUMvRTtJQUNKO0lBQ0EsSUFBSUMsS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDdkMsSUFBSSxJQUFJK0I7SUFDeEI7SUFDQSxjQUFjLEdBQ2QsSUFBSVMsU0FBUztRQUNULE9BQU8sQ0FBQyxJQUFJLENBQUN4QyxJQUFJLEVBQUV5QyxZQUFZLEtBQUksS0FBTSxJQUFJLENBQUMvQixRQUFRLElBQUksSUFBSSxDQUFDQyxRQUFRO0lBQzNFO0lBQ0EsY0FBYyxHQUNkLElBQUlJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQ1YsUUFBUTtJQUN4QjtJQUNBLGNBQWMsR0FDZCxJQUFJcUMsU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDdkMsUUFBUTtJQUN4QjtJQUNBLElBQUlhLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQ1osV0FBVztJQUMzQjtJQUNBLElBQUlrQixpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUNmLFNBQVMsQ0FBQ2UsY0FBYztJQUN4QztJQUNBLElBQUlJLGNBQWM7UUFDZCxPQUFPLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ21CLFdBQVc7SUFDckM7SUFDQSxjQUFjLEdBQ2QsSUFBSVEsVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDNUIsU0FBUztJQUN6QjtJQUNBLElBQUk0QixRQUFRUyxhQUFhLEVBQUU7UUFDdkIsSUFBSSxDQUFDckMsU0FBUyxHQUFHcUM7SUFDckI7SUFDQSxjQUFjLEdBQ2QsSUFBSUMsZ0JBQWdCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDckMsU0FBUztJQUN6QjtJQUNBLElBQUlzQyxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUNuQyxRQUFRO0lBQ3hCO0lBQ0EsSUFBSW9DLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQ25DLFFBQVE7SUFDeEI7SUFDQSxJQUFJb0MsZUFBZTtRQUNmLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQzFDLFFBQVEsQ0FBQzJDLFFBQVEsRUFBRUQ7SUFDckM7SUFDQSw4Q0FBOEMsR0FDOUNFLGdCQUFnQjtRQUNaLE9BQU8sSUFBSSxDQUFDL0MsV0FBVyxDQUFDZ0QsTUFBTTtJQUNsQztJQUNBLHVDQUF1QyxHQUN2Q0Msc0JBQXNCQyxNQUFNLEVBQUU7UUFDMUIsTUFBTUMsZUFBZSxFQUFFO1FBQ3ZCLE1BQU1DLGtCQUFrQkMsS0FBS0MsR0FBRyxDQUFDSixVQUFVLElBQUksQ0FBQ2xELFdBQVcsQ0FBQ2dELE1BQU0sRUFBRSxJQUFJLENBQUNoRCxXQUFXLENBQUNnRCxNQUFNO1FBQzNGLElBQUssSUFBSU8sUUFBUSxHQUFHQSxRQUFRSCxpQkFBaUJHLFFBQVM7WUFDbEQsTUFBTUMsV0FBVyxJQUFJLENBQUN4RCxXQUFXLENBQUN5RCxLQUFLO1lBQ3ZDLElBQUlELFlBQVksTUFBTTtnQkFDbEJMLGFBQWFPLElBQUksQ0FBQ0Y7WUFDdEI7UUFDSjtRQUNBLE9BQU9MO0lBQ1g7SUFDQSxPQUFPLENBQUNwRCxPQUFPNEQsYUFBYSxDQUFDLEdBQUc7UUFDNUIsSUFBSSxJQUFJLENBQUNoQixNQUFNLEVBQUU7WUFDYjtRQUNKO1FBQ0EsSUFBSTtZQUNBLE1BQU8sS0FBTTtnQkFDVCxNQUFNYSxXQUFXLE1BQU0sSUFBSSxDQUFDSSxJQUFJO2dCQUNoQyxpRkFBaUY7Z0JBQ2pGLGtEQUFrRDtnQkFDbEQsZ0RBQWdEO2dCQUNoRCxJQUFJSixhQUFhLE1BQU07b0JBQ25CLElBQUksQ0FBQyxJQUFJLENBQUNiLE1BQU0sRUFBRTt3QkFDZCxNQUFNa0IsVUFBVTt3QkFDaEIsTUFBTUMsY0FBYyxJQUFJLEVBQUU7NEJBQUVDLG1CQUFtQjt3QkFBSyxHQUFHQyxLQUFLLENBQUMsSUFBTTt3QkFDbkUsTUFBTSxJQUFJM0UsUUFBUTRFLGFBQWEsQ0FBQ0o7b0JBQ3BDO29CQUNBO2dCQUNKO2dCQUNBLE1BQU1MO2dCQUNOLElBQUksSUFBSSxDQUFDMUQsSUFBSSxLQUFLVixPQUFPOEUsSUFBSSxDQUFDQyxJQUFJLEVBQUU7b0JBRWhDO2dCQUNKO1lBQ0o7UUFDSixTQUNRO1lBQ0osdUZBQXVGO1lBQ3ZGLHFFQUFxRTtZQUNyRSxJQUFJLENBQUMsSUFBSSxDQUFDeEIsTUFBTSxFQUFFO2dCQUNkLE1BQU0sSUFBSSxDQUFDeUIsS0FBSyxHQUFHSixLQUFLLENBQUMsSUFBTTtZQUNuQztRQUNKO0lBQ0o7SUFDQUssT0FBT3RELE9BQU8sRUFBRTtRQUNaLElBQUlBLFNBQVN1RCxXQUFXO1lBQ3BCLE1BQU1BLFlBQVl2RCxRQUFRdUQsU0FBUztZQUNuQyxNQUFNQyxXQUFXLElBQUlDLHFCQUFxQixJQUFJO1lBQzlDLE1BQU1DLG9CQUFvQkYsU0FBU0csSUFBSSxDQUFDLElBQUl4RixTQUFTeUYsU0FBUyxDQUFDO2dCQUMzREMsWUFBWTtnQkFDWkMsZUFBZTtnQkFDZlAsV0FBVVEsS0FBSyxFQUFFQyxDQUFDLEVBQUVDLFFBQVE7b0JBQ3hCLElBQUk7d0JBQ0EsTUFBTUMsY0FBY1gsVUFBVVE7d0JBQzlCRSxTQUFTbkQsV0FBV29EO29CQUN4QixFQUNBLE9BQU9DLEtBQUs7d0JBQ1JGLFNBQVNFO29CQUNiO2dCQUNKO1lBQ0o7WUFDQSxnRUFBZ0U7WUFDaEUsd0JBQXdCO1lBQ3hCWCxTQUFTWSxFQUFFLENBQUMsU0FBU0QsQ0FBQUEsTUFBT1Qsa0JBQWtCVyxJQUFJLENBQUMsU0FBU0Y7WUFDNUQsT0FBT1Q7UUFDWDtRQUNBLE9BQU8sSUFBSUQscUJBQXFCLElBQUk7SUFDeEM7SUFDQSxNQUFNYSxVQUFVO1FBQ1osSUFBSSxJQUFJLENBQUN2RixJQUFJLEtBQUtWLE9BQU84RSxJQUFJLENBQUNDLElBQUksRUFBRTtZQUNoQyxPQUFPO1FBQ1g7UUFDQSxJQUFJLElBQUksQ0FBQ25FLFdBQVcsQ0FBQ2dELE1BQU0sS0FBSyxHQUFHO1lBQy9CLE9BQU87UUFDWDtRQUNBLE1BQU1zQyxNQUFNLE1BQU0xQixLQUFLLElBQUksRUFBRTtZQUFFMkIsVUFBVTtZQUFNakIsV0FBVztRQUFNO1FBQ2hFLElBQUlnQixLQUFLO1lBQ0wsSUFBSSxDQUFDdEYsV0FBVyxDQUFDd0YsT0FBTyxDQUFDRjtZQUN6QixPQUFPO1FBQ1g7UUFDQSxPQUFPO0lBQ1g7SUFDQSxzR0FBc0csR0FDdEcsTUFBTTFCLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQzlELElBQUksS0FBS1YsT0FBTzhFLElBQUksQ0FBQ0MsSUFBSSxFQUFFO1lBQ2hDLE1BQU0sSUFBSTlFLFFBQVFvRyx5QkFBeUI7UUFDL0M7UUFDQSxPQUFPN0IsS0FBSyxJQUFJLEVBQUU7WUFBRTJCLFVBQVU7WUFBTWpCLFdBQVc7UUFBSztJQUN4RDtJQUNBOztLQUVDLEdBQ0QsTUFBTW9CLFVBQVU7UUFDWixJQUFJLElBQUksQ0FBQzVGLElBQUksS0FBS1YsT0FBTzhFLElBQUksQ0FBQ0MsSUFBSSxFQUFFO1lBQ2hDLE1BQU0sSUFBSTlFLFFBQVFvRyx5QkFBeUI7UUFDL0M7UUFDQSxPQUFPN0IsS0FBSyxJQUFJLEVBQUU7WUFBRTJCLFVBQVU7WUFBT2pCLFdBQVc7UUFBSztJQUN6RDtJQUNBOzs7Ozs7O0tBT0MsR0FDRCxNQUFNcUIsUUFBUUMsUUFBUSxFQUFFO1FBQ3BCLElBQUksT0FBT0EsYUFBYSxZQUFZO1lBQ2hDLE1BQU0sSUFBSXZHLFFBQVF3Ryx5QkFBeUIsQ0FBQztRQUNoRDtRQUNBLFdBQVcsTUFBTXJDLFlBQVksSUFBSSxDQUFFO1lBQy9CLE1BQU1zQyxTQUFTRixTQUFTcEM7WUFDeEIsSUFBSXNDLFdBQVcsT0FBTztnQkFDbEI7WUFDSjtRQUNKO0lBQ0o7SUFDQSxNQUFNMUIsUUFBUTtRQUNWLE1BQU1MLG9CQUFvQixDQUFDLElBQUksQ0FBQ3ZELFFBQVE7UUFDeEMsSUFBSSxDQUFDQSxRQUFRLEdBQUc7UUFDaEIsTUFBTXNELGNBQWMsSUFBSSxFQUFFO1lBQUVDO1FBQWtCO0lBQ2xEO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNZ0MsVUFBVTtRQUNaLE1BQU1DLFFBQVEsRUFBRTtRQUNoQixXQUFXLE1BQU14QyxZQUFZLElBQUksQ0FBRTtZQUMvQndDLE1BQU10QyxJQUFJLENBQUNGO1FBQ2Y7UUFDQSxPQUFPd0M7SUFDWDtJQUNBOzs7OztLQUtDLEdBQ0RDLGNBQWNDLElBQUksRUFBRXBILEtBQUssRUFBRTtRQUN2QkMsb0JBQW9CLElBQUk7UUFDeEIsSUFBSSxDQUFDRixRQUFRSSxZQUFZLENBQUNrSCxRQUFRLENBQUNELE9BQU87WUFDdEMsTUFBTSxJQUFJN0csUUFBUXdHLHlCQUF5QixDQUFDLENBQUMsS0FBSyxFQUFFSyxLQUFLLGVBQWUsRUFBRXJILFFBQVFJLFlBQVksQ0FBQyxDQUFDO1FBQ3BHO1FBQ0EsSUFBSSxPQUFPSCxVQUFVLFdBQVc7WUFDNUIsTUFBTSxJQUFJTyxRQUFRd0cseUJBQXlCLENBQUMsQ0FBQyxLQUFLLEVBQUVLLEtBQUssd0JBQXdCLENBQUM7UUFDdEY7UUFDQSxJQUFJLENBQUM3RixTQUFTLENBQUM2RixLQUFLLEdBQUdwSDtRQUN2QixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXlDQyxHQUNEc0gsSUFBSTlCLFNBQVMsRUFBRTtRQUNYdkYsb0JBQW9CLElBQUk7UUFDeEIsTUFBTXNILGVBQWUsSUFBSSxDQUFDL0YsV0FBVyxFQUFFLDRDQUE0QztRQUNuRixJQUFJK0YsY0FBYztZQUNkLElBQUksQ0FBQy9GLFdBQVcsR0FBR2dGLENBQUFBO2dCQUNmLE9BQU9oQixVQUFVK0IsYUFBYWY7WUFDbEM7UUFDSixPQUNLO1lBQ0QsSUFBSSxDQUFDaEYsV0FBVyxHQUFHZ0U7UUFDdkI7UUFDQSxPQUFPLElBQUk7SUFDZjtJQUNBOzs7O0tBSUMsR0FDRGdDLG1CQUFtQmxGLGNBQWMsRUFBRTtRQUMvQnJDLG9CQUFvQixJQUFJO1FBQ3hCLElBQUlxQywwQkFBMEJ6QixrQkFBa0IwQixjQUFjLEVBQUU7WUFDNUQsSUFBSSxDQUFDaEIsU0FBUyxDQUFDZSxjQUFjLEdBQUdBO1FBQ3BDLE9BQ0ssSUFBSSxPQUFPQSxtQkFBbUIsVUFBVTtZQUN6QyxJQUFJLENBQUNmLFNBQVMsQ0FBQ2UsY0FBYyxHQUFHekIsa0JBQWtCMEIsY0FBYyxDQUFDa0YsVUFBVSxDQUFDbkY7UUFDaEYsT0FDSztZQUNELE1BQU0sSUFBSS9CLFFBQVF3Ryx5QkFBeUIsQ0FBQyxDQUFDLHlCQUF5QixFQUFFekUsZUFBZSxDQUFDO1FBQzVGO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7OztLQUlDLEdBQ0RvRixnQkFBZ0JoRixXQUFXLEVBQUU7UUFDekJ6QyxvQkFBb0IsSUFBSTtRQUN4QixNQUFNMEgsc0JBQXNCL0csZUFBZStCLFdBQVcsQ0FBQ0MsV0FBVyxDQUFDO1lBQUVGO1FBQVk7UUFDakYsSUFBSWlGLHFCQUFxQjtZQUNyQixJQUFJLENBQUNwRyxTQUFTLENBQUNtQixXQUFXLEdBQUdpRjtRQUNqQztRQUNBLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7S0FJQyxHQUNEM0UsVUFBVWhELEtBQUssRUFBRTtRQUNiQyxvQkFBb0IsSUFBSTtRQUN4QixJQUFJLE9BQU9ELFVBQVUsVUFBVTtZQUMzQixNQUFNLElBQUlPLFFBQVF3Ryx5QkFBeUIsQ0FBQztRQUNoRDtRQUNBLElBQUksQ0FBQ3hGLFNBQVMsQ0FBQ3lCLFNBQVMsR0FBR2hEO1FBQzNCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7S0FJQyxHQUNENkMsVUFBVTdDLEtBQUssRUFBRTtRQUNiQyxvQkFBb0IsSUFBSTtRQUN4QixJQUFJLElBQUksQ0FBQ3NCLFNBQVMsQ0FBQ3FHLFFBQVEsRUFBRTtZQUN6QixNQUFNLElBQUlySCxRQUFRc0gsd0JBQXdCLENBQUM7UUFDL0M7UUFDQSxJQUFJLE9BQU83SCxVQUFVLFVBQVU7WUFDM0IsTUFBTSxJQUFJTyxRQUFRd0cseUJBQXlCLENBQUM7UUFDaEQ7UUFDQSxJQUFJLENBQUN4RixTQUFTLENBQUNzQixTQUFTLEdBQUc3QztRQUMzQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7O0tBSUMsR0FDRDhILFNBQVM7UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDckcsYUFBYSxFQUFFO1lBQ3JCO1FBQ0o7UUFDQSxJQUFJLENBQUNULElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0UsV0FBVyxDQUFDNkcsS0FBSztRQUN0QixJQUFJLENBQUNyRyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDRixhQUFhLEdBQUc7UUFDckIsTUFBTXlCLFVBQVUsSUFBSSxDQUFDNUIsU0FBUztRQUM5QixJQUFJNEIsU0FBUztZQUNULDZFQUE2RTtZQUM3RSxJQUFJQSxRQUFRSSxRQUFRLEtBQUssT0FBTztnQkFDNUIsSUFBSSxDQUFDSixRQUFROEUsUUFBUSxFQUFFO29CQUNuQjlFLFFBQVErRSxVQUFVLEdBQUcvQyxLQUFLLENBQUMsSUFBTTtnQkFDckM7Z0JBQ0EsSUFBSSxDQUFDNUQsU0FBUyxHQUFHLElBQUksQ0FBQ1MsTUFBTSxDQUFDcUIsWUFBWSxDQUFDO29CQUFFQyxPQUFPLElBQUk7b0JBQUVDLFVBQVU7Z0JBQU07WUFDN0U7UUFDSjtJQUNKO0lBQ0EsY0FBYyxHQUNkLE1BQU00RSxRQUFRckYsU0FBUyxFQUFFO1FBQ3JCLG9FQUFvRTtRQUNwRSxNQUFNc0YsbUJBQW1CLElBQUl6SCxXQUFXMEgsZ0JBQWdCLENBQUMsSUFBSSxDQUFDaEgsV0FBVyxFQUFFLElBQUksQ0FBQ0osSUFBSSxFQUFFLElBQUksQ0FBQ0csUUFBUSxFQUFFO1lBQ2pHLEdBQUcsSUFBSSxDQUFDSSxTQUFTO1lBQ2pCMkIsU0FBUyxJQUFJLENBQUM1QixTQUFTO1lBQ3ZCdUI7UUFDSjtRQUNBLE9BQU8sQ0FBQyxHQUFHcEMsb0JBQW9CNEgsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDaEgsUUFBUSxFQUFFOEc7SUFDcEU7SUFDQTs7Ozs7O0tBTUMsR0FDRCxNQUFNLENBQUN2RyxNQUFNLEdBQUc7UUFDWixJQUFJO1lBQ0EsTUFBTTBHLFFBQVEsTUFBTSxJQUFJLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUNqSCxTQUFTO1lBQ25ELE1BQU1rSCxXQUFXRixNQUFNRSxRQUFRO1lBQy9CLElBQUksQ0FBQ3JILFFBQVEsR0FBR21ILE1BQU01RSxNQUFNO1lBQzVCLElBQUk4RSxTQUFTQyxNQUFNLEVBQUU7Z0JBQ2pCLG9EQUFvRDtnQkFDcEQsSUFBSSxDQUFDekgsSUFBSSxHQUNMLE9BQU93SCxTQUFTQyxNQUFNLENBQUNsRixFQUFFLEtBQUssV0FDeEJqRCxPQUFPOEUsSUFBSSxDQUFDc0QsVUFBVSxDQUFDRixTQUFTQyxNQUFNLENBQUNsRixFQUFFLElBQ3pDLE9BQU9pRixTQUFTQyxNQUFNLENBQUNsRixFQUFFLEtBQUssV0FDMUJqRCxPQUFPOEUsSUFBSSxDQUFDdUQsVUFBVSxDQUFDSCxTQUFTQyxNQUFNLENBQUNsRixFQUFFLElBQ3pDaUYsU0FBU0MsTUFBTSxDQUFDbEYsRUFBRTtnQkFDaEMsSUFBSWlGLFNBQVNDLE1BQU0sQ0FBQ0csRUFBRSxFQUFFO29CQUNwQixJQUFJLENBQUN4SCxXQUFXLEdBQUcsQ0FBQyxHQUFHTCxRQUFRNkgsRUFBRSxFQUFFSixTQUFTQyxNQUFNLENBQUNHLEVBQUU7Z0JBQ3pEO2dCQUNBLElBQUksQ0FBQzFILFdBQVcsQ0FBQzJILFFBQVEsQ0FBQ0wsU0FBU0MsTUFBTSxDQUFDSyxVQUFVO1lBQ3hEO1lBQ0EsK0VBQStFO1lBQy9FLGtGQUFrRjtZQUNsRixjQUFjO1lBQ2QsSUFBSSxJQUFJLENBQUM5SCxJQUFJLElBQUksTUFBTTtnQkFDbkIsSUFBSSxDQUFDQSxJQUFJLEdBQUdWLE9BQU84RSxJQUFJLENBQUNDLElBQUk7Z0JBQzVCLHVFQUF1RTtnQkFDdkUsSUFBSSxDQUFDbkUsV0FBVyxDQUFDMEQsSUFBSSxDQUFDMEQsTUFBTUUsUUFBUTtZQUN4QztZQUNBLG9EQUFvRDtZQUNwRCxJQUFJLENBQUMvRyxhQUFhLEdBQUc7UUFDekIsRUFDQSxPQUFPc0gsT0FBTztZQUNWLDJEQUEyRDtZQUMzRCxJQUFJLENBQUN0SCxhQUFhLEdBQUc7WUFDckIsTUFBTXVELGNBQWMsSUFBSSxFQUFFO2dCQUFFK0Q7WUFBTTtZQUNsQyxNQUFNQTtRQUNWO1FBQ0EsSUFBSSxJQUFJLENBQUN2RixNQUFNLEVBQUU7WUFDYixNQUFNd0IsY0FBYyxJQUFJLEVBQUVqQztRQUM5QjtRQUNBO0lBQ0o7QUFDSjtBQUNBLFdBQVcsR0FDWDdDLGVBQWU4SSxLQUFLLEdBQUc7QUFDdkJqSixzQkFBc0IsR0FBR0c7QUFDekI7Ozs7Ozs7Ozs7Q0FVQyxHQUNELGVBQWU0RSxLQUFLMkQsTUFBTSxFQUFFLEVBQUVoQyxRQUFRLEVBQUVqQixTQUFTLEVBQUU7SUFDL0MsSUFBSWlELE9BQU81RSxNQUFNLEVBQUU7UUFDZixPQUFPO0lBQ1g7SUFDQSxHQUFHO1FBQ0MsSUFBSTRFLE1BQU0sQ0FBQ3pILElBQUksSUFBSSxNQUFNO1lBQ3JCLG9HQUFvRztZQUNwRyxNQUFNeUgsTUFBTSxDQUFDN0csTUFBTTtRQUN2QjtRQUNBLElBQUk2RyxNQUFNLENBQUN2SCxXQUFXLENBQUNnRCxNQUFNLEtBQUssR0FBRztZQUNqQyxNQUFNc0MsTUFBTWlDLE1BQU0sQ0FBQ3ZILFdBQVcsQ0FBQ3lELEtBQUs7WUFDcEMsSUFBSTZCLE9BQU8sUUFBUWhCLGFBQWFpRCxNQUFNLENBQUNqSCxXQUFXLEVBQUU7Z0JBQ2hELElBQUk7b0JBQ0EsT0FBT2lILE1BQU0sQ0FBQ2pILFdBQVcsQ0FBQ2dGO2dCQUM5QixFQUNBLE9BQU91QyxPQUFPO29CQUNWLHdGQUF3RjtvQkFDeEYsaUJBQWlCO29CQUNqQixNQUFNL0QsY0FBY3lELFFBQVE7d0JBQUVNO3dCQUFPOUQsbUJBQW1CO29CQUFLLEdBQUdDLEtBQUssQ0FBQyxJQUFNO29CQUM1RSxNQUFNNkQ7Z0JBQ1Y7WUFDSjtZQUNBLE9BQU92QztRQUNYO1FBQ0EsSUFBSWlDLE9BQU9qRixNQUFNLEVBQUU7WUFDZix3Q0FBd0M7WUFDeEMseUZBQXlGO1lBQ3pGLGtDQUFrQztZQUNsQyxNQUFNd0IsY0FBY3lELFFBQVEsQ0FBQztZQUM3QixPQUFPO1FBQ1g7UUFDQSxpQ0FBaUM7UUFDakMsTUFBTTVGLFlBQVk0RixNQUFNLENBQUNsSCxTQUFTLENBQUNzQixTQUFTLElBQUk7UUFDaEQsSUFBSTtZQUNBLE1BQU0yRixXQUFXLE1BQU1DLE9BQU9QLE9BQU8sQ0FBQ3JGO1lBQ3RDLElBQUkyRixVQUFVO2dCQUNWLE1BQU1TLFdBQVcsT0FBT1QsU0FBU0MsTUFBTSxDQUFDbEYsRUFBRSxLQUFLLFdBQ3pDakQsT0FBTzhFLElBQUksQ0FBQ3NELFVBQVUsQ0FBQ0YsU0FBU0MsTUFBTSxDQUFDbEYsRUFBRSxJQUN6QyxPQUFPaUYsU0FBU0MsTUFBTSxDQUFDbEYsRUFBRSxLQUFLLFdBQzFCakQsT0FBTzhFLElBQUksQ0FBQ3VELFVBQVUsQ0FBQ0gsU0FBU0MsTUFBTSxDQUFDbEYsRUFBRSxJQUN6Q2lGLFNBQVNDLE1BQU0sQ0FBQ2xGLEVBQUU7Z0JBQzVCa0YsTUFBTSxDQUFDdkgsV0FBVyxDQUFDMkgsUUFBUSxDQUFDTCxTQUFTQyxNQUFNLENBQUNTLFNBQVM7Z0JBQ3JEVCxNQUFNLENBQUN6SCxJQUFJLEdBQUdpSTtZQUNsQjtRQUNKLEVBQ0EsT0FBT0YsT0FBTztZQUNWLHdGQUF3RjtZQUN4RixpQkFBaUI7WUFDakIsTUFBTS9ELGNBQWN5RCxRQUFRO2dCQUFFTTtZQUFNLEdBQUc3RCxLQUFLLENBQUMsSUFBTTtZQUNuRCxNQUFNNkQ7UUFDVjtRQUNBLElBQUlOLE9BQU9qRixNQUFNLEVBQUU7WUFDZixzR0FBc0c7WUFDdEcsbUdBQW1HO1lBQ25HLG9GQUFvRjtZQUNwRixvRUFBb0U7WUFDcEUsRUFBRTtZQUNGLHlGQUF5RjtZQUN6RixrQ0FBa0M7WUFDbEMsTUFBTXdCLGNBQWN5RCxRQUFRLENBQUM7UUFDakM7UUFDQSxJQUFJQSxNQUFNLENBQUN2SCxXQUFXLENBQUNnRCxNQUFNLEtBQUssS0FBS3VDLGFBQWEsT0FBTztZQUN2RCxPQUFPO1FBQ1g7SUFDSixRQUFTLENBQUNnQyxPQUFPakYsTUFBTSxJQUFJaUYsTUFBTSxDQUFDdkgsV0FBVyxDQUFDZ0QsTUFBTSxLQUFLLEdBQUc7SUFDNUQsT0FBTztBQUNYO0FBQ0EsZUFBZWMsY0FBY3lELE1BQU0sRUFBRXhHLE9BQU87SUFDeEMsTUFBTWdILFdBQVdSLE1BQU0sQ0FBQ3pILElBQUk7SUFDNUIsTUFBTW1JLFdBQVdWLE1BQU0sQ0FBQ3JILFdBQVc7SUFDbkMsTUFBTXNDLFNBQVMrRSxNQUFNLENBQUN0SCxRQUFRO0lBQzlCLE1BQU0rQixVQUFVdUYsTUFBTSxDQUFDbkgsU0FBUztJQUNoQyxNQUFNeUgsUUFBUTlHLFNBQVM4RztJQUN2QixnR0FBZ0c7SUFDaEcsNkZBQTZGO0lBQzdGLHFEQUFxRDtJQUNyRCxNQUFNOUQsb0JBQW9CaEQsU0FBU2dELHFCQUFxQndELE1BQU0sQ0FBQ3ZILFdBQVcsQ0FBQ2dELE1BQU0sS0FBSztJQUN0RixJQUFJNkUsT0FBTztRQUNQLElBQUlOLE9BQU8xRSxZQUFZLElBQUlnRixpQkFBaUJ4SSxRQUFRNkksaUJBQWlCLEVBQUU7WUFDbkUsT0FBT0M7UUFDWDtJQUNKO0lBQ0EsSUFBSUosWUFBWSxRQUFRdkYsVUFBVSxRQUFRdUYsU0FBU3hGLE1BQU0sTUFBTTBGLFlBQVksTUFBTTtRQUM3RSxJQUFJbEUsbUJBQW1CO1lBQ25Cd0QsTUFBTSxDQUFDL0csUUFBUSxHQUFHO1lBQ2xCK0csTUFBTSxDQUFDekgsSUFBSSxHQUFHVixPQUFPOEUsSUFBSSxDQUFDQyxJQUFJO1lBQzlCb0QsT0FBT25DLElBQUksQ0FBQ3BHLGVBQWU4SSxLQUFLO1FBQ3BDO1FBQ0EsSUFBSTlGLFNBQVM7WUFDVCxJQUFJQSxRQUFRRyxLQUFLLEtBQUtvRixRQUFRO2dCQUMxQixNQUFNdkYsUUFBUStFLFVBQVUsQ0FBQztvQkFBRWM7Z0JBQU07Z0JBQ2pDO1lBQ0o7WUFDQSxJQUFJLENBQUM3RixRQUFRb0csYUFBYSxJQUFJO2dCQUN6QixJQUFHeEksV0FBV3lJLDBCQUEwQixFQUFFckcsU0FBUztvQkFBRTZGO2dCQUFNO1lBQ2hFO1FBQ0o7UUFDQTtJQUNKO0lBQ0EsZUFBZU07UUFDWCxJQUFJbkcsU0FBUztZQUNULElBQUlBLFFBQVFHLEtBQUssS0FBS29GLFFBQVE7Z0JBQzFCLElBQUk7b0JBQ0EsTUFBTXZGLFFBQVErRSxVQUFVLENBQUM7d0JBQUVjO29CQUFNO2dCQUNyQyxTQUNRO29CQUNKTixPQUFPbkMsSUFBSSxDQUFDcEcsZUFBZThJLEtBQUs7Z0JBQ3BDO2dCQUNBO1lBQ0o7WUFDQSxJQUFJLENBQUM5RixRQUFRb0csYUFBYSxJQUFJO2dCQUN6QixJQUFHeEksV0FBV3lJLDBCQUEwQixFQUFFckcsU0FBUztvQkFBRTZGO2dCQUFNO1lBQ2hFO1FBQ0o7UUFDQU4sT0FBT25DLElBQUksQ0FBQ3BHLGVBQWU4SSxLQUFLO1FBQ2hDO0lBQ0o7SUFDQVAsTUFBTSxDQUFDOUcsUUFBUSxHQUFHO0lBQ2xCLElBQUl1QixRQUFROEUsUUFBUSxFQUFFO1FBQ2xCLE9BQU9xQjtJQUNYO0lBQ0EsSUFBSTtRQUNBLE1BQU0sQ0FBQyxHQUFHNUksb0JBQW9CNEgsZ0JBQWdCLEVBQUVJLE1BQU0sQ0FBQ3BILFFBQVEsRUFBRSxJQUFJVixlQUFlNkksb0JBQW9CLENBQUNQLFVBQVVFLFVBQVV6RixRQUFRO1lBQUVSO1FBQVEsSUFBSWdDLEtBQUssQ0FBQyxJQUFNO0lBQ25LLFNBQ1E7UUFDSixNQUFNbUU7SUFDVjtBQUNKO0FBQ0EsY0FBYyxHQUNkLFNBQVNwSixvQkFBb0J3SSxNQUFNO0lBQy9CLElBQUlBLE1BQU0sQ0FBQ2hILGFBQWEsRUFBRTtRQUN0QixNQUFNLElBQUlsQixRQUFRa0oscUJBQXFCO0lBQzNDO0FBQ0o7QUFDQTFKLDJCQUEyQixHQUFHRTtBQUM5QixNQUFNeUYsNkJBQTZCdEYsU0FBU3NKLFFBQVE7SUFDaEQ1SCxZQUFZMkcsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQztZQUNGM0MsWUFBWTtZQUNaNkQsYUFBYTtZQUNiNUQsZUFBZTtRQUNuQjtRQUNBLElBQUksQ0FBQzZELGVBQWUsR0FBRztRQUN2QixJQUFJLENBQUNDLE9BQU8sR0FBR3BCO0lBQ25CO0lBQ0EsNkRBQTZEO0lBQzdEcUIsTUFBTUMsSUFBSSxFQUFFO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQ0gsZUFBZSxFQUFFO1lBQ3ZCLElBQUksQ0FBQ0EsZUFBZSxHQUFHO1lBQ3ZCLElBQUksQ0FBQ0ksU0FBUztRQUNsQjtJQUNKO0lBQ0FDLFNBQVNsQixLQUFLLEVBQUU3QyxRQUFRLEVBQUU7UUFDdEIsSUFBSSxDQUFDMkQsT0FBTyxDQUFDdkUsS0FBSyxHQUFHNEUsSUFBSSxDQUFDLElBQU1oRSxTQUFTNkMsUUFBUW9CLENBQUFBLGFBQWNqRSxTQUFTaUU7SUFDNUU7SUFDQUgsWUFBWTtRQUNSbEYsS0FBSyxJQUFJLENBQUMrRSxPQUFPLEVBQUU7WUFBRXBELFVBQVU7WUFBTWpCLFdBQVc7UUFBSyxHQUFHMEUsSUFBSSxDQUFDbEQsQ0FBQUE7WUFDekQsSUFBSUEsVUFBVSxNQUFNO2dCQUNoQixJQUFJLENBQUNwQyxJQUFJLENBQUM7WUFDZCxPQUNLLElBQUksSUFBSSxDQUFDd0YsU0FBUyxFQUFFO2dCQUNyQixJQUFJLENBQUNQLE9BQU8sQ0FBQ3ZFLEtBQUssR0FBR0osS0FBSyxDQUFDLElBQU07WUFDckMsT0FDSztnQkFDRCxJQUFJLElBQUksQ0FBQ04sSUFBSSxDQUFDb0MsU0FBUztvQkFDbkIsT0FBTyxJQUFJLENBQUNnRCxTQUFTO2dCQUN6QjtnQkFDQSxJQUFJLENBQUNKLGVBQWUsR0FBRztZQUMzQjtRQUNKLEdBQUd4RCxDQUFBQTtZQUNDLG9GQUFvRjtZQUNwRixxRkFBcUY7WUFDckYsb0ZBQW9GO1lBQ3BGLG1FQUFtRTtZQUNuRSxJQUFJQSxJQUFJckIsT0FBTyxDQUFDc0YsS0FBSyxDQUFDLHFCQUFxQjtnQkFDdkMsSUFBSSxDQUFDUixPQUFPLENBQUN2RSxLQUFLLEdBQUdKLEtBQUssQ0FBQyxJQUFNO2dCQUNqQyxPQUFPLElBQUksQ0FBQ04sSUFBSSxDQUFDO1lBQ3JCO1lBQ0Esd0ZBQXdGO1lBQ3hGLDBGQUEwRjtZQUMxRix1RkFBdUY7WUFDdkYsa0ZBQWtGO1lBQ2xGLDZFQUE2RTtZQUM3RSxJQUFJd0IsSUFBSXJCLE9BQU8sQ0FBQ3NGLEtBQUssQ0FBQyw4QkFBOEI7Z0JBQ2hELE9BQU8sSUFBSSxDQUFDekYsSUFBSSxDQUFDO1lBQ3JCO1lBQ0Esd0ZBQXdGO1lBQ3hGLDJGQUEyRjtZQUMzRixxRkFBcUY7WUFDckYsOEZBQThGO1lBQzlGLDJGQUEyRjtZQUMzRix5RkFBeUY7WUFDekYsMEZBQTBGO1lBQzFGLHVCQUF1QjtZQUN2QixPQUFPLElBQUksQ0FBQzBGLE9BQU8sQ0FBQ2xFO1FBQ3hCO0lBQ0o7QUFDSixFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2Fic3RyYWN0X2N1cnNvci5qcz9jNzc3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NlcnRVbmluaXRpYWxpemVkID0gZXhwb3J0cy5BYnN0cmFjdEN1cnNvciA9IGV4cG9ydHMuQ1VSU09SX0ZMQUdTID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgbW9uZ29fdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9tb25nb190eXBlc1wiKTtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGdldF9tb3JlXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9nZXRfbW9yZVwiKTtcbmNvbnN0IGtpbGxfY3Vyc29yc18xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMva2lsbF9jdXJzb3JzXCIpO1xuY29uc3QgcmVhZF9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9jb25jZXJuXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuY29uc3Qgc2Vzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi9zZXNzaW9uc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrSWQgPSBTeW1ib2woJ2lkJyk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrRG9jdW1lbnRzID0gU3ltYm9sKCdkb2N1bWVudHMnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtTZXJ2ZXIgPSBTeW1ib2woJ3NlcnZlcicpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3Qga05hbWVzcGFjZSA9IFN5bWJvbCgnbmFtZXNwYWNlJyk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrQ2xpZW50ID0gU3ltYm9sKCdjbGllbnQnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtTZXNzaW9uID0gU3ltYm9sKCdzZXNzaW9uJyk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrT3B0aW9ucyA9IFN5bWJvbCgnb3B0aW9ucycpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3Qga1RyYW5zZm9ybSA9IFN5bWJvbCgndHJhbnNmb3JtJyk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrSW5pdGlhbGl6ZWQgPSBTeW1ib2woJ2luaXRpYWxpemVkJyk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrQ2xvc2VkID0gU3ltYm9sKCdjbG9zZWQnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtLaWxsZWQgPSBTeW1ib2woJ2tpbGxlZCcpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3Qga0luaXQgPSBTeW1ib2woJ2tJbml0Jyk7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5DVVJTT1JfRkxBR1MgPSBbXG4gICAgJ3RhaWxhYmxlJyxcbiAgICAnb3Bsb2dSZXBsYXknLFxuICAgICdub0N1cnNvclRpbWVvdXQnLFxuICAgICdhd2FpdERhdGEnLFxuICAgICdleGhhdXN0JyxcbiAgICAncGFydGlhbCdcbl07XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgQWJzdHJhY3RDdXJzb3IgZXh0ZW5kcyBtb25nb190eXBlc18xLlR5cGVkRXZlbnRFbWl0dGVyIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBuYW1lc3BhY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoIWNsaWVudC5zLmlzTW9uZ29DbGllbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdDdXJzb3IgbXVzdCBiZSBjb25zdHJ1Y3RlZCB3aXRoIE1vbmdvQ2xpZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1trQ2xpZW50XSA9IGNsaWVudDtcbiAgICAgICAgdGhpc1trTmFtZXNwYWNlXSA9IG5hbWVzcGFjZTtcbiAgICAgICAgdGhpc1trSWRdID0gbnVsbDtcbiAgICAgICAgdGhpc1trRG9jdW1lbnRzXSA9IG5ldyB1dGlsc18xLkxpc3QoKTtcbiAgICAgICAgdGhpc1trSW5pdGlhbGl6ZWRdID0gZmFsc2U7XG4gICAgICAgIHRoaXNba0Nsb3NlZF0gPSBmYWxzZTtcbiAgICAgICAgdGhpc1trS2lsbGVkXSA9IGZhbHNlO1xuICAgICAgICB0aGlzW2tPcHRpb25zXSA9IHtcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiBvcHRpb25zLnJlYWRQcmVmZXJlbmNlICYmIG9wdGlvbnMucmVhZFByZWZlcmVuY2UgaW5zdGFuY2VvZiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZVxuICAgICAgICAgICAgICAgIDogcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeSxcbiAgICAgICAgICAgIC4uLigwLCBic29uXzEucGx1Y2tCU09OU2VyaWFsaXplT3B0aW9ucykob3B0aW9ucylcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVhZENvbmNlcm4gPSByZWFkX2NvbmNlcm5fMS5SZWFkQ29uY2Vybi5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKHJlYWRDb25jZXJuKSB7XG4gICAgICAgICAgICB0aGlzW2tPcHRpb25zXS5yZWFkQ29uY2VybiA9IHJlYWRDb25jZXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5iYXRjaFNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzW2tPcHRpb25zXS5iYXRjaFNpemUgPSBvcHRpb25zLmJhdGNoU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKG9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzW2tPcHRpb25zXS5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzW2tPcHRpb25zXS5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4QXdhaXRUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzW2tPcHRpb25zXS5tYXhBd2FpdFRpbWVNUyA9IG9wdGlvbnMubWF4QXdhaXRUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2Vzc2lvbiBpbnN0YW5jZW9mIHNlc3Npb25zXzEuQ2xpZW50U2Vzc2lvbikge1xuICAgICAgICAgICAgdGhpc1trU2Vzc2lvbl0gPSBvcHRpb25zLnNlc3Npb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzW2tTZXNzaW9uXSA9IHRoaXNba0NsaWVudF0uc3RhcnRTZXNzaW9uKHsgb3duZXI6IHRoaXMsIGV4cGxpY2l0OiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tJZF0gPz8gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZ2V0IGlzRGVhZCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzW2tJZF0/LmlzWmVybygpID8/IGZhbHNlKSB8fCB0aGlzW2tDbG9zZWRdIHx8IHRoaXNba0tpbGxlZF07XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBnZXQgY2xpZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpc1trQ2xpZW50XTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGdldCBzZXJ2ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tTZXJ2ZXJdO1xuICAgIH1cbiAgICBnZXQgbmFtZXNwYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trTmFtZXNwYWNlXTtcbiAgICB9XG4gICAgZ2V0IHJlYWRQcmVmZXJlbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trT3B0aW9uc10ucmVhZFByZWZlcmVuY2U7XG4gICAgfVxuICAgIGdldCByZWFkQ29uY2VybigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba09wdGlvbnNdLnJlYWRDb25jZXJuO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZ2V0IHNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tTZXNzaW9uXTtcbiAgICB9XG4gICAgc2V0IHNlc3Npb24oY2xpZW50U2Vzc2lvbikge1xuICAgICAgICB0aGlzW2tTZXNzaW9uXSA9IGNsaWVudFNlc3Npb247XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBnZXQgY3Vyc29yT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba09wdGlvbnNdO1xuICAgIH1cbiAgICBnZXQgY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trQ2xvc2VkXTtcbiAgICB9XG4gICAgZ2V0IGtpbGxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba0tpbGxlZF07XG4gICAgfVxuICAgIGdldCBsb2FkQmFsYW5jZWQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXNba0NsaWVudF0udG9wb2xvZ3k/LmxvYWRCYWxhbmNlZDtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgY3VycmVudCBidWZmZXJlZCBkb2N1bWVudHMgbGVuZ3RoICovXG4gICAgYnVmZmVyZWRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba0RvY3VtZW50c10ubGVuZ3RoO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBjdXJyZW50IGJ1ZmZlcmVkIGRvY3VtZW50cyAqL1xuICAgIHJlYWRCdWZmZXJlZERvY3VtZW50cyhudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyZWREb2NzID0gW107XG4gICAgICAgIGNvbnN0IGRvY3VtZW50c1RvUmVhZCA9IE1hdGgubWluKG51bWJlciA/PyB0aGlzW2tEb2N1bWVudHNdLmxlbmd0aCwgdGhpc1trRG9jdW1lbnRzXS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgZG9jdW1lbnRzVG9SZWFkOyBjb3VudCsrKSB7XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IHRoaXNba0RvY3VtZW50c10uc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyZWREb2NzLnB1c2goZG9jdW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXJlZERvY3M7XG4gICAgfVxuICAgIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGF3YWl0IHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgICAgIC8vIEludGVudGlvbmFsIHN0cmljdCBudWxsIGNoZWNrLCBiZWNhdXNlIHVzZXJzIGNhbiBtYXAgY3Vyc29ycyB0byBmYWxzZXkgdmFsdWVzLlxuICAgICAgICAgICAgICAgIC8vIFdlIGFsbG93IG1hcHBpbmcgdG8gYWxsIHZhbHVlcyBleGNlcHQgZm9yIG51bGwuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQ3Vyc29yIHJldHVybmVkIGEgYG51bGxgIGRvY3VtZW50LCBidXQgdGhlIGN1cnNvciBpcyBub3QgZXhoYXVzdGVkLiAgTWFwcGluZyBkb2N1bWVudHMgdG8gYG51bGxgIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGN1cnNvciB0cmFuc2Zvcm0uJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGNsZWFudXBDdXJzb3IodGhpcywgeyBuZWVkc1RvRW1pdENsb3NlZDogdHJ1ZSB9KS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHlpZWxkIGRvY3VtZW50O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW2tJZF0gPT09IGJzb25fMS5Mb25nLlpFUk8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3Vyc29yIGV4aGF1c3RlZFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAvLyBPbmx5IGNsb3NlIHRoZSBjdXJzb3IgaWYgaXQgaGFzIG5vdCBhbHJlYWR5IGJlZW4gY2xvc2VkLiBUaGlzIGZpbmFsbHkgY2xhdXNlIGhhbmRsZXNcbiAgICAgICAgICAgIC8vIHRoZSBjYXNlIHdoZW4gYSB1c2VyIHdvdWxkIGJyZWFrIG91dCBvZiBhIGZvciBhd2FpdCBvZiBsb29wIGVhcmx5LlxuICAgICAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xvc2UoKS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzdHJlYW0ob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucz8udHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcbiAgICAgICAgICAgIGNvbnN0IHJlYWRhYmxlID0gbmV3IFJlYWRhYmxlQ3Vyc29yU3RyZWFtKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRTdHJlYW0gPSByZWFkYWJsZS5waXBlKG5ldyBzdHJlYW1fMS5UcmFuc2Zvcm0oe1xuICAgICAgICAgICAgICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgaGlnaFdhdGVyTWFyazogMSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0oY2h1bmssIF8sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybShjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgLy8gQnViYmxlIGVycm9ycyB0byB0cmFuc2Zvcm1lZCBzdHJlYW0sIGJlY2F1c2Ugb3RoZXJ3aXNlIG5vIHdheVxuICAgICAgICAgICAgLy8gdG8gaGFuZGxlIHRoaXMgZXJyb3IuXG4gICAgICAgICAgICByZWFkYWJsZS5vbignZXJyb3InLCBlcnIgPT4gdHJhbnNmb3JtZWRTdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpKTtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZFN0cmVhbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJlYWRhYmxlQ3Vyc29yU3RyZWFtKHRoaXMpO1xuICAgIH1cbiAgICBhc3luYyBoYXNOZXh0KCkge1xuICAgICAgICBpZiAodGhpc1trSWRdID09PSBic29uXzEuTG9uZy5aRVJPKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXNba0RvY3VtZW50c10ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCBuZXh0KHRoaXMsIHsgYmxvY2tpbmc6IHRydWUsIHRyYW5zZm9ybTogZmFsc2UgfSk7XG4gICAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgICAgIHRoaXNba0RvY3VtZW50c10udW5zaGlmdChkb2MpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKiogR2V0IHRoZSBuZXh0IGF2YWlsYWJsZSBkb2N1bWVudCBmcm9tIHRoZSBjdXJzb3IsIHJldHVybnMgbnVsbCBpZiBubyBtb3JlIGRvY3VtZW50cyBhcmUgYXZhaWxhYmxlLiAqL1xuICAgIGFzeW5jIG5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzW2tJZF0gPT09IGJzb25fMS5Mb25nLlpFUk8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ3Vyc29yRXhoYXVzdGVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dCh0aGlzLCB7IGJsb2NraW5nOiB0cnVlLCB0cmFuc2Zvcm06IHRydWUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyeSB0byBnZXQgdGhlIG5leHQgYXZhaWxhYmxlIGRvY3VtZW50IGZyb20gdGhlIGN1cnNvciBvciBgbnVsbGAgaWYgYW4gZW1wdHkgYmF0Y2ggaXMgcmV0dXJuZWRcbiAgICAgKi9cbiAgICBhc3luYyB0cnlOZXh0KCkge1xuICAgICAgICBpZiAodGhpc1trSWRdID09PSBic29uXzEuTG9uZy5aRVJPKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0N1cnNvckV4aGF1c3RlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQodGhpcywgeyBibG9ja2luZzogZmFsc2UsIHRyYW5zZm9ybTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBhbGwgdGhlIGRvY3VtZW50cyBmb3IgdGhpcyBjdXJzb3IgdXNpbmcgdGhlIGl0ZXJhdG9yLCBjYWxsYmFjayBwYXR0ZXJuLlxuICAgICAqXG4gICAgICogSWYgdGhlIGl0ZXJhdG9yIHJldHVybnMgYGZhbHNlYCwgaXRlcmF0aW9uIHdpbGwgc3RvcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpdGVyYXRvciAtIFRoZSBpdGVyYXRpb24gY2FsbGJhY2suXG4gICAgICogQGRlcHJlY2F0ZWQgLSBXaWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gVXNlIGZvciBhd2FpdC4uLm9mIGluc3RlYWQuXG4gICAgICovXG4gICAgYXN5bmMgZm9yRWFjaChpdGVyYXRvcikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdBcmd1bWVudCBcIml0ZXJhdG9yXCIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBkb2N1bWVudCBvZiB0aGlzKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpdGVyYXRvcihkb2N1bWVudCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGNsb3NlKCkge1xuICAgICAgICBjb25zdCBuZWVkc1RvRW1pdENsb3NlZCA9ICF0aGlzW2tDbG9zZWRdO1xuICAgICAgICB0aGlzW2tDbG9zZWRdID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgY2xlYW51cEN1cnNvcih0aGlzLCB7IG5lZWRzVG9FbWl0Q2xvc2VkIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGRvY3VtZW50cy4gVGhlIGNhbGxlciBpcyByZXNwb25zaWJsZSBmb3IgbWFraW5nIHN1cmUgdGhhdCB0aGVyZVxuICAgICAqIGlzIGVub3VnaCBtZW1vcnkgdG8gc3RvcmUgdGhlIHJlc3VsdHMuIE5vdGUgdGhhdCB0aGUgYXJyYXkgb25seSBjb250YWlucyBwYXJ0aWFsXG4gICAgICogcmVzdWx0cyB3aGVuIHRoaXMgY3Vyc29yIGhhZCBiZWVuIHByZXZpb3VzbHkgYWNjZXNzZWQuIEluIHRoYXQgY2FzZSxcbiAgICAgKiBjdXJzb3IucmV3aW5kKCkgY2FuIGJlIHVzZWQgdG8gcmVzZXQgdGhlIGN1cnNvci5cbiAgICAgKi9cbiAgICBhc3luYyB0b0FycmF5KCkge1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGRvY3VtZW50IG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goZG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgY3Vyc29yIGZsYWcgdG8gdGhlIGN1cnNvclxuICAgICAqXG4gICAgICogQHBhcmFtIGZsYWcgLSBUaGUgZmxhZyB0byBzZXQsIG11c3QgYmUgb25lIG9mIGZvbGxvd2luZyBbJ3RhaWxhYmxlJywgJ29wbG9nUmVwbGF5JywgJ25vQ3Vyc29yVGltZW91dCcsICdhd2FpdERhdGEnLCAncGFydGlhbCcgLS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgZmxhZyBib29sZWFuIHZhbHVlLlxuICAgICAqL1xuICAgIGFkZEN1cnNvckZsYWcoZmxhZywgdmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0VW5pbml0aWFsaXplZCh0aGlzKTtcbiAgICAgICAgaWYgKCFleHBvcnRzLkNVUlNPUl9GTEFHUy5pbmNsdWRlcyhmbGFnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgRmxhZyAke2ZsYWd9IGlzIG5vdCBvbmUgb2YgJHtleHBvcnRzLkNVUlNPUl9GTEFHU31gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEZsYWcgJHtmbGFnfSBtdXN0IGJlIGEgYm9vbGVhbiB2YWx1ZWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNba09wdGlvbnNdW2ZsYWddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXAgYWxsIGRvY3VtZW50cyB1c2luZyB0aGUgcHJvdmlkZWQgZnVuY3Rpb25cbiAgICAgKiBJZiB0aGVyZSBpcyBhIHRyYW5zZm9ybSBzZXQgb24gdGhlIGN1cnNvciwgdGhhdCB3aWxsIGJlIGNhbGxlZCBmaXJzdCBhbmQgdGhlIHJlc3VsdCBwYXNzZWQgdG9cbiAgICAgKiB0aGlzIGZ1bmN0aW9uJ3MgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKlxuICAgICAqICoqTm90ZSoqIEN1cnNvcnMgdXNlIGBudWxsYCBpbnRlcm5hbGx5IHRvIGluZGljYXRlIHRoYXQgdGhlcmUgYXJlIG5vIG1vcmUgZG9jdW1lbnRzIGluIHRoZSBjdXJzb3IuIFByb3ZpZGluZyBhIG1hcHBpbmdcbiAgICAgKiBmdW5jdGlvbiB0aGF0IG1hcHMgdmFsdWVzIHRvIGBudWxsYCB3aWxsIHJlc3VsdCBpbiB0aGUgY3Vyc29yIGNsb3NpbmcgaXRzZWxmIGJlZm9yZSBpdCBoYXMgZmluaXNoZWQgaXRlcmF0aW5nXG4gICAgICogYWxsIGRvY3VtZW50cy4gIFRoaXMgd2lsbCAqKm5vdCoqIHJlc3VsdCBpbiBhIG1lbW9yeSBsZWFrLCBqdXN0IHN1cnByaXNpbmcgYmVoYXZpb3IuICBGb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBjdXJzb3IgPSBjb2xsZWN0aW9uLmZpbmQoe30pO1xuICAgICAqIGN1cnNvci5tYXAoKCkgPT4gbnVsbCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCBjdXJzb3IudG9BcnJheSgpO1xuICAgICAqIC8vIGRvY3VtZW50cyBpcyBhbHdheXMgW10sIHJlZ2FyZGxlc3Mgb2YgaG93IG1hbnkgZG9jdW1lbnRzIGFyZSBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE90aGVyIGZhbHNleSB2YWx1ZXMgYXJlIGFsbG93ZWQ6XG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgY3Vyc29yID0gY29sbGVjdGlvbi5maW5kKHt9KTtcbiAgICAgKiBjdXJzb3IubWFwKCgpID0+ICcnKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGRvY3VtZW50cyA9IGF3YWl0IGN1cnNvci50b0FycmF5KCk7XG4gICAgICogLy8gZG9jdW1lbnRzIGlzIG5vdyBhbiBhcnJheSBvZiBlbXB0eSBzdHJpbmdzXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAqKk5vdGUgZm9yIFR5cGVzY3JpcHQgVXNlcnM6KiogYWRkaW5nIGEgdHJhbnNmb3JtIGNoYW5nZXMgdGhlIHJldHVybiB0eXBlIG9mIHRoZSBpdGVyYXRpb24gb2YgdGhpcyBjdXJzb3IsXG4gICAgICogaXQgKipkb2VzIG5vdCoqIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIGN1cnNvci4gVGhpcyBtZWFucyB3aGVuIGNhbGxpbmcgbWFwLFxuICAgICAqIHlvdSBzaG91bGQgYWx3YXlzIGFzc2lnbiB0aGUgcmVzdWx0IHRvIGEgbmV3IHZhcmlhYmxlIGluIG9yZGVyIHRvIGdldCBhIGNvcnJlY3RseSB0eXBlZCBjdXJzb3IgdmFyaWFibGUuXG4gICAgICogVGFrZSBub3RlIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGN1cnNvcjogRmluZEN1cnNvcjxEb2N1bWVudD4gPSBjb2xsLmZpbmQoKTtcbiAgICAgKiBjb25zdCBtYXBwZWRDdXJzb3I6IEZpbmRDdXJzb3I8bnVtYmVyPiA9IGN1cnNvci5tYXAoZG9jID0+IE9iamVjdC5rZXlzKGRvYykubGVuZ3RoKTtcbiAgICAgKiBjb25zdCBrZXlDb3VudHM6IG51bWJlcltdID0gYXdhaXQgbWFwcGVkQ3Vyc29yLnRvQXJyYXkoKTsgLy8gY3Vyc29yLnRvQXJyYXkoKSBzdGlsbCByZXR1cm5zIERvY3VtZW50W11cbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gVGhlIG1hcHBpbmcgdHJhbnNmb3JtYXRpb24gbWV0aG9kLlxuICAgICAqL1xuICAgIG1hcCh0cmFuc2Zvcm0pIHtcbiAgICAgICAgYXNzZXJ0VW5pbml0aWFsaXplZCh0aGlzKTtcbiAgICAgICAgY29uc3Qgb2xkVHJhbnNmb3JtID0gdGhpc1trVHJhbnNmb3JtXTsgLy8gVE9ETyhOT0RFLTMyODMpOiBJbXByb3ZlIHRyYW5zZm9ybSB0eXBpbmdcbiAgICAgICAgaWYgKG9sZFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdGhpc1trVHJhbnNmb3JtXSA9IGRvYyA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybShvbGRUcmFuc2Zvcm0oZG9jKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpc1trVHJhbnNmb3JtXSA9IHRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBSZWFkUHJlZmVyZW5jZSBmb3IgdGhlIGN1cnNvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWFkUHJlZmVyZW5jZSAtIFRoZSBuZXcgcmVhZCBwcmVmZXJlbmNlIGZvciB0aGUgY3Vyc29yLlxuICAgICAqL1xuICAgIHdpdGhSZWFkUHJlZmVyZW5jZShyZWFkUHJlZmVyZW5jZSkge1xuICAgICAgICBhc3NlcnRVbmluaXRpYWxpemVkKHRoaXMpO1xuICAgICAgICBpZiAocmVhZFByZWZlcmVuY2UgaW5zdGFuY2VvZiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgdGhpc1trT3B0aW9uc10ucmVhZFByZWZlcmVuY2UgPSByZWFkUHJlZmVyZW5jZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcmVhZFByZWZlcmVuY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzW2tPcHRpb25zXS5yZWFkUHJlZmVyZW5jZSA9IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLmZyb21TdHJpbmcocmVhZFByZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCByZWFkIHByZWZlcmVuY2U6ICR7cmVhZFByZWZlcmVuY2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgUmVhZFByZWZlcmVuY2UgZm9yIHRoZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVhZFByZWZlcmVuY2UgLSBUaGUgbmV3IHJlYWQgcHJlZmVyZW5jZSBmb3IgdGhlIGN1cnNvci5cbiAgICAgKi9cbiAgICB3aXRoUmVhZENvbmNlcm4ocmVhZENvbmNlcm4pIHtcbiAgICAgICAgYXNzZXJ0VW5pbml0aWFsaXplZCh0aGlzKTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRSZWFkQ29uY2VybiA9IHJlYWRfY29uY2Vybl8xLlJlYWRDb25jZXJuLmZyb21PcHRpb25zKHsgcmVhZENvbmNlcm4gfSk7XG4gICAgICAgIGlmIChyZXNvbHZlZFJlYWRDb25jZXJuKSB7XG4gICAgICAgICAgICB0aGlzW2tPcHRpb25zXS5yZWFkQ29uY2VybiA9IHJlc29sdmVkUmVhZENvbmNlcm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBhIG1heFRpbWVNUyBvbiB0aGUgY3Vyc29yIHF1ZXJ5LCBhbGxvd2luZyBmb3IgaGFyZCB0aW1lb3V0IGxpbWl0cyBvbiBxdWVyaWVzIChPbmx5IHN1cHBvcnRlZCBvbiBNb25nb0RCIDIuNiBvciBoaWdoZXIpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGFib3J0aW5nIHRoZSBxdWVyeS5cbiAgICAgKi9cbiAgICBtYXhUaW1lTVModmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0VW5pbml0aWFsaXplZCh0aGlzKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IGZvciBtYXhUaW1lTVMgbXVzdCBiZSBhIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNba09wdGlvbnNdLm1heFRpbWVNUyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBiYXRjaCBzaXplIGZvciB0aGUgY3Vyc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIG51bWJlciBvZiBkb2N1bWVudHMgdG8gcmV0dXJuIHBlciBiYXRjaC4gU2VlIHtAbGluayBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2UvY29tbWFuZC9maW5kL3xmaW5kIGNvbW1hbmQgZG9jdW1lbnRhdGlvbn0uXG4gICAgICovXG4gICAgYmF0Y2hTaXplKHZhbHVlKSB7XG4gICAgICAgIGFzc2VydFVuaW5pdGlhbGl6ZWQodGhpcyk7XG4gICAgICAgIGlmICh0aGlzW2tPcHRpb25zXS50YWlsYWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29UYWlsYWJsZUN1cnNvckVycm9yKCdUYWlsYWJsZSBjdXJzb3IgZG9lcyBub3Qgc3VwcG9ydCBiYXRjaFNpemUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3BlcmF0aW9uIFwiYmF0Y2hTaXplXCIgcmVxdWlyZXMgYW4gaW50ZWdlcicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNba09wdGlvbnNdLmJhdGNoU2l6ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV3aW5kIHRoaXMgY3Vyc29yIHRvIGl0cyB1bmluaXRpYWxpemVkIHN0YXRlLiBBbnkgb3B0aW9ucyB0aGF0IGFyZSBwcmVzZW50IG9uIHRoZSBjdXJzb3Igd2lsbFxuICAgICAqIHJlbWFpbiBpbiBlZmZlY3QuIEl0ZXJhdGluZyB0aGlzIGN1cnNvciB3aWxsIGNhdXNlIG5ldyBxdWVyaWVzIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlciwgZXZlblxuICAgICAqIGlmIHRoZSByZXN1bHRhbnQgZGF0YSBoYXMgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCBieSB0aGlzIGN1cnNvci5cbiAgICAgKi9cbiAgICByZXdpbmQoKSB7XG4gICAgICAgIGlmICghdGhpc1trSW5pdGlhbGl6ZWRdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1trSWRdID0gbnVsbDtcbiAgICAgICAgdGhpc1trRG9jdW1lbnRzXS5jbGVhcigpO1xuICAgICAgICB0aGlzW2tDbG9zZWRdID0gZmFsc2U7XG4gICAgICAgIHRoaXNba0tpbGxlZF0gPSBmYWxzZTtcbiAgICAgICAgdGhpc1trSW5pdGlhbGl6ZWRdID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzW2tTZXNzaW9uXTtcbiAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBlbmQgdGhpcyBzZXNzaW9uIGlmIHdlIGNyZWF0ZWQgaXQsIGFuZCBpdCBoYXNuJ3QgZW5kZWQgeWV0XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5leHBsaWNpdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24uaGFzRW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5lbmRTZXNzaW9uKCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNba1Nlc3Npb25dID0gdGhpcy5jbGllbnQuc3RhcnRTZXNzaW9uKHsgb3duZXI6IHRoaXMsIGV4cGxpY2l0OiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgZ2V0TW9yZShiYXRjaFNpemUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgY29uc3QgZ2V0TW9yZU9wZXJhdGlvbiA9IG5ldyBnZXRfbW9yZV8xLkdldE1vcmVPcGVyYXRpb24odGhpc1trTmFtZXNwYWNlXSwgdGhpc1trSWRdLCB0aGlzW2tTZXJ2ZXJdLCB7XG4gICAgICAgICAgICAuLi50aGlzW2tPcHRpb25zXSxcbiAgICAgICAgICAgIHNlc3Npb246IHRoaXNba1Nlc3Npb25dLFxuICAgICAgICAgICAgYmF0Y2hTaXplXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpc1trQ2xpZW50XSwgZ2V0TW9yZU9wZXJhdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBleHBvc2VkIGZvciB0aGUgdW5pZmllZCB0ZXN0IHJ1bm5lcidzIGNyZWF0ZUNoYW5nZVN0cmVhbVxuICAgICAqIG9wZXJhdGlvbi4gIFdlIGNhbm5vdCByZWZhY3RvciB0byB1c2UgdGhlIGFic3RyYWN0IF9pbml0aWFsaXplIG1ldGhvZCB3aXRob3V0XG4gICAgICogYSBzaWduaWZpY2FudCByZWZhY3Rvci5cbiAgICAgKi9cbiAgICBhc3luYyBba0luaXRdKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBhd2FpdCB0aGlzLl9pbml0aWFsaXplKHRoaXNba1Nlc3Npb25dKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gc3RhdGUucmVzcG9uc2U7XG4gICAgICAgICAgICB0aGlzW2tTZXJ2ZXJdID0gc3RhdGUuc2VydmVyO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmN1cnNvcikge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0yNjc0KTogUHJlc2VydmUgaW50NjQgc2VudCBmcm9tIE1vbmdvREJcbiAgICAgICAgICAgICAgICB0aGlzW2tJZF0gPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzcG9uc2UuY3Vyc29yLmlkID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBic29uXzEuTG9uZy5mcm9tTnVtYmVyKHJlc3BvbnNlLmN1cnNvci5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHJlc3BvbnNlLmN1cnNvci5pZCA9PT0gJ2JpZ2ludCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGJzb25fMS5Mb25nLmZyb21CaWdJbnQocmVzcG9uc2UuY3Vyc29yLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVzcG9uc2UuY3Vyc29yLmlkO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5jdXJzb3IubnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trTmFtZXNwYWNlXSA9ICgwLCB1dGlsc18xLm5zKShyZXNwb25zZS5jdXJzb3IubnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzW2tEb2N1bWVudHNdLnB1c2hNYW55KHJlc3BvbnNlLmN1cnNvci5maXJzdEJhdGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdoZW4gc2VydmVyIHJlc3BvbnNlcyByZXR1cm4gd2l0aG91dCBhIGN1cnNvciBkb2N1bWVudCwgd2UgY2xvc2UgdGhpcyBjdXJzb3JcbiAgICAgICAgICAgIC8vIGFuZCByZXR1cm4gdGhlIHJhdyBzZXJ2ZXIgcmVzcG9uc2UuIFRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UgZm9yIGV4cGxhaW4gY29tbWFuZHNcbiAgICAgICAgICAgIC8vIGZvciBleGFtcGxlXG4gICAgICAgICAgICBpZiAodGhpc1trSWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tJZF0gPSBic29uXzEuTG9uZy5aRVJPO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zMjg2KTogRXhlY3V0aW9uUmVzdWx0IG5lZWRzIHRvIGFjY2VwdCBhIGdlbmVyaWMgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgdGhpc1trRG9jdW1lbnRzXS5wdXNoKHN0YXRlLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoZSBjdXJzb3IgaXMgbm93IGluaXRpYWxpemVkLCBldmVuIGlmIGl0IGlzIGRlYWRcbiAgICAgICAgICAgIHRoaXNba0luaXRpYWxpemVkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyB0aGUgY3Vyc29yIGlzIG5vdyBpbml0aWFsaXplZCwgZXZlbiBpZiBhbiBlcnJvciBvY2N1cnJlZFxuICAgICAgICAgICAgdGhpc1trSW5pdGlhbGl6ZWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGF3YWl0IGNsZWFudXBDdXJzb3IodGhpcywgeyBlcnJvciB9KTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRGVhZCkge1xuICAgICAgICAgICAgYXdhaXQgY2xlYW51cEN1cnNvcih0aGlzLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG4vKiogQGV2ZW50ICovXG5BYnN0cmFjdEN1cnNvci5DTE9TRSA9ICdjbG9zZSc7XG5leHBvcnRzLkFic3RyYWN0Q3Vyc29yID0gQWJzdHJhY3RDdXJzb3I7XG4vKipcbiAqIEBwYXJhbSBjdXJzb3IgLSB0aGUgY3Vyc29yIG9uIHdoaWNoIHRvIGNhbGwgYG5leHRgXG4gKiBAcGFyYW0gYmxvY2tpbmcgLSBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGUgY3Vyc29yIHNob3VsZCBgYmxvY2tgIHVudGlsIGRhdGFcbiAqICAgICBpcyBhdmFpbGFibGUuICBHZW5lcmFsbHksIHRoaXMgZmxhZyBpcyBzZXQgdG8gYGZhbHNlYCBiZWNhdXNlIGlmIHRoZSBnZXRNb3JlIHJldHVybnMgbm8gZG9jdW1lbnRzLFxuICogICAgIHRoZSBjdXJzb3IgaGFzIGJlZW4gZXhoYXVzdGVkLiAgSW4gY2VydGFpbiBzY2VuYXJpb3MgKENoYW5nZVN0cmVhbXMsIHRhaWxhYmxlIGF3YWl0IGN1cnNvcnMgYW5kXG4gKiAgICAgYHRyeU5leHRgLCBmb3IgZXhhbXBsZSkgYmxvY2tpbmcgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYSBnZXRNb3JlIHJldHVybmluZyBubyBkb2N1bWVudHMgZG9lc1xuICogICAgIG5vdCBpbmRpY2F0ZSB0aGUgZW5kIG9mIHRoZSBjdXJzb3IuXG4gKiBAcGFyYW0gdHJhbnNmb3JtIC0gaWYgdHJ1ZSwgdGhlIGN1cnNvcidzIHRyYW5zZm9ybSBmdW5jdGlvbiBpcyBhcHBsaWVkIHRvIHRoZSByZXN1bHQgZG9jdW1lbnQgKGlmIHRoZSB0cmFuc2Zvcm0gZXhpc3RzKVxuICogQHJldHVybnMgdGhlIG5leHQgZG9jdW1lbnQgaW4gdGhlIGN1cnNvciwgb3IgYG51bGxgLiAgV2hlbiBgYmxvY2tpbmdgIGlzIGB0cnVlYCwgYSBgbnVsbGAgZG9jdW1lbnQgbWVhbnNcbiAqIHRoZSBjdXJzb3IgaGFzIGJlZW4gZXhoYXVzdGVkLiAgT3RoZXJ3aXNlLCBpdCBtZWFucyB0aGF0IHRoZXJlIGlzIG5vIGRvY3VtZW50IGF2YWlsYWJsZSBpbiB0aGUgY3Vyc29yJ3MgYnVmZmVyLlxuICovXG5hc3luYyBmdW5jdGlvbiBuZXh0KGN1cnNvciwgeyBibG9ja2luZywgdHJhbnNmb3JtIH0pIHtcbiAgICBpZiAoY3Vyc29yLmNsb3NlZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZG8ge1xuICAgICAgICBpZiAoY3Vyc29yW2tJZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQWxsIGN1cnNvcnMgbXVzdCBvcGVyYXRlIHdpdGhpbiBhIHNlc3Npb24sIG9uZSBtdXN0IGJlIG1hZGUgaW1wbGljaXRseSBpZiBub3QgZXhwbGljaXRseSBwcm92aWRlZFxuICAgICAgICAgICAgYXdhaXQgY3Vyc29yW2tJbml0XSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJzb3Jba0RvY3VtZW50c10ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBjdXJzb3Jba0RvY3VtZW50c10uc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChkb2MgIT0gbnVsbCAmJiB0cmFuc2Zvcm0gJiYgY3Vyc29yW2tUcmFuc2Zvcm1dKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnNvcltrVHJhbnNmb3JtXShkb2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYGNsZWFudXBDdXJzb3JBc3luY2Agc2hvdWxkIG5ldmVyIHRocm93LCBidXQgaWYgaXQgZG9lcyB3ZSB3YW50IHRvIHRocm93IHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjbGVhbnVwQ3Vyc29yKGN1cnNvciwgeyBlcnJvciwgbmVlZHNUb0VtaXRDbG9zZWQ6IHRydWUgfSkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnNvci5pc0RlYWQpIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBjdXJzb3IgaXMgZGVhZCwgd2UgY2xlYW4gaXQgdXBcbiAgICAgICAgICAgIC8vIGNsZWFudXBDdXJzb3JBc3luYyBzaG91bGQgbmV2ZXIgdGhyb3csIGJ1dCBpZiBpdCBkb2VzIGl0IGluZGljYXRlcyBhIGJ1ZyBpbiB0aGUgZHJpdmVyXG4gICAgICAgICAgICAvLyBhbmQgd2Ugc2hvdWxkIHN1cmZhY2UgdGhlIGVycm9yXG4gICAgICAgICAgICBhd2FpdCBjbGVhbnVwQ3Vyc29yKGN1cnNvciwge30pO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlIG5lZWQgdG8gY2FsbCBnZXRNb3JlXG4gICAgICAgIGNvbnN0IGJhdGNoU2l6ZSA9IGN1cnNvcltrT3B0aW9uc10uYmF0Y2hTaXplIHx8IDEwMDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGN1cnNvci5nZXRNb3JlKGJhdGNoU2l6ZSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3JJZCA9IHR5cGVvZiByZXNwb25zZS5jdXJzb3IuaWQgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgID8gYnNvbl8xLkxvbmcuZnJvbU51bWJlcihyZXNwb25zZS5jdXJzb3IuaWQpXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHJlc3BvbnNlLmN1cnNvci5pZCA9PT0gJ2JpZ2ludCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYnNvbl8xLkxvbmcuZnJvbUJpZ0ludChyZXNwb25zZS5jdXJzb3IuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlc3BvbnNlLmN1cnNvci5pZDtcbiAgICAgICAgICAgICAgICBjdXJzb3Jba0RvY3VtZW50c10ucHVzaE1hbnkocmVzcG9uc2UuY3Vyc29yLm5leHRCYXRjaCk7XG4gICAgICAgICAgICAgICAgY3Vyc29yW2tJZF0gPSBjdXJzb3JJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIGBjbGVhbnVwQ3Vyc29yQXN5bmNgIHNob3VsZCBuZXZlciB0aHJvdywgYnV0IGlmIGl0IGRvZXMgd2Ugd2FudCB0byB0aHJvdyB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgIC8vIGVycm9yIGluc3RlYWQuXG4gICAgICAgICAgICBhd2FpdCBjbGVhbnVwQ3Vyc29yKGN1cnNvciwgeyBlcnJvciB9KS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJzb3IuaXNEZWFkKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBzdWNjZXNzZnVsbHkgcmVjZWl2ZWQgYSByZXNwb25zZSBmcm9tIGEgY3Vyc29yIEJVVCB0aGUgY3Vyc29yIGluZGljYXRlcyB0aGF0IGl0IGlzIGV4aGF1c3RlZCxcbiAgICAgICAgICAgIC8vIHdlIGludGVudGlvbmFsbHkgY2xlYW4gdXAgdGhlIGN1cnNvciB0byByZWxlYXNlIGl0cyBzZXNzaW9uIGJhY2sgaW50byB0aGUgcG9vbCBiZWZvcmUgdGhlIGN1cnNvclxuICAgICAgICAgICAgLy8gaXMgaXRlcmF0ZWQuICBUaGlzIHByZXZlbnRzIGEgY3Vyc29yIHRoYXQgaXMgZXhoYXVzdGVkIG9uIHRoZSBzZXJ2ZXIgZnJvbSBob2xkaW5nXG4gICAgICAgICAgICAvLyBvbnRvIGEgc2Vzc2lvbiBpbmRlZmluaXRlbHkgdW50aWwgdGhlIEFic3RyYWN0Q3Vyc29yIGlzIGl0ZXJhdGVkLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGNsZWFudXBDdXJzb3JBc3luYyBzaG91bGQgbmV2ZXIgdGhyb3csIGJ1dCBpZiBpdCBkb2VzIGl0IGluZGljYXRlcyBhIGJ1ZyBpbiB0aGUgZHJpdmVyXG4gICAgICAgICAgICAvLyBhbmQgd2Ugc2hvdWxkIHN1cmZhY2UgdGhlIGVycm9yXG4gICAgICAgICAgICBhd2FpdCBjbGVhbnVwQ3Vyc29yKGN1cnNvciwge30pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJzb3Jba0RvY3VtZW50c10ubGVuZ3RoID09PSAwICYmIGJsb2NraW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlICghY3Vyc29yLmlzRGVhZCB8fCBjdXJzb3Jba0RvY3VtZW50c10ubGVuZ3RoICE9PSAwKTtcbiAgICByZXR1cm4gbnVsbDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNsZWFudXBDdXJzb3IoY3Vyc29yLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY3Vyc29ySWQgPSBjdXJzb3Jba0lkXTtcbiAgICBjb25zdCBjdXJzb3JOcyA9IGN1cnNvcltrTmFtZXNwYWNlXTtcbiAgICBjb25zdCBzZXJ2ZXIgPSBjdXJzb3Jba1NlcnZlcl07XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGN1cnNvcltrU2Vzc2lvbl07XG4gICAgY29uc3QgZXJyb3IgPSBvcHRpb25zPy5lcnJvcjtcbiAgICAvLyBDdXJzb3JzIG9ubHkgZW1pdCBjbG9zZWQgZXZlbnRzIG9uY2UgdGhlIGNsaWVudC1zaWRlIGN1cnNvciBoYXMgYmVlbiBleGhhdXN0ZWQgZnVsbHkgb3IgdGhlcmVcbiAgICAvLyB3YXMgYW4gZXJyb3IuICBOb3RhYmx5LCB3aGVuIHRoZSBzZXJ2ZXIgcmV0dXJucyBhIGN1cnNvciBpZCBvZiAwIGFuZCBhIG5vbi1lbXB0eSBiYXRjaCwgd2VcbiAgICAvLyBjbGVhbnVwIHRoZSBjdXJzb3IgYnV0IGRvbid0IGVtaXQgYSBgY2xvc2VgIGV2ZW50LlxuICAgIGNvbnN0IG5lZWRzVG9FbWl0Q2xvc2VkID0gb3B0aW9ucz8ubmVlZHNUb0VtaXRDbG9zZWQgPz8gY3Vyc29yW2tEb2N1bWVudHNdLmxlbmd0aCA9PT0gMDtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGN1cnNvci5sb2FkQmFsYW5jZWQgJiYgZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVDbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnNvcklkID09IG51bGwgfHwgc2VydmVyID09IG51bGwgfHwgY3Vyc29ySWQuaXNaZXJvKCkgfHwgY3Vyc29yTnMgPT0gbnVsbCkge1xuICAgICAgICBpZiAobmVlZHNUb0VtaXRDbG9zZWQpIHtcbiAgICAgICAgICAgIGN1cnNvcltrQ2xvc2VkXSA9IHRydWU7XG4gICAgICAgICAgICBjdXJzb3Jba0lkXSA9IGJzb25fMS5Mb25nLlpFUk87XG4gICAgICAgICAgICBjdXJzb3IuZW1pdChBYnN0cmFjdEN1cnNvci5DTE9TRSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uLm93bmVyID09PSBjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBzZXNzaW9uLmVuZFNlc3Npb24oeyBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNlc3Npb24uaW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgKDAsIHNlc3Npb25zXzEubWF5YmVDbGVhclBpbm5lZENvbm5lY3Rpb24pKHNlc3Npb24sIHsgZXJyb3IgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiBjb21wbGV0ZUNsZWFudXAoKSB7XG4gICAgICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5vd25lciA9PT0gY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5lbmRTZXNzaW9uKHsgZXJyb3IgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3IuZW1pdChBYnN0cmFjdEN1cnNvci5DTE9TRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAoMCwgc2Vzc2lvbnNfMS5tYXliZUNsZWFyUGlubmVkQ29ubmVjdGlvbikoc2Vzc2lvbiwgeyBlcnJvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdXJzb3IuZW1pdChBYnN0cmFjdEN1cnNvci5DTE9TRSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3Vyc29yW2tLaWxsZWRdID0gdHJ1ZTtcbiAgICBpZiAoc2Vzc2lvbi5oYXNFbmRlZCkge1xuICAgICAgICByZXR1cm4gY29tcGxldGVDbGVhbnVwKCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKGN1cnNvcltrQ2xpZW50XSwgbmV3IGtpbGxfY3Vyc29yc18xLktpbGxDdXJzb3JzT3BlcmF0aW9uKGN1cnNvcklkLCBjdXJzb3JOcywgc2VydmVyLCB7IHNlc3Npb24gfSkpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgYXdhaXQgY29tcGxldGVDbGVhbnVwKCk7XG4gICAgfVxufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gYXNzZXJ0VW5pbml0aWFsaXplZChjdXJzb3IpIHtcbiAgICBpZiAoY3Vyc29yW2tJbml0aWFsaXplZF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29DdXJzb3JJblVzZUVycm9yKCk7XG4gICAgfVxufVxuZXhwb3J0cy5hc3NlcnRVbmluaXRpYWxpemVkID0gYXNzZXJ0VW5pbml0aWFsaXplZDtcbmNsYXNzIFJlYWRhYmxlQ3Vyc29yU3RyZWFtIGV4dGVuZHMgc3RyZWFtXzEuUmVhZGFibGUge1xuICAgIGNvbnN0cnVjdG9yKGN1cnNvcikge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgICAgICAgICAgYXV0b0Rlc3Ryb3k6IGZhbHNlLFxuICAgICAgICAgICAgaGlnaFdhdGVyTWFyazogMVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVhZEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY3Vyc29yID0gY3Vyc29yO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX3JlYWQoc2l6ZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3JlYWRJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWFkSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9yZWFkTmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9kZXN0cm95KGVycm9yLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9jdXJzb3IuY2xvc2UoKS50aGVuKCgpID0+IGNhbGxiYWNrKGVycm9yKSwgY2xvc2VFcnJvciA9PiBjYWxsYmFjayhjbG9zZUVycm9yKSk7XG4gICAgfVxuICAgIF9yZWFkTmV4dCgpIHtcbiAgICAgICAgbmV4dCh0aGlzLl9jdXJzb3IsIHsgYmxvY2tpbmc6IHRydWUsIHRyYW5zZm9ybTogdHJ1ZSB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvci5jbG9zZSgpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHVzaChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkTmV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBlcnIgPT4ge1xuICAgICAgICAgICAgLy8gTk9URTogVGhpcyBpcyBxdWVzdGlvbmFibGUsIGJ1dCB3ZSBoYXZlIGEgdGVzdCBiYWNraW5nIHRoZSBiZWhhdmlvci4gSXQgc2VlbXMgdGhlXG4gICAgICAgICAgICAvLyAgICAgICBkZXNpcmVkIGJlaGF2aW9yIGlzIHRoYXQgYSBzdHJlYW0gZW5kcyBjbGVhbmx5IHdoZW4gYSB1c2VyIGV4cGxpY2l0bHkgY2xvc2VzXG4gICAgICAgICAgICAvLyAgICAgICBhIGNsaWVudCBkdXJpbmcgaXRlcmF0aW9uLiBBbHRlcm5hdGl2ZWx5LCB3ZSBjb3VsZCBkbyB0aGUgXCJyaWdodFwiIHRoaW5nIGFuZFxuICAgICAgICAgICAgLy8gICAgICAgcHJvcGFnYXRlIHRoZSBlcnJvciBtZXNzYWdlIGJ5IHJlbW92aW5nIHRoaXMgc3BlY2lhbCBjYXNlLlxuICAgICAgICAgICAgaWYgKGVyci5tZXNzYWdlLm1hdGNoKC9zZXJ2ZXIgaXMgY2xvc2VkLykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IuY2xvc2UoKS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTk9URTogVGhpcyBpcyBhbHNvIHBlcmhhcHMgcXVlc3Rpb25hYmxlLiBUaGUgcmF0aW9uYWxlIGhlcmUgaXMgdGhhdCB0aGVzZSBlcnJvcnMgdGVuZFxuICAgICAgICAgICAgLy8gICAgICAgdG8gYmUgXCJvcGVyYXRpb24gd2FzIGludGVycnVwdGVkXCIsIHdoZXJlIGEgY3Vyc29yIGhhcyBiZWVuIGNsb3NlZCBidXQgdGhlcmUgaXMgYW5cbiAgICAgICAgICAgIC8vICAgICAgIGFjdGl2ZSBnZXRNb3JlIGluLWZsaWdodC4gVGhpcyB1c2VkIHRvIGNoZWNrIGlmIHRoZSBjdXJzb3Igd2FzIGtpbGxlZCBidXQgb25jZVxuICAgICAgICAgICAgLy8gICAgICAgdGhhdCBjaGFuZ2VkIHRvIGhhcHBlbiBpbiBjbGVhbnVwIGxlZ2l0aW1hdGUgZXJyb3JzIHdvdWxkIG5vdCBkZXN0cm95IHRoZVxuICAgICAgICAgICAgLy8gICAgICAgc3RyZWFtLiBUaGVyZSBhcmUgY2hhbmdlIHN0cmVhbXMgdGVzdCBzcGVjaWZpY2FsbHkgdGVzdCB0aGVzZSBjYXNlcy5cbiAgICAgICAgICAgIGlmIChlcnIubWVzc2FnZS5tYXRjaCgvb3BlcmF0aW9uIHdhcyBpbnRlcnJ1cHRlZC8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5PVEU6IFRoZSB0d28gYWJvdmUgY2hlY2tzIG9uIHRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvciB3aWxsIGNhdXNlIGEgbnVsbCB0byBiZSBwdXNoZWRcbiAgICAgICAgICAgIC8vICAgICAgIHRvIHRoZSBzdHJlYW0sIHRodXMgY2xvc2luZyB0aGUgc3RyZWFtIGJlZm9yZSB0aGUgZGVzdHJveSBjYWxsIGhhcHBlbnMuIFRoaXMgbWVhbnNcbiAgICAgICAgICAgIC8vICAgICAgIHRoYXQgZWl0aGVyIG9mIHRob3NlIGVycm9yIG1lc3NhZ2VzIG9uIGEgY2hhbmdlIHN0cmVhbSB3aWxsIG5vdCBnZXQgYSBwcm9wZXJcbiAgICAgICAgICAgIC8vICAgICAgICdlcnJvcicgZXZlbnQgdG8gYmUgZW1pdHRlZCAodGhlIGVycm9yIHBhc3NlZCB0byBkZXN0cm95KS4gQ2hhbmdlIHN0cmVhbSByZXN1bWFiaWxpdHlcbiAgICAgICAgICAgIC8vICAgICAgIHJlbGllcyBvbiB0aGF0IGVycm9yIGV2ZW50IHRvIGJlIGVtaXR0ZWQgdG8gY3JlYXRlIGl0cyBuZXcgY3Vyc29yIGFuZCB0aHVzIHdhcyBub3RcbiAgICAgICAgICAgIC8vICAgICAgIHdvcmtpbmcgb24gNC40IHNlcnZlcnMgYmVjYXVzZSB0aGUgZXJyb3IgZW1pdHRlZCBvbiBmYWlsb3ZlciB3YXMgXCJpbnRlcnJ1cHRlZCBhdFxuICAgICAgICAgICAgLy8gICAgICAgc2h1dGRvd25cIiB3aGlsZSBvbiA1LjArIGl0IGlzIFwiVGhlIHNlcnZlciBpcyBpbiBxdWllc2NlIG1vZGUgYW5kIHdpbGwgc2h1dCBkb3duXCIuXG4gICAgICAgICAgICAvLyAgICAgICBTZWUgTk9ERS00NDc1LlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdHJveShlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hYnN0cmFjdF9jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXNzZXJ0VW5pbml0aWFsaXplZCIsIkFic3RyYWN0Q3Vyc29yIiwiQ1VSU09SX0ZMQUdTIiwic3RyZWFtXzEiLCJyZXF1aXJlIiwiYnNvbl8xIiwiZXJyb3JfMSIsIm1vbmdvX3R5cGVzXzEiLCJleGVjdXRlX29wZXJhdGlvbl8xIiwiZ2V0X21vcmVfMSIsImtpbGxfY3Vyc29yc18xIiwicmVhZF9jb25jZXJuXzEiLCJyZWFkX3ByZWZlcmVuY2VfMSIsInNlc3Npb25zXzEiLCJ1dGlsc18xIiwia0lkIiwiU3ltYm9sIiwia0RvY3VtZW50cyIsImtTZXJ2ZXIiLCJrTmFtZXNwYWNlIiwia0NsaWVudCIsImtTZXNzaW9uIiwia09wdGlvbnMiLCJrVHJhbnNmb3JtIiwia0luaXRpYWxpemVkIiwia0Nsb3NlZCIsImtLaWxsZWQiLCJrSW5pdCIsIlR5cGVkRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJuYW1lc3BhY2UiLCJvcHRpb25zIiwicyIsImlzTW9uZ29DbGllbnQiLCJNb25nb1J1bnRpbWVFcnJvciIsIkxpc3QiLCJyZWFkUHJlZmVyZW5jZSIsIlJlYWRQcmVmZXJlbmNlIiwicHJpbWFyeSIsInBsdWNrQlNPTlNlcmlhbGl6ZU9wdGlvbnMiLCJyZWFkQ29uY2VybiIsIlJlYWRDb25jZXJuIiwiZnJvbU9wdGlvbnMiLCJiYXRjaFNpemUiLCJjb21tZW50IiwidW5kZWZpbmVkIiwibWF4VGltZU1TIiwibWF4QXdhaXRUaW1lTVMiLCJzZXNzaW9uIiwiQ2xpZW50U2Vzc2lvbiIsInN0YXJ0U2Vzc2lvbiIsIm93bmVyIiwiZXhwbGljaXQiLCJpZCIsImlzRGVhZCIsImlzWmVybyIsInNlcnZlciIsImNsaWVudFNlc3Npb24iLCJjdXJzb3JPcHRpb25zIiwiY2xvc2VkIiwia2lsbGVkIiwibG9hZEJhbGFuY2VkIiwidG9wb2xvZ3kiLCJidWZmZXJlZENvdW50IiwibGVuZ3RoIiwicmVhZEJ1ZmZlcmVkRG9jdW1lbnRzIiwibnVtYmVyIiwiYnVmZmVyZWREb2NzIiwiZG9jdW1lbnRzVG9SZWFkIiwiTWF0aCIsIm1pbiIsImNvdW50IiwiZG9jdW1lbnQiLCJzaGlmdCIsInB1c2giLCJhc3luY0l0ZXJhdG9yIiwibmV4dCIsIm1lc3NhZ2UiLCJjbGVhbnVwQ3Vyc29yIiwibmVlZHNUb0VtaXRDbG9zZWQiLCJjYXRjaCIsIk1vbmdvQVBJRXJyb3IiLCJMb25nIiwiWkVSTyIsImNsb3NlIiwic3RyZWFtIiwidHJhbnNmb3JtIiwicmVhZGFibGUiLCJSZWFkYWJsZUN1cnNvclN0cmVhbSIsInRyYW5zZm9ybWVkU3RyZWFtIiwicGlwZSIsIlRyYW5zZm9ybSIsIm9iamVjdE1vZGUiLCJoaWdoV2F0ZXJNYXJrIiwiY2h1bmsiLCJfIiwiY2FsbGJhY2siLCJ0cmFuc2Zvcm1lZCIsImVyciIsIm9uIiwiZW1pdCIsImhhc05leHQiLCJkb2MiLCJibG9ja2luZyIsInVuc2hpZnQiLCJNb25nb0N1cnNvckV4aGF1c3RlZEVycm9yIiwidHJ5TmV4dCIsImZvckVhY2giLCJpdGVyYXRvciIsIk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJyZXN1bHQiLCJ0b0FycmF5IiwiYXJyYXkiLCJhZGRDdXJzb3JGbGFnIiwiZmxhZyIsImluY2x1ZGVzIiwibWFwIiwib2xkVHJhbnNmb3JtIiwid2l0aFJlYWRQcmVmZXJlbmNlIiwiZnJvbVN0cmluZyIsIndpdGhSZWFkQ29uY2VybiIsInJlc29sdmVkUmVhZENvbmNlcm4iLCJ0YWlsYWJsZSIsIk1vbmdvVGFpbGFibGVDdXJzb3JFcnJvciIsInJld2luZCIsImNsZWFyIiwiaGFzRW5kZWQiLCJlbmRTZXNzaW9uIiwiZ2V0TW9yZSIsImdldE1vcmVPcGVyYXRpb24iLCJHZXRNb3JlT3BlcmF0aW9uIiwiZXhlY3V0ZU9wZXJhdGlvbiIsInN0YXRlIiwiX2luaXRpYWxpemUiLCJyZXNwb25zZSIsImN1cnNvciIsImZyb21OdW1iZXIiLCJmcm9tQmlnSW50IiwibnMiLCJwdXNoTWFueSIsImZpcnN0QmF0Y2giLCJlcnJvciIsIkNMT1NFIiwiY3Vyc29ySWQiLCJuZXh0QmF0Y2giLCJjdXJzb3JOcyIsIk1vbmdvTmV0d29ya0Vycm9yIiwiY29tcGxldGVDbGVhbnVwIiwiaW5UcmFuc2FjdGlvbiIsIm1heWJlQ2xlYXJQaW5uZWRDb25uZWN0aW9uIiwiS2lsbEN1cnNvcnNPcGVyYXRpb24iLCJNb25nb0N1cnNvckluVXNlRXJyb3IiLCJSZWFkYWJsZSIsImF1dG9EZXN0cm95IiwiX3JlYWRJblByb2dyZXNzIiwiX2N1cnNvciIsIl9yZWFkIiwic2l6ZSIsIl9yZWFkTmV4dCIsIl9kZXN0cm95IiwidGhlbiIsImNsb3NlRXJyb3IiLCJkZXN0cm95ZWQiLCJtYXRjaCIsImRlc3Ryb3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/aggregation_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AggregationCursor = void 0;\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */ const kPipeline = Symbol(\"pipeline\");\n/** @internal */ const kOptions = Symbol(\"options\");\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */ class AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */ constructor(client, namespace, pipeline = [], options = {}){\n        super(client, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */ async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n        // TODO: NODE-2882\n        return {\n            server: aggregateOperation.server,\n            session,\n            response\n        };\n    }\n    /** Execute the explain for the cursor */ async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    group($group) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $group\n        });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */ limit($limit) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $limit\n        });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */ match($match) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $match\n        });\n        return this;\n    }\n    /** Add an out stage to the aggregation pipeline */ out($out) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $out\n        });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */ project($project) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $project\n        });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */ lookup($lookup) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $lookup\n        });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */ redact($redact) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $redact\n        });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */ skip($skip) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $skip\n        });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */ sort($sort) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $sort\n        });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */ unwind($unwind) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $unwind\n        });\n        return this;\n    }\n    /** Add a geoNear stage to the aggregation pipeline */ geoNear($geoNear) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $geoNear\n        });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor; //# sourceMappingURL=aggregation_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/change_stream_cursor.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = __webpack_require__(/*! ../change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */ class ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}){\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        } else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.options\n        };\n        for (const key of [\n            \"resumeAfter\",\n            \"startAfter\",\n            \"startAtOperationTime\"\n        ]){\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.options.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            } else {\n                options.resumeAfter = this.resumeToken;\n            }\n        } else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        } else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const cursor = response.cursor;\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n            const batch = \"firstBatch\" in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n            if (batch.length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        // TODO: NODE-2882\n        return {\n            server,\n            session,\n            response\n        };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor; //# sourceMappingURL=change_stream_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/find_cursor.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FindCursor = exports.FLAGS = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst count_1 = __webpack_require__(/*! ../operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_1 = __webpack_require__(/*! ../operations/find */ \"(ssr)/./node_modules/mongodb/lib/operations/find.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */ const kFilter = Symbol(\"filter\");\n/** @internal */ const kNumReturned = Symbol(\"numReturned\");\n/** @internal */ const kBuiltOptions = Symbol(\"builtOptions\");\n/** @public Flags allowed for cursor */ exports.FLAGS = [\n    \"tailable\",\n    \"oplogReplay\",\n    \"noCursorTimeout\",\n    \"awaitData\",\n    \"exhaust\",\n    \"partial\"\n];\n/** @public */ class FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */ constructor(client, namespace, filter = {}, options = {}){\n        super(client, namespace, options);\n        this[kFilter] = filter;\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */ async _initialize(session) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n        // the response is not a cursor when `explain` is enabled\n        this[kNumReturned] = response.cursor?.firstBatch?.length;\n        // TODO: NODE-2882\n        return {\n            server: findOperation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */ async getMore(batchSize) {\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this[kBuiltOptions].limit;\n            batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                // this is an optimization for the special case of a limit for a find command to avoid an\n                // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                // produces results for the find command.  Once a batch is filled up, it is returned and only\n                // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                // is exhausted and return a cursorId of zero.\n                // instead, if we determine there are no more documents to request from the server, we preemptively\n                // close the cursor\n                await this.close().catch(()=>null);\n                return {\n                    cursor: {\n                        id: bson_1.Long.ZERO,\n                        nextBatch: []\n                    }\n                };\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n            this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */ async count(options) {\n        (0, utils_1.emitWarningOnce)(\"cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead \");\n        if (typeof options === \"boolean\") {\n            throw new error_1.MongoInvalidArgumentError(\"Invalid first parameter to count\");\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */ async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    /** Set the cursor query */ filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */ hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */ min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */ max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */ returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */ showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */ addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== \"$\") {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch(field){\n            case \"comment\":\n                this[kBuiltOptions].comment = value;\n                break;\n            case \"explain\":\n                this[kBuiltOptions].explain = value;\n                break;\n            case \"hint\":\n                this[kBuiltOptions].hint = value;\n                break;\n            case \"max\":\n                this[kBuiltOptions].max = value;\n                break;\n            case \"maxTimeMS\":\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case \"min\":\n                this[kBuiltOptions].min = value;\n                break;\n            case \"orderby\":\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case \"query\":\n                this[kFilter] = value;\n                break;\n            case \"returnKey\":\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case \"showDiskLoc\":\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */ comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */ maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError(\"Argument for maxAwaitTimeMS must be a number\");\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */ maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError(\"Argument for maxTimeMS must be a number\");\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */ project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */ sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support sorting\");\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */ allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */ collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */ limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support limit\");\n        }\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */ skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support skip\");\n        }\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor; //# sourceMappingURL=find_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_collections_cursor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_collections_1 = __webpack_require__(/*! ../operations/list_collections */ \"(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */ class ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options){\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */ async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor; //# sourceMappingURL=list_collections_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfY29sbGVjdGlvbnNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDLE1BQU1HLHNCQUFzQkMsbUJBQU9BLENBQUMseUdBQWlDO0FBQ3JFLE1BQU1DLHFCQUFxQkQsbUJBQU9BLENBQUMsdUdBQWdDO0FBQ25FLE1BQU1FLG9CQUFvQkYsbUJBQU9BLENBQUMscUZBQW1CO0FBQ3JELFlBQVksR0FDWixNQUFNRiw4QkFBOEJJLGtCQUFrQkMsY0FBYztJQUNoRUMsWUFBWUMsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUM3QixLQUFLLENBQUNGLEdBQUdHLE1BQU0sRUFBRUgsR0FBR0ksQ0FBQyxDQUFDQyxTQUFTLEVBQUVIO1FBQ2pDLElBQUksQ0FBQ0ksTUFBTSxHQUFHTjtRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNuQjtJQUNBSyxRQUFRO1FBQ0osT0FBTyxJQUFJZCxzQkFBc0IsSUFBSSxDQUFDYSxNQUFNLEVBQUUsSUFBSSxDQUFDTCxNQUFNLEVBQUU7WUFDdkQsR0FBRyxJQUFJLENBQUNDLE9BQU87WUFDZixHQUFHLElBQUksQ0FBQ00sYUFBYTtRQUN6QjtJQUNKO0lBQ0EsY0FBYyxHQUNkLE1BQU1DLFlBQVlDLE9BQU8sRUFBRTtRQUN2QixNQUFNQyxZQUFZLElBQUlmLG1CQUFtQmdCLHdCQUF3QixDQUFDLElBQUksQ0FBQ04sTUFBTSxFQUFFLElBQUksQ0FBQ0wsTUFBTSxFQUFFO1lBQ3hGLEdBQUcsSUFBSSxDQUFDTyxhQUFhO1lBQ3JCLEdBQUcsSUFBSSxDQUFDTixPQUFPO1lBQ2ZRO1FBQ0o7UUFDQSxNQUFNRyxXQUFXLE1BQU0sQ0FBQyxHQUFHbkIsb0JBQW9Cb0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDUixNQUFNLENBQUNILE1BQU0sRUFBRVE7UUFDckYsa0JBQWtCO1FBQ2xCLE9BQU87WUFBRUksUUFBUUosVUFBVUksTUFBTTtZQUFFTDtZQUFTRztRQUFTO0lBQ3pEO0FBQ0o7QUFDQXRCLDZCQUE2QixHQUFHRSx1QkFDaEMsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanM/MDdhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgbGlzdF9jb2xsZWN0aW9uc18xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvbGlzdF9jb2xsZWN0aW9uc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIExpc3RDb2xsZWN0aW9uc0N1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLmNsaWVudCwgZGIucy5uYW1lc3BhY2UsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IGRiO1xuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdENvbGxlY3Rpb25zQ3Vyc29yKHRoaXMucGFyZW50LCB0aGlzLmZpbHRlciwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBuZXcgbGlzdF9jb2xsZWN0aW9uc18xLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbih0aGlzLnBhcmVudCwgdGhpcy5maWx0ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5wYXJlbnQuY2xpZW50LCBvcGVyYXRpb24pO1xuICAgICAgICAvLyBUT0RPOiBOT0RFLTI4ODJcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyOiBvcGVyYXRpb24uc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zQ3Vyc29yID0gTGlzdENvbGxlY3Rpb25zQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTGlzdENvbGxlY3Rpb25zQ3Vyc29yIiwiZXhlY3V0ZV9vcGVyYXRpb25fMSIsInJlcXVpcmUiLCJsaXN0X2NvbGxlY3Rpb25zXzEiLCJhYnN0cmFjdF9jdXJzb3JfMSIsIkFic3RyYWN0Q3Vyc29yIiwiY29uc3RydWN0b3IiLCJkYiIsImZpbHRlciIsIm9wdGlvbnMiLCJjbGllbnQiLCJzIiwibmFtZXNwYWNlIiwicGFyZW50IiwiY2xvbmUiLCJjdXJzb3JPcHRpb25zIiwiX2luaXRpYWxpemUiLCJzZXNzaW9uIiwib3BlcmF0aW9uIiwiTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uIiwicmVzcG9uc2UiLCJleGVjdXRlT3BlcmF0aW9uIiwic2VydmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_indexes_cursor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ../operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */ class ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options){\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */ async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor; //# sourceMappingURL=list_indexes_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfaW5kZXhlc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsc0JBQXNCQyxtQkFBT0EsQ0FBQyx5R0FBaUM7QUFDckUsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMscUZBQXVCO0FBQ2pELE1BQU1FLG9CQUFvQkYsbUJBQU9BLENBQUMscUZBQW1CO0FBQ3JELFlBQVksR0FDWixNQUFNRiwwQkFBMEJJLGtCQUFrQkMsY0FBYztJQUM1REMsWUFBWUMsVUFBVSxFQUFFQyxPQUFPLENBQUU7UUFDN0IsS0FBSyxDQUFDRCxXQUFXRSxNQUFNLEVBQUVGLFdBQVdHLENBQUMsQ0FBQ0MsU0FBUyxFQUFFSDtRQUNqRCxJQUFJLENBQUNJLE1BQU0sR0FBR0w7UUFDZCxJQUFJLENBQUNDLE9BQU8sR0FBR0E7SUFDbkI7SUFDQUssUUFBUTtRQUNKLE9BQU8sSUFBSWIsa0JBQWtCLElBQUksQ0FBQ1ksTUFBTSxFQUFFO1lBQ3RDLEdBQUcsSUFBSSxDQUFDSixPQUFPO1lBQ2YsR0FBRyxJQUFJLENBQUNNLGFBQWE7UUFDekI7SUFDSjtJQUNBLGNBQWMsR0FDZCxNQUFNQyxZQUFZQyxPQUFPLEVBQUU7UUFDdkIsTUFBTUMsWUFBWSxJQUFJZCxVQUFVZSxvQkFBb0IsQ0FBQyxJQUFJLENBQUNOLE1BQU0sRUFBRTtZQUM5RCxHQUFHLElBQUksQ0FBQ0UsYUFBYTtZQUNyQixHQUFHLElBQUksQ0FBQ04sT0FBTztZQUNmUTtRQUNKO1FBQ0EsTUFBTUcsV0FBVyxNQUFNLENBQUMsR0FBR2xCLG9CQUFvQm1CLGdCQUFnQixFQUFFLElBQUksQ0FBQ1IsTUFBTSxDQUFDSCxNQUFNLEVBQUVRO1FBQ3JGLGtCQUFrQjtRQUNsQixPQUFPO1lBQUVJLFFBQVFKLFVBQVVJLE1BQU07WUFBRUw7WUFBU0c7UUFBUztJQUN6RDtBQUNKO0FBQ0FyQix5QkFBeUIsR0FBR0UsbUJBQzVCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfaW5kZXhlc19jdXJzb3IuanM/ODk1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdEluZGV4ZXNDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBpbmRleGVzXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9pbmRleGVzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLmNsaWVudCwgY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdEluZGV4ZXNDdXJzb3IodGhpcy5wYXJlbnQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGluZGV4ZXNfMS5MaXN0SW5kZXhlc09wZXJhdGlvbih0aGlzLnBhcmVudCwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnBhcmVudC5jbGllbnQsIG9wZXJhdGlvbik7XG4gICAgICAgIC8vIFRPRE86IE5PREUtMjg4MlxuICAgICAgICByZXR1cm4geyBzZXJ2ZXI6IG9wZXJhdGlvbi5zZXJ2ZXIsIHNlc3Npb24sIHJlc3BvbnNlIH07XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0SW5kZXhlc0N1cnNvciA9IExpc3RJbmRleGVzQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9pbmRleGVzX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMaXN0SW5kZXhlc0N1cnNvciIsImV4ZWN1dGVfb3BlcmF0aW9uXzEiLCJyZXF1aXJlIiwiaW5kZXhlc18xIiwiYWJzdHJhY3RfY3Vyc29yXzEiLCJBYnN0cmFjdEN1cnNvciIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsIm9wdGlvbnMiLCJjbGllbnQiLCJzIiwibmFtZXNwYWNlIiwicGFyZW50IiwiY2xvbmUiLCJjdXJzb3JPcHRpb25zIiwiX2luaXRpYWxpemUiLCJzZXNzaW9uIiwib3BlcmF0aW9uIiwiTGlzdEluZGV4ZXNPcGVyYXRpb24iLCJyZXNwb25zZSIsImV4ZWN1dGVPcGVyYXRpb24iLCJzZXJ2ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = __webpack_require__(/*! ./aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\n/** @public */ class ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */ constructor({ fullNamespace: ns, client }, name, options = {}){\n        const pipeline = name == null ? [\n            {\n                $listSearchIndexes: {}\n            }\n        ] : [\n            {\n                $listSearchIndexes: {\n                    name\n                }\n            }\n        ];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor; //# sourceMappingURL=list_search_indexes_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwrQkFBK0IsR0FBRyxLQUFLO0FBQ3ZDLE1BQU1HLHVCQUF1QkMsbUJBQU9BLENBQUMsMkZBQXNCO0FBQzNELFlBQVksR0FDWixNQUFNRixnQ0FBZ0NDLHFCQUFxQkUsaUJBQWlCO0lBQ3hFLGNBQWMsR0FDZEMsWUFBWSxFQUFFQyxlQUFlQyxFQUFFLEVBQUVDLE1BQU0sRUFBRSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDM0QsTUFBTUMsV0FBV0YsUUFBUSxPQUFPO1lBQUM7Z0JBQUVHLG9CQUFvQixDQUFDO1lBQUU7U0FBRSxHQUFHO1lBQUM7Z0JBQUVBLG9CQUFvQjtvQkFBRUg7Z0JBQUs7WUFBRTtTQUFFO1FBQ2pHLEtBQUssQ0FBQ0QsUUFBUUQsSUFBSUksVUFBVUQ7SUFDaEM7QUFDSjtBQUNBWCwrQkFBK0IsR0FBR0UseUJBQ2xDLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzPzQ4NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgYWdncmVnYXRpb25fY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hZ2dyZWdhdGlvbl9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhZ2dyZWdhdGlvbl9jdXJzb3JfMS5BZ2dyZWdhdGlvbkN1cnNvciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHsgZnVsbE5hbWVzcGFjZTogbnMsIGNsaWVudCB9LCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBuYW1lID09IG51bGwgPyBbeyAkbGlzdFNlYXJjaEluZGV4ZXM6IHt9IH1dIDogW3sgJGxpc3RTZWFyY2hJbmRleGVzOiB7IG5hbWUgfSB9XTtcbiAgICAgICAgc3VwZXIoY2xpZW50LCBucywgcGlwZWxpbmUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgPSBMaXN0U2VhcmNoSW5kZXhlc0N1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yIiwiYWdncmVnYXRpb25fY3Vyc29yXzEiLCJyZXF1aXJlIiwiQWdncmVnYXRpb25DdXJzb3IiLCJjb25zdHJ1Y3RvciIsImZ1bGxOYW1lc3BhY2UiLCJucyIsImNsaWVudCIsIm5hbWUiLCJvcHRpb25zIiwicGlwZWxpbmUiLCIkbGlzdFNlYXJjaEluZGV4ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/run_command_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RunCommandCursor = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst run_command_1 = __webpack_require__(/*! ../operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */ class RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */ setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */ setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param maxTimeMS - the number documents to return in the `nextBatch`\n     */ setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */ clone() {\n        throw new error_1.MongoAPIError(\"Clone not supported, create a new cursor with db.runCursorCommand\");\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */ withReadConcern(_) {\n        throw new error_1.MongoAPIError(\"RunCommandCursor does not support readConcern it must be attached to the command being run\");\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */ addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError(\"RunCommandCursor does not support cursor flags, they must be attached to the command being run\");\n    }\n    /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */ maxTimeMS(_) {\n        throw new error_1.MongoAPIError(\"maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()\");\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */ batchSize(_) {\n        throw new error_1.MongoAPIError(\"batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()\");\n    }\n    /** @internal */ constructor(db, command, options = {}){\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({\n            ...command\n        });\n    }\n    /** @internal */ async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation);\n        if (response.cursor == null) {\n            throw new error_1.MongoUnexpectedServerResponseError(\"Expected server to respond with cursor\");\n        }\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */ async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return (0, execute_operation_1.executeOperation)(this.client, getMoreOperation);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor; //# sourceMappingURL=run_command_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL3J1bl9jb21tYW5kX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLHlHQUFpQztBQUNyRSxNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQyx1RkFBd0I7QUFDbkQsTUFBTUcsZ0JBQWdCSCxtQkFBT0EsQ0FBQyw2RkFBMkI7QUFDekQsTUFBTUksVUFBVUosbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUssb0JBQW9CTCxtQkFBT0EsQ0FBQyxxRkFBbUI7QUFDckQsWUFBWSxHQUNaLE1BQU1GLHlCQUF5Qk8sa0JBQWtCQyxjQUFjO0lBQzNEOzs7S0FHQyxHQUNEQyxXQUFXQyxPQUFPLEVBQUU7UUFDaEIsSUFBSSxDQUFDQyxjQUFjLENBQUNELE9BQU8sR0FBR0E7UUFDOUIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7O0tBR0MsR0FDREUsYUFBYUMsU0FBUyxFQUFFO1FBQ3BCLElBQUksQ0FBQ0YsY0FBYyxDQUFDRyxjQUFjLEdBQUdEO1FBQ3JDLE9BQU8sSUFBSTtJQUNmO0lBQ0E7OztLQUdDLEdBQ0RFLGFBQWFDLFNBQVMsRUFBRTtRQUNwQixJQUFJLENBQUNMLGNBQWMsQ0FBQ0ssU0FBUyxHQUFHQTtRQUNoQyxPQUFPLElBQUk7SUFDZjtJQUNBLHFDQUFxQyxHQUNyQ0MsUUFBUTtRQUNKLE1BQU0sSUFBSWhCLFFBQVFpQixhQUFhLENBQUM7SUFDcEM7SUFDQSxrR0FBa0csR0FDbEdDLGdCQUFnQkMsQ0FBQyxFQUFFO1FBQ2YsTUFBTSxJQUFJbkIsUUFBUWlCLGFBQWEsQ0FBQztJQUNwQztJQUNBLDJHQUEyRyxHQUMzR0csY0FBY0QsQ0FBQyxFQUFFRSxFQUFFLEVBQUU7UUFDakIsTUFBTSxJQUFJckIsUUFBUWlCLGFBQWEsQ0FBQztJQUNwQztJQUNBLGdHQUFnRyxHQUNoR0wsVUFBVU8sQ0FBQyxFQUFFO1FBQ1QsTUFBTSxJQUFJbkIsUUFBUWlCLGFBQWEsQ0FBQztJQUNwQztJQUNBLGdHQUFnRyxHQUNoR0YsVUFBVUksQ0FBQyxFQUFFO1FBQ1QsTUFBTSxJQUFJbkIsUUFBUWlCLGFBQWEsQ0FBQztJQUNwQztJQUNBLGNBQWMsR0FDZEssWUFBWUMsRUFBRSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDbkMsS0FBSyxDQUFDRixHQUFHRyxNQUFNLEVBQUUsQ0FBQyxHQUFHckIsUUFBUXNCLEVBQUUsRUFBRUosR0FBR0ssU0FBUyxHQUFHSDtRQUNoRCxJQUFJLENBQUNmLGNBQWMsR0FBRyxDQUFDO1FBQ3ZCLElBQUksQ0FBQ2EsRUFBRSxHQUFHQTtRQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHN0IsT0FBT2tDLE1BQU0sQ0FBQztZQUFFLEdBQUdMLE9BQU87UUFBQztJQUM5QztJQUNBLGNBQWMsR0FDZCxNQUFNTSxZQUFZQyxPQUFPLEVBQUU7UUFDdkIsTUFBTUMsWUFBWSxJQUFJNUIsY0FBYzZCLG1CQUFtQixDQUFDLElBQUksQ0FBQ1YsRUFBRSxFQUFFLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQzNFLEdBQUcsSUFBSSxDQUFDVSxhQUFhO1lBQ3JCSCxTQUFTQTtZQUNUSSxnQkFBZ0IsSUFBSSxDQUFDRCxhQUFhLENBQUNDLGNBQWM7UUFDckQ7UUFDQSxNQUFNQyxXQUFXLE1BQU0sQ0FBQyxHQUFHbEMsb0JBQW9CbUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDWCxNQUFNLEVBQUVNO1FBQzlFLElBQUlJLFNBQVNFLE1BQU0sSUFBSSxNQUFNO1lBQ3pCLE1BQU0sSUFBSXRDLFFBQVF1QyxrQ0FBa0MsQ0FBQztRQUN6RDtRQUNBLE9BQU87WUFDSEMsUUFBUVIsVUFBVVEsTUFBTTtZQUN4QlQ7WUFDQUs7UUFDSjtJQUNKO0lBQ0EsY0FBYyxHQUNkLE1BQU1LLFFBQVFDLFVBQVUsRUFBRTtRQUN0QixvRUFBb0U7UUFDcEUsTUFBTUMsbUJBQW1CLElBQUl4QyxXQUFXeUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDaEIsU0FBUyxFQUFFLElBQUksQ0FBQ2lCLEVBQUUsRUFBRSxJQUFJLENBQUNMLE1BQU0sRUFBRTtZQUMzRixHQUFHLElBQUksQ0FBQ04sYUFBYTtZQUNyQkgsU0FBUyxJQUFJLENBQUNBLE9BQU87WUFDckIsR0FBRyxJQUFJLENBQUNyQixjQUFjO1FBQzFCO1FBQ0EsT0FBTyxDQUFDLEdBQUdSLG9CQUFvQm1DLGdCQUFnQixFQUFFLElBQUksQ0FBQ1gsTUFBTSxFQUFFaUI7SUFDbEU7QUFDSjtBQUNBOUMsd0JBQXdCLEdBQUdFLGtCQUMzQiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9ydW5fY29tbWFuZF9jdXJzb3IuanM/ZDk3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnVuQ29tbWFuZEN1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBnZXRfbW9yZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZ2V0X21vcmVcIik7XG5jb25zdCBydW5fY29tbWFuZF8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvcnVuX2NvbW1hbmRcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgUnVuQ29tbWFuZEN1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUuY29tbWVudGAgZmllbGRcbiAgICAgKiBAcGFyYW0gY29tbWVudCAtIGFueSBCU09OIHZhbHVlXG4gICAgICovXG4gICAgc2V0Q29tbWVudChjb21tZW50KSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUubWF4VGltZU1TYCBmaWVsZC4gT25seSB2YWxpZCB3aGVuIGN1cnNvciBpcyB0YWlsYWJsZSBhd2FpdFxuICAgICAqIEBwYXJhbSBtYXhUaW1lTVMgLSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciBuZXcgZGF0YVxuICAgICAqL1xuICAgIHNldE1heFRpbWVNUyhtYXhUaW1lTVMpIHtcbiAgICAgICAgdGhpcy5nZXRNb3JlT3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9IG1heFRpbWVNUztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHRoZSBgZ2V0TW9yZS5iYXRjaFNpemVgIGZpZWxkXG4gICAgICogQHBhcmFtIG1heFRpbWVNUyAtIHRoZSBudW1iZXIgZG9jdW1lbnRzIHRvIHJldHVybiBpbiB0aGUgYG5leHRCYXRjaGBcbiAgICAgKi9cbiAgICBzZXRCYXRjaFNpemUoYmF0Y2hTaXplKSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMuYmF0Y2hTaXplID0gYmF0Y2hTaXplO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ0Nsb25lIG5vdCBzdXBwb3J0ZWQsIGNyZWF0ZSBhIG5ldyBjdXJzb3Igd2l0aCBkYi5ydW5DdXJzb3JDb21tYW5kJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogcmVhZENvbmNlcm4gbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICB3aXRoUmVhZENvbmNlcm4oXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdSdW5Db21tYW5kQ3Vyc29yIGRvZXMgbm90IHN1cHBvcnQgcmVhZENvbmNlcm4gaXQgbXVzdCBiZSBhdHRhY2hlZCB0byB0aGUgY29tbWFuZCBiZWluZyBydW4nKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiB2YXJpb3VzIGN1cnNvciBmbGFncyBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIGFkZEN1cnNvckZsYWcoXywgX18pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignUnVuQ29tbWFuZEN1cnNvciBkb2VzIG5vdCBzdXBwb3J0IGN1cnNvciBmbGFncywgdGhleSBtdXN0IGJlIGF0dGFjaGVkIHRvIHRoZSBjb21tYW5kIGJlaW5nIHJ1bicpO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3I6IG1heFRpbWVNUyBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIG1heFRpbWVNUyhfKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ21heFRpbWVNUyBtdXN0IGJlIGNvbmZpZ3VyZWQgb24gdGhlIGNvbW1hbmQgZG9jdW1lbnQgZGlyZWN0bHksIHRvIGNvbmZpZ3VyZSBnZXRNb3JlLm1heFRpbWVNUyB1c2UgY3Vyc29yLnNldE1heFRpbWVNUygpJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogYmF0Y2hTaXplIG11c3QgYmUgY29uZmlndXJlZCBkaXJlY3RseSBvbiBjb21tYW5kIGRvY3VtZW50ICovXG4gICAgYmF0Y2hTaXplKF8pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignYmF0Y2hTaXplIG11c3QgYmUgY29uZmlndXJlZCBvbiB0aGUgY29tbWFuZCBkb2N1bWVudCBkaXJlY3RseSwgdG8gY29uZmlndXJlIGdldE1vcmUuYmF0Y2hTaXplIHVzZSBjdXJzb3Iuc2V0QmF0Y2hTaXplKCknKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGRiLCBjb21tYW5kLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoZGIuY2xpZW50LCAoMCwgdXRpbHNfMS5ucykoZGIubmFtZXNwYWNlKSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBPYmplY3QuZnJlZXplKHsgLi4uY29tbWFuZCB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IHJ1bl9jb21tYW5kXzEuUnVuQ29tbWFuZE9wZXJhdGlvbih0aGlzLmRiLCB0aGlzLmNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5jdXJzb3JPcHRpb25zLnJlYWRQcmVmZXJlbmNlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMuY2xpZW50LCBvcGVyYXRpb24pO1xuICAgICAgICBpZiAocmVzcG9uc2UuY3Vyc29yID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0V4cGVjdGVkIHNlcnZlciB0byByZXNwb25kIHdpdGggY3Vyc29yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlcnZlcjogb3BlcmF0aW9uLnNlcnZlcixcbiAgICAgICAgICAgIHNlc3Npb24sXG4gICAgICAgICAgICByZXNwb25zZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgZ2V0TW9yZShfYmF0Y2hTaXplKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIGNvbnN0IGdldE1vcmVPcGVyYXRpb24gPSBuZXcgZ2V0X21vcmVfMS5HZXRNb3JlT3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLmlkLCB0aGlzLnNlcnZlciwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvbjogdGhpcy5zZXNzaW9uLFxuICAgICAgICAgICAgLi4udGhpcy5nZXRNb3JlT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMuY2xpZW50LCBnZXRNb3JlT3BlcmF0aW9uKTtcbiAgICB9XG59XG5leHBvcnRzLlJ1bkNvbW1hbmRDdXJzb3IgPSBSdW5Db21tYW5kQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVuX2NvbW1hbmRfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJ1bkNvbW1hbmRDdXJzb3IiLCJlcnJvcl8xIiwicmVxdWlyZSIsImV4ZWN1dGVfb3BlcmF0aW9uXzEiLCJnZXRfbW9yZV8xIiwicnVuX2NvbW1hbmRfMSIsInV0aWxzXzEiLCJhYnN0cmFjdF9jdXJzb3JfMSIsIkFic3RyYWN0Q3Vyc29yIiwic2V0Q29tbWVudCIsImNvbW1lbnQiLCJnZXRNb3JlT3B0aW9ucyIsInNldE1heFRpbWVNUyIsIm1heFRpbWVNUyIsIm1heEF3YWl0VGltZU1TIiwic2V0QmF0Y2hTaXplIiwiYmF0Y2hTaXplIiwiY2xvbmUiLCJNb25nb0FQSUVycm9yIiwid2l0aFJlYWRDb25jZXJuIiwiXyIsImFkZEN1cnNvckZsYWciLCJfXyIsImNvbnN0cnVjdG9yIiwiZGIiLCJjb21tYW5kIiwib3B0aW9ucyIsImNsaWVudCIsIm5zIiwibmFtZXNwYWNlIiwiZnJlZXplIiwiX2luaXRpYWxpemUiLCJzZXNzaW9uIiwib3BlcmF0aW9uIiwiUnVuQ29tbWFuZE9wZXJhdGlvbiIsImN1cnNvck9wdGlvbnMiLCJyZWFkUHJlZmVyZW5jZSIsInJlc3BvbnNlIiwiZXhlY3V0ZU9wZXJhdGlvbiIsImN1cnNvciIsIk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IiLCJzZXJ2ZXIiLCJnZXRNb3JlIiwiX2JhdGNoU2l6ZSIsImdldE1vcmVPcGVyYXRpb24iLCJHZXRNb3JlT3BlcmF0aW9uIiwiaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/db.js":
/*!****************************************!*\
  !*** ./node_modules/mongodb/lib/db.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Db = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst CONSTANTS = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nconst run_command_cursor_1 = __webpack_require__(/*! ./cursor/run_command_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst collections_1 = __webpack_require__(/*! ./operations/collections */ \"(ssr)/./node_modules/mongodb/lib/operations/collections.js\");\nconst create_collection_1 = __webpack_require__(/*! ./operations/create_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst profiling_level_1 = __webpack_require__(/*! ./operations/profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nconst stats_1 = __webpack_require__(/*! ./operations/stats */ \"(ssr)/./node_modules/mongodb/lib/operations/stats.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    \"writeConcern\",\n    \"readPreference\",\n    \"readPreferenceTags\",\n    \"native_parser\",\n    \"forceServerObjectId\",\n    \"pkFactory\",\n    \"serializeFunctions\",\n    \"raw\",\n    \"authSource\",\n    \"ignoreUndefined\",\n    \"readConcern\",\n    \"retryMiliSeconds\",\n    \"numberOfRetries\",\n    \"useBigInt64\",\n    \"promoteBuffers\",\n    \"promoteLongs\",\n    \"bsonRegExp\",\n    \"enableUtf8Validation\",\n    \"promoteValues\",\n    \"compression\",\n    \"retryWrites\"\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */ class Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */ constructor(client, databaseName, options){\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === \"string\" && databaseName.includes(\".\")) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */ get secondaryOk() {\n        return this.s.readPreference?.preference !== \"primary\" || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */ get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */ async createCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */ async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */ aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */ admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */ collection(name, options = {}) {\n        if (typeof options === \"function\") {\n            throw new error_1.MongoInvalidArgumentError(\"The callback form of this helper has been removed.\");\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */ async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */ async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, {\n            ...options,\n            new_collection: true,\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */ async dropCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */ async dropDatabase(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */ async collections(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */ async createIndex(name, indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */ async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */ async setProfilingLevel(level, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */ async profilingLevel(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */ async indexInformation(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */ watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */ runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db; //# sourceMappingURL=db.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/deps.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/deps.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.ZStandard = exports.getKerberos = exports.Kerberos = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nfunction makeErrorModule(error) {\n    const props = error ? {\n        kModuleError: error\n    } : {};\n    return new Proxy(props, {\n        get: (_, key)=>{\n            if (key === \"kModuleError\") {\n                return error;\n            }\n            throw error;\n        },\n        set: ()=>{\n            throw error;\n        }\n    });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `kerberos` not found. Please install it to enable kerberos authentication\"));\nfunction getKerberos() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        exports.Kerberos = __webpack_require__(/*! kerberos */ \"?07fb\");\n        return exports.Kerberos;\n    } catch  {\n        return exports.Kerberos;\n    }\n}\nexports.getKerberos = getKerberos;\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression\"));\nfunction getZstdLibrary() {\n    try {\n        exports.ZStandard = __webpack_require__(/*! @mongodb-js/zstd */ \"?e185\");\n        return exports.ZStandard;\n    } catch  {\n        return exports.ZStandard;\n    }\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(/*! @aws-sdk/credential-providers */ \"?4bb6\");\n        return credentialProvider;\n    } catch  {\n        return makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `@aws-sdk/credential-providers` not found.\" + \" Please install it to enable getting aws credentials via the official sdk.\"));\n    }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(/*! gcp-metadata */ \"?a71c\");\n        return credentialProvider;\n    } catch  {\n        return makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `gcp-metadata` not found.\" + \" Please install it to enable getting gcp credentials via the official sdk.\"));\n    }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(/*! snappy */ \"?aa0a\");\n        return value;\n    } catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError(\"Optional module `snappy` not found. Please install it to enable snappy compression\", {\n            cause\n        });\n        return {\n            kModuleError\n        };\n    }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(/*! socks */ \"?8f6e\");\n        return value;\n    } catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError(\"Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy\", {\n            cause\n        });\n        return {\n            kModuleError\n        };\n    }\n}\nexports.getSocks = getSocks;\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `aws4` not found. Please install it to enable AWS authentication\"));\ntry {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    exports.aws4 = __webpack_require__(/*! aws4 */ \"(ssr)/./node_modules/aws4/aws4.js\");\n} catch  {} // eslint-disable-line\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */ function getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        mongodbClientEncryption = __webpack_require__(/*! mongodb-client-encryption */ \"?a5d2\");\n    } catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError(\"Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.\", {\n            cause\n        });\n        return {\n            kModuleError\n        };\n    }\n    return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption; //# sourceMappingURL=deps.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/deps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/encrypter.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/encrypter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Encrypter = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ./deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\n/** @internal */ const kInternalClient = Symbol(\"internalClient\");\n/** @internal */ class Encrypter {\n    constructor(client, uri, options){\n        if (typeof options.autoEncryption !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        } else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        } else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        } else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]){\n                if ([\n                    \"autoEncryption\",\n                    \"minPoolSize\",\n                    \"servers\",\n                    \"caseTranslate\",\n                    \"dbName\"\n                ].includes(key)) continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS){\n                for (const listener of client.listeners(eventName)){\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on(\"newListener\", (eventName, listener)=>{\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        const maybeError = await this.autoEncrypter.teardown(!!force).catch((e)=>e);\n        const internalClient = this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n            return internalClient.close(force);\n        }\n        if (maybeError) {\n            throw maybeError;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if (\"kModuleError\" in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError(\"Auto-encryption requested, but the module is not installed. \" + \"Please add `mongodb-client-encryption` as a dependency of your project\");\n        }\n    }\n}\nexports.Encrypter = Encrypter; //# sourceMappingURL=encrypter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/error.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */ const kErrorLabels = Symbol(\"errorLabels\");\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */ exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp(\"not master\", \"i\");\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */ exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp(\"not master or secondary\", \"i\");\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */ exports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp(\"node is recovering\", \"i\");\n/** @internal MongoDB Error Codes */ exports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */ exports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: \"RetryableWriteError\",\n    TransientTransactionError: \"TransientTransactionError\",\n    UnknownTransactionCommitResult: \"UnknownTransactionCommitResult\",\n    ResumableChangeStreamError: \"ResumableChangeStreamError\",\n    HandshakeError: \"HandshakeError\",\n    ResetPool: \"ResetPool\",\n    PoolRequstedRetry: \"PoolRequstedRetry\",\n    InterruptInUseConnections: \"InterruptInUseConnections\",\n    NoWritesPerformed: \"NoWritesPerformed\"\n});\nfunction isAggregateError(e) {\n    return e != null && typeof e === \"object\" && \"errors\" in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */ class MongoError extends Error {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n        this[kErrorLabels] = new Set();\n    }\n    /** @internal */ static buildErrorMessage(e) {\n        if (typeof e === \"string\") {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0 ? \"AggregateError has an empty errors array. Please check the `cause` property for more information.\" : e.errors.map(({ message })=>message).join(\", \");\n        }\n        return e != null && typeof e === \"object\" && \"message\" in e && typeof e.message === \"string\" ? e.message : \"empty error message\";\n    }\n    get name() {\n        return \"MongoError\";\n    }\n    /** Legacy name for server error responses */ get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */ hasErrorLabel(label) {\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return Array.from(this[kErrorLabels]);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */ class MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message.message || message.errmsg || message.$err || \"n/a\");\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        this.errorResponse = message;\n        for(const name in message){\n            if (name !== \"errorLabels\" && name !== \"errmsg\" && name !== \"message\" && name !== \"errorResponse\") {\n                this[name] = message[name];\n            }\n        }\n    }\n    get name() {\n        return \"MongoServerError\";\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */ class MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoDriverError\";\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */ class MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoAPIError\";\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */ class MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoRuntimeError\";\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */ class MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"This batch has already been executed, create new batch to execute\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoBatchReExecutionError\";\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */ class MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoDecompressionError\";\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */ class MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoNotConnectedError\";\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */ class MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoTransactionError\";\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */ class MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Cannot use a session that has ended\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoExpiredSessionError\";\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */ class MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoKerberosError\";\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */ class MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoAWSError\";\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */ class MongoAzureError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoAzureError\";\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */ class MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoChangeStreamError\";\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */ class MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Tailable cursor does not support this operation\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoTailableCursorError\";\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */ class MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoGridFSStreamError\";\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */ class MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoGridFSChunkError\";\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */ class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoUnexpectedServerResponseError\";\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */ class MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Cursor is already initialized\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoCursorInUseError\";\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */ class MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Server is closed\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoServerClosedError\";\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */ class MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message || \"Cursor is exhausted\");\n    }\n    get name() {\n        return \"MongoCursorExhaustedError\";\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */ class MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Topology is closed\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoTopologyClosedError\";\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */ const kBeforeHandshake = Symbol(\"beforeHandshake\");\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */ class MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, {\n            cause: options?.cause\n        });\n        if (options && typeof options.beforeHandshake === \"boolean\") {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return \"MongoNetworkError\";\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */ class MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoNetworkTimeoutError\";\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */ class MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoParseError\";\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */ class MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoInvalidArgumentError\";\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */ class MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoCompatibilityError\";\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */ class MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoMissingCredentialsError\";\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */ class MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options = {}){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoMissingDependencyError\";\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */ class MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, reason){\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        } else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return \"MongoSystemError\";\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */ class MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, reason){\n        super(message, reason);\n    }\n    get name() {\n        return \"MongoServerSelectionError\";\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */ class MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, result){\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return \"MongoWriteConcernError\";\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) && !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n    }\n    if (error instanceof MongoError && typeof error.code === \"number\") {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n    return error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) || error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */ function isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === \"number\" ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === \"number\") {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) || exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message);\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === \"number\") {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === \"number\" && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */ function isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === \"number\") {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError; //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/explain.js":
/*!*********************************************!*\
  !*** ./node_modules/mongodb/lib/explain.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Explain = exports.ExplainVerbosity = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */ exports.ExplainVerbosity = Object.freeze({\n    queryPlanner: \"queryPlanner\",\n    queryPlannerExtended: \"queryPlannerExtended\",\n    executionStats: \"executionStats\",\n    allPlansExecution: \"allPlansExecution\"\n});\n/** @internal */ class Explain {\n    constructor(verbosity){\n        if (typeof verbosity === \"boolean\") {\n            this.verbosity = verbosity ? exports.ExplainVerbosity.allPlansExecution : exports.ExplainVerbosity.queryPlanner;\n        } else {\n            this.verbosity = verbosity;\n        }\n    }\n    static fromOptions(options) {\n        if (options?.explain == null) return;\n        const explain = options.explain;\n        if (typeof explain === \"boolean\" || typeof explain === \"string\") {\n            return new Explain(explain);\n        }\n        throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n    }\n}\nexports.Explain = Explain; //# sourceMappingURL=explain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ2xELE1BQU1JLFVBQVVDLG1CQUFPQSxDQUFDLDBEQUFTO0FBQ2pDLFlBQVksR0FDWkwsd0JBQXdCLEdBQUdGLE9BQU9RLE1BQU0sQ0FBQztJQUNyQ0MsY0FBYztJQUNkQyxzQkFBc0I7SUFDdEJDLGdCQUFnQjtJQUNoQkMsbUJBQW1CO0FBQ3ZCO0FBQ0EsY0FBYyxHQUNkLE1BQU1SO0lBQ0ZTLFlBQVlDLFNBQVMsQ0FBRTtRQUNuQixJQUFJLE9BQU9BLGNBQWMsV0FBVztZQUNoQyxJQUFJLENBQUNBLFNBQVMsR0FBR0EsWUFDWFosUUFBUUcsZ0JBQWdCLENBQUNPLGlCQUFpQixHQUMxQ1YsUUFBUUcsZ0JBQWdCLENBQUNJLFlBQVk7UUFDL0MsT0FDSztZQUNELElBQUksQ0FBQ0ssU0FBUyxHQUFHQTtRQUNyQjtJQUNKO0lBQ0EsT0FBT0MsWUFBWUMsT0FBTyxFQUFFO1FBQ3hCLElBQUlBLFNBQVNDLFdBQVcsTUFDcEI7UUFDSixNQUFNQSxVQUFVRCxRQUFRQyxPQUFPO1FBQy9CLElBQUksT0FBT0EsWUFBWSxhQUFhLE9BQU9BLFlBQVksVUFBVTtZQUM3RCxPQUFPLElBQUliLFFBQVFhO1FBQ3ZCO1FBQ0EsTUFBTSxJQUFJWCxRQUFRWSx5QkFBeUIsQ0FBQztJQUNoRDtBQUNKO0FBQ0FoQixlQUFlLEdBQUdFLFNBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcz82MjYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHBsYWluID0gZXhwb3J0cy5FeHBsYWluVmVyYm9zaXR5ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eSA9IE9iamVjdC5mcmVlemUoe1xuICAgIHF1ZXJ5UGxhbm5lcjogJ3F1ZXJ5UGxhbm5lcicsXG4gICAgcXVlcnlQbGFubmVyRXh0ZW5kZWQ6ICdxdWVyeVBsYW5uZXJFeHRlbmRlZCcsXG4gICAgZXhlY3V0aW9uU3RhdHM6ICdleGVjdXRpb25TdGF0cycsXG4gICAgYWxsUGxhbnNFeGVjdXRpb246ICdhbGxQbGFuc0V4ZWN1dGlvbidcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRXhwbGFpbiB7XG4gICAgY29uc3RydWN0b3IodmVyYm9zaXR5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyYm9zaXR5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5XG4gICAgICAgICAgICAgICAgPyBleHBvcnRzLkV4cGxhaW5WZXJib3NpdHkuYWxsUGxhbnNFeGVjdXRpb25cbiAgICAgICAgICAgICAgICA6IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eS5xdWVyeVBsYW5uZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucz8uZXhwbGFpbiA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBleHBsYWluID0gb3B0aW9ucy5leHBsYWluO1xuICAgICAgICBpZiAodHlwZW9mIGV4cGxhaW4gPT09ICdib29sZWFuJyB8fCB0eXBlb2YgZXhwbGFpbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhwbGFpbihleHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdGaWVsZCBcImV4cGxhaW5cIiBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYm9vbGVhbicpO1xuICAgIH1cbn1cbmV4cG9ydHMuRXhwbGFpbiA9IEV4cGxhaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBsYWluLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV4cGxhaW4iLCJFeHBsYWluVmVyYm9zaXR5IiwiZXJyb3JfMSIsInJlcXVpcmUiLCJmcmVlemUiLCJxdWVyeVBsYW5uZXIiLCJxdWVyeVBsYW5uZXJFeHRlbmRlZCIsImV4ZWN1dGlvblN0YXRzIiwiYWxsUGxhbnNFeGVjdXRpb24iLCJjb25zdHJ1Y3RvciIsInZlcmJvc2l0eSIsImZyb21PcHRpb25zIiwib3B0aW9ucyIsImV4cGxhaW4iLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/explain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/download.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/download.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */ class GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */ constructor(chunks, files, readPreference, filter, options){\n        super({\n            emitClose: true\n        });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */ _read() {\n        if (this.destroyed) return;\n        waitForFile(this, ()=>doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */ start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */ end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */ async abort() {\n        this.push(null);\n        this.destroy();\n        await this.s.cursor?.close();\n    }\n}\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */ GridFSBucketReadStream.FILE = \"file\";\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError(\"Options cannot be changed after the stream is initialized\");\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed) return;\n    if (!stream.s.cursor) return;\n    if (!stream.s.file) return;\n    const handleReadResult = ({ error, doc })=>{\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.destroy(error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(()=>null, (error)=>stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file) return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then((doc)=>handleReadResult({\n            error: null,\n            doc\n        }), (error)=>handleReadResult({\n            error,\n            doc: null\n        }));\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = ({ error, doc })=>{\n        if (error) {\n            return stream.destroy(error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = \"ENOENT\"; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        } catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = {\n            files_id: doc._id\n        };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter[\"n\"] = {\n                    $gte: skip\n                };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({\n            n: 1\n        });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        } catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then((doc)=>handleReadResult({\n            error: null,\n            doc\n        }), (error)=>handleReadResult({\n            error,\n            doc: null\n        }));\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once(\"file\", ()=>{\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError(\"Start option must be defined\");\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError(\"End option must be defined\");\n} //# sourceMappingURL=download.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/download.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GridFSBucket = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst download_1 = __webpack_require__(/*! ./download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nconst upload_1 = __webpack_require__(/*! ./upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: \"fs\",\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */ class GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options){\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + \".chunks\"),\n            _filesCollection: db.collection(privateOptions.bucketName + \".files\"),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */ openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */ openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, {\n            ...options,\n            id\n        });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */ openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n            _id: id\n        }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */ async delete(id) {\n        const { deletedCount } = await this.s._filesCollection.deleteOne({\n            _id: id\n        });\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({\n            files_id: id\n        });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */ find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */ openDownloadStreamByName(filename, options) {\n        let sort = {\n            uploadDate: -1\n        };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = {\n                    uploadDate: 1\n                };\n                skip = options.revision;\n            } else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n            filename\n        }, {\n            ...options,\n            sort,\n            skip\n        });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */ async rename(id, filename) {\n        const filter = {\n            _id: id\n        };\n        const update = {\n            $set: {\n                filename\n            }\n        };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */ async drop() {\n        await this.s._filesCollection.drop();\n        await this.s._chunksCollection.drop();\n    }\n}\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */ GridFSBucket.INDEX = \"index\";\nexports.GridFSBucket = GridFSBucket; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/upload.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/upload.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ./../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */ class GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */ constructor(bucket, filename, options){\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */ this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(()=>{\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit(\"index\");\n            }, ()=>null);\n        }\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */ _construct(callback) {\n        if (this.bucket.s.checkedIndexes) {\n            return process.nextTick(callback);\n        }\n        this.bucket.once(\"index\", callback);\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */ _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */ _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */ async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError(\"Cannot abort a stream that has already completed\");\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError(\"Cannot call abort() on a stream twice\");\n        }\n        this.state.aborted = true;\n        await this.chunks.deleteMany({\n            files_id: this.id\n        });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = {\n        files_id: 1,\n        n: 1\n    };\n    let indexes;\n    try {\n        indexes = await stream.chunks.listIndexes().toArray();\n    } catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        } else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find((index)=>{\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        stream.files.insertOne(gridFSFile, {\n            writeConcern: stream.writeConcern\n        }).then(()=>{\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, (error)=>handleError(stream, error, callback));\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    const doc = await stream.files.findOne({}, {\n        projection: {\n            _id: 1\n        }\n    });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = {\n        filename: 1,\n        uploadDate: 1\n    };\n    let indexes;\n    try {\n        indexes = await stream.files.listIndexes().toArray();\n    } catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        } else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find((index)=>{\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        await stream.files.createIndex(index, {\n            background: false\n        });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while(inputBufRemaining > 0){\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks.insertOne(doc, {\n                writeConcern: stream.writeConcern\n            }).then(()=>{\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, (error)=>handleError(stream, error, callback));\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    ++stream.state.outstandingRequests;\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    stream.chunks.insertOne(doc, {\n        writeConcern: stream.writeConcern\n    }).then(()=>{\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, (error)=>handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError(\"Stream has been aborted\"));\n        return true;\n    }\n    return false;\n} //# sourceMappingURL=upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoServerSelectionError = exports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.MongoWriteConcernError = void 0;\nexports.MongoClientAuthProviders = exports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nObject.defineProperty(exports, \"Admin\", ({\n    enumerable: true,\n    get: function() {\n        return admin_1.Admin;\n    }\n}));\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", ({\n    enumerable: true,\n    get: function() {\n        return ordered_1.OrderedBulkOperation;\n    }\n}));\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", ({\n    enumerable: true,\n    get: function() {\n        return unordered_1.UnorderedBulkOperation;\n    }\n}));\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nObject.defineProperty(exports, \"ChangeStream\", ({\n    enumerable: true,\n    get: function() {\n        return change_stream_1.ChangeStream;\n    }\n}));\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({\n    enumerable: true,\n    get: function() {\n        return collection_1.Collection;\n    }\n}));\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"AbstractCursor\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_cursor_1.AbstractCursor;\n    }\n}));\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nObject.defineProperty(exports, \"AggregationCursor\", ({\n    enumerable: true,\n    get: function() {\n        return aggregation_cursor_1.AggregationCursor;\n    }\n}));\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({\n    enumerable: true,\n    get: function() {\n        return find_cursor_1.FindCursor;\n    }\n}));\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", ({\n    enumerable: true,\n    get: function() {\n        return list_collections_cursor_1.ListCollectionsCursor;\n    }\n}));\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nObject.defineProperty(exports, \"ListIndexesCursor\", ({\n    enumerable: true,\n    get: function() {\n        return list_indexes_cursor_1.ListIndexesCursor;\n    }\n}));\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nObject.defineProperty(exports, \"Db\", ({\n    enumerable: true,\n    get: function() {\n        return db_1.Db;\n    }\n}));\nconst gridfs_1 = __webpack_require__(/*! ./gridfs */ \"(ssr)/./node_modules/mongodb/lib/gridfs/index.js\");\nObject.defineProperty(exports, \"GridFSBucket\", ({\n    enumerable: true,\n    get: function() {\n        return gridfs_1.GridFSBucket;\n    }\n}));\nconst download_1 = __webpack_require__(/*! ./gridfs/download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", ({\n    enumerable: true,\n    get: function() {\n        return download_1.GridFSBucketReadStream;\n    }\n}));\nconst upload_1 = __webpack_require__(/*! ./gridfs/upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", ({\n    enumerable: true,\n    get: function() {\n        return upload_1.GridFSBucketWriteStream;\n    }\n}));\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"MongoClient\", ({\n    enumerable: true,\n    get: function() {\n        return mongo_client_1.MongoClient;\n    }\n}));\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nObject.defineProperty(exports, \"CancellationToken\", ({\n    enumerable: true,\n    get: function() {\n        return mongo_types_1.CancellationToken;\n    }\n}));\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nObject.defineProperty(exports, \"ClientSession\", ({\n    enumerable: true,\n    get: function() {\n        return sessions_1.ClientSession;\n    }\n}));\n/** @public */ var bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"BSON\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSON;\n    }\n}));\nvar bson_2 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"Binary\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Binary;\n    }\n}));\nObject.defineProperty(exports, \"BSONRegExp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.BSONRegExp;\n    }\n}));\nObject.defineProperty(exports, \"BSONSymbol\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.BSONSymbol;\n    }\n}));\nObject.defineProperty(exports, \"BSONType\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.BSONType;\n    }\n}));\nObject.defineProperty(exports, \"Code\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Code;\n    }\n}));\nObject.defineProperty(exports, \"DBRef\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.DBRef;\n    }\n}));\nObject.defineProperty(exports, \"Decimal128\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Decimal128;\n    }\n}));\nObject.defineProperty(exports, \"Double\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Double;\n    }\n}));\nObject.defineProperty(exports, \"Int32\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Int32;\n    }\n}));\nObject.defineProperty(exports, \"Long\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Long;\n    }\n}));\nObject.defineProperty(exports, \"MaxKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.MaxKey;\n    }\n}));\nObject.defineProperty(exports, \"MinKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.MinKey;\n    }\n}));\nObject.defineProperty(exports, \"ObjectId\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.ObjectId;\n    }\n}));\nObject.defineProperty(exports, \"Timestamp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Timestamp;\n    }\n}));\nObject.defineProperty(exports, \"UUID\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.UUID;\n    }\n}));\nvar common_1 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", ({\n    enumerable: true,\n    get: function() {\n        return common_1.MongoBulkWriteError;\n    }\n}));\nvar client_encryption_1 = __webpack_require__(/*! ./client-side-encryption/client_encryption */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nObject.defineProperty(exports, \"ClientEncryption\", ({\n    enumerable: true,\n    get: function() {\n        return client_encryption_1.ClientEncryption;\n    }\n}));\nvar change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", ({\n    enumerable: true,\n    get: function() {\n        return change_stream_cursor_1.ChangeStreamCursor;\n    }\n}));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoAPIError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoAPIError;\n    }\n}));\nObject.defineProperty(exports, \"MongoAWSError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoAWSError;\n    }\n}));\nObject.defineProperty(exports, \"MongoAzureError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoAzureError;\n    }\n}));\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoBatchReExecutionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoChangeStreamError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoChangeStreamError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCompatibilityError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoCompatibilityError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoCursorExhaustedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCursorInUseError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoCursorInUseError;\n    }\n}));\nObject.defineProperty(exports, \"MongoDecompressionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoDecompressionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoDriverError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoDriverError;\n    }\n}));\nObject.defineProperty(exports, \"MongoError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoError;\n    }\n}));\nObject.defineProperty(exports, \"MongoExpiredSessionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoExpiredSessionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoGridFSChunkError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoGridFSChunkError;\n    }\n}));\nObject.defineProperty(exports, \"MongoGridFSStreamError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoGridFSStreamError;\n    }\n}));\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoInvalidArgumentError;\n    }\n}));\nObject.defineProperty(exports, \"MongoKerberosError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoKerberosError;\n    }\n}));\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoMissingCredentialsError;\n    }\n}));\nObject.defineProperty(exports, \"MongoMissingDependencyError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoMissingDependencyError;\n    }\n}));\nObject.defineProperty(exports, \"MongoNetworkError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoNetworkError;\n    }\n}));\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoNetworkTimeoutError;\n    }\n}));\nObject.defineProperty(exports, \"MongoNotConnectedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoNotConnectedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoParseError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoParseError;\n    }\n}));\nObject.defineProperty(exports, \"MongoRuntimeError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoRuntimeError;\n    }\n}));\nObject.defineProperty(exports, \"MongoServerClosedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoServerClosedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoServerError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoServerError;\n    }\n}));\nObject.defineProperty(exports, \"MongoServerSelectionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoServerSelectionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoSystemError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoSystemError;\n    }\n}));\nObject.defineProperty(exports, \"MongoTailableCursorError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoTailableCursorError;\n    }\n}));\nObject.defineProperty(exports, \"MongoTopologyClosedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoTopologyClosedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoTransactionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoTransactionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoUnexpectedServerResponseError;\n    }\n}));\nObject.defineProperty(exports, \"MongoWriteConcernError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoWriteConcernError;\n    }\n}));\n// enums\nvar common_2 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"BatchType\", ({\n    enumerable: true,\n    get: function() {\n        return common_2.BatchType;\n    }\n}));\nvar auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", ({\n    enumerable: true,\n    get: function() {\n        return auto_encrypter_1.AutoEncryptionLoggerLevel;\n    }\n}));\nvar gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", ({\n    enumerable: true,\n    get: function() {\n        return gssapi_1.GSSAPICanonicalizationValue;\n    }\n}));\nvar providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nObject.defineProperty(exports, \"AuthMechanism\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.AuthMechanism;\n    }\n}));\nvar compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nObject.defineProperty(exports, \"Compressor\", ({\n    enumerable: true,\n    get: function() {\n        return compression_1.Compressor;\n    }\n}));\nvar abstract_cursor_2 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_cursor_2.CURSOR_FLAGS;\n    }\n}));\nvar error_2 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoErrorLabel\", ({\n    enumerable: true,\n    get: function() {\n        return error_2.MongoErrorLabel;\n    }\n}));\nvar explain_1 = __webpack_require__(/*! ./explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainVerbosity\", ({\n    enumerable: true,\n    get: function() {\n        return explain_1.ExplainVerbosity;\n    }\n}));\nvar mongo_client_2 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"ServerApiVersion\", ({\n    enumerable: true,\n    get: function() {\n        return mongo_client_2.ServerApiVersion;\n    }\n}));\nvar find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nObject.defineProperty(exports, \"ReturnDocument\", ({\n    enumerable: true,\n    get: function() {\n        return find_and_modify_1.ReturnDocument;\n    }\n}));\nvar set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nObject.defineProperty(exports, \"ProfilingLevel\", ({\n    enumerable: true,\n    get: function() {\n        return set_profiling_level_1.ProfilingLevel;\n    }\n}));\nvar read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcernLevel\", ({\n    enumerable: true,\n    get: function() {\n        return read_concern_1.ReadConcernLevel;\n    }\n}));\nvar read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", ({\n    enumerable: true,\n    get: function() {\n        return read_preference_1.ReadPreferenceMode;\n    }\n}));\nvar common_3 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nObject.defineProperty(exports, \"ServerType\", ({\n    enumerable: true,\n    get: function() {\n        return common_3.ServerType;\n    }\n}));\nObject.defineProperty(exports, \"TopologyType\", ({\n    enumerable: true,\n    get: function() {\n        return common_3.TopologyType;\n    }\n}));\n// Helper classes\nvar read_concern_2 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcern\", ({\n    enumerable: true,\n    get: function() {\n        return read_concern_2.ReadConcern;\n    }\n}));\nvar read_preference_2 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreference\", ({\n    enumerable: true,\n    get: function() {\n        return read_preference_2.ReadPreference;\n    }\n}));\nvar write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nObject.defineProperty(exports, \"WriteConcern\", ({\n    enumerable: true,\n    get: function() {\n        return write_concern_1.WriteConcern;\n    }\n}));\n// events\nvar command_monitoring_events_1 = __webpack_require__(/*! ./cmap/command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nObject.defineProperty(exports, \"CommandFailedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return command_monitoring_events_1.CommandFailedEvent;\n    }\n}));\nObject.defineProperty(exports, \"CommandStartedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return command_monitoring_events_1.CommandStartedEvent;\n    }\n}));\nObject.defineProperty(exports, \"CommandSucceededEvent\", ({\n    enumerable: true,\n    get: function() {\n        return command_monitoring_events_1.CommandSucceededEvent;\n    }\n}));\nvar connection_pool_events_1 = __webpack_require__(/*! ./cmap/connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckedInEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckedOutEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckOutFailedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckOutStartedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCreatedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolClearedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolCreatedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolMonitoringEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolReadyEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionReadyEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionReadyEvent;\n    }\n}));\nvar events_1 = __webpack_require__(/*! ./sdam/events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nObject.defineProperty(exports, \"ServerClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerDescriptionChangedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerHeartbeatFailedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerHeartbeatStartedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerHeartbeatSucceededEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerOpeningEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerOpeningEvent;\n    }\n}));\nObject.defineProperty(exports, \"TopologyClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.TopologyClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.TopologyDescriptionChangedEvent;\n    }\n}));\nObject.defineProperty(exports, \"TopologyOpeningEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.TopologyOpeningEvent;\n    }\n}));\nvar server_selection_events_1 = __webpack_require__(/*! ./sdam/server_selection_events */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\");\nObject.defineProperty(exports, \"ServerSelectionEvent\", ({\n    enumerable: true,\n    get: function() {\n        return server_selection_events_1.ServerSelectionEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerSelectionFailedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return server_selection_events_1.ServerSelectionFailedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerSelectionStartedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return server_selection_events_1.ServerSelectionStartedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerSelectionSucceededEvent\", ({\n    enumerable: true,\n    get: function() {\n        return server_selection_events_1.ServerSelectionSucceededEvent;\n    }\n}));\nObject.defineProperty(exports, \"WaitingForSuitableServerEvent\", ({\n    enumerable: true,\n    get: function() {\n        return server_selection_events_1.WaitingForSuitableServerEvent;\n    }\n}));\nvar srv_polling_1 = __webpack_require__(/*! ./sdam/srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nObject.defineProperty(exports, \"SrvPollingEvent\", ({\n    enumerable: true,\n    get: function() {\n        return srv_polling_1.SrvPollingEvent;\n    }\n}));\nvar errors_1 = __webpack_require__(/*! ./client-side-encryption/errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptAzureKMSRequestError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptCreateDataKeyError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptCreateEncryptedCollectionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptInvalidArgumentError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptKMSRequestNetworkTimeoutError;\n    }\n}));\nvar mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nObject.defineProperty(exports, \"MongoClientAuthProviders\", ({\n    enumerable: true,\n    get: function() {\n        return mongo_client_auth_providers_1.MongoClientAuthProviders;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_client.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_client.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_string_1 = __webpack_require__(/*! ./connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ./sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst topology_1 = __webpack_require__(/*! ./sdam/topology */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology.js\");\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @public */ exports.ServerApiVersion = Object.freeze({\n    v1: \"1\"\n});\n/** @internal */ const kOptions = Symbol(\"options\");\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */ class MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options){\n        super();\n        this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n        const shouldSetLogger = Object.values(this[kOptions].mongoLoggerOptions.componentSeverities).some((value)=>value !== mongo_logger_1.SeverityLevel.OFF);\n        this.mongoLogger = shouldSetLogger ? new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions) : undefined;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n            namespace: (0, utils_1.ns)(\"admin\"),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),\n            get options () {\n                return client[kOptions];\n            },\n            get readConcern () {\n                return client[kOptions].readConcern;\n            },\n            get writeConcern () {\n                return client[kOptions].writeConcern;\n            },\n            get readPreference () {\n                return client[kOptions].readPreference;\n            },\n            get isMongoClient () {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */ checkForNonGenuineHosts() {\n        const documentDBHostnames = this[kOptions].hosts.filter((hostAddress)=>(0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n        const cosmosDBHostnames = this[kOptions].hosts.filter((hostAddress)=>(0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger?.info(\"client\", utils_1.DOCUMENT_DB_MSG);\n        } else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger?.info(\"client\", utils_1.COSMOS_DB_MSG);\n        }\n    }\n    /** @see MongoOptions */ get options() {\n        return Object.freeze({\n            ...this[kOptions]\n        });\n    }\n    get serverApi() {\n        return this[kOptions].serverApi && Object.freeze({\n            ...this[kOptions].serverApi\n        });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */ get monitorCommands() {\n        return this[kOptions].monitorCommands;\n    }\n    set monitorCommands(value) {\n        this[kOptions].monitorCommands = value;\n    }\n    /** @internal */ get autoEncrypter() {\n        return this[kOptions].autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */ async connect() {\n        if (this.connectionLock) {\n            return this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        } finally{\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */ async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this[kOptions];\n        if (options.tls) {\n            if (typeof options.tlsCAFile === \"string\") {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === \"string\") {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === \"string\") {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === \"string\") {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()){\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n            if (!isServiceAuth) {\n                for (const host of options.hosts){\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(\",\")}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, ()=>this.emit(\"open\", this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS){\n            this.topology.on(event, (...args)=>this.emit(event, ...args));\n        }\n        const topologyConnect = async ()=>{\n            try {\n                await (0, util_1.promisify)((callback)=>this.topology?.connect(options, callback))();\n            } catch (error) {\n                this.topology?.close();\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        } else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */ async close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, \"hasBeenClosed\", {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeSessionEnds = Array.from(this.s.activeSessions, (session)=>session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id })=>id);\n            if (endSessions.length !== 0) {\n                await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({\n                    endSessions\n                }, {\n                    readPreference: read_preference_1.ReadPreference.primaryPreferred,\n                    noResponse: true\n                })).catch(()=>null); // outcome does not matter;\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        topology.close();\n        const { encrypter } = this[kOptions];\n        if (encrypter) {\n            await encrypter.close(this, force);\n        }\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */ db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this[kOptions], options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */ static async connect(url, options) {\n        const client = new this(url, options);\n        return client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */ startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, {\n            explicit: true,\n            ...options\n        }, this[kOptions]);\n        this.s.activeSessions.add(session);\n        session.once(\"ended\", ()=>{\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...typeof optionsOrExecutor === \"object\" ? optionsOrExecutor : {}\n        };\n        const withSessionCallback = typeof optionsOrExecutor === \"function\" ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError(\"Missing required callback parameter\");\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        } finally{\n            try {\n                await session.endSession();\n            } catch  {\n            // We are not concerned with errors from endSession()\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */ watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient; //# sourceMappingURL=mongo_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_client_auth_providers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst mongocr_1 = __webpack_require__(/*! ./cmap/auth/mongocr */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\");\nconst mongodb_aws_1 = __webpack_require__(/*! ./cmap/auth/mongodb_aws */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst plain_1 = __webpack_require__(/*! ./cmap/auth/plain */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst scram_1 = __webpack_require__(/*! ./cmap/auth/scram */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\");\nconst x509_1 = __webpack_require__(/*! ./cmap/auth/x509 */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @internal */ const AUTH_PROVIDERS = new Map([\n    [\n        providers_1.AuthMechanism.MONGODB_AWS,\n        ()=>new mongodb_aws_1.MongoDBAWS()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_CR,\n        ()=>new mongocr_1.MongoCR()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_GSSAPI,\n        ()=>new gssapi_1.GSSAPI()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_OIDC,\n        ()=>new mongodb_oidc_1.MongoDBOIDC()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_PLAIN,\n        ()=>new plain_1.Plain()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_SCRAM_SHA1,\n        ()=>new scram_1.ScramSHA1()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_SCRAM_SHA256,\n        ()=>new scram_1.ScramSHA256()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_X509,\n        ()=>new x509_1.X509()\n    ]\n]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */ class MongoClientAuthProviders {\n    constructor(){\n        this.existingProviders = new Map();\n    }\n    /**\n     * Get or create an authentication provider based on the provided mechanism.\n     * We don't want to create all providers at once, as some providers may not be used.\n     * @param name - The name of the provider to get or create.\n     * @returns The provider.\n     * @throws MongoInvalidArgumentError if the mechanism is not supported.\n     * @internal\n     */ getOrCreateProvider(name) {\n        const authProvider = this.existingProviders.get(name);\n        if (authProvider) {\n            return authProvider;\n        }\n        const provider = AUTH_PROVIDERS.get(name)?.();\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n        }\n        this.existingProviders.set(name, provider);\n        return provider;\n    }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders; //# sourceMappingURL=mongo_client_auth_providers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fY2xpZW50X2F1dGhfcHJvdmlkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLGdGQUFvQjtBQUM3QyxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyxrRkFBcUI7QUFDL0MsTUFBTUUsZ0JBQWdCRixtQkFBT0EsQ0FBQywwRkFBeUI7QUFDdkQsTUFBTUcsaUJBQWlCSCxtQkFBT0EsQ0FBQyw0RkFBMEI7QUFDekQsTUFBTUksVUFBVUosbUJBQU9BLENBQUMsOEVBQW1CO0FBQzNDLE1BQU1LLGNBQWNMLG1CQUFPQSxDQUFDLHNGQUF1QjtBQUNuRCxNQUFNTSxVQUFVTixtQkFBT0EsQ0FBQyw4RUFBbUI7QUFDM0MsTUFBTU8sU0FBU1AsbUJBQU9BLENBQUMsNEVBQWtCO0FBQ3pDLE1BQU1RLFVBQVVSLG1CQUFPQSxDQUFDLDBEQUFTO0FBQ2pDLGNBQWMsR0FDZCxNQUFNUyxpQkFBaUIsSUFBSUMsSUFBSTtJQUMzQjtRQUFDTCxZQUFZTSxhQUFhLENBQUNDLFdBQVc7UUFBRSxJQUFNLElBQUlWLGNBQWNXLFVBQVU7S0FBRztJQUM3RTtRQUFDUixZQUFZTSxhQUFhLENBQUNHLFVBQVU7UUFBRSxJQUFNLElBQUliLFVBQVVjLE9BQU87S0FBRztJQUNyRTtRQUFDVixZQUFZTSxhQUFhLENBQUNLLGNBQWM7UUFBRSxJQUFNLElBQUlqQixTQUFTa0IsTUFBTTtLQUFHO0lBQ3ZFO1FBQUNaLFlBQVlNLGFBQWEsQ0FBQ08sWUFBWTtRQUFFLElBQU0sSUFBSWYsZUFBZWdCLFdBQVc7S0FBRztJQUNoRjtRQUFDZCxZQUFZTSxhQUFhLENBQUNTLGFBQWE7UUFBRSxJQUFNLElBQUloQixRQUFRaUIsS0FBSztLQUFHO0lBQ3BFO1FBQUNoQixZQUFZTSxhQUFhLENBQUNXLGtCQUFrQjtRQUFFLElBQU0sSUFBSWhCLFFBQVFpQixTQUFTO0tBQUc7SUFDN0U7UUFBQ2xCLFlBQVlNLGFBQWEsQ0FBQ2Esb0JBQW9CO1FBQUUsSUFBTSxJQUFJbEIsUUFBUW1CLFdBQVc7S0FBRztJQUNqRjtRQUFDcEIsWUFBWU0sYUFBYSxDQUFDZSxZQUFZO1FBQUUsSUFBTSxJQUFJbkIsT0FBT29CLElBQUk7S0FBRztDQUNwRTtBQUNEOzs7O0NBSUMsR0FDRCxNQUFNN0I7SUFDRjhCLGFBQWM7UUFDVixJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUluQjtJQUNqQztJQUNBOzs7Ozs7O0tBT0MsR0FDRG9CLG9CQUFvQkMsSUFBSSxFQUFFO1FBQ3RCLE1BQU1DLGVBQWUsSUFBSSxDQUFDSCxpQkFBaUIsQ0FBQ0ksR0FBRyxDQUFDRjtRQUNoRCxJQUFJQyxjQUFjO1lBQ2QsT0FBT0E7UUFDWDtRQUNBLE1BQU1FLFdBQVd6QixlQUFld0IsR0FBRyxDQUFDRjtRQUNwQyxJQUFJLENBQUNHLFVBQVU7WUFDWCxNQUFNLElBQUkxQixRQUFRMkIseUJBQXlCLENBQUMsQ0FBQyxjQUFjLEVBQUVKLEtBQUssY0FBYyxDQUFDO1FBQ3JGO1FBQ0EsSUFBSSxDQUFDRixpQkFBaUIsQ0FBQ08sR0FBRyxDQUFDTCxNQUFNRztRQUNqQyxPQUFPQTtJQUNYO0FBQ0o7QUFDQXRDLGdDQUFnQyxHQUFHRSwwQkFDbkMsdURBQXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanM/ZmJlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29DbGllbnRBdXRoUHJvdmlkZXJzID0gdm9pZCAwO1xuY29uc3QgZ3NzYXBpXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvZ3NzYXBpXCIpO1xuY29uc3QgbW9uZ29jcl8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL21vbmdvY3JcIik7XG5jb25zdCBtb25nb2RiX2F3c18xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL21vbmdvZGJfYXdzXCIpO1xuY29uc3QgbW9uZ29kYl9vaWRjXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjXCIpO1xuY29uc3QgcGxhaW5fMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9wbGFpblwiKTtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL3Byb3ZpZGVyc1wiKTtcbmNvbnN0IHNjcmFtXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvc2NyYW1cIik7XG5jb25zdCB4NTA5XzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgveDUwOVwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IEFVVEhfUFJPVklERVJTID0gbmV3IE1hcChbXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9BV1MsICgpID0+IG5ldyBtb25nb2RiX2F3c18xLk1vbmdvREJBV1MoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9DUiwgKCkgPT4gbmV3IG1vbmdvY3JfMS5Nb25nb0NSKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfR1NTQVBJLCAoKSA9PiBuZXcgZ3NzYXBpXzEuR1NTQVBJKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQywgKCkgPT4gbmV3IG1vbmdvZGJfb2lkY18xLk1vbmdvREJPSURDKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfUExBSU4sICgpID0+IG5ldyBwbGFpbl8xLlBsYWluKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfU0NSQU1fU0hBMSwgKCkgPT4gbmV3IHNjcmFtXzEuU2NyYW1TSEExKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfU0NSQU1fU0hBMjU2LCAoKSA9PiBuZXcgc2NyYW1fMS5TY3JhbVNIQTI1NigpXSxcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1g1MDksICgpID0+IG5ldyB4NTA5XzEuWDUwOSgpXVxuXSk7XG4vKipcbiAqIENyZWF0ZSBhIHNldCBvZiBwcm92aWRlcnMgcGVyIGNsaWVudFxuICogdG8gYXZvaWQgc2hhcmluZyB0aGUgcHJvdmlkZXIncyBjYWNoZSBiZXR3ZWVuIGRpZmZlcmVudCBjbGllbnRzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIE1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXhpc3RpbmdQcm92aWRlcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBvciBjcmVhdGUgYW4gYXV0aGVudGljYXRpb24gcHJvdmlkZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG1lY2hhbmlzbS5cbiAgICAgKiBXZSBkb24ndCB3YW50IHRvIGNyZWF0ZSBhbGwgcHJvdmlkZXJzIGF0IG9uY2UsIGFzIHNvbWUgcHJvdmlkZXJzIG1heSBub3QgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm92aWRlciB0byBnZXQgb3IgY3JlYXRlLlxuICAgICAqIEByZXR1cm5zIFRoZSBwcm92aWRlci5cbiAgICAgKiBAdGhyb3dzIE1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IgaWYgdGhlIG1lY2hhbmlzbSBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldE9yQ3JlYXRlUHJvdmlkZXIobmFtZSkge1xuICAgICAgICBjb25zdCBhdXRoUHJvdmlkZXIgPSB0aGlzLmV4aXN0aW5nUHJvdmlkZXJzLmdldChuYW1lKTtcbiAgICAgICAgaWYgKGF1dGhQcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGF1dGhQcm92aWRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm92aWRlciA9IEFVVEhfUFJPVklERVJTLmdldChuYW1lKT8uKCk7XG4gICAgICAgIGlmICghcHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYGF1dGhNZWNoYW5pc20gJHtuYW1lfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leGlzdGluZ1Byb3ZpZGVycy5zZXQobmFtZSwgcHJvdmlkZXIpO1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NsaWVudEF1dGhQcm92aWRlcnMgPSBNb25nb0NsaWVudEF1dGhQcm92aWRlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTW9uZ29DbGllbnRBdXRoUHJvdmlkZXJzIiwiZ3NzYXBpXzEiLCJyZXF1aXJlIiwibW9uZ29jcl8xIiwibW9uZ29kYl9hd3NfMSIsIm1vbmdvZGJfb2lkY18xIiwicGxhaW5fMSIsInByb3ZpZGVyc18xIiwic2NyYW1fMSIsIng1MDlfMSIsImVycm9yXzEiLCJBVVRIX1BST1ZJREVSUyIsIk1hcCIsIkF1dGhNZWNoYW5pc20iLCJNT05HT0RCX0FXUyIsIk1vbmdvREJBV1MiLCJNT05HT0RCX0NSIiwiTW9uZ29DUiIsIk1PTkdPREJfR1NTQVBJIiwiR1NTQVBJIiwiTU9OR09EQl9PSURDIiwiTW9uZ29EQk9JREMiLCJNT05HT0RCX1BMQUlOIiwiUGxhaW4iLCJNT05HT0RCX1NDUkFNX1NIQTEiLCJTY3JhbVNIQTEiLCJNT05HT0RCX1NDUkFNX1NIQTI1NiIsIlNjcmFtU0hBMjU2IiwiTU9OR09EQl9YNTA5IiwiWDUwOSIsImNvbnN0cnVjdG9yIiwiZXhpc3RpbmdQcm92aWRlcnMiLCJnZXRPckNyZWF0ZVByb3ZpZGVyIiwibmFtZSIsImF1dGhQcm92aWRlciIsImdldCIsInByb3ZpZGVyIiwiTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_logger.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_logger.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoLogger = exports.defaultLogTransform = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.parseSeverityFromString = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */ exports.SeverityLevel = Object.freeze({\n    EMERGENCY: \"emergency\",\n    ALERT: \"alert\",\n    CRITICAL: \"critical\",\n    ERROR: \"error\",\n    WARNING: \"warn\",\n    NOTICE: \"notice\",\n    INFORMATIONAL: \"info\",\n    DEBUG: \"debug\",\n    TRACE: \"trace\",\n    OFF: \"off\"\n});\n/** @internal */ exports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */ class SeverityLevelMap extends Map {\n    constructor(entries){\n        const newEntries = [];\n        for (const [level, value] of entries){\n            newEntries.push([\n                value,\n                level\n            ]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */ exports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [\n        exports.SeverityLevel.OFF,\n        -Infinity\n    ],\n    [\n        exports.SeverityLevel.EMERGENCY,\n        0\n    ],\n    [\n        exports.SeverityLevel.ALERT,\n        1\n    ],\n    [\n        exports.SeverityLevel.CRITICAL,\n        2\n    ],\n    [\n        exports.SeverityLevel.ERROR,\n        3\n    ],\n    [\n        exports.SeverityLevel.WARNING,\n        4\n    ],\n    [\n        exports.SeverityLevel.NOTICE,\n        5\n    ],\n    [\n        exports.SeverityLevel.INFORMATIONAL,\n        6\n    ],\n    [\n        exports.SeverityLevel.DEBUG,\n        7\n    ],\n    [\n        exports.SeverityLevel.TRACE,\n        8\n    ]\n]);\n/** @internal */ exports.MongoLoggableComponent = Object.freeze({\n    COMMAND: \"command\",\n    TOPOLOGY: \"topology\",\n    SERVER_SELECTION: \"serverSelection\",\n    CONNECTION: \"connection\",\n    CLIENT: \"client\"\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */ function parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\nexports.parseSeverityFromString = parseSeverityFromString;\n/** @internal */ function createStdioLogger(stream) {\n    return {\n        write: (0, util_1.promisify)((log, cb)=>{\n            const logLine = (0, util_1.inspect)(log, {\n                compact: true,\n                breakLength: Infinity\n            });\n            stream.write(`${logLine}\\n`, \"utf-8\", cb);\n            return;\n        })\n    };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */ function resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === \"string\" && /^stderr$/i.test(mongodbLogPath)) {\n        return {\n            mongodbLogPath: createStdioLogger(process.stderr),\n            mongodbLogPathIsStdErr: true\n        };\n    }\n    if (typeof mongodbLogPath === \"string\" && /^stdout$/i.test(mongodbLogPath)) {\n        return {\n            mongodbLogPath: createStdioLogger(process.stdout),\n            mongodbLogPathIsStdErr: false\n        };\n    }\n    if (typeof mongodbLogPath === \"object\" && typeof mongodbLogPath?.write === \"function\") {\n        return {\n            mongodbLogPath: mongodbLogPath,\n            mongodbLogPathIsStdErr: false\n        };\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return {\n            mongodbLogPath: createStdioLogger(process.stderr),\n            mongodbLogPathIsStdErr: true\n        };\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return {\n            mongodbLogPath: createStdioLogger(process.stdout),\n            mongodbLogPathIsStdErr: false\n        };\n    }\n    return {\n        mongodbLogPath: createStdioLogger(process.stderr),\n        mongodbLogPathIsStdErr: true\n    };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return parseSeverityFromString(clientOption) ?? parseSeverityFromString(environmentOption) ?? defaultSeverity;\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */ function stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n    let strToTruncate = \"\";\n    if (typeof value === \"string\") {\n        strToTruncate = value;\n    } else if (typeof value === \"function\") {\n        strToTruncate = value.name;\n    } else {\n        try {\n            strToTruncate = bson_1.EJSON.stringify(value, options);\n        } catch (e) {\n            strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n        }\n    }\n    // handle truncation that occurs in the middle of multi-byte codepoints\n    if (maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength && strToTruncate.charCodeAt(maxDocumentLength - 1) !== strToTruncate.codePointAt(maxDocumentLength - 1)) {\n        maxDocumentLength--;\n        if (maxDocumentLength === 0) {\n            return \"\";\n        }\n    }\n    return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength ? `${strToTruncate.slice(0, maxDocumentLength)}...` : strToTruncate;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === \"function\";\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n    log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n    log.operation = operation;\n    log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n    log.message = message;\n    return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    log.databaseName = commandEvent.databaseName;\n    log.serverConnectionId = commandEvent.serverConnectionId;\n    return log;\n}\nfunction attachConnectionFields(log, event) {\n    const { host, port } = utils_1.HostAddress.fromString(event.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n    log.topologyId = sdamEvent.topologyId;\n    return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n    const { awaited, connectionId } = serverHeartbeatEvent;\n    log.awaited = awaited;\n    log.driverConnectionId = serverHeartbeatEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\n/** @internal */ function defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch(logObject.name){\n        case constants_1.SERVER_SELECTION_STARTED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            return log;\n        case constants_1.SERVER_SELECTION_FAILED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.SERVER_SELECTION_SUCCEEDED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.serverHost = logObject.serverHost;\n            log.serverPort = logObject.serverPort;\n            return log;\n        case constants_1.WAITING_FOR_SUITABLE_SERVER:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.remainingTimeMS = logObject.remainingTimeMS;\n            return log;\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = \"Command started\";\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, {\n                relaxed: true\n            });\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = \"Command succeeded\";\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n                relaxed: true\n            });\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = \"Command failed\";\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message ?? \"(redacted)\";\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool created\";\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool ready\";\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool cleared\";\n            if (logObject.serviceId?._bsontype === \"ObjectId\") {\n                log.serviceId = logObject.serviceId?.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool closed\";\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection created\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection ready\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection closed\";\n            log.driverConnectionId = logObject.connectionId;\n            switch(logObject.reason){\n                case \"stale\":\n                    log.reason = \"Connection became stale because the pool was cleared\";\n                    break;\n                case \"idle\":\n                    log.reason = \"Connection has been available but unused for longer than the configured max idle time\";\n                    break;\n                case \"error\":\n                    log.reason = \"An error occurred while using the connection\";\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case \"poolClosed\":\n                    log.reason = \"Connection pool was closed\";\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checkout started\";\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checkout failed\";\n            switch(logObject.reason){\n                case \"poolClosed\":\n                    log.reason = \"Connection pool was closed\";\n                    break;\n                case \"timeout\":\n                    log.reason = \"Wait queue timeout elapsed without a connection becoming available\";\n                    break;\n                case \"connectionError\":\n                    log.reason = \"An error occurred while trying to establish a new connection\";\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checked out\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checked in\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.SERVER_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Starting server monitoring\";\n            return log;\n        case constants_1.SERVER_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Stopped server monitoring\";\n            return log;\n        case constants_1.SERVER_HEARTBEAT_STARTED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = \"Server heartbeat started\";\n            return log;\n        case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = \"Server heartbeat succeeded\";\n            log.durationMS = logObject.duration;\n            log.serverConnectionId = logObject.serverConnectionId;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n                relaxed: true\n            });\n            return log;\n        case constants_1.SERVER_HEARTBEAT_FAILED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = \"Server heartbeat failed\";\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.TOPOLOGY_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log.message = \"Starting topology monitoring\";\n            return log;\n        case constants_1.TOPOLOGY_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log.message = \"Stopped topology monitoring\";\n            return log;\n        case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n            log = attachSDAMFields(log, logObject);\n            log.message = \"Topology description changed\";\n            log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n            log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)){\n                if (value != null) log[key] = value;\n            }\n    }\n    return log;\n}\nexports.defaultLogTransform = defaultLogTransform;\n/** @internal */ class MongoLogger {\n    constructor(options){\n        this.pendingLog = null;\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */ this.error = this.log.bind(this, \"error\");\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */ this.warn = this.log.bind(this, \"warn\");\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */ this.info = this.log.bind(this, \"info\");\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */ this.debug = this.log.bind(this, \"debug\");\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */ this.trace = this.log.bind(this, \"trace\");\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n        this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n        this.severities = this.createLoggingSeverities();\n    }\n    createLoggingSeverities() {\n        const severities = Object();\n        for (const component of Object.values(exports.MongoLoggableComponent)){\n            severities[component] = {};\n            for (const severityLevel of Object.values(exports.SeverityLevel)){\n                severities[component][severityLevel] = compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n            }\n        }\n        return severities;\n    }\n    turnOffSeverities() {\n        for (const component of Object.values(exports.MongoLoggableComponent)){\n            this.componentSeverities[component] = exports.SeverityLevel.OFF;\n            for (const severityLevel of Object.values(exports.SeverityLevel)){\n                this.severities[component][severityLevel] = false;\n            }\n        }\n    }\n    logWriteFailureHandler(error) {\n        if (this.logDestinationIsStdErr) {\n            this.turnOffSeverities();\n            this.clearPendingLog();\n            return;\n        }\n        this.logDestination = createStdioLogger(process.stderr);\n        this.logDestinationIsStdErr = true;\n        this.clearPendingLog();\n        this.error(exports.MongoLoggableComponent.CLIENT, {\n            toLog: function() {\n                return {\n                    message: \"User input for mongodbLogPath is now invalid. Logging is halted.\",\n                    error: error.message\n                };\n            }\n        });\n        this.turnOffSeverities();\n        this.clearPendingLog();\n    }\n    clearPendingLog() {\n        this.pendingLog = null;\n    }\n    willLog(component, severity) {\n        if (severity === exports.SeverityLevel.OFF) return false;\n        return this.severities[component][severity];\n    }\n    log(severity, component, message) {\n        if (!this.willLog(component, severity)) return;\n        let logMessage = {\n            t: new Date(),\n            c: component,\n            s: severity\n        };\n        if (typeof message === \"string\") {\n            logMessage.message = message;\n        } else if (typeof message === \"object\") {\n            if (isLogConvertible(message)) {\n                logMessage = {\n                    ...logMessage,\n                    ...message.toLog()\n                };\n            } else {\n                logMessage = {\n                    ...logMessage,\n                    ...defaultLogTransform(message, this.maxDocumentLength)\n                };\n            }\n        }\n        if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n            this.pendingLog = this.pendingLog.then(()=>this.logDestination.write(logMessage)).then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            return;\n        }\n        try {\n            const logResult = this.logDestination.write(logMessage);\n            if ((0, utils_1.isPromiseLike)(logResult)) {\n                this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            }\n        } catch (error) {\n            this.logWriteFailureHandler(error);\n        }\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */ static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolvedLogPath.mongodbLogPath,\n            mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ?? (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n            logDestination: combinedOptions.mongodbLogPath,\n            logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n        };\n    }\n}\nexports.MongoLogger = MongoLogger; //# sourceMappingURL=mongo_logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_types.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_types.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\n/**\n * Typescript type safe event emitter\n * @public\n */ class TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */ emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component) this.mongoLogger?.debug(this.component, args[0]);\n    }\n    /** @internal */ emitAndLogHeartbeat(event, topologyId, serverConnectionId, ...args) {\n        this.emit(event, ...args);\n        if (this.component) {\n            const loggableHeartbeatEvent = {\n                topologyId: topologyId,\n                serverConnectionId: serverConnectionId ?? null,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(this.component, loggableHeartbeatEvent);\n        }\n    }\n    /** @internal */ emitAndLogCommand(monitorCommands, event, databaseName, connectionEstablished, ...args) {\n        if (monitorCommands) {\n            this.emit(event, ...args);\n        }\n        if (connectionEstablished) {\n            const loggableCommandEvent = {\n                databaseName: databaseName,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.COMMAND, loggableCommandEvent);\n        }\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */ class CancellationToken extends TypedEventEmitter {\n}\nexports.CancellationToken = CancellationToken; //# sourceMappingURL=mongo_types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHQSx5QkFBeUIsR0FBRyxLQUFLO0FBQzdELE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMsd0VBQWdCO0FBQy9DOzs7Q0FHQyxHQUNELE1BQU1GLDBCQUEwQkMsU0FBU0csWUFBWTtJQUNqRCxjQUFjLEdBQ2RDLFdBQVdDLEtBQUssRUFBRSxHQUFHQyxJQUFJLEVBQUU7UUFDdkIsSUFBSSxDQUFDQyxJQUFJLENBQUNGLFVBQVVDO1FBQ3BCLElBQUksSUFBSSxDQUFDRSxTQUFTLEVBQ2QsSUFBSSxDQUFDQyxXQUFXLEVBQUVDLE1BQU0sSUFBSSxDQUFDRixTQUFTLEVBQUVGLElBQUksQ0FBQyxFQUFFO0lBQ3ZEO0lBQ0EsY0FBYyxHQUNkSyxvQkFBb0JOLEtBQUssRUFBRU8sVUFBVSxFQUFFQyxrQkFBa0IsRUFBRSxHQUFHUCxJQUFJLEVBQUU7UUFDaEUsSUFBSSxDQUFDQyxJQUFJLENBQUNGLFVBQVVDO1FBQ3BCLElBQUksSUFBSSxDQUFDRSxTQUFTLEVBQUU7WUFDaEIsTUFBTU0seUJBQXlCO2dCQUMzQkYsWUFBWUE7Z0JBQ1pDLG9CQUFvQkEsc0JBQXNCO2dCQUMxQyxHQUFHUCxJQUFJLENBQUMsRUFBRTtZQUNkO1lBQ0EsSUFBSSxDQUFDRyxXQUFXLEVBQUVDLE1BQU0sSUFBSSxDQUFDRixTQUFTLEVBQUVNO1FBQzVDO0lBQ0o7SUFDQSxjQUFjLEdBQ2RDLGtCQUFrQkMsZUFBZSxFQUFFWCxLQUFLLEVBQUVZLFlBQVksRUFBRUMscUJBQXFCLEVBQUUsR0FBR1osSUFBSSxFQUFFO1FBQ3BGLElBQUlVLGlCQUFpQjtZQUNqQixJQUFJLENBQUNULElBQUksQ0FBQ0YsVUFBVUM7UUFDeEI7UUFDQSxJQUFJWSx1QkFBdUI7WUFDdkIsTUFBTUMsdUJBQXVCO2dCQUN6QkYsY0FBY0E7Z0JBQ2QsR0FBR1gsSUFBSSxDQUFDLEVBQUU7WUFDZDtZQUNBLElBQUksQ0FBQ0csV0FBVyxFQUFFQyxNQUFNUixlQUFla0Isc0JBQXNCLENBQUNDLE9BQU8sRUFBRUY7UUFDM0U7SUFDSjtBQUNKO0FBQ0F2Qix5QkFBeUIsR0FBR0c7QUFDNUIsWUFBWSxHQUNaLE1BQU1ELDBCQUEwQkM7QUFDaEM7QUFDQUgseUJBQXlCLEdBQUdFLG1CQUM1Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL21vbmdvX3R5cGVzLmpzPzE0NDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gZXhwb3J0cy5UeXBlZEV2ZW50RW1pdHRlciA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IG1vbmdvX2xvZ2dlcl8xID0gcmVxdWlyZShcIi4vbW9uZ29fbG9nZ2VyXCIpO1xuLyoqXG4gKiBUeXBlc2NyaXB0IHR5cGUgc2FmZSBldmVudCBlbWl0dGVyXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFR5cGVkRXZlbnRFbWl0dGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgZW1pdEFuZExvZyhldmVudCwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpXG4gICAgICAgICAgICB0aGlzLm1vbmdvTG9nZ2VyPy5kZWJ1Zyh0aGlzLmNvbXBvbmVudCwgYXJnc1swXSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBlbWl0QW5kTG9nSGVhcnRiZWF0KGV2ZW50LCB0b3BvbG9neUlkLCBzZXJ2ZXJDb25uZWN0aW9uSWQsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICBjb25zdCBsb2dnYWJsZUhlYXJ0YmVhdEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgIHRvcG9sb2d5SWQ6IHRvcG9sb2d5SWQsXG4gICAgICAgICAgICAgICAgc2VydmVyQ29ubmVjdGlvbklkOiBzZXJ2ZXJDb25uZWN0aW9uSWQgPz8gbnVsbCxcbiAgICAgICAgICAgICAgICAuLi5hcmdzWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5tb25nb0xvZ2dlcj8uZGVidWcodGhpcy5jb21wb25lbnQsIGxvZ2dhYmxlSGVhcnRiZWF0RXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBlbWl0QW5kTG9nQ29tbWFuZChtb25pdG9yQ29tbWFuZHMsIGV2ZW50LCBkYXRhYmFzZU5hbWUsIGNvbm5lY3Rpb25Fc3RhYmxpc2hlZCwgLi4uYXJncykge1xuICAgICAgICBpZiAobW9uaXRvckNvbW1hbmRzKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25uZWN0aW9uRXN0YWJsaXNoZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvZ2dhYmxlQ29tbWFuZEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgIGRhdGFiYXNlTmFtZTogZGF0YWJhc2VOYW1lLFxuICAgICAgICAgICAgICAgIC4uLmFyZ3NbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm1vbmdvTG9nZ2VyPy5kZWJ1Zyhtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dhYmxlQ29tcG9uZW50LkNPTU1BTkQsIGxvZ2dhYmxlQ29tbWFuZEV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSBUeXBlZEV2ZW50RW1pdHRlcjtcbi8qKiBAcHVibGljICovXG5jbGFzcyBDYW5jZWxsYXRpb25Ub2tlbiBleHRlbmRzIFR5cGVkRXZlbnRFbWl0dGVyIHtcbn1cbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvX3R5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNhbmNlbGxhdGlvblRva2VuIiwiVHlwZWRFdmVudEVtaXR0ZXIiLCJldmVudHNfMSIsInJlcXVpcmUiLCJtb25nb19sb2dnZXJfMSIsIkV2ZW50RW1pdHRlciIsImVtaXRBbmRMb2ciLCJldmVudCIsImFyZ3MiLCJlbWl0IiwiY29tcG9uZW50IiwibW9uZ29Mb2dnZXIiLCJkZWJ1ZyIsImVtaXRBbmRMb2dIZWFydGJlYXQiLCJ0b3BvbG9neUlkIiwic2VydmVyQ29ubmVjdGlvbklkIiwibG9nZ2FibGVIZWFydGJlYXRFdmVudCIsImVtaXRBbmRMb2dDb21tYW5kIiwibW9uaXRvckNvbW1hbmRzIiwiZGF0YWJhc2VOYW1lIiwiY29ubmVjdGlvbkVzdGFibGlzaGVkIiwibG9nZ2FibGVDb21tYW5kRXZlbnQiLCJNb25nb0xvZ2dhYmxlQ29tcG9uZW50IiwiQ09NTUFORCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/aggregate.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/aggregate.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ exports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */ class AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options){\n        super(undefined, {\n            ...options,\n            dbName: ns.db\n        });\n        this.options = {\n            ...options\n        };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === \"string\") {\n            this.pipeline = this.pipeline.concat({\n                $out: options.out\n            });\n            this.hasWriteStage = true;\n        } else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        } else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError(\"Cursor options must be an object\");\n        }\n    }\n    get commandName() {\n        return \"aggregate\";\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = {\n            aggregate: this.target,\n            pipeline: this.pipeline\n        };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === \"boolean\") {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=aggregate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/bulk_write.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BulkWriteOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    get commandName() {\n        return \"bulkWrite\";\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference\n        };\n        // Create the bulk operation\n        const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for(let i = 0; i < operations.length; i++){\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        const result = await bulk.execute({\n            ...options,\n            session\n        });\n        return result;\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=bulk_write.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9idWxrX3dyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLGNBQWNDLG1CQUFPQSxDQUFDLDZFQUFhO0FBQ3pDLGNBQWMsR0FDZCxNQUFNRiwyQkFBMkJDLFlBQVlFLGlCQUFpQjtJQUMxREMsWUFBWUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sQ0FBRTtRQUN6QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRixVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtJQUN0QjtJQUNBLElBQUlFLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxPQUFPLElBQUksQ0FBQ1AsVUFBVTtRQUM1QixNQUFNQyxhQUFhLElBQUksQ0FBQ0EsVUFBVTtRQUNsQyxNQUFNQyxVQUFVO1lBQUUsR0FBRyxJQUFJLENBQUNBLE9BQU87WUFBRSxHQUFHLElBQUksQ0FBQ00sV0FBVztZQUFFQyxnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1FBQUM7UUFDNUYsNEJBQTRCO1FBQzVCLE1BQU1DLE9BQU9SLFFBQVFTLE9BQU8sS0FBSyxRQUMzQkosS0FBS0sseUJBQXlCLENBQUNWLFdBQy9CSyxLQUFLTSx1QkFBdUIsQ0FBQ1g7UUFDbkMsNkNBQTZDO1FBQzdDLElBQUssSUFBSVksSUFBSSxHQUFHQSxJQUFJYixXQUFXYyxNQUFNLEVBQUVELElBQUs7WUFDeENKLEtBQUtNLEdBQUcsQ0FBQ2YsVUFBVSxDQUFDYSxFQUFFO1FBQzFCO1FBQ0EsbUJBQW1CO1FBQ25CLE1BQU1HLFNBQVMsTUFBTVAsS0FBS04sT0FBTyxDQUFDO1lBQUUsR0FBR0YsT0FBTztZQUFFSTtRQUFRO1FBQ3hELE9BQU9XO0lBQ1g7QUFDSjtBQUNBeEIsMEJBQTBCLEdBQUdFO0FBQzVCLElBQUdDLFlBQVlzQixhQUFhLEVBQUV2QixvQkFBb0I7SUFBQ0MsWUFBWXVCLE1BQU0sQ0FBQ0MsZUFBZTtDQUFDLEdBQ3ZGLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9idWxrX3dyaXRlLmpzP2UyYWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1bGtXcml0ZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQnVsa1dyaXRlT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wZXJhdGlvbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMub3BlcmF0aW9ucyA9IG9wZXJhdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdidWxrV3JpdGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBvcGVyYXRpb25zID0gdGhpcy5vcGVyYXRpb25zO1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMuYnNvbk9wdGlvbnMsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlIH07XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYnVsayBvcGVyYXRpb25cbiAgICAgICAgY29uc3QgYnVsayA9IG9wdGlvbnMub3JkZXJlZCA9PT0gZmFsc2VcbiAgICAgICAgICAgID8gY29sbC5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wKG9wdGlvbnMpXG4gICAgICAgICAgICA6IGNvbGwuaW5pdGlhbGl6ZU9yZGVyZWRCdWxrT3Aob3B0aW9ucyk7XG4gICAgICAgIC8vIGZvciBlYWNoIG9wIGdvIHRocm91Z2ggYW5kIGFkZCB0byB0aGUgYnVsa1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wZXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ1bGsucmF3KG9wZXJhdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJ1bGtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnVsay5leGVjdXRlKHsgLi4ub3B0aW9ucywgc2Vzc2lvbiB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLkJ1bGtXcml0ZU9wZXJhdGlvbiA9IEJ1bGtXcml0ZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShCdWxrV3JpdGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWxrX3dyaXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJ1bGtXcml0ZU9wZXJhdGlvbiIsIm9wZXJhdGlvbl8xIiwicmVxdWlyZSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwib3BlcmF0aW9ucyIsIm9wdGlvbnMiLCJjb21tYW5kTmFtZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiY29sbCIsImJzb25PcHRpb25zIiwicmVhZFByZWZlcmVuY2UiLCJidWxrIiwib3JkZXJlZCIsImluaXRpYWxpemVVbm9yZGVyZWRCdWxrT3AiLCJpbml0aWFsaXplT3JkZXJlZEJ1bGtPcCIsImkiLCJsZW5ndGgiLCJyYXciLCJyZXN1bHQiLCJkZWZpbmVBc3BlY3RzIiwiQXNwZWN0IiwiV1JJVEVfT1BFUkFUSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/collections.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/collections.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CollectionsOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options){\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    get commandName() {\n        return \"listCollections\";\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db.listCollections({}, {\n            ...this.options,\n            nameOnly: true,\n            readPreference: this.readPreference,\n            session\n        }).toArray();\n        const collections = [];\n        for (const { name } of documents){\n            if (!name.includes(\"$\")) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation; //# sourceMappingURL=collections.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb2xsZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUcsS0FBSztBQUNwQyxNQUFNRyxlQUFlQyxtQkFBT0EsQ0FBQyxxRUFBZTtBQUM1QyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsNkJBQTZCRyxZQUFZQyxpQkFBaUI7SUFDNURDLFlBQVlDLEVBQUUsRUFBRUMsT0FBTyxDQUFFO1FBQ3JCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNELEVBQUUsR0FBR0E7SUFDZDtJQUNBLElBQUlFLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixpQ0FBaUM7UUFDakMsTUFBTUMsWUFBWSxNQUFNLElBQUksQ0FBQ04sRUFBRSxDQUMxQk8sZUFBZSxDQUFDLENBQUMsR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDTixPQUFPO1lBQUVPLFVBQVU7WUFBTUMsZ0JBQWdCLElBQUksQ0FBQ0EsY0FBYztZQUFFSjtRQUFRLEdBQ3BHSyxPQUFPO1FBQ1osTUFBTUMsY0FBYyxFQUFFO1FBQ3RCLEtBQUssTUFBTSxFQUFFQyxJQUFJLEVBQUUsSUFBSU4sVUFBVztZQUM5QixJQUFJLENBQUNNLEtBQUtDLFFBQVEsQ0FBQyxNQUFNO2dCQUNyQiwrQ0FBK0M7Z0JBQy9DRixZQUFZRyxJQUFJLENBQUMsSUFBSW5CLGFBQWFvQixVQUFVLENBQUMsSUFBSSxDQUFDZixFQUFFLEVBQUVZLE1BQU0sSUFBSSxDQUFDWixFQUFFLENBQUNnQixDQUFDLENBQUNmLE9BQU87WUFDakY7UUFDSjtRQUNBLGdDQUFnQztRQUNoQyxPQUFPVTtJQUNYO0FBQ0o7QUFDQW5CLDRCQUE0QixHQUFHRSxzQkFDL0IsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbGxlY3Rpb25zLmpzPzFiN2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbGxlY3Rpb25zT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2NvbGxlY3Rpb25cIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbGxlY3Rpb25zT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0Q29sbGVjdGlvbnMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICAvLyBMZXQncyBnZXQgdGhlIGNvbGxlY3Rpb24gbmFtZXNcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgdGhpcy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7fSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiB0cnVlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IG5hbWUgfSBvZiBkb2N1bWVudHMpIHtcbiAgICAgICAgICAgIGlmICghbmFtZS5pbmNsdWRlcygnJCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIGNvbGxlY3Rpb25zIHJlbW92aW5nIGFueSBpbGxlZ2FsIG9uZXNcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9ucy5wdXNoKG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbih0aGlzLmRiLCBuYW1lLCB0aGlzLmRiLnMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiB0aGUgY29sbGVjdGlvbiBvYmplY3RzXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLkNvbGxlY3Rpb25zT3BlcmF0aW9uID0gQ29sbGVjdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb2xsZWN0aW9uc09wZXJhdGlvbiIsImNvbGxlY3Rpb25fMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkYiIsIm9wdGlvbnMiLCJjb21tYW5kTmFtZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiZG9jdW1lbnRzIiwibGlzdENvbGxlY3Rpb25zIiwibmFtZU9ubHkiLCJyZWFkUHJlZmVyZW5jZSIsInRvQXJyYXkiLCJjb2xsZWN0aW9ucyIsIm5hbWUiLCJpbmNsdWRlcyIsInB1c2giLCJDb2xsZWN0aW9uIiwicyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/command.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/command.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CommandOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options){\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, \"$cmd\");\n        } else {\n            this.ns = parent ? parent.s.namespace.withCollection(\"$cmd\") : new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        } else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return true;\n    }\n    async executeCommand(server, session, cmd) {\n        // TODO: consider making this a non-enumerable property\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, {\n                readConcern: this.readConcern\n            });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation && typeof options.collation === \"object\" && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, {\n                collation: options.collation\n            });\n        }\n        if (typeof options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return server.command(this.ns, cmd, options);\n    }\n}\nexports.CommandOperation = CommandOperation; //# sourceMappingURL=command.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/common_functions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/common_functions.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.maybeAddIdToDocuments = exports.indexInformation = void 0;\nasync function indexInformation(db, name, options) {\n    if (options == null) {\n        options = {};\n    }\n    // If we specified full information\n    const full = options.full == null ? false : options.full;\n    // Get the list of indexes of the specified collection\n    const indexes = await db.collection(name).listIndexes(options).toArray();\n    if (full) return indexes;\n    const info = {};\n    for (const index of indexes){\n        info[index.name] = Object.entries(index.key);\n    }\n    return info;\n}\nexports.indexInformation = indexInformation;\nfunction maybeAddIdToDocuments(coll, docOrDocs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === \"boolean\" ? options.forceServerObjectId : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docOrDocs;\n    }\n    const transform = (doc)=>{\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    };\n    return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\nexports.maybeAddIdToDocuments = maybeAddIdToDocuments; //# sourceMappingURL=common_functions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tb25fZnVuY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSztBQUNoRSxlQUFlRyxpQkFBaUJDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxPQUFPO0lBQzdDLElBQUlBLFdBQVcsTUFBTTtRQUNqQkEsVUFBVSxDQUFDO0lBQ2Y7SUFDQSxtQ0FBbUM7SUFDbkMsTUFBTUMsT0FBT0QsUUFBUUMsSUFBSSxJQUFJLE9BQU8sUUFBUUQsUUFBUUMsSUFBSTtJQUN4RCxzREFBc0Q7SUFDdEQsTUFBTUMsVUFBVSxNQUFNSixHQUFHSyxVQUFVLENBQUNKLE1BQU1LLFdBQVcsQ0FBQ0osU0FBU0ssT0FBTztJQUN0RSxJQUFJSixNQUNBLE9BQU9DO0lBQ1gsTUFBTUksT0FBTyxDQUFDO0lBQ2QsS0FBSyxNQUFNQyxTQUFTTCxRQUFTO1FBQ3pCSSxJQUFJLENBQUNDLE1BQU1SLElBQUksQ0FBQyxHQUFHUCxPQUFPZ0IsT0FBTyxDQUFDRCxNQUFNRSxHQUFHO0lBQy9DO0lBQ0EsT0FBT0g7QUFDWDtBQUNBWix3QkFBd0IsR0FBR0c7QUFDM0IsU0FBU0Qsc0JBQXNCYyxJQUFJLEVBQUVDLFNBQVMsRUFBRVgsT0FBTztJQUNuRCxNQUFNWSxzQkFBc0IsT0FBT1osUUFBUVksbUJBQW1CLEtBQUssWUFDN0RaLFFBQVFZLG1CQUFtQixHQUMzQkYsS0FBS0csQ0FBQyxDQUFDZixFQUFFLENBQUNFLE9BQU8sRUFBRVk7SUFDekIseURBQXlEO0lBQ3pELElBQUlBLHdCQUF3QixNQUFNO1FBQzlCLE9BQU9EO0lBQ1g7SUFDQSxNQUFNRyxZQUFZLENBQUNDO1FBQ2YsSUFBSUEsSUFBSUMsR0FBRyxJQUFJLE1BQU07WUFDakJELElBQUlDLEdBQUcsR0FBR04sS0FBS0csQ0FBQyxDQUFDSSxTQUFTLENBQUNDLFFBQVE7UUFDdkM7UUFDQSxPQUFPSDtJQUNYO0lBQ0EsT0FBT0ksTUFBTUMsT0FBTyxDQUFDVCxhQUFhQSxVQUFVVSxHQUFHLENBQUNQLGFBQWFBLFVBQVVIO0FBQzNFO0FBQ0FqQiw2QkFBNkIsR0FBR0UsdUJBQ2hDLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tb25fZnVuY3Rpb25zLmpzPzQ5ODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1heWJlQWRkSWRUb0RvY3VtZW50cyA9IGV4cG9ydHMuaW5kZXhJbmZvcm1hdGlvbiA9IHZvaWQgMDtcbmFzeW5jIGZ1bmN0aW9uIGluZGV4SW5mb3JtYXRpb24oZGIsIG5hbWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgLy8gSWYgd2Ugc3BlY2lmaWVkIGZ1bGwgaW5mb3JtYXRpb25cbiAgICBjb25zdCBmdWxsID0gb3B0aW9ucy5mdWxsID09IG51bGwgPyBmYWxzZSA6IG9wdGlvbnMuZnVsbDtcbiAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgaW5kZXhlcyBvZiB0aGUgc3BlY2lmaWVkIGNvbGxlY3Rpb25cbiAgICBjb25zdCBpbmRleGVzID0gYXdhaXQgZGIuY29sbGVjdGlvbihuYW1lKS5saXN0SW5kZXhlcyhvcHRpb25zKS50b0FycmF5KCk7XG4gICAgaWYgKGZ1bGwpXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgIGNvbnN0IGluZm8gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgaW5mb1tpbmRleC5uYW1lXSA9IE9iamVjdC5lbnRyaWVzKGluZGV4LmtleSk7XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xufVxuZXhwb3J0cy5pbmRleEluZm9ybWF0aW9uID0gaW5kZXhJbmZvcm1hdGlvbjtcbmZ1bmN0aW9uIG1heWJlQWRkSWRUb0RvY3VtZW50cyhjb2xsLCBkb2NPckRvY3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmb3JjZVNlcnZlck9iamVjdElkID0gdHlwZW9mIG9wdGlvbnMuZm9yY2VTZXJ2ZXJPYmplY3RJZCA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgID8gb3B0aW9ucy5mb3JjZVNlcnZlck9iamVjdElkXG4gICAgICAgIDogY29sbC5zLmRiLm9wdGlvbnM/LmZvcmNlU2VydmVyT2JqZWN0SWQ7XG4gICAgLy8gbm8gbmVlZCB0byBtb2RpZnkgdGhlIGRvY3MgaWYgc2VydmVyIHNldHMgdGhlIE9iamVjdElkXG4gICAgaWYgKGZvcmNlU2VydmVyT2JqZWN0SWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGRvY09yRG9jcztcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmb3JtID0gKGRvYykgPT4ge1xuICAgICAgICBpZiAoZG9jLl9pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBkb2MuX2lkID0gY29sbC5zLnBrRmFjdG9yeS5jcmVhdGVQaygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2M7XG4gICAgfTtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShkb2NPckRvY3MpID8gZG9jT3JEb2NzLm1hcCh0cmFuc2Zvcm0pIDogdHJhbnNmb3JtKGRvY09yRG9jcyk7XG59XG5leHBvcnRzLm1heWJlQWRkSWRUb0RvY3VtZW50cyA9IG1heWJlQWRkSWRUb0RvY3VtZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbl9mdW5jdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWF5YmVBZGRJZFRvRG9jdW1lbnRzIiwiaW5kZXhJbmZvcm1hdGlvbiIsImRiIiwibmFtZSIsIm9wdGlvbnMiLCJmdWxsIiwiaW5kZXhlcyIsImNvbGxlY3Rpb24iLCJsaXN0SW5kZXhlcyIsInRvQXJyYXkiLCJpbmZvIiwiaW5kZXgiLCJlbnRyaWVzIiwia2V5IiwiY29sbCIsImRvY09yRG9jcyIsImZvcmNlU2VydmVyT2JqZWN0SWQiLCJzIiwidHJhbnNmb3JtIiwiZG9jIiwiX2lkIiwicGtGYWN0b3J5IiwiY3JlYXRlUGsiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options){\n        super({\n            s: {\n                namespace: namespace\n            }\n        }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    get commandName() {\n        return \"count\";\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === \"number\") {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === \"number\") {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE\n]); //# sourceMappingURL=count.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsdUJBQXVCQyxVQUFVRyxnQkFBZ0I7SUFDbkRDLFlBQVlDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLENBQUU7UUFDcEMsS0FBSyxDQUFDO1lBQUVDLEdBQUc7Z0JBQUVILFdBQVdBO1lBQVU7UUFBRSxHQUFHRTtRQUN2QyxJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNFLGNBQWMsR0FBR0osVUFBVUssVUFBVTtRQUMxQyxJQUFJLENBQUNDLEtBQUssR0FBR0w7SUFDakI7SUFDQSxJQUFJTSxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTVIsVUFBVSxJQUFJLENBQUNBLE9BQU87UUFDNUIsTUFBTVMsTUFBTTtZQUNSQyxPQUFPLElBQUksQ0FBQ1IsY0FBYztZQUMxQkUsT0FBTyxJQUFJLENBQUNBLEtBQUs7UUFDckI7UUFDQSxJQUFJLE9BQU9KLFFBQVFXLEtBQUssS0FBSyxVQUFVO1lBQ25DRixJQUFJRSxLQUFLLEdBQUdYLFFBQVFXLEtBQUs7UUFDN0I7UUFDQSxJQUFJLE9BQU9YLFFBQVFZLElBQUksS0FBSyxVQUFVO1lBQ2xDSCxJQUFJRyxJQUFJLEdBQUdaLFFBQVFZLElBQUk7UUFDM0I7UUFDQSxJQUFJWixRQUFRYSxJQUFJLElBQUksTUFBTTtZQUN0QkosSUFBSUksSUFBSSxHQUFHYixRQUFRYSxJQUFJO1FBQzNCO1FBQ0EsSUFBSSxPQUFPYixRQUFRYyxTQUFTLEtBQUssVUFBVTtZQUN2Q0wsSUFBSUssU0FBUyxHQUFHZCxRQUFRYyxTQUFTO1FBQ3JDO1FBQ0EsTUFBTUMsU0FBUyxNQUFNLEtBQUssQ0FBQ0MsZUFBZVQsUUFBUUMsU0FBU0M7UUFDM0QsT0FBT00sU0FBU0EsT0FBT0UsQ0FBQyxHQUFHO0lBQy9CO0FBQ0o7QUFDQTNCLHNCQUFzQixHQUFHRTtBQUN4QixJQUFHRyxZQUFZdUIsYUFBYSxFQUFFMUIsZ0JBQWdCO0lBQUNHLFlBQVl3QixNQUFNLENBQUNDLGNBQWM7SUFBRXpCLFlBQVl3QixNQUFNLENBQUNFLFNBQVM7Q0FBQyxHQUNoSCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY291bnQuanM/NzIyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ291bnRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb3VudE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lc3BhY2UsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih7IHM6IHsgbmFtZXNwYWNlOiBuYW1lc3BhY2UgfSB9LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IG5hbWVzcGFjZS5jb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gZmlsdGVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY291bnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjbWQgPSB7XG4gICAgICAgICAgICBjb3VudDogdGhpcy5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5saW1pdCA9IG9wdGlvbnMubGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnNraXAgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQuc2tpcCA9IG9wdGlvbnMuc2tpcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5oaW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNtZC5oaW50ID0gb3B0aW9ucy5oaW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID8gcmVzdWx0Lm4gOiAwO1xuICAgIH1cbn1cbmV4cG9ydHMuQ291bnRPcGVyYXRpb24gPSBDb3VudE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDb3VudE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTiwgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y291bnQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ291bnRPcGVyYXRpb24iLCJjb21tYW5kXzEiLCJyZXF1aXJlIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lc3BhY2UiLCJmaWx0ZXIiLCJvcHRpb25zIiwicyIsImNvbGxlY3Rpb25OYW1lIiwiY29sbGVjdGlvbiIsInF1ZXJ5IiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImNtZCIsImNvdW50IiwibGltaXQiLCJza2lwIiwiaGludCIsIm1heFRpbWVNUyIsInJlc3VsdCIsImV4ZWN1dGVDb21tYW5kIiwibiIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJSRUFEX09QRVJBVElPTiIsIlJFVFJZQUJMRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count_documents.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count_documents.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CountDocumentsOperation = void 0;\nconst aggregate_1 = __webpack_require__(/*! ./aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\n/** @internal */ class CountDocumentsOperation extends aggregate_1.AggregateOperation {\n    constructor(collection, query, options){\n        const pipeline = [];\n        pipeline.push({\n            $match: query\n        });\n        if (typeof options.skip === \"number\") {\n            pipeline.push({\n                $skip: options.skip\n            });\n        }\n        if (typeof options.limit === \"number\") {\n            pipeline.push({\n                $limit: options.limit\n            });\n        }\n        pipeline.push({\n            $group: {\n                _id: 1,\n                n: {\n                    $sum: 1\n                }\n            }\n        });\n        super(collection.s.namespace, pipeline, options);\n    }\n    async execute(server, session) {\n        const result = await super.execute(server, session);\n        // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n        const response = result;\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n            return 0;\n        }\n        const docs = response.cursor.firstBatch;\n        return docs.length ? docs[0].n : 0;\n    }\n}\nexports.CountDocumentsOperation = CountDocumentsOperation; //# sourceMappingURL=count_documents.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudF9kb2N1bWVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELCtCQUErQixHQUFHLEtBQUs7QUFDdkMsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLGdDQUFnQ0MsWUFBWUUsa0JBQWtCO0lBQ2hFQyxZQUFZQyxVQUFVLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxDQUFFO1FBQ3BDLE1BQU1DLFdBQVcsRUFBRTtRQUNuQkEsU0FBU0MsSUFBSSxDQUFDO1lBQUVDLFFBQVFKO1FBQU07UUFDOUIsSUFBSSxPQUFPQyxRQUFRSSxJQUFJLEtBQUssVUFBVTtZQUNsQ0gsU0FBU0MsSUFBSSxDQUFDO2dCQUFFRyxPQUFPTCxRQUFRSSxJQUFJO1lBQUM7UUFDeEM7UUFDQSxJQUFJLE9BQU9KLFFBQVFNLEtBQUssS0FBSyxVQUFVO1lBQ25DTCxTQUFTQyxJQUFJLENBQUM7Z0JBQUVLLFFBQVFQLFFBQVFNLEtBQUs7WUFBQztRQUMxQztRQUNBTCxTQUFTQyxJQUFJLENBQUM7WUFBRU0sUUFBUTtnQkFBRUMsS0FBSztnQkFBR0MsR0FBRztvQkFBRUMsTUFBTTtnQkFBRTtZQUFFO1FBQUU7UUFDbkQsS0FBSyxDQUFDYixXQUFXYyxDQUFDLENBQUNDLFNBQVMsRUFBRVosVUFBVUQ7SUFDNUM7SUFDQSxNQUFNYyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxTQUFTLE1BQU0sS0FBSyxDQUFDSCxRQUFRQyxRQUFRQztRQUMzQyx1RUFBdUU7UUFDdkUsTUFBTUUsV0FBV0Q7UUFDakIsSUFBSUMsU0FBU0MsTUFBTSxJQUFJLFFBQVFELFNBQVNDLE1BQU0sQ0FBQ0MsVUFBVSxJQUFJLE1BQU07WUFDL0QsT0FBTztRQUNYO1FBQ0EsTUFBTUMsT0FBT0gsU0FBU0MsTUFBTSxDQUFDQyxVQUFVO1FBQ3ZDLE9BQU9DLEtBQUtDLE1BQU0sR0FBR0QsSUFBSSxDQUFDLEVBQUUsQ0FBQ1gsQ0FBQyxHQUFHO0lBQ3JDO0FBQ0o7QUFDQW5CLCtCQUErQixHQUFHRSx5QkFDbEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvdW50X2RvY3VtZW50cy5qcz8wMjU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3VudERvY3VtZW50c09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGFnZ3JlZ2F0ZV8xID0gcmVxdWlyZShcIi4vYWdncmVnYXRlXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ291bnREb2N1bWVudHNPcGVyYXRpb24gZXh0ZW5kcyBhZ2dyZWdhdGVfMS5BZ2dyZWdhdGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHBpcGVsaW5lID0gW107XG4gICAgICAgIHBpcGVsaW5lLnB1c2goeyAkbWF0Y2g6IHF1ZXJ5IH0pO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLnB1c2goeyAkc2tpcDogb3B0aW9ucy5za2lwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLnB1c2goeyAkbGltaXQ6IG9wdGlvbnMubGltaXQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcGlwZWxpbmUucHVzaCh7ICRncm91cDogeyBfaWQ6IDEsIG46IHsgJHN1bTogMSB9IH0gfSk7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIHBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICAvLyBOT1RFOiBXZSdyZSBhdm9pZGluZyBjcmVhdGluZyBhIGN1cnNvciBoZXJlIHRvIHJlZHVjZSB0aGUgY2FsbHN0YWNrLlxuICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc3VsdDtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmN1cnNvciA9PSBudWxsIHx8IHJlc3BvbnNlLmN1cnNvci5maXJzdEJhdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRvY3MgPSByZXNwb25zZS5jdXJzb3IuZmlyc3RCYXRjaDtcbiAgICAgICAgcmV0dXJuIGRvY3MubGVuZ3RoID8gZG9jc1swXS5uIDogMDtcbiAgICB9XG59XG5leHBvcnRzLkNvdW50RG9jdW1lbnRzT3BlcmF0aW9uID0gQ291bnREb2N1bWVudHNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudF9kb2N1bWVudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ291bnREb2N1bWVudHNPcGVyYXRpb24iLCJhZ2dyZWdhdGVfMSIsInJlcXVpcmUiLCJBZ2dyZWdhdGVPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb24iLCJxdWVyeSIsIm9wdGlvbnMiLCJwaXBlbGluZSIsInB1c2giLCIkbWF0Y2giLCJza2lwIiwiJHNraXAiLCJsaW1pdCIsIiRsaW1pdCIsIiRncm91cCIsIl9pZCIsIm4iLCIkc3VtIiwicyIsIm5hbWVzcGFjZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwicmVzdWx0IiwicmVzcG9uc2UiLCJjdXJzb3IiLCJmaXJzdEJhdGNoIiwiZG9jcyIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/create_collection.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/create_collection.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    \"w\",\n    \"wtimeout\",\n    \"j\",\n    \"fsync\",\n    \"autoIndexId\",\n    \"pkFactory\",\n    \"raw\",\n    \"readPreference\",\n    \"session\",\n    \"readConcern\",\n    \"writeConcern\",\n    \"raw\",\n    \"fieldsAsRaw\",\n    \"useBigInt64\",\n    \"promoteLongs\",\n    \"promoteValues\",\n    \"promoteBuffers\",\n    \"bsonRegExp\",\n    \"serializeFunctions\",\n    \"ignoreUndefined\",\n    \"enableUtf8Validation\"\n]);\n/* @internal */ const INVALID_QE_VERSION = \"Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.\";\n/** @internal */ class CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}){\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return \"create\";\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ?? db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced && server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [\n                escCollection,\n                ecocCollection\n            ]){\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: {\n                            _id: 1\n                        },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n            }\n            if (!options.encryptedFields) {\n                this.options = {\n                    ...this.options,\n                    encryptedFields\n                };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = new indexes_1.CreateIndexOperation(db, name, {\n                __safeContent__: 1\n            }, {});\n            await createIndexOp.execute(server, session);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = {\n            create: name\n        };\n        for(const n in options){\n            if (options[n] != null && typeof options[n] !== \"function\" && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=create_collection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jcmVhdGVfY29sbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUNBQWlDLEdBQUcsS0FBSztBQUN6QyxNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyx5R0FBaUM7QUFDN0QsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUMscUVBQWU7QUFDNUMsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUcsWUFBWUgsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsTUFBTUksWUFBWUosbUJBQU9BLENBQUMseUVBQVc7QUFDckMsTUFBTUssY0FBY0wsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsTUFBTU0seUJBQXlCLElBQUlDLElBQUk7SUFDbkM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxhQUFhLEdBQ2IsTUFBTUMscUJBQXFCO0FBQzNCLGNBQWMsR0FDZCxNQUFNVixrQ0FBa0NLLFVBQVVNLGdCQUFnQjtJQUM5REMsWUFBWUMsRUFBRSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDaEMsS0FBSyxDQUFDRixJQUFJRTtRQUNWLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0YsRUFBRSxHQUFHQTtRQUNWLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtJQUNoQjtJQUNBLElBQUlFLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNTixLQUFLLElBQUksQ0FBQ0EsRUFBRTtRQUNsQixNQUFNQyxPQUFPLElBQUksQ0FBQ0EsSUFBSTtRQUN0QixNQUFNQyxVQUFVLElBQUksQ0FBQ0EsT0FBTztRQUM1QixNQUFNSyxrQkFBa0JMLFFBQVFLLGVBQWUsSUFDM0NQLEdBQUdRLE1BQU0sQ0FBQ04sT0FBTyxDQUFDTyxjQUFjLEVBQUVDLG9CQUFvQixDQUFDLENBQUMsRUFBRVYsR0FBR1csWUFBWSxDQUFDLENBQUMsRUFBRVYsS0FBSyxDQUFDLENBQUM7UUFDeEYsSUFBSU0saUJBQWlCO1lBQ2pCLHdEQUF3RDtZQUN4RCxpRUFBaUU7WUFDakUsSUFBSSxDQUFDRixPQUFPTyxZQUFZLElBQ3BCUCxPQUFPUSxXQUFXLENBQUNDLGNBQWMsR0FBRzFCLFlBQVkyQiw2QkFBNkIsRUFBRTtnQkFDL0UsTUFBTSxJQUFJeEIsUUFBUXlCLHVCQUF1QixDQUFDLENBQUMsRUFBRW5CLG1CQUFtQix3Q0FBd0MsRUFBRVQsWUFBWTZCLCtCQUErQixDQUFDLENBQUM7WUFDM0o7WUFDQSxrRUFBa0U7WUFDbEUsTUFBTUMsZ0JBQWdCWCxnQkFBZ0JXLGFBQWEsSUFBSSxDQUFDLFFBQVEsRUFBRWpCLEtBQUssSUFBSSxDQUFDO1lBQzVFLE1BQU1rQixpQkFBaUJaLGdCQUFnQlksY0FBYyxJQUFJLENBQUMsUUFBUSxFQUFFbEIsS0FBSyxLQUFLLENBQUM7WUFDL0UsS0FBSyxNQUFNbUIsa0JBQWtCO2dCQUFDRjtnQkFBZUM7YUFBZSxDQUFFO2dCQUMxRCxNQUFNRSxXQUFXLElBQUlsQywwQkFBMEJhLElBQUlvQixnQkFBZ0I7b0JBQy9ERSxnQkFBZ0I7d0JBQ1pDLEtBQUs7NEJBQUVDLEtBQUs7d0JBQUU7d0JBQ2RDLFFBQVE7b0JBQ1o7Z0JBQ0o7Z0JBQ0EsTUFBTUosU0FBU0ssa0NBQWtDLENBQUNyQixRQUFRQztZQUM5RDtZQUNBLElBQUksQ0FBQ0osUUFBUUssZUFBZSxFQUFFO2dCQUMxQixJQUFJLENBQUNMLE9BQU8sR0FBRztvQkFBRSxHQUFHLElBQUksQ0FBQ0EsT0FBTztvQkFBRUs7Z0JBQWdCO1lBQ3REO1FBQ0o7UUFDQSxNQUFNb0IsT0FBTyxNQUFNLElBQUksQ0FBQ0Qsa0NBQWtDLENBQUNyQixRQUFRQztRQUNuRSxJQUFJQyxpQkFBaUI7WUFDakIsOERBQThEO1lBQzlELE1BQU1xQixnQkFBZ0IsSUFBSW5DLFVBQVVvQyxvQkFBb0IsQ0FBQzdCLElBQUlDLE1BQU07Z0JBQUU2QixpQkFBaUI7WUFBRSxHQUFHLENBQUM7WUFDNUYsTUFBTUYsY0FBY3hCLE9BQU8sQ0FBQ0MsUUFBUUM7UUFDeEM7UUFDQSxPQUFPcUI7SUFDWDtJQUNBLE1BQU1ELG1DQUFtQ3JCLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3RELE1BQU1OLEtBQUssSUFBSSxDQUFDQSxFQUFFO1FBQ2xCLE1BQU1DLE9BQU8sSUFBSSxDQUFDQSxJQUFJO1FBQ3RCLE1BQU1DLFVBQVUsSUFBSSxDQUFDQSxPQUFPO1FBQzVCLE1BQU02QixNQUFNO1lBQUVDLFFBQVEvQjtRQUFLO1FBQzNCLElBQUssTUFBTWdDLEtBQUsvQixRQUFTO1lBQ3JCLElBQUlBLE9BQU8sQ0FBQytCLEVBQUUsSUFBSSxRQUNkLE9BQU8vQixPQUFPLENBQUMrQixFQUFFLEtBQUssY0FDdEIsQ0FBQ3RDLHVCQUF1QnVDLEdBQUcsQ0FBQ0QsSUFBSTtnQkFDaENGLEdBQUcsQ0FBQ0UsRUFBRSxHQUFHL0IsT0FBTyxDQUFDK0IsRUFBRTtZQUN2QjtRQUNKO1FBQ0EscUNBQXFDO1FBQ3JDLE1BQU0sS0FBSyxDQUFDRSxlQUFlOUIsUUFBUUMsU0FBU3lCO1FBQzVDLE9BQU8sSUFBSXpDLGFBQWE4QyxVQUFVLENBQUNwQyxJQUFJQyxNQUFNQztJQUNqRDtBQUNKO0FBQ0FqQixpQ0FBaUMsR0FBR0U7QUFDbkMsSUFBR08sWUFBWTJDLGFBQWEsRUFBRWxELDJCQUEyQjtJQUFDTyxZQUFZNEMsTUFBTSxDQUFDQyxlQUFlO0NBQUMsR0FDOUYsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9jb2xsZWN0aW9uLmpzP2VjZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jbWFwL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzXCIpO1xuY29uc3QgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2NvbGxlY3Rpb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IGluZGV4ZXNfMSA9IHJlcXVpcmUoXCIuL2luZGV4ZXNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbmNvbnN0IElMTEVHQUxfQ09NTUFORF9GSUVMRFMgPSBuZXcgU2V0KFtcbiAgICAndycsXG4gICAgJ3d0aW1lb3V0JyxcbiAgICAnaicsXG4gICAgJ2ZzeW5jJyxcbiAgICAnYXV0b0luZGV4SWQnLFxuICAgICdwa0ZhY3RvcnknLFxuICAgICdyYXcnLFxuICAgICdyZWFkUHJlZmVyZW5jZScsXG4gICAgJ3Nlc3Npb24nLFxuICAgICdyZWFkQ29uY2VybicsXG4gICAgJ3dyaXRlQ29uY2VybicsXG4gICAgJ3JhdycsXG4gICAgJ2ZpZWxkc0FzUmF3JyxcbiAgICAndXNlQmlnSW50NjQnLFxuICAgICdwcm9tb3RlTG9uZ3MnLFxuICAgICdwcm9tb3RlVmFsdWVzJyxcbiAgICAncHJvbW90ZUJ1ZmZlcnMnLFxuICAgICdic29uUmVnRXhwJyxcbiAgICAnc2VyaWFsaXplRnVuY3Rpb25zJyxcbiAgICAnaWdub3JlVW5kZWZpbmVkJyxcbiAgICAnZW5hYmxlVXRmOFZhbGlkYXRpb24nXG5dKTtcbi8qIEBpbnRlcm5hbCAqL1xuY29uc3QgSU5WQUxJRF9RRV9WRVJTSU9OID0gJ0RyaXZlciBzdXBwb3J0IG9mIFF1ZXJ5YWJsZSBFbmNyeXB0aW9uIGlzIGluY29tcGF0aWJsZSB3aXRoIHNlcnZlci4gVXBncmFkZSBzZXJ2ZXIgdG8gdXNlIFF1ZXJ5YWJsZSBFbmNyeXB0aW9uLic7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdjcmVhdGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZEZpZWxkcyA9IG9wdGlvbnMuZW5jcnlwdGVkRmllbGRzID8/XG4gICAgICAgICAgICBkYi5jbGllbnQub3B0aW9ucy5hdXRvRW5jcnlwdGlvbj8uZW5jcnlwdGVkRmllbGRzTWFwPy5bYCR7ZGIuZGF0YWJhc2VOYW1lfS4ke25hbWV9YF07XG4gICAgICAgIGlmIChlbmNyeXB0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgIC8vIENyZWF0aW5nIGEgUUUgY29sbGVjdGlvbiByZXF1aXJlZCBtaW4gc2VydmVyIG9mIDcuMC4wXG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtNTM1Myk6IEdldCB3aXJlIHZlcnNpb24gaW5mb3JtYXRpb24gZnJvbSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgaWYgKCFzZXJ2ZXIubG9hZEJhbGFuY2VkICYmXG4gICAgICAgICAgICAgICAgc2VydmVyLmRlc2NyaXB0aW9uLm1heFdpcmVWZXJzaW9uIDwgY29uc3RhbnRzXzEuTUlOX1NVUFBPUlRFRF9RRV9XSVJFX1ZFUlNJT04pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcihgJHtJTlZBTElEX1FFX1ZFUlNJT059IFRoZSBtaW5pbXVtIHNlcnZlciB2ZXJzaW9uIHJlcXVpcmVkIGlzICR7Y29uc3RhbnRzXzEuTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhdXhpbGxpYXJ5IGNvbGxlY3Rpb25zIGZvciBxdWVyeWFibGUgZW5jcnlwdGlvbiBzdXBwb3J0LlxuICAgICAgICAgICAgY29uc3QgZXNjQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lc2NDb2xsZWN0aW9uID8/IGBlbnhjb2xfLiR7bmFtZX0uZXNjYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVjb2NDb2xsZWN0aW9uID8/IGBlbnhjb2xfLiR7bmFtZX0uZWNvY2A7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb25OYW1lIG9mIFtlc2NDb2xsZWN0aW9uLCBlY29jQ29sbGVjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVPcCA9IG5ldyBDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uKGRiLCBjb2xsZWN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyZWRJbmRleDoge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB7IF9pZDogMSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhd2FpdCBjcmVhdGVPcC5leGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZW5jcnlwdGVkRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIGVuY3J5cHRlZEZpZWxkcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGwgPSBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSByZXF1aXJlZCBpbmRleCBmb3IgcXVlcnlhYmxlIGVuY3J5cHRpb24gc3VwcG9ydC5cbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUluZGV4T3AgPSBuZXcgaW5kZXhlc18xLkNyZWF0ZUluZGV4T3BlcmF0aW9uKGRiLCBuYW1lLCB7IF9fc2FmZUNvbnRlbnRfXzogMSB9LCB7fSk7XG4gICAgICAgICAgICBhd2FpdCBjcmVhdGVJbmRleE9wLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbDtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjbWQgPSB7IGNyZWF0ZTogbmFtZSB9O1xuICAgICAgICBmb3IgKGNvbnN0IG4gaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnNbbl0gIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zW25dICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgIUlMTEVHQUxfQ09NTUFORF9GSUVMRFMuaGFzKG4pKSB7XG4gICAgICAgICAgICAgICAgY21kW25dID0gb3B0aW9uc1tuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBvdGhlcndpc2UganVzdCBleGVjdXRlIHRoZSBjb21tYW5kXG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbihkYiwgbmFtZSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlX2NvbGxlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiIsImNvbnN0YW50c18xIiwicmVxdWlyZSIsImNvbGxlY3Rpb25fMSIsImVycm9yXzEiLCJjb21tYW5kXzEiLCJpbmRleGVzXzEiLCJvcGVyYXRpb25fMSIsIklMTEVHQUxfQ09NTUFORF9GSUVMRFMiLCJTZXQiLCJJTlZBTElEX1FFX1ZFUlNJT04iLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkYiIsIm5hbWUiLCJvcHRpb25zIiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImVuY3J5cHRlZEZpZWxkcyIsImNsaWVudCIsImF1dG9FbmNyeXB0aW9uIiwiZW5jcnlwdGVkRmllbGRzTWFwIiwiZGF0YWJhc2VOYW1lIiwibG9hZEJhbGFuY2VkIiwiZGVzY3JpcHRpb24iLCJtYXhXaXJlVmVyc2lvbiIsIk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OIiwiTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IiLCJNSU5fU1VQUE9SVEVEX1FFX1NFUlZFUl9WRVJTSU9OIiwiZXNjQ29sbGVjdGlvbiIsImVjb2NDb2xsZWN0aW9uIiwiY29sbGVjdGlvbk5hbWUiLCJjcmVhdGVPcCIsImNsdXN0ZXJlZEluZGV4Iiwia2V5IiwiX2lkIiwidW5pcXVlIiwiZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayIsImNvbGwiLCJjcmVhdGVJbmRleE9wIiwiQ3JlYXRlSW5kZXhPcGVyYXRpb24iLCJfX3NhZmVDb250ZW50X18iLCJjbWQiLCJjcmVhdGUiLCJuIiwiaGFzIiwiZXhlY3V0ZUNvbW1hbmQiLCJDb2xsZWN0aW9uIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIldSSVRFX09QRVJBVElPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/delete.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/delete.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options){\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return \"delete\";\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every((op)=>op.limit != null ? op.limit > 0 : true);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === \"boolean\" ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o)=>o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options){\n        super(collection.s.namespace, [\n            makeDeleteStatement(filter, {\n                ...options,\n                limit: 1\n            })\n        ], options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options){\n        super(collection.s.namespace, [\n            makeDeleteStatement(filter, options)\n        ], options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === \"number\" ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]); //# sourceMappingURL=delete.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kZWxldGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwyQkFBMkIsR0FBR0EsMEJBQTBCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDeEgsTUFBTU0sVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLHdCQUF3QkcsVUFBVUUsZ0JBQWdCO0lBQ3BEQyxZQUFZQyxFQUFFLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQ2pDLEtBQUssQ0FBQ0MsV0FBV0Q7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRixFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0EsSUFBSUcsY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLElBQUlDLGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQ0Esa0JBQWtCLE9BQU87WUFDL0IsT0FBTztRQUNYO1FBQ0EsT0FBTyxJQUFJLENBQUNKLFVBQVUsQ0FBQ0ssS0FBSyxDQUFDQyxDQUFBQSxLQUFPQSxHQUFHQyxLQUFLLElBQUksT0FBT0QsR0FBR0MsS0FBSyxHQUFHLElBQUk7SUFDMUU7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNVCxVQUFVLElBQUksQ0FBQ0EsT0FBTyxJQUFJLENBQUM7UUFDakMsTUFBTVUsVUFBVSxPQUFPVixRQUFRVSxPQUFPLEtBQUssWUFBWVYsUUFBUVUsT0FBTyxHQUFHO1FBQ3pFLE1BQU1DLFVBQVU7WUFDWkMsUUFBUSxJQUFJLENBQUNkLEVBQUUsQ0FBQ2UsVUFBVTtZQUMxQkMsU0FBUyxJQUFJLENBQUNmLFVBQVU7WUFDeEJXO1FBQ0o7UUFDQSxJQUFJVixRQUFRZSxHQUFHLEVBQUU7WUFDYkosUUFBUUksR0FBRyxHQUFHZixRQUFRZSxHQUFHO1FBQzdCO1FBQ0EsaUVBQWlFO1FBQ2pFLGdEQUFnRDtRQUNoRCxJQUFJZixRQUFRZ0IsT0FBTyxLQUFLZixXQUFXO1lBQy9CVSxRQUFRSyxPQUFPLEdBQUdoQixRQUFRZ0IsT0FBTztRQUNyQztRQUNBLE1BQU1DLHNCQUFzQixJQUFJLENBQUNDLFlBQVksSUFBSSxJQUFJLENBQUNBLFlBQVksQ0FBQ0MsQ0FBQyxLQUFLO1FBQ3pFLElBQUlGLHFCQUFxQjtZQUNyQixJQUFJLElBQUksQ0FBQ2xCLFVBQVUsQ0FBQ3FCLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJLEdBQUc7Z0JBQ3JDLGlFQUFpRTtnQkFDakUsTUFBTSxJQUFJOUIsUUFBUStCLHVCQUF1QixDQUFDLENBQUMsZ0RBQWdELENBQUM7WUFDaEc7UUFDSjtRQUNBLE9BQU8sS0FBSyxDQUFDQyxlQUFlaEIsUUFBUUMsU0FBU0U7SUFDakQ7QUFDSjtBQUNBekIsdUJBQXVCLEdBQUdLO0FBQzFCLE1BQU1ELDJCQUEyQkM7SUFDN0JNLFlBQVlnQixVQUFVLEVBQUVZLE1BQU0sRUFBRXpCLE9BQU8sQ0FBRTtRQUNyQyxLQUFLLENBQUNhLFdBQVdhLENBQUMsQ0FBQ0MsU0FBUyxFQUFFO1lBQUN2QyxvQkFBb0JxQyxRQUFRO2dCQUFFLEdBQUd6QixPQUFPO2dCQUFFTSxPQUFPO1lBQUU7U0FBRyxFQUFFTjtJQUMzRjtJQUNBLE1BQU1PLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1tQixNQUFPLE1BQU0sS0FBSyxDQUFDckIsUUFBUUMsUUFBUUM7UUFDekMsSUFBSSxJQUFJLENBQUNvQixPQUFPLEVBQ1osT0FBT0Q7UUFDWCxJQUFJQSxJQUFJRSxJQUFJLEVBQ1IsTUFBTSxJQUFJdEMsUUFBUXVDLGdCQUFnQixDQUFDSDtRQUN2QyxJQUFJQSxJQUFJSSxXQUFXLEVBQ2YsTUFBTSxJQUFJeEMsUUFBUXVDLGdCQUFnQixDQUFDSCxJQUFJSSxXQUFXLENBQUMsRUFBRTtRQUN6RCxPQUFPO1lBQ0hDLGNBQWMsSUFBSSxDQUFDZixZQUFZLEVBQUVDLE1BQU07WUFDdkNlLGNBQWNOLElBQUlPLENBQUM7UUFDdkI7SUFDSjtBQUNKO0FBQ0FqRCwwQkFBMEIsR0FBR0k7QUFDN0IsTUFBTUQsNEJBQTRCRTtJQUM5Qk0sWUFBWWdCLFVBQVUsRUFBRVksTUFBTSxFQUFFekIsT0FBTyxDQUFFO1FBQ3JDLEtBQUssQ0FBQ2EsV0FBV2EsQ0FBQyxDQUFDQyxTQUFTLEVBQUU7WUFBQ3ZDLG9CQUFvQnFDLFFBQVF6QjtTQUFTLEVBQUVBO0lBQzFFO0lBQ0EsTUFBTU8sUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTW1CLE1BQU8sTUFBTSxLQUFLLENBQUNyQixRQUFRQyxRQUFRQztRQUN6QyxJQUFJLElBQUksQ0FBQ29CLE9BQU8sRUFDWixPQUFPRDtRQUNYLElBQUlBLElBQUlFLElBQUksRUFDUixNQUFNLElBQUl0QyxRQUFRdUMsZ0JBQWdCLENBQUNIO1FBQ3ZDLElBQUlBLElBQUlJLFdBQVcsRUFDZixNQUFNLElBQUl4QyxRQUFRdUMsZ0JBQWdCLENBQUNILElBQUlJLFdBQVcsQ0FBQyxFQUFFO1FBQ3pELE9BQU87WUFDSEMsY0FBYyxJQUFJLENBQUNmLFlBQVksRUFBRUMsTUFBTTtZQUN2Q2UsY0FBY04sSUFBSU8sQ0FBQztRQUN2QjtJQUNKO0FBQ0o7QUFDQWpELDJCQUEyQixHQUFHRztBQUM5QixTQUFTRCxvQkFBb0JxQyxNQUFNLEVBQUV6QixPQUFPO0lBQ3hDLE1BQU1LLEtBQUs7UUFDUCtCLEdBQUdYO1FBQ0huQixPQUFPLE9BQU9OLFFBQVFNLEtBQUssS0FBSyxXQUFXTixRQUFRTSxLQUFLLEdBQUc7SUFDL0Q7SUFDQSxJQUFJTixRQUFRcUMsU0FBUyxFQUFFO1FBQ25CaEMsR0FBR2dDLFNBQVMsR0FBR3JDLFFBQVFxQyxTQUFTO0lBQ3BDO0lBQ0EsSUFBSXJDLFFBQVFzQixJQUFJLEVBQUU7UUFDZGpCLEdBQUdpQixJQUFJLEdBQUd0QixRQUFRc0IsSUFBSTtJQUMxQjtJQUNBLE9BQU9qQjtBQUNYO0FBQ0FuQiwyQkFBMkIsR0FBR0U7QUFDN0IsSUFBR08sWUFBWTJDLGFBQWEsRUFBRS9DLGlCQUFpQjtJQUFDSSxZQUFZNEMsTUFBTSxDQUFDQyxTQUFTO0lBQUU3QyxZQUFZNEMsTUFBTSxDQUFDRSxlQUFlO0NBQUM7QUFDakgsSUFBRzlDLFlBQVkyQyxhQUFhLEVBQUVoRCxvQkFBb0I7SUFDL0NLLFlBQVk0QyxNQUFNLENBQUNDLFNBQVM7SUFDNUI3QyxZQUFZNEMsTUFBTSxDQUFDRSxlQUFlO0lBQ2xDOUMsWUFBWTRDLE1BQU0sQ0FBQ0csV0FBVztJQUM5Qi9DLFlBQVk0QyxNQUFNLENBQUNJLGNBQWM7Q0FDcEM7QUFDQSxJQUFHaEQsWUFBWTJDLGFBQWEsRUFBRWpELHFCQUFxQjtJQUNoRE0sWUFBWTRDLE1BQU0sQ0FBQ0UsZUFBZTtJQUNsQzlDLFlBQVk0QyxNQUFNLENBQUNHLFdBQVc7SUFDOUIvQyxZQUFZNEMsTUFBTSxDQUFDSSxjQUFjO0NBQ3BDLEdBQ0Qsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2RlbGV0ZS5qcz9kMjM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYWtlRGVsZXRlU3RhdGVtZW50ID0gZXhwb3J0cy5EZWxldGVNYW55T3BlcmF0aW9uID0gZXhwb3J0cy5EZWxldGVPbmVPcGVyYXRpb24gPSBleHBvcnRzLkRlbGV0ZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEZWxldGVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIHN0YXRlbWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLnN0YXRlbWVudHMgPSBzdGF0ZW1lbnRzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZGVsZXRlJztcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIGlmIChzdXBlci5jYW5SZXRyeVdyaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHMuZXZlcnkob3AgPT4gKG9wLmxpbWl0ICE9IG51bGwgPyBvcC5saW1pdCA+IDAgOiB0cnVlKSk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPz8ge307XG4gICAgICAgIGNvbnN0IG9yZGVyZWQgPSB0eXBlb2Ygb3B0aW9ucy5vcmRlcmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLm9yZGVyZWQgOiB0cnVlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgZGVsZXRlOiB0aGlzLm5zLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBkZWxldGVzOiB0aGlzLnN0YXRlbWVudHMsXG4gICAgICAgICAgICBvcmRlcmVkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zLmxldCkge1xuICAgICAgICAgICAgY29tbWFuZC5sZXQgPSBvcHRpb25zLmxldDtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKG9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdW5hY2tub3dsZWRnZWRXcml0ZSA9IHRoaXMud3JpdGVDb25jZXJuICYmIHRoaXMud3JpdGVDb25jZXJuLncgPT09IDA7XG4gICAgICAgIGlmICh1bmFja25vd2xlZGdlZFdyaXRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZW1lbnRzLmZpbmQoKG8pID0+IG8uaGludCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPKE5PREUtMzU0MSk6IGZpeCBlcnJvciBmb3IgaGludCB3aXRoIHVuYWNrbm93bGVkZ2VkIHdyaXRlc1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKGBoaW50IGlzIG5vdCBzdXBwb3J0ZWQgd2l0aCB1bmFja25vd2xlZGdlZCB3cml0ZXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkRlbGV0ZU9wZXJhdGlvbiA9IERlbGV0ZU9wZXJhdGlvbjtcbmNsYXNzIERlbGV0ZU9uZU9wZXJhdGlvbiBleHRlbmRzIERlbGV0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIFttYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgeyAuLi5vcHRpb25zLCBsaW1pdDogMSB9KV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSAoYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbilcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBkZWxldGVkQ291bnQ6IHJlcy5uXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVPbmVPcGVyYXRpb24gPSBEZWxldGVPbmVPcGVyYXRpb247XG5jbGFzcyBEZWxldGVNYW55T3BlcmF0aW9uIGV4dGVuZHMgRGVsZXRlT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgW21ha2VEZWxldGVTdGF0ZW1lbnQoZmlsdGVyLCBvcHRpb25zKV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSAoYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbilcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBkZWxldGVkQ291bnQ6IHJlcy5uXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVNYW55T3BlcmF0aW9uID0gRGVsZXRlTWFueU9wZXJhdGlvbjtcbmZ1bmN0aW9uIG1ha2VEZWxldGVTdGF0ZW1lbnQoZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3AgPSB7XG4gICAgICAgIHE6IGZpbHRlcixcbiAgICAgICAgbGltaXQ6IHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMubGltaXQgOiAwXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24pIHtcbiAgICAgICAgb3AuY29sbGF0aW9uID0gb3B0aW9ucy5jb2xsYXRpb247XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmhpbnQpIHtcbiAgICAgICAgb3AuaGludCA9IG9wdGlvbnMuaGludDtcbiAgICB9XG4gICAgcmV0dXJuIG9wO1xufVxuZXhwb3J0cy5tYWtlRGVsZXRlU3RhdGVtZW50ID0gbWFrZURlbGV0ZVN0YXRlbWVudDtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEZWxldGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGVsZXRlT25lT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT05cbl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERlbGV0ZU1hbnlPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT05cbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsZXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1ha2VEZWxldGVTdGF0ZW1lbnQiLCJEZWxldGVNYW55T3BlcmF0aW9uIiwiRGVsZXRlT25lT3BlcmF0aW9uIiwiRGVsZXRlT3BlcmF0aW9uIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJjb21tYW5kXzEiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsIm5zIiwic3RhdGVtZW50cyIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJjb21tYW5kTmFtZSIsImNhblJldHJ5V3JpdGUiLCJldmVyeSIsIm9wIiwibGltaXQiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsIm9yZGVyZWQiLCJjb21tYW5kIiwiZGVsZXRlIiwiY29sbGVjdGlvbiIsImRlbGV0ZXMiLCJsZXQiLCJjb21tZW50IiwidW5hY2tub3dsZWRnZWRXcml0ZSIsIndyaXRlQ29uY2VybiIsInciLCJmaW5kIiwibyIsImhpbnQiLCJNb25nb0NvbXBhdGliaWxpdHlFcnJvciIsImV4ZWN1dGVDb21tYW5kIiwiZmlsdGVyIiwicyIsIm5hbWVzcGFjZSIsInJlcyIsImV4cGxhaW4iLCJjb2RlIiwiTW9uZ29TZXJ2ZXJFcnJvciIsIndyaXRlRXJyb3JzIiwiYWNrbm93bGVkZ2VkIiwiZGVsZXRlZENvdW50IiwibiIsInEiLCJjb2xsYXRpb24iLCJkZWZpbmVBc3BlY3RzIiwiQXNwZWN0IiwiUkVUUllBQkxFIiwiV1JJVEVfT1BFUkFUSU9OIiwiRVhQTEFJTkFCTEUiLCJTS0lQX0NPTExBVElPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/delete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/distinct.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/distinct.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DistinctOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */ class DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */ constructor(collection, key, query, options){\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    get commandName() {\n        return \"distinct\";\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== \"undefined\") {\n            cmd.comment = options.comment;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]); //# sourceMappingURL=distinct.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kaXN0aW5jdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUcsS0FBSztBQUNqQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6Qzs7O0NBR0MsR0FDRCxNQUFNRiwwQkFBMEJHLFVBQVVFLGdCQUFnQjtJQUN0RDs7Ozs7OztLQU9DLEdBQ0RDLFlBQVlDLFVBQVUsRUFBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sQ0FBRTtRQUN6QyxLQUFLLENBQUNILFlBQVlHO1FBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDSCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtJQUNqQjtJQUNBLElBQUlFLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxPQUFPLElBQUksQ0FBQ1IsVUFBVTtRQUM1QixNQUFNQyxNQUFNLElBQUksQ0FBQ0EsR0FBRztRQUNwQixNQUFNQyxRQUFRLElBQUksQ0FBQ0EsS0FBSztRQUN4QixNQUFNQyxVQUFVLElBQUksQ0FBQ0EsT0FBTztRQUM1QixtQkFBbUI7UUFDbkIsTUFBTU0sTUFBTTtZQUNSQyxVQUFVRixLQUFLRyxjQUFjO1lBQzdCVixLQUFLQTtZQUNMQyxPQUFPQTtRQUNYO1FBQ0EsMkJBQTJCO1FBQzNCLElBQUksT0FBT0MsUUFBUVMsU0FBUyxLQUFLLFVBQVU7WUFDdkNILElBQUlHLFNBQVMsR0FBR1QsUUFBUVMsU0FBUztRQUNyQztRQUNBLGlFQUFpRTtRQUNqRSxnREFBZ0Q7UUFDaEQsSUFBSSxPQUFPVCxRQUFRVSxPQUFPLEtBQUssYUFBYTtZQUN4Q0osSUFBSUksT0FBTyxHQUFHVixRQUFRVSxPQUFPO1FBQ2pDO1FBQ0EscUNBQXFDO1FBQ3BDLElBQUduQixRQUFRb0IsdUJBQXVCLEVBQUVMLEtBQUtELE1BQU1MO1FBQ2hELDhCQUE4QjtRQUM3QixJQUFHVCxRQUFRcUIscUJBQXFCLEVBQUVOLEtBQUtELE1BQU1MO1FBQzlDLE1BQU1hLFNBQVMsTUFBTSxLQUFLLENBQUNDLGVBQWVYLFFBQVFDLFNBQVNFO1FBQzNELE9BQU8sSUFBSSxDQUFDUyxPQUFPLEdBQUdGLFNBQVNBLE9BQU9HLE1BQU07SUFDaEQ7QUFDSjtBQUNBNUIseUJBQXlCLEdBQUdFO0FBQzNCLElBQUdJLFlBQVl1QixhQUFhLEVBQUUzQixtQkFBbUI7SUFBQ0ksWUFBWXdCLE1BQU0sQ0FBQ0MsY0FBYztJQUFFekIsWUFBWXdCLE1BQU0sQ0FBQ0UsU0FBUztJQUFFMUIsWUFBWXdCLE1BQU0sQ0FBQ0csV0FBVztDQUFDLEdBQ25KLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kaXN0aW5jdC5qcz9kMTk4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EaXN0aW5jdE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKipcbiAqIFJldHVybiBhIGxpc3Qgb2YgZGlzdGluY3QgdmFsdWVzIGZvciB0aGUgZ2l2ZW4ga2V5IGFjcm9zcyBhIGNvbGxlY3Rpb24uXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgRGlzdGluY3RPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgRGlzdGluY3Qgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb24gLSBDb2xsZWN0aW9uIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBrZXkgLSBGaWVsZCBvZiB0aGUgZG9jdW1lbnQgdG8gZmluZCBkaXN0aW5jdCB2YWx1ZXMgZm9yLlxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeSBmb3IgZmlsdGVyaW5nIHRoZSBzZXQgb2YgZG9jdW1lbnRzIHRvIHdoaWNoIHdlIGFwcGx5IHRoZSBkaXN0aW5jdCBmaWx0ZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncy4gU2VlIENvbGxlY3Rpb24ucHJvdG90eXBlLmRpc3RpbmN0IGZvciBhIGxpc3Qgb2Ygb3B0aW9ucy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBrZXksIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZGlzdGluY3QnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmtleTtcbiAgICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAvLyBEaXN0aW5jdCBjb21tYW5kXG4gICAgICAgIGNvbnN0IGNtZCA9IHtcbiAgICAgICAgICAgIGRpc3RpbmN0OiBjb2xsLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQWRkIG1heFRpbWVNUyBpZiBkZWZpbmVkXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb21tZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG8gd2UgaGF2ZSBhIHJlYWRDb25jZXJuIHNwZWNpZmllZFxuICAgICAgICAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhSZWFkQ29uY2VybikoY21kLCBjb2xsLCBvcHRpb25zKTtcbiAgICAgICAgLy8gSGF2ZSB3ZSBzcGVjaWZpZWQgY29sbGF0aW9uXG4gICAgICAgICgwLCB1dGlsc18xLmRlY29yYXRlV2l0aENvbGxhdGlvbikoY21kLCBjb2xsLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5leHBsYWluID8gcmVzdWx0IDogcmVzdWx0LnZhbHVlcztcbiAgICB9XG59XG5leHBvcnRzLkRpc3RpbmN0T3BlcmF0aW9uID0gRGlzdGluY3RPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGlzdGluY3RPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGlzdGluY3RPcGVyYXRpb24iLCJ1dGlsc18xIiwicmVxdWlyZSIsImNvbW1hbmRfMSIsIm9wZXJhdGlvbl8xIiwiQ29tbWFuZE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsImtleSIsInF1ZXJ5Iiwib3B0aW9ucyIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJjb2xsIiwiY21kIiwiZGlzdGluY3QiLCJjb2xsZWN0aW9uTmFtZSIsIm1heFRpbWVNUyIsImNvbW1lbnQiLCJkZWNvcmF0ZVdpdGhSZWFkQ29uY2VybiIsImRlY29yYXRlV2l0aENvbGxhdGlvbiIsInJlc3VsdCIsImV4ZWN1dGVDb21tYW5kIiwiZXhwbGFpbiIsInZhbHVlcyIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJSRUFEX09QRVJBVElPTiIsIlJFVFJZQUJMRSIsIkVYUExBSU5BQkxFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/distinct.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/drop.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/drop.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}){\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    get commandName() {\n        return \"drop\";\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db.listCollections({\n                name\n            }, {\n                nameOnly: false\n            }).toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [\n                escCollection,\n                ecocCollection\n            ]){\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                } catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) || err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return this.executeWithoutEncryptedFieldsCheck(server, session);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        await super.executeCommand(server, session, {\n            drop: this.name\n        });\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */ class DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return \"dropDatabase\";\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, {\n            dropDatabase: 1\n        });\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=drop.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/estimated_document_count.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}){\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    get commandName() {\n        return \"count\";\n    }\n    async execute(server, session) {\n        const cmd = {\n            count: this.collectionName\n        };\n        if (typeof this.options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=estimated_document_count.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVDQUF1QyxHQUFHLEtBQUs7QUFDL0MsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLHdDQUF3Q0MsVUFBVUcsZ0JBQWdCO0lBQ3BFQyxZQUFZQyxVQUFVLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDbEMsS0FBSyxDQUFDRCxZQUFZQztRQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLGNBQWMsR0FBR0YsV0FBV0UsY0FBYztJQUNuRDtJQUNBLElBQUlDLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxNQUFNO1lBQUVDLE9BQU8sSUFBSSxDQUFDTixjQUFjO1FBQUM7UUFDekMsSUFBSSxPQUFPLElBQUksQ0FBQ0QsT0FBTyxDQUFDUSxTQUFTLEtBQUssVUFBVTtZQUM1Q0YsSUFBSUUsU0FBUyxHQUFHLElBQUksQ0FBQ1IsT0FBTyxDQUFDUSxTQUFTO1FBQzFDO1FBQ0EsaUVBQWlFO1FBQ2pFLGdEQUFnRDtRQUNoRCxJQUFJLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxPQUFPLEtBQUtDLFdBQVc7WUFDcENKLElBQUlHLE9BQU8sR0FBRyxJQUFJLENBQUNULE9BQU8sQ0FBQ1MsT0FBTztRQUN0QztRQUNBLE1BQU1FLFdBQVcsTUFBTSxLQUFLLENBQUNDLGVBQWVSLFFBQVFDLFNBQVNDO1FBQzdELE9BQU9LLFVBQVVFLEtBQUs7SUFDMUI7QUFDSjtBQUNBdEIsdUNBQXVDLEdBQUdFO0FBQ3pDLElBQUdHLFlBQVlrQixhQUFhLEVBQUVyQixpQ0FBaUM7SUFDNURHLFlBQVltQixNQUFNLENBQUNDLGNBQWM7SUFDakNwQixZQUFZbUIsTUFBTSxDQUFDRSxTQUFTO0lBQzVCckIsWUFBWW1CLE1BQU0sQ0FBQ0csZUFBZTtDQUNyQyxHQUNELG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanM/ODIzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2NvdW50JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY21kID0geyBjb3VudDogdGhpcy5jb2xsZWN0aW9uTmFtZSB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gdGhpcy5vcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNtZC5jb21tZW50ID0gdGhpcy5vcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZT8ubiB8fCAwO1xuICAgIH1cbn1cbmV4cG9ydHMuRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiA9IEVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXN0aW1hdGVkX2RvY3VtZW50X2NvdW50LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb24iLCJjb21tYW5kXzEiLCJyZXF1aXJlIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwib3B0aW9ucyIsImNvbGxlY3Rpb25OYW1lIiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImNtZCIsImNvdW50IiwibWF4VGltZU1TIiwiY29tbWVudCIsInVuZGVmaW5lZCIsInJlc3BvbnNlIiwiZXhlY3V0ZUNvbW1hbmQiLCJuIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFQURfT1BFUkFUSU9OIiwiUkVUUllBQkxFIiwiQ1VSU09SX0NSRUFUSU5HIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/execute_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.executeOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = \"This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.\";\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * Allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided.\n *\n * The expectation is that this function:\n * - Connects the MongoClient if it has not already been connected\n * - Creates a session if none is provided and cleans up the session it creates\n * - Selects a server based on readPreference or various factors\n * - Retries an operation if it fails for certain errors, see {@link retryOperation}\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param client - The MongoClient to execute this operation with\n * @param operation - The operation to execute\n */ async function executeOperation(client, operation) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError(\"This method requires a valid operation instance\");\n    }\n    if (client.topology == null) {\n        // Auto connect on operation\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError(\"Client must be connected before running operations\");\n        }\n        client.s.options[Symbol.for(\"@@mdb.skipPingOnConnect\")] = true;\n        try {\n            await client.connect();\n        } finally{\n            delete client.s.options[Symbol.for(\"@@mdb.skipPingOnConnect\")];\n        }\n    }\n    const { topology } = client;\n    if (topology == null) {\n        throw new error_1.MongoRuntimeError(\"client.connect did not create a topology but also did not throw\");\n    }\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({\n            owner,\n            explicit: false\n        });\n    } else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError(\"Use of expired sessions is not permitted\");\n    } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError(\"Snapshot reads require MongoDB 5.0 or later\");\n    } else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError(\"ClientSession must be from the same MongoClient\");\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    } else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    } else {\n        selector = readPreference;\n    }\n    const server = await topology.selectServerAsync(selector, {\n        session,\n        operationName: operation.commandName\n    });\n    if (session == null) {\n        // No session also means it is not retryable, early exit\n        return operation.execute(server, undefined);\n    }\n    if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n        // non-retryable operation, early exit\n        try {\n            return await operation.execute(server, session);\n        } finally{\n            if (session?.owner != null && session.owner === owner) {\n                await session.endSession().catch(()=>null);\n            }\n        }\n    }\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites && !inTransaction && (0, utils_1.supportsRetryableWrites)(server) && operation.canRetryWrite;\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const willRetry = hasReadAspect && willRetryRead || hasWriteAspect && willRetryWrite;\n    if (hasWriteAspect && willRetryWrite) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    try {\n        return await operation.execute(server, session);\n    } catch (operationError) {\n        if (willRetry && operationError instanceof error_1.MongoError) {\n            return await retryOperation(operation, operationError, {\n                session,\n                topology,\n                selector,\n                previousServer: server.description\n            });\n        }\n        throw operationError;\n    } finally{\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession().catch(()=>null);\n        }\n    }\n}\nexports.executeOperation = executeOperation;\nasync function retryOperation(operation, originalError, { session, topology, selector, previousServer }) {\n    const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n        throw new error_1.MongoServerError({\n            message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            originalError\n        });\n    }\n    if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n        throw originalError;\n    }\n    if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n        throw originalError;\n    }\n    if (originalError instanceof error_1.MongoNetworkError && session.isPinned && !session.inTransaction() && operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n        // If we have a cursor and the initial command fails with a network error,\n        // we can retry it on another connection. So we need to check it back in, clear the\n        // pool for the service id, and retry again.\n        session.unpin({\n            force: true,\n            forceClear: true\n        });\n    }\n    // select a new server, and attempt to retry the operation\n    const server = await topology.selectServerAsync(selector, {\n        session,\n        operationName: operation.commandName,\n        previousServer\n    });\n    if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n        throw new error_1.MongoUnexpectedServerResponseError(\"Selected server does not support retryable writes\");\n    }\n    try {\n        return await operation.execute(server, session);\n    } catch (retryError) {\n        if (retryError instanceof error_1.MongoError && retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n            throw originalError;\n        }\n        throw retryError;\n    }\n} //# sourceMappingURL=execute_operation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FindOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class FindOperation extends command_1.CommandOperation {\n    constructor(collection, ns, filter = {}, options = {}){\n        super(collection, options);\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== \"object\" || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError(\"Query filter must be a plain object or ObjectId\");\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === \"ObjectId\" ? {\n            _id: filter\n        } : filter;\n    }\n    get commandName() {\n        return \"find\";\n    }\n    async execute(server, session) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return server.command(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: \"firstBatch\",\n            session\n        });\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length ? projection.reduce((result, field)=>{\n                result[field] = 1;\n                return result;\n            }, {}) : {\n                _id: 1\n            };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === \"number\") {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === \"number\") {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        } else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === \"number\") {\n        if (options.batchSize < 0) {\n            if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        } else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === \"boolean\") {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === \"number\") {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === \"boolean\") {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === \"boolean\") {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === \"boolean\") {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === \"boolean\") {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === \"boolean\") {\n        findCommand.noCursorTimeout = !options.timeout;\n    } else if (typeof options.noCursorTimeout === \"boolean\") {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === \"boolean\") {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === \"boolean\") {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === \"boolean\") {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=find.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find_and_modify.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @public */ exports.ReturnDocument = Object.freeze({\n    BEFORE: \"before\",\n    AFTER: \"after\"\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */ class FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options){\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    get commandName() {\n        return \"findAndModify\";\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions\n        };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        } catch (err) {\n            return err;\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError(\"The current topology does not support a hint on findAndModify commands\");\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd);\n        return options.includeResultMetadata ? result : result.value ?? null;\n    }\n}\nexports.FindAndModifyOperation = FindAndModifyOperation;\n/** @internal */ class FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options){\n        // Basic validation\n        if (filter == null || typeof filter !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */ class FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options){\n        if (filter == null || typeof filter !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError(\"Replacement document must not contain atomic operators\");\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */ class FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options){\n        if (filter == null || typeof filter !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]); //# sourceMappingURL=find_and_modify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/get_more.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/get_more.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GetMoreOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options){\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return \"getMore\";\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */ async execute(server, _session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError(\"Getmore must run on the same server operation began on\");\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError(\"Unable to iterate cursor with no id\");\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError(\"A collection name must be determined before getMore\");\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === \"number\") {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === \"number\") {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: \"nextBatch\",\n            ...this.options\n        };\n        return server.command(this.ns, getMoreCmd, commandOptions);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.MUST_SELECT_SAME_SERVER\n]); //# sourceMappingURL=get_more.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9nZXRfbW9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYseUJBQXlCSSxZQUFZQyxpQkFBaUI7SUFDeERDLFlBQVlDLEVBQUUsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUN2QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDSCxFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNsQjtJQUNBLElBQUlFLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRCxNQUFNQyxRQUFRSCxNQUFNLEVBQUVJLFFBQVEsRUFBRTtRQUM1QixJQUFJSixXQUFXLElBQUksQ0FBQ0EsTUFBTSxFQUFFO1lBQ3hCLE1BQU0sSUFBSVIsUUFBUWEsaUJBQWlCLENBQUM7UUFDeEM7UUFDQSxJQUFJLElBQUksQ0FBQ04sUUFBUSxJQUFJLFFBQVEsSUFBSSxDQUFDQSxRQUFRLENBQUNPLE1BQU0sSUFBSTtZQUNqRCxNQUFNLElBQUlkLFFBQVFhLGlCQUFpQixDQUFDO1FBQ3hDO1FBQ0EsTUFBTUUsYUFBYSxJQUFJLENBQUNULEVBQUUsQ0FBQ1MsVUFBVTtRQUNyQyxJQUFJQSxjQUFjLE1BQU07WUFDcEIsZ0VBQWdFO1lBQ2hFLHdGQUF3RjtZQUN4RixNQUFNLElBQUlmLFFBQVFhLGlCQUFpQixDQUFDO1FBQ3hDO1FBQ0EsTUFBTUcsYUFBYTtZQUNmQyxTQUFTLElBQUksQ0FBQ1YsUUFBUTtZQUN0QlE7UUFDSjtRQUNBLElBQUksT0FBTyxJQUFJLENBQUNOLE9BQU8sQ0FBQ1MsU0FBUyxLQUFLLFVBQVU7WUFDNUNGLFdBQVdFLFNBQVMsR0FBR0MsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ1gsT0FBTyxDQUFDUyxTQUFTO1FBQzFEO1FBQ0EsSUFBSSxPQUFPLElBQUksQ0FBQ1QsT0FBTyxDQUFDWSxjQUFjLEtBQUssVUFBVTtZQUNqREwsV0FBV00sU0FBUyxHQUFHLElBQUksQ0FBQ2IsT0FBTyxDQUFDWSxjQUFjO1FBQ3REO1FBQ0EsaUVBQWlFO1FBQ2pFLGdEQUFnRDtRQUNoRCxJQUFJLElBQUksQ0FBQ1osT0FBTyxDQUFDYyxPQUFPLEtBQUtDLGFBQWEsQ0FBQyxHQUFHdEIsUUFBUXVCLGNBQWMsRUFBRWpCLFdBQVcsR0FBRztZQUNoRlEsV0FBV08sT0FBTyxHQUFHLElBQUksQ0FBQ2QsT0FBTyxDQUFDYyxPQUFPO1FBQzdDO1FBQ0EsTUFBTUcsaUJBQWlCO1lBQ25CQyxxQkFBcUI7WUFDckJDLHFCQUFxQjtZQUNyQixHQUFHLElBQUksQ0FBQ25CLE9BQU87UUFDbkI7UUFDQSxPQUFPRCxPQUFPcUIsT0FBTyxDQUFDLElBQUksQ0FBQ3ZCLEVBQUUsRUFBRVUsWUFBWVU7SUFDL0M7QUFDSjtBQUNBN0Isd0JBQXdCLEdBQUdFO0FBQzFCLElBQUdJLFlBQVkyQixhQUFhLEVBQUUvQixrQkFBa0I7SUFBQ0ksWUFBWTRCLE1BQU0sQ0FBQ0MsY0FBYztJQUFFN0IsWUFBWTRCLE1BQU0sQ0FBQ0UsdUJBQXVCO0NBQUMsR0FDaEksb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2dldF9tb3JlLmpzP2QxOTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdldE1vcmVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgR2V0TW9yZU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihucywgY3Vyc29ySWQsIHNlcnZlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmN1cnNvcklkID0gY3Vyc29ySWQ7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZ2V0TW9yZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsdGhvdWdoIHRoZXJlIGlzIGEgc2VydmVyIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBnZXQgbW9yZSBvcGVyYXRpb24sIHRoZSBzaWduYXR1cmVcbiAgICAgKiBmb3IgZXhlY3V0ZSBwYXNzZXMgYSBzZXJ2ZXIgc28gd2Ugd2lsbCBqdXN0IHVzZSB0aGF0IG9uZS5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgX3Nlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdHZXRtb3JlIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jdXJzb3JJZCA9PSBudWxsIHx8IHRoaXMuY3Vyc29ySWQuaXNaZXJvKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdVbmFibGUgdG8gaXRlcmF0ZSBjdXJzb3Igd2l0aCBubyBpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLm5zLmNvbGxlY3Rpb247XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGdldE1vcmUnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZXRNb3JlQ21kID0ge1xuICAgICAgICAgICAgZ2V0TW9yZTogdGhpcy5jdXJzb3JJZCxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZ2V0TW9yZUNtZC5iYXRjaFNpemUgPSBNYXRoLmFicyh0aGlzLm9wdGlvbnMuYmF0Y2hTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGdldE1vcmVDbWQubWF4VGltZU1TID0gdGhpcy5vcHRpb25zLm1heEF3YWl0VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCAmJiAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKSA+PSA5KSB7XG4gICAgICAgICAgICBnZXRNb3JlQ21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21tYW5kT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJldHVybkZpZWxkU2VsZWN0b3I6IG51bGwsXG4gICAgICAgICAgICBkb2N1bWVudHNSZXR1cm5lZEluOiAnbmV4dEJhdGNoJyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmQodGhpcy5ucywgZ2V0TW9yZUNtZCwgY29tbWFuZE9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuR2V0TW9yZU9wZXJhdGlvbiA9IEdldE1vcmVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoR2V0TW9yZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTiwgb3BlcmF0aW9uXzEuQXNwZWN0Lk1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRfbW9yZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJHZXRNb3JlT3BlcmF0aW9uIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJ1dGlsc18xIiwib3BlcmF0aW9uXzEiLCJBYnN0cmFjdE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwibnMiLCJjdXJzb3JJZCIsInNlcnZlciIsIm9wdGlvbnMiLCJjb21tYW5kTmFtZSIsImV4ZWN1dGUiLCJfc2Vzc2lvbiIsIk1vbmdvUnVudGltZUVycm9yIiwiaXNaZXJvIiwiY29sbGVjdGlvbiIsImdldE1vcmVDbWQiLCJnZXRNb3JlIiwiYmF0Y2hTaXplIiwiTWF0aCIsImFicyIsIm1heEF3YWl0VGltZU1TIiwibWF4VGltZU1TIiwiY29tbWVudCIsInVuZGVmaW5lZCIsIm1heFdpcmVWZXJzaW9uIiwiY29tbWFuZE9wdGlvbnMiLCJyZXR1cm5GaWVsZFNlbGVjdG9yIiwiZG9jdW1lbnRzUmV0dXJuZWRJbiIsImNvbW1hbmQiLCJkZWZpbmVBc3BlY3RzIiwiQXNwZWN0IiwiUkVBRF9PUEVSQVRJT04iLCJNVVNUX1NFTEVDVF9TQU1FX1NFUlZFUiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/get_more.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/indexes.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/indexes.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst VALID_INDEX_OPTIONS = new Set([\n    \"background\",\n    \"unique\",\n    \"name\",\n    \"partialFilterExpression\",\n    \"sparse\",\n    \"hidden\",\n    \"expireAfterSeconds\",\n    \"storageEngine\",\n    \"collation\",\n    \"version\",\n    // text indexes\n    \"weights\",\n    \"default_language\",\n    \"language_override\",\n    \"textIndexVersion\",\n    // 2d-sphere indexes\n    \"2dsphereIndexVersion\",\n    // 2d indexes\n    \"bits\",\n    \"min\",\n    \"max\",\n    // geoHaystack Indexes\n    \"bucketSize\",\n    // wildcard indexes\n    \"wildcardProjection\"\n]);\nfunction isIndexDirection(x) {\n    return typeof x === \"number\" || x === \"2d\" || x === \"2dsphere\" || x === \"text\" || x === \"geoHaystack\";\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [\n        indexSpec\n    ] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs){\n        if (typeof spec === \"string\") {\n            key.set(spec, 1);\n        } else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        } else if (spec instanceof Map) {\n            for (const [property, value] of spec){\n                key.set(property, value);\n            }\n        } else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)){\n                key.set(property, value);\n            }\n        }\n    }\n    return {\n        ...options,\n        key\n    };\n}\n/** @internal */ class IndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return \"listIndexes\";\n    }\n    async execute(_server, session) {\n        const coll = this.collection;\n        const options = this.options;\n        return (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            full: true,\n            ...options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */ class CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options){\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map((userIndex)=>{\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join(\"_\");\n            const validIndexOptions = Object.fromEntries(Object.entries({\n                ...userIndex\n            }).filter(([optionName])=>VALID_INDEX_OPTIONS.has(optionName)));\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    get commandName() {\n        return \"createIndexes\";\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = {\n            createIndexes: this.collectionName,\n            indexes\n        };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError(\"Option `commitQuorum` for `createIndexes` not supported on servers < 4.4\");\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd);\n        const indexNames = indexes.map((index)=>index.name || \"\");\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */ class CreateIndexOperation extends CreateIndexesOperation {\n    constructor(parent, collectionName, indexSpec, options){\n        super(parent, collectionName, [\n            makeIndexSpec(indexSpec, options)\n        ], options);\n    }\n    async execute(server, session) {\n        const indexNames = await super.execute(server, session);\n        return indexNames[0];\n    }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */ class EnsureIndexOperation extends CreateIndexOperation {\n    constructor(db, collectionName, indexSpec, options){\n        super(db, collectionName, indexSpec, options);\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.db = db;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return \"listIndexes\";\n    }\n    async execute(server, session) {\n        const indexName = this.indexes[0].name;\n        const indexes = await this.db.collection(this.collectionName).listIndexes({\n            session\n        }).toArray().catch((error)=>{\n            if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) return [];\n            throw error;\n        });\n        if (indexName && indexes.some((index)=>index.name === indexName)) return indexName;\n        return super.execute(server, session);\n    }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */ class DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options){\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    get commandName() {\n        return \"dropIndexes\";\n    }\n    async execute(server, session) {\n        const cmd = {\n            dropIndexes: this.collection.collectionName,\n            index: this.indexName\n        };\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */ class ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options){\n        super(collection, options);\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    get commandName() {\n        return \"listIndexes\";\n    }\n    async execute(server, session) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? {\n            batchSize: this.options.batchSize\n        } : {};\n        const command = {\n            listIndexes: this.collectionNamespace.collection,\n            cursor\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */ class IndexExistsOperation extends operation_1.AbstractOperation {\n    constructor(collection, indexes, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.indexes = indexes;\n    }\n    get commandName() {\n        return \"listIndexes\";\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const indexes = this.indexes;\n        const info = await (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n        // Let's check for the index names\n        if (!Array.isArray(indexes)) return info[indexes] != null;\n        // All keys found return true\n        return indexes.every((indexName)=>info[indexName] != null);\n    }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */ class IndexInformationOperation extends operation_1.AbstractOperation {\n    constructor(db, name, options){\n        super(options);\n        this.options = options ?? {};\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return \"listIndexes\";\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        return (0, common_functions_1.indexInformation)(db, name, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(DropIndexOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=indexes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/indexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/insert.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/insert.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options){\n        super(undefined, options);\n        this.options = {\n            ...options,\n            checkKeys: options.checkKeys ?? false\n        };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    get commandName() {\n        return \"insert\";\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === \"boolean\" ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === \"boolean\") {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options){\n        super(collection.s.namespace, (0, common_functions_1.maybeAddIdToDocuments)(collection, [\n            doc\n        ], options), options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */ class InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options){\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    get commandName() {\n        return \"insert\";\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference\n        };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map((document)=>({\n                insertOne: {\n                    document\n                }\n            })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        } catch (err) {\n            if (err && err.message === \"Operation must be an object with an operation key\") {\n                throw new error_1.MongoInvalidArgumentError(\"Collection.insertMany() cannot be called with an array that has null/undefined values\");\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(InsertOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(InsertManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=insert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pbnNlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwwQkFBMEIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUMxRixNQUFNSyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxrQkFBa0JELG1CQUFPQSxDQUFDLDJFQUFrQjtBQUNsRCxNQUFNRSxlQUFlRixtQkFBT0EsQ0FBQywrRUFBYztBQUMzQyxNQUFNRyxZQUFZSCxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNSSxxQkFBcUJKLG1CQUFPQSxDQUFDLDJGQUFvQjtBQUN2RCxNQUFNSyxjQUFjTCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsd0JBQXdCSyxVQUFVRyxnQkFBZ0I7SUFDcERDLFlBQVlDLEVBQUUsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLENBQUU7UUFDaEMsS0FBSyxDQUFDQyxXQUFXRDtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBRztZQUFFLEdBQUdBLE9BQU87WUFBRUUsV0FBV0YsUUFBUUUsU0FBUyxJQUFJO1FBQU07UUFDbkUsSUFBSSxDQUFDSixFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDQyxTQUFTLEdBQUdBO0lBQ3JCO0lBQ0EsSUFBSUksY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1OLFVBQVUsSUFBSSxDQUFDQSxPQUFPLElBQUksQ0FBQztRQUNqQyxNQUFNTyxVQUFVLE9BQU9QLFFBQVFPLE9BQU8sS0FBSyxZQUFZUCxRQUFRTyxPQUFPLEdBQUc7UUFDekUsTUFBTUMsVUFBVTtZQUNaQyxRQUFRLElBQUksQ0FBQ1gsRUFBRSxDQUFDWSxVQUFVO1lBQzFCWCxXQUFXLElBQUksQ0FBQ0EsU0FBUztZQUN6QlE7UUFDSjtRQUNBLElBQUksT0FBT1AsUUFBUVcsd0JBQXdCLEtBQUssV0FBVztZQUN2REgsUUFBUUcsd0JBQXdCLEdBQUdYLFFBQVFXLHdCQUF3QjtRQUN2RTtRQUNBLGlFQUFpRTtRQUNqRSxnREFBZ0Q7UUFDaEQsSUFBSVgsUUFBUVksT0FBTyxLQUFLWCxXQUFXO1lBQy9CTyxRQUFRSSxPQUFPLEdBQUdaLFFBQVFZLE9BQU87UUFDckM7UUFDQSxPQUFPLEtBQUssQ0FBQ0MsZUFBZVIsUUFBUUMsU0FBU0U7SUFDakQ7QUFDSjtBQUNBeEIsdUJBQXVCLEdBQUdJO0FBQzFCLE1BQU1ELDJCQUEyQkM7SUFDN0JTLFlBQVlhLFVBQVUsRUFBRUksR0FBRyxFQUFFZCxPQUFPLENBQUU7UUFDbEMsS0FBSyxDQUFDVSxXQUFXSyxDQUFDLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUd0QixtQkFBbUJ1QixxQkFBcUIsRUFBRVAsWUFBWTtZQUFDSTtTQUFJLEVBQUVkLFVBQVVBO0lBQzdHO0lBQ0EsTUFBTUksUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTVksTUFBTSxNQUFNLEtBQUssQ0FBQ2QsUUFBUUMsUUFBUUM7UUFDeEMsSUFBSVksSUFBSUMsSUFBSSxFQUNSLE1BQU0sSUFBSTlCLFFBQVErQixnQkFBZ0IsQ0FBQ0Y7UUFDdkMsSUFBSUEsSUFBSUcsV0FBVyxFQUFFO1lBQ2pCLG9GQUFvRjtZQUNwRixNQUFNLElBQUloQyxRQUFRK0IsZ0JBQWdCLENBQUNGLElBQUlHLFdBQVcsQ0FBQyxFQUFFO1FBQ3pEO1FBQ0EsT0FBTztZQUNIQyxjQUFjLElBQUksQ0FBQ0MsWUFBWSxFQUFFQyxNQUFNO1lBQ3ZDQyxZQUFZLElBQUksQ0FBQzFCLFNBQVMsQ0FBQyxFQUFFLENBQUMyQixHQUFHO1FBQ3JDO0lBQ0o7QUFDSjtBQUNBMUMsMEJBQTBCLEdBQUdHO0FBQzdCLGNBQWMsR0FDZCxNQUFNRCw0QkFBNEJTLFlBQVlnQyxpQkFBaUI7SUFDM0Q5QixZQUFZYSxVQUFVLEVBQUVrQixJQUFJLEVBQUU1QixPQUFPLENBQUU7UUFDbkMsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQzZCLE1BQU1DLE9BQU8sQ0FBQ0YsT0FBTztZQUN0QixNQUFNLElBQUl2QyxRQUFRMEMseUJBQXlCLENBQUM7UUFDaEQ7UUFDQSxJQUFJLENBQUMvQixPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDVSxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ2tCLElBQUksR0FBR0E7SUFDaEI7SUFDQSxJQUFJekIsY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU0wQixPQUFPLElBQUksQ0FBQ3RCLFVBQVU7UUFDNUIsTUFBTVYsVUFBVTtZQUFFLEdBQUcsSUFBSSxDQUFDQSxPQUFPO1lBQUUsR0FBRyxJQUFJLENBQUNpQyxXQUFXO1lBQUVDLGdCQUFnQixJQUFJLENBQUNBLGNBQWM7UUFBQztRQUM1RixNQUFNWCxlQUFlaEMsZ0JBQWdCNEMsWUFBWSxDQUFDQyxXQUFXLENBQUNwQztRQUM5RCxNQUFNcUMscUJBQXFCLElBQUk3QyxhQUFhOEMsa0JBQWtCLENBQUNOLE1BQU0sSUFBSSxDQUFDSixJQUFJLENBQUNXLEdBQUcsQ0FBQ0MsQ0FBQUEsV0FBYTtnQkFDNUZDLFdBQVc7b0JBQUVEO2dCQUFTO1lBQzFCLEtBQUt4QztRQUNMLElBQUk7WUFDQSxNQUFNa0IsTUFBTSxNQUFNbUIsbUJBQW1CakMsT0FBTyxDQUFDQyxRQUFRQztZQUNyRCxPQUFPO2dCQUNIZ0IsY0FBY0MsY0FBY0MsTUFBTTtnQkFDbENrQixlQUFleEIsSUFBSXdCLGFBQWE7Z0JBQ2hDQyxhQUFhekIsSUFBSXlCLFdBQVc7WUFDaEM7UUFDSixFQUNBLE9BQU9DLEtBQUs7WUFDUixJQUFJQSxPQUFPQSxJQUFJQyxPQUFPLEtBQUsscURBQXFEO2dCQUM1RSxNQUFNLElBQUl4RCxRQUFRMEMseUJBQXlCLENBQUM7WUFDaEQ7WUFDQSxNQUFNYTtRQUNWO0lBQ0o7QUFDSjtBQUNBNUQsMkJBQTJCLEdBQUdFO0FBQzdCLElBQUdTLFlBQVltRCxhQUFhLEVBQUUxRCxpQkFBaUI7SUFBQ08sWUFBWW9ELE1BQU0sQ0FBQ0MsU0FBUztJQUFFckQsWUFBWW9ELE1BQU0sQ0FBQ0UsZUFBZTtDQUFDO0FBQ2pILElBQUd0RCxZQUFZbUQsYUFBYSxFQUFFM0Qsb0JBQW9CO0lBQUNRLFlBQVlvRCxNQUFNLENBQUNDLFNBQVM7SUFBRXJELFlBQVlvRCxNQUFNLENBQUNFLGVBQWU7Q0FBQztBQUNwSCxJQUFHdEQsWUFBWW1ELGFBQWEsRUFBRTVELHFCQUFxQjtJQUFDUyxZQUFZb0QsTUFBTSxDQUFDRSxlQUFlO0NBQUMsR0FDeEYsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2luc2VydC5qcz83NWZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnNlcnRNYW55T3BlcmF0aW9uID0gZXhwb3J0cy5JbnNlcnRPbmVPcGVyYXRpb24gPSBleHBvcnRzLkluc2VydE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB3cml0ZV9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vd3JpdGVfY29uY2VyblwiKTtcbmNvbnN0IGJ1bGtfd3JpdGVfMSA9IHJlcXVpcmUoXCIuL2J1bGtfd3JpdGVcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3QgY29tbW9uX2Z1bmN0aW9uc18xID0gcmVxdWlyZShcIi4vY29tbW9uX2Z1bmN0aW9uc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSW5zZXJ0T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5zLCBkb2N1bWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zLCBjaGVja0tleXM6IG9wdGlvbnMuY2hlY2tLZXlzID8/IGZhbHNlIH07XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5kb2N1bWVudHMgPSBkb2N1bWVudHM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdpbnNlcnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGluc2VydDogdGhpcy5ucy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgZG9jdW1lbnRzOiB0aGlzLmRvY3VtZW50cyxcbiAgICAgICAgICAgIG9yZGVyZWRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjb21tYW5kLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkluc2VydE9wZXJhdGlvbiA9IEluc2VydE9wZXJhdGlvbjtcbmNsYXNzIEluc2VydE9uZU9wZXJhdGlvbiBleHRlbmRzIEluc2VydE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZG9jLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsICgwLCBjb21tb25fZnVuY3Rpb25zXzEubWF5YmVBZGRJZFRvRG9jdW1lbnRzKShjb2xsZWN0aW9uLCBbZG9jXSwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlci5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycykge1xuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgYSBXcml0ZUVycm9yIGJ1dCB3ZSBjYW4ndCBjaGFuZ2UgaXQgbm93IGJlY2F1c2Ugb2YgZXJyb3IgaGllcmFyY2h5XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBpbnNlcnRlZElkOiB0aGlzLmRvY3VtZW50c1swXS5faWRcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkluc2VydE9uZU9wZXJhdGlvbiA9IEluc2VydE9uZU9wZXJhdGlvbjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEluc2VydE1hbnlPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZG9jcywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRvY3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdBcmd1bWVudCBcImRvY3NcIiBtdXN0IGJlIGFuIGFycmF5IG9mIGRvY3VtZW50cycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuZG9jcyA9IGRvY3M7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdpbnNlcnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMuYnNvbk9wdGlvbnMsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlIH07XG4gICAgICAgIGNvbnN0IHdyaXRlQ29uY2VybiA9IHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGJ1bGtXcml0ZU9wZXJhdGlvbiA9IG5ldyBidWxrX3dyaXRlXzEuQnVsa1dyaXRlT3BlcmF0aW9uKGNvbGwsIHRoaXMuZG9jcy5tYXAoZG9jdW1lbnQgPT4gKHtcbiAgICAgICAgICAgIGluc2VydE9uZTogeyBkb2N1bWVudCB9XG4gICAgICAgIH0pKSwgb3B0aW9ucyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBidWxrV3JpdGVPcGVyYXRpb24uZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHdyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgICAgICBpbnNlcnRlZENvdW50OiByZXMuaW5zZXJ0ZWRDb3VudCxcbiAgICAgICAgICAgICAgICBpbnNlcnRlZElkczogcmVzLmluc2VydGVkSWRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UgPT09ICdPcGVyYXRpb24gbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhbiBvcGVyYXRpb24ga2V5Jykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0NvbGxlY3Rpb24uaW5zZXJ0TWFueSgpIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBhbiBhcnJheSB0aGF0IGhhcyBudWxsL3VuZGVmaW5lZCB2YWx1ZXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0TWFueU9wZXJhdGlvbiA9IEluc2VydE1hbnlPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoSW5zZXJ0T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSwgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEluc2VydE9uZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShJbnNlcnRNYW55T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zZXJ0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkluc2VydE1hbnlPcGVyYXRpb24iLCJJbnNlcnRPbmVPcGVyYXRpb24iLCJJbnNlcnRPcGVyYXRpb24iLCJlcnJvcl8xIiwicmVxdWlyZSIsIndyaXRlX2NvbmNlcm5fMSIsImJ1bGtfd3JpdGVfMSIsImNvbW1hbmRfMSIsImNvbW1vbl9mdW5jdGlvbnNfMSIsIm9wZXJhdGlvbl8xIiwiQ29tbWFuZE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwibnMiLCJkb2N1bWVudHMiLCJvcHRpb25zIiwidW5kZWZpbmVkIiwiY2hlY2tLZXlzIiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsIm9yZGVyZWQiLCJjb21tYW5kIiwiaW5zZXJ0IiwiY29sbGVjdGlvbiIsImJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiIsImNvbW1lbnQiLCJleGVjdXRlQ29tbWFuZCIsImRvYyIsInMiLCJuYW1lc3BhY2UiLCJtYXliZUFkZElkVG9Eb2N1bWVudHMiLCJyZXMiLCJjb2RlIiwiTW9uZ29TZXJ2ZXJFcnJvciIsIndyaXRlRXJyb3JzIiwiYWNrbm93bGVkZ2VkIiwid3JpdGVDb25jZXJuIiwidyIsImluc2VydGVkSWQiLCJfaWQiLCJBYnN0cmFjdE9wZXJhdGlvbiIsImRvY3MiLCJBcnJheSIsImlzQXJyYXkiLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIiwiY29sbCIsImJzb25PcHRpb25zIiwicmVhZFByZWZlcmVuY2UiLCJXcml0ZUNvbmNlcm4iLCJmcm9tT3B0aW9ucyIsImJ1bGtXcml0ZU9wZXJhdGlvbiIsIkJ1bGtXcml0ZU9wZXJhdGlvbiIsIm1hcCIsImRvY3VtZW50IiwiaW5zZXJ0T25lIiwiaW5zZXJ0ZWRDb3VudCIsImluc2VydGVkSWRzIiwiZXJyIiwibWVzc2FnZSIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJSRVRSWUFCTEUiLCJXUklURV9PUEVSQVRJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/insert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/is_capped.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/is_capped.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IsCappedOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return \"listCollections\";\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db.listCollections({\n            name: coll.collectionName\n        }, {\n            ...this.options,\n            nameOnly: false,\n            readPreference: this.readPreference,\n            session\n        }).toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation; //# sourceMappingURL=is_capped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pc19jYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLDBCQUEwQkcsWUFBWUMsaUJBQWlCO0lBQ3pEQyxZQUFZQyxVQUFVLEVBQUVDLE9BQU8sQ0FBRTtRQUM3QixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRCxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0EsSUFBSUUsY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1DLE9BQU8sSUFBSSxDQUFDTixVQUFVO1FBQzVCLE1BQU0sQ0FBQ0EsV0FBVyxHQUFHLE1BQU1NLEtBQUtDLENBQUMsQ0FBQ0MsRUFBRSxDQUMvQkMsZUFBZSxDQUFDO1lBQUVDLE1BQU1KLEtBQUtLLGNBQWM7UUFBQyxHQUFHO1lBQUUsR0FBRyxJQUFJLENBQUNWLE9BQU87WUFBRVcsVUFBVTtZQUFPQyxnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1lBQUVSO1FBQVEsR0FDaElTLE9BQU87UUFDWixJQUFJZCxjQUFjLFFBQVFBLFdBQVdDLE9BQU8sSUFBSSxNQUFNO1lBQ2xELE1BQU0sSUFBSU4sUUFBUW9CLGFBQWEsQ0FBQyxDQUFDLFdBQVcsRUFBRVQsS0FBS1UsU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUM1RTtRQUNBLE9BQU8sQ0FBQyxDQUFDaEIsV0FBV0MsT0FBTyxFQUFFZ0I7SUFDakM7QUFDSjtBQUNBekIseUJBQXlCLEdBQUdFLG1CQUM1QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaXNfY2FwcGVkLmpzP2YwNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklzQ2FwcGVkT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSXNDYXBwZWRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IFtjb2xsZWN0aW9uXSA9IGF3YWl0IGNvbGwucy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWU6IGNvbGwuY29sbGVjdGlvbk5hbWUgfSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiBmYWxzZSwgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsIHNlc3Npb24gfSlcbiAgICAgICAgICAgIC50b0FycmF5KCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwgfHwgY29sbGVjdGlvbi5vcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoYGNvbGxlY3Rpb24gJHtjb2xsLm5hbWVzcGFjZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhY29sbGVjdGlvbi5vcHRpb25zPy5jYXBwZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Jc0NhcHBlZE9wZXJhdGlvbiA9IElzQ2FwcGVkT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNfY2FwcGVkLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIklzQ2FwcGVkT3BlcmF0aW9uIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwib3B0aW9ucyIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJjb2xsIiwicyIsImRiIiwibGlzdENvbGxlY3Rpb25zIiwibmFtZSIsImNvbGxlY3Rpb25OYW1lIiwibmFtZU9ubHkiLCJyZWFkUHJlZmVyZW5jZSIsInRvQXJyYXkiLCJNb25nb0FQSUVycm9yIiwibmFtZXNwYWNlIiwiY2FwcGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/kill_cursors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KillCursorsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options){\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return \"killCursors\";\n    }\n    async execute(server, session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError(\"Killcursor must run on the same server operation began on\");\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError(\"A collection name must be determined before killCursors\");\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [\n                this.cursorId\n            ]\n        };\n        try {\n            await server.command(this.ns, killCursorsCommand, {\n                session\n            });\n        } catch  {\n        // The driver should never emit errors from killCursors, this is spec-ed behavior\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [\n    operation_1.Aspect.MUST_SELECT_SAME_SERVER\n]); //# sourceMappingURL=kill_cursors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9raWxsX2N1cnNvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHLEtBQUs7QUFDcEMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsTUFBTUYsNkJBQTZCRyxZQUFZQyxpQkFBaUI7SUFDNURDLFlBQVlDLFFBQVEsRUFBRUMsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUN2QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRixFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDRCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0UsTUFBTSxHQUFHQTtJQUNsQjtJQUNBLElBQUlFLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRSCxNQUFNLEVBQUVJLE9BQU8sRUFBRTtRQUMzQixJQUFJSixXQUFXLElBQUksQ0FBQ0EsTUFBTSxFQUFFO1lBQ3hCLE1BQU0sSUFBSVAsUUFBUVksaUJBQWlCLENBQUM7UUFDeEM7UUFDQSxNQUFNQyxjQUFjLElBQUksQ0FBQ1AsRUFBRSxDQUFDUSxVQUFVO1FBQ3RDLElBQUlELGVBQWUsTUFBTTtZQUNyQixnRUFBZ0U7WUFDaEUsd0ZBQXdGO1lBQ3hGLE1BQU0sSUFBSWIsUUFBUVksaUJBQWlCLENBQUM7UUFDeEM7UUFDQSxNQUFNRyxxQkFBcUI7WUFDdkJGO1lBQ0FHLFNBQVM7Z0JBQUMsSUFBSSxDQUFDWCxRQUFRO2FBQUM7UUFDNUI7UUFDQSxJQUFJO1lBQ0EsTUFBTUUsT0FBT1UsT0FBTyxDQUFDLElBQUksQ0FBQ1gsRUFBRSxFQUFFUyxvQkFBb0I7Z0JBQUVKO1lBQVE7UUFDaEUsRUFDQSxPQUFNO1FBQ0YsaUZBQWlGO1FBQ3JGO0lBQ0o7QUFDSjtBQUNBZCw0QkFBNEIsR0FBR0U7QUFDOUIsSUFBR0csWUFBWWdCLGFBQWEsRUFBRW5CLHNCQUFzQjtJQUFDRyxZQUFZaUIsTUFBTSxDQUFDQyx1QkFBdUI7Q0FBQyxHQUNqRyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMva2lsbF9jdXJzb3JzLmpzPzhiYzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktpbGxDdXJzb3JzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuY2xhc3MgS2lsbEN1cnNvcnNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY3Vyc29ySWQsIG5zLCBzZXJ2ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5jdXJzb3JJZCA9IGN1cnNvcklkO1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2tpbGxDdXJzb3JzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdLaWxsY3Vyc29yIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBraWxsQ3Vyc29ycyA9IHRoaXMubnMuY29sbGVjdGlvbjtcbiAgICAgICAgaWYgKGtpbGxDdXJzb3JzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGtpbGxDdXJzb3JzJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2lsbEN1cnNvcnNDb21tYW5kID0ge1xuICAgICAgICAgICAga2lsbEN1cnNvcnMsXG4gICAgICAgICAgICBjdXJzb3JzOiBbdGhpcy5jdXJzb3JJZF1cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kKHRoaXMubnMsIGtpbGxDdXJzb3JzQ29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIC8vIFRoZSBkcml2ZXIgc2hvdWxkIG5ldmVyIGVtaXQgZXJyb3JzIGZyb20ga2lsbEN1cnNvcnMsIHRoaXMgaXMgc3BlYy1lZCBiZWhhdmlvclxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5LaWxsQ3Vyc29yc09wZXJhdGlvbiA9IEtpbGxDdXJzb3JzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEtpbGxDdXJzb3JzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0Lk1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1raWxsX2N1cnNvcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiS2lsbEN1cnNvcnNPcGVyYXRpb24iLCJlcnJvcl8xIiwicmVxdWlyZSIsIm9wZXJhdGlvbl8xIiwiQWJzdHJhY3RPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImN1cnNvcklkIiwibnMiLCJzZXJ2ZXIiLCJvcHRpb25zIiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2Vzc2lvbiIsIk1vbmdvUnVudGltZUVycm9yIiwia2lsbEN1cnNvcnMiLCJjb2xsZWN0aW9uIiwia2lsbEN1cnNvcnNDb21tYW5kIiwiY3Vyc29ycyIsImNvbW1hbmQiLCJkZWZpbmVBc3BlY3RzIiwiQXNwZWN0IiwiTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_collections.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_collections.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListCollectionsOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options){\n        super(db, options);\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === \"number\") {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    get commandName() {\n        return \"listCollections\";\n    }\n    async execute(server, session) {\n        return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)));\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */ generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? {\n                batchSize: this.batchSize\n            } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=list_collections.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1DLFlBQVlELG1CQUFPQSxDQUFDLHlFQUFXO0FBQ3JDLE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDLDZFQUFhO0FBQ3pDLGNBQWMsR0FDZCxNQUFNRixpQ0FBaUNHLFVBQVVFLGdCQUFnQjtJQUM3REMsWUFBWUMsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUM3QixLQUFLLENBQUNGLElBQUlFO1FBQ1YsSUFBSSxDQUFDQSxPQUFPLEdBQUc7WUFBRSxHQUFHQSxPQUFPO1FBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsWUFBWTtRQUNoQyxJQUFJLENBQUNILEVBQUUsR0FBR0E7UUFDVixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNHLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDRixPQUFPLENBQUNFLFFBQVE7UUFDdkMsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDSCxPQUFPLENBQUNHLHFCQUFxQjtRQUNqRSxJQUFJLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLFNBQVMsS0FBSyxVQUFVO1lBQzVDLElBQUksQ0FBQ0EsU0FBUyxHQUFHLElBQUksQ0FBQ0osT0FBTyxDQUFDSSxTQUFTO1FBQzNDO0lBQ0o7SUFDQSxJQUFJQyxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsT0FBTyxLQUFLLENBQUNDLGVBQWVGLFFBQVFDLFNBQVMsSUFBSSxDQUFDRSxlQUFlLENBQUMsQ0FBQyxHQUFHbEIsUUFBUW1CLGNBQWMsRUFBRUo7SUFDbEc7SUFDQSxrRkFBa0YsR0FDbEZHLGdCQUFnQkUsV0FBVyxFQUFFO1FBQ3pCLE1BQU1DLFVBQVU7WUFDWkMsaUJBQWlCO1lBQ2pCZixRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUNuQmdCLFFBQVEsSUFBSSxDQUFDWCxTQUFTLEdBQUc7Z0JBQUVBLFdBQVcsSUFBSSxDQUFDQSxTQUFTO1lBQUMsSUFBSSxDQUFDO1lBQzFERixVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUN2QkMsdUJBQXVCLElBQUksQ0FBQ0EscUJBQXFCO1FBQ3JEO1FBQ0EsaUVBQWlFO1FBQ2pFLGdEQUFnRDtRQUNoRCxJQUFJUyxlQUFlLEtBQUssSUFBSSxDQUFDWixPQUFPLENBQUNnQixPQUFPLEtBQUtDLFdBQVc7WUFDeERKLFFBQVFHLE9BQU8sR0FBRyxJQUFJLENBQUNoQixPQUFPLENBQUNnQixPQUFPO1FBQzFDO1FBQ0EsT0FBT0g7SUFDWDtBQUNKO0FBQ0F4QixnQ0FBZ0MsR0FBR0U7QUFDbEMsSUFBR0ksWUFBWXVCLGFBQWEsRUFBRTNCLDBCQUEwQjtJQUNyREksWUFBWXdCLE1BQU0sQ0FBQ0MsY0FBYztJQUNqQ3pCLFlBQVl3QixNQUFNLENBQUNFLFNBQVM7SUFDNUIxQixZQUFZd0IsTUFBTSxDQUFDRyxlQUFlO0NBQ3JDLEdBQ0QsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnMuanM/MDIyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgICAgICB0aGlzLm5hbWVPbmx5ID0gISF0aGlzLm9wdGlvbnMubmFtZU9ubHk7XG4gICAgICAgIHRoaXMuYXV0aG9yaXplZENvbGxlY3Rpb25zID0gISF0aGlzLm9wdGlvbnMuYXV0aG9yaXplZENvbGxlY3Rpb25zO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5iYXRjaFNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmJhdGNoU2l6ZSA9IHRoaXMub3B0aW9ucy5iYXRjaFNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHRoaXMuZ2VuZXJhdGVDb21tYW5kKCgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpKSk7XG4gICAgfVxuICAgIC8qIFRoaXMgaXMgaGVyZSBmb3IgdGhlIHB1cnBvc2Ugb2YgdW5pdCB0ZXN0aW5nIHRoZSBmaW5hbCBjb21tYW5kIHRoYXQgZ2V0cyBzZW50LiAqL1xuICAgIGdlbmVyYXRlQ29tbWFuZCh3aXJlVmVyc2lvbikge1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgbGlzdENvbGxlY3Rpb25zOiAxLFxuICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlcixcbiAgICAgICAgICAgIGN1cnNvcjogdGhpcy5iYXRjaFNpemUgPyB7IGJhdGNoU2l6ZTogdGhpcy5iYXRjaFNpemUgfSA6IHt9LFxuICAgICAgICAgICAgbmFtZU9ubHk6IHRoaXMubmFtZU9ubHksXG4gICAgICAgICAgICBhdXRob3JpemVkQ29sbGVjdGlvbnM6IHRoaXMuYXV0aG9yaXplZENvbGxlY3Rpb25zXG4gICAgICAgIH07XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAod2lyZVZlcnNpb24gPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfY29sbGVjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uIiwidXRpbHNfMSIsInJlcXVpcmUiLCJjb21tYW5kXzEiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwiZmlsdGVyIiwib3B0aW9ucyIsIndyaXRlQ29uY2VybiIsIm5hbWVPbmx5IiwiYXV0aG9yaXplZENvbGxlY3Rpb25zIiwiYmF0Y2hTaXplIiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImV4ZWN1dGVDb21tYW5kIiwiZ2VuZXJhdGVDb21tYW5kIiwibWF4V2lyZVZlcnNpb24iLCJ3aXJlVmVyc2lvbiIsImNvbW1hbmQiLCJsaXN0Q29sbGVjdGlvbnMiLCJjdXJzb3IiLCJjb21tZW50IiwidW5kZWZpbmVkIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFQURfT1BFUkFUSU9OIiwiUkVUUllBQkxFIiwiQ1VSU09SX0NSRUFUSU5HIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_databases.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_databases.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n    }\n    get commandName() {\n        return \"listDatabases\";\n    }\n    async execute(server, session) {\n        const cmd = {\n            listDatabases: 1\n        };\n        if (typeof this.options.nameOnly === \"boolean\") {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === \"boolean\") {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE\n]); //# sourceMappingURL=list_databases.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsOEJBQThCLEdBQUcsS0FBSztBQUN0QyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsK0JBQStCRyxVQUFVRSxnQkFBZ0I7SUFDM0RDLFlBQVlDLEVBQUUsRUFBRUMsT0FBTyxDQUFFO1FBQ3JCLEtBQUssQ0FBQ0QsSUFBSUM7UUFDVixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO1FBQzNCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLElBQUlSLFFBQVFTLGdCQUFnQixDQUFDLFNBQVM7SUFDcEQ7SUFDQSxJQUFJQyxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTUMsTUFBTTtZQUFFQyxlQUFlO1FBQUU7UUFDL0IsSUFBSSxPQUFPLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxRQUFRLEtBQUssV0FBVztZQUM1Q0YsSUFBSUUsUUFBUSxHQUFHLElBQUksQ0FBQ1QsT0FBTyxDQUFDUyxRQUFRO1FBQ3hDO1FBQ0EsSUFBSSxJQUFJLENBQUNULE9BQU8sQ0FBQ1UsTUFBTSxFQUFFO1lBQ3JCSCxJQUFJRyxNQUFNLEdBQUcsSUFBSSxDQUFDVixPQUFPLENBQUNVLE1BQU07UUFDcEM7UUFDQSxJQUFJLE9BQU8sSUFBSSxDQUFDVixPQUFPLENBQUNXLG1CQUFtQixLQUFLLFdBQVc7WUFDdkRKLElBQUlJLG1CQUFtQixHQUFHLElBQUksQ0FBQ1gsT0FBTyxDQUFDVyxtQkFBbUI7UUFDOUQ7UUFDQSxpRUFBaUU7UUFDakUsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQyxHQUFHbEIsUUFBUW1CLGNBQWMsRUFBRVAsV0FBVyxLQUFLLElBQUksQ0FBQ0wsT0FBTyxDQUFDYSxPQUFPLEtBQUtDLFdBQVc7WUFDaEZQLElBQUlNLE9BQU8sR0FBRyxJQUFJLENBQUNiLE9BQU8sQ0FBQ2EsT0FBTztRQUN0QztRQUNBLE9BQU8sS0FBSyxDQUFDRSxlQUFlVixRQUFRQyxTQUFTQztJQUNqRDtBQUNKO0FBQ0FqQiw4QkFBOEIsR0FBR0U7QUFDaEMsSUFBR0ksWUFBWW9CLGFBQWEsRUFBRXhCLHdCQUF3QjtJQUFDSSxZQUFZcUIsTUFBTSxDQUFDQyxjQUFjO0lBQUV0QixZQUFZcUIsTUFBTSxDQUFDRSxTQUFTO0NBQUMsR0FDeEgsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfZGF0YWJhc2VzLmpzPzMwZjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3REYXRhYmFzZXNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgTGlzdERhdGFiYXNlc09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0RGF0YWJhc2VzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY21kID0geyBsaXN0RGF0YWJhc2VzOiAxIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm5hbWVPbmx5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNtZC5uYW1lT25seSA9IHRoaXMub3B0aW9ucy5uYW1lT25seTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgY21kLmZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYXV0aG9yaXplZERhdGFiYXNlcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjbWQuYXV0aG9yaXplZERhdGFiYXNlcyA9IHRoaXMub3B0aW9ucy5hdXRob3JpemVkRGF0YWJhc2VzO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikgPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0RGF0YWJhc2VzT3BlcmF0aW9uID0gTGlzdERhdGFiYXNlc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0RGF0YWJhc2VzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2RhdGFiYXNlcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMaXN0RGF0YWJhc2VzT3BlcmF0aW9uIiwidXRpbHNfMSIsInJlcXVpcmUiLCJjb21tYW5kXzEiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwib3B0aW9ucyIsIm5zIiwiTW9uZ29EQk5hbWVzcGFjZSIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJjbWQiLCJsaXN0RGF0YWJhc2VzIiwibmFtZU9ubHkiLCJmaWx0ZXIiLCJhdXRob3JpemVkRGF0YWJhc2VzIiwibWF4V2lyZVZlcnNpb24iLCJjb21tZW50IiwidW5kZWZpbmVkIiwiZXhlY3V0ZUNvbW1hbmQiLCJkZWZpbmVBc3BlY3RzIiwiQXNwZWN0IiwiUkVBRF9PUEVSQVRJT04iLCJSRVRSWUFCTEUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/operation.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/operation.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nexports.Aspect = {\n    READ_OPERATION: Symbol(\"READ_OPERATION\"),\n    WRITE_OPERATION: Symbol(\"WRITE_OPERATION\"),\n    RETRYABLE: Symbol(\"RETRYABLE\"),\n    EXPLAINABLE: Symbol(\"EXPLAINABLE\"),\n    SKIP_COLLATION: Symbol(\"SKIP_COLLATION\"),\n    CURSOR_CREATING: Symbol(\"CURSOR_CREATING\"),\n    MUST_SELECT_SAME_SERVER: Symbol(\"MUST_SELECT_SAME_SERVER\")\n};\n/** @internal */ const kSession = Symbol(\"session\");\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */ class AbstractOperation {\n    constructor(options = {}){\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [\n            aspects\n        ];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, \"aspects\", {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects; //# sourceMappingURL=operation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSx5QkFBeUIsR0FBR0EsY0FBYyxHQUFHLEtBQUs7QUFDMUUsTUFBTUssU0FBU0MsbUJBQU9BLENBQUMseURBQVM7QUFDaEMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQywrRUFBb0I7QUFDdEROLGNBQWMsR0FBRztJQUNiUSxnQkFBZ0JDLE9BQU87SUFDdkJDLGlCQUFpQkQsT0FBTztJQUN4QkUsV0FBV0YsT0FBTztJQUNsQkcsYUFBYUgsT0FBTztJQUNwQkksZ0JBQWdCSixPQUFPO0lBQ3ZCSyxpQkFBaUJMLE9BQU87SUFDeEJNLHlCQUF5Qk4sT0FBTztBQUNwQztBQUNBLGNBQWMsR0FDZCxNQUFNTyxXQUFXUCxPQUFPO0FBQ3hCOzs7Ozs7Q0FNQyxHQUNELE1BQU1OO0lBQ0ZjLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDdEIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNwQixRQUFRSSxNQUFNLENBQUNNLGVBQWUsSUFDN0RILGtCQUFrQmMsY0FBYyxDQUFDQyxPQUFPLEdBQ3hDZixrQkFBa0JjLGNBQWMsQ0FBQ0UsV0FBVyxDQUFDTCxZQUFZWCxrQkFBa0JjLGNBQWMsQ0FBQ0MsT0FBTztRQUN2RyxvRUFBb0U7UUFDcEUsSUFBSSxDQUFDRSxXQUFXLEdBQUcsQ0FBQyxHQUFHbkIsT0FBT29CLGtCQUFrQixFQUFFUDtRQUNsRCxJQUFJLENBQUNGLFNBQVMsR0FBR0UsUUFBUVEsT0FBTyxJQUFJLE9BQU9SLFFBQVFRLE9BQU8sR0FBR0M7UUFDN0QsSUFBSSxDQUFDVCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDVSxrQkFBa0IsR0FBRyxDQUFDLENBQUNWLFFBQVFVLGtCQUFrQjtRQUN0RCxJQUFJLENBQUNDLGlCQUFpQixHQUFHO0lBQzdCO0lBQ0FULFVBQVVVLE1BQU0sRUFBRTtRQUNkLE1BQU1DLE9BQU8sSUFBSSxDQUFDZCxXQUFXO1FBQzdCLElBQUljLEtBQUtDLE9BQU8sSUFBSSxNQUFNO1lBQ3RCLE9BQU87UUFDWDtRQUNBLE9BQU9ELEtBQUtDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSDtJQUM1QjtJQUNBLElBQUlKLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQ1YsU0FBUztJQUN6QjtJQUNBa0IsZUFBZTtRQUNYLElBQUksQ0FBQ2xCLFNBQVMsR0FBR1c7SUFDckI7SUFDQSxJQUFJUSxlQUFlO1FBQ2YsT0FBTztJQUNYO0lBQ0EsSUFBSUMsZ0JBQWdCO1FBQ2hCLE9BQU87SUFDWDtBQUNKO0FBQ0FwQyx5QkFBeUIsR0FBR0c7QUFDNUIsU0FBU0QsY0FBY21DLFNBQVMsRUFBRUwsT0FBTztJQUNyQyxJQUFJLENBQUNNLE1BQU1DLE9BQU8sQ0FBQ1AsWUFBWSxDQUFFQSxDQUFBQSxtQkFBbUJRLEdBQUUsR0FBSTtRQUN0RFIsVUFBVTtZQUFDQTtTQUFRO0lBQ3ZCO0lBQ0FBLFVBQVUsSUFBSVEsSUFBSVI7SUFDbEJsQyxPQUFPQyxjQUFjLENBQUNzQyxXQUFXLFdBQVc7UUFDeENwQyxPQUFPK0I7UUFDUFMsVUFBVTtJQUNkO0lBQ0EsT0FBT1Q7QUFDWDtBQUNBaEMscUJBQXFCLEdBQUdFLGVBQ3hCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcGVyYXRpb24uanM/NDdiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmaW5lQXNwZWN0cyA9IGV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBleHBvcnRzLkFzcGVjdCA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuZXhwb3J0cy5Bc3BlY3QgPSB7XG4gICAgUkVBRF9PUEVSQVRJT046IFN5bWJvbCgnUkVBRF9PUEVSQVRJT04nKSxcbiAgICBXUklURV9PUEVSQVRJT046IFN5bWJvbCgnV1JJVEVfT1BFUkFUSU9OJyksXG4gICAgUkVUUllBQkxFOiBTeW1ib2woJ1JFVFJZQUJMRScpLFxuICAgIEVYUExBSU5BQkxFOiBTeW1ib2woJ0VYUExBSU5BQkxFJyksXG4gICAgU0tJUF9DT0xMQVRJT046IFN5bWJvbCgnU0tJUF9DT0xMQVRJT04nKSxcbiAgICBDVVJTT1JfQ1JFQVRJTkc6IFN5bWJvbCgnQ1VSU09SX0NSRUFUSU5HJyksXG4gICAgTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVI6IFN5bWJvbCgnTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVInKVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtTZXNzaW9uID0gU3ltYm9sKCdzZXNzaW9uJyk7XG4vKipcbiAqIFRoaXMgY2xhc3MgYWN0cyBhcyBhIHBhcmVudCBjbGFzcyBmb3IgYW55IG9wZXJhdGlvbiBhbmQgaXMgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhpcy5vcHRpb25zLFxuICogYXMgd2VsbCBhcyBzZXR0aW5nIGFuZCBnZXR0aW5nIGEgc2Vzc2lvbi5cbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBjbGFzcyBpbXBsZW1lbnRzIGBoYXNBc3BlY3RgLCB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gb3BlcmF0aW9uIGhhc1xuICogYSBzcGVjaWZpYyBhc3BlY3QuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLnJlYWRQcmVmZXJlbmNlID0gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKVxuICAgICAgICAgICAgPyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5XG4gICAgICAgICAgICA6IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLmZyb21PcHRpb25zKG9wdGlvbnMpID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgICAgIC8vIFB1bGwgdGhlIEJTT04gc2VyaWFsaXplIG9wdGlvbnMgZnJvbSB0aGUgYWxyZWFkeS1yZXNvbHZlZCBvcHRpb25zXG4gICAgICAgIHRoaXMuYnNvbk9wdGlvbnMgPSAoMCwgYnNvbl8xLnJlc29sdmVCU09OT3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIHRoaXNba1Nlc3Npb25dID0gb3B0aW9ucy5zZXNzaW9uICE9IG51bGwgPyBvcHRpb25zLnNlc3Npb24gOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuYnlwYXNzUGlubmluZ0NoZWNrID0gISFvcHRpb25zLmJ5cGFzc1Bpbm5pbmdDaGVjaztcbiAgICAgICAgdGhpcy50cnlTZWNvbmRhcnlXcml0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBoYXNBc3BlY3QoYXNwZWN0KSB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoY3Rvci5hc3BlY3RzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3Rvci5hc3BlY3RzLmhhcyhhc3BlY3QpO1xuICAgIH1cbiAgICBnZXQgc2Vzc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba1Nlc3Npb25dO1xuICAgIH1cbiAgICBjbGVhclNlc3Npb24oKSB7XG4gICAgICAgIHRoaXNba1Nlc3Npb25dID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBBYnN0cmFjdE9wZXJhdGlvbjtcbmZ1bmN0aW9uIGRlZmluZUFzcGVjdHMob3BlcmF0aW9uLCBhc3BlY3RzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFzcGVjdHMpICYmICEoYXNwZWN0cyBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgICAgYXNwZWN0cyA9IFthc3BlY3RzXTtcbiAgICB9XG4gICAgYXNwZWN0cyA9IG5ldyBTZXQoYXNwZWN0cyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ2FzcGVjdHMnLCB7XG4gICAgICAgIHZhbHVlOiBhc3BlY3RzLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gYXNwZWN0cztcbn1cbmV4cG9ydHMuZGVmaW5lQXNwZWN0cyA9IGRlZmluZUFzcGVjdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmaW5lQXNwZWN0cyIsIkFic3RyYWN0T3BlcmF0aW9uIiwiQXNwZWN0IiwiYnNvbl8xIiwicmVxdWlyZSIsInJlYWRfcHJlZmVyZW5jZV8xIiwiUkVBRF9PUEVSQVRJT04iLCJTeW1ib2wiLCJXUklURV9PUEVSQVRJT04iLCJSRVRSWUFCTEUiLCJFWFBMQUlOQUJMRSIsIlNLSVBfQ09MTEFUSU9OIiwiQ1VSU09SX0NSRUFUSU5HIiwiTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVIiLCJrU2Vzc2lvbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInJlYWRQcmVmZXJlbmNlIiwiaGFzQXNwZWN0IiwiUmVhZFByZWZlcmVuY2UiLCJwcmltYXJ5IiwiZnJvbU9wdGlvbnMiLCJic29uT3B0aW9ucyIsInJlc29sdmVCU09OT3B0aW9ucyIsInNlc3Npb24iLCJ1bmRlZmluZWQiLCJieXBhc3NQaW5uaW5nQ2hlY2siLCJ0cnlTZWNvbmRhcnlXcml0ZSIsImFzcGVjdCIsImN0b3IiLCJhc3BlY3RzIiwiaGFzIiwiY2xlYXJTZXNzaW9uIiwiY2FuUmV0cnlSZWFkIiwiY2FuUmV0cnlXcml0ZSIsIm9wZXJhdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsIlNldCIsIndyaXRhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/options_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/options_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OptionsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return \"listCollections\";\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db.listCollections({\n            name: coll.collectionName\n        }, {\n            ...this.options,\n            nameOnly: false,\n            readPreference: this.readPreference,\n            session\n        }).toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation; //# sourceMappingURL=options_operation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcHRpb25zX29wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYseUJBQXlCRyxZQUFZQyxpQkFBaUI7SUFDeERDLFlBQVlDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQzdCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNELFVBQVUsR0FBR0E7SUFDdEI7SUFDQSxJQUFJRSxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTUMsT0FBTyxJQUFJLENBQUNOLFVBQVU7UUFDNUIsTUFBTSxDQUFDQSxXQUFXLEdBQUcsTUFBTU0sS0FBS0MsQ0FBQyxDQUFDQyxFQUFFLENBQy9CQyxlQUFlLENBQUM7WUFBRUMsTUFBTUosS0FBS0ssY0FBYztRQUFDLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ1YsT0FBTztZQUFFVyxVQUFVO1lBQU9DLGdCQUFnQixJQUFJLENBQUNBLGNBQWM7WUFBRVI7UUFBUSxHQUNoSVMsT0FBTztRQUNaLElBQUlkLGNBQWMsUUFBUUEsV0FBV0MsT0FBTyxJQUFJLE1BQU07WUFDbEQsTUFBTSxJQUFJTixRQUFRb0IsYUFBYSxDQUFDLENBQUMsV0FBVyxFQUFFVCxLQUFLVSxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQzVFO1FBQ0EsT0FBT2hCLFdBQVdDLE9BQU87SUFDN0I7QUFDSjtBQUNBVCx3QkFBd0IsR0FBR0Usa0JBQzNCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcHRpb25zX29wZXJhdGlvbi5qcz83MmY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcHRpb25zT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgT3B0aW9uc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdENvbGxlY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3QgW2NvbGxlY3Rpb25dID0gYXdhaXQgY29sbC5zLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHsgbmFtZTogY29sbC5jb2xsZWN0aW9uTmFtZSB9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IGZhbHNlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCB8fCBjb2xsZWN0aW9uLm9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcihgY29sbGVjdGlvbiAke2NvbGwubmFtZXNwYWNlfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5vcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuT3B0aW9uc09wZXJhdGlvbiA9IE9wdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcHRpb25zX29wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPcHRpb25zT3BlcmF0aW9uIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwib3B0aW9ucyIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJjb2xsIiwicyIsImRiIiwibGlzdENvbGxlY3Rpb25zIiwibmFtZSIsImNvbGxlY3Rpb25OYW1lIiwibmFtZU9ubHkiLCJyZWFkUHJlZmVyZW5jZSIsInRvQXJyYXkiLCJNb25nb0FQSUVycm9yIiwibmFtZXNwYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/profiling_level.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */ class ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return \"profile\";\n    }\n    async execute(server, session) {\n        const doc = await super.executeCommand(server, session, {\n            profile: -1\n        });\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0) return \"off\";\n            if (was === 1) return \"slow_only\";\n            if (was === 2) return \"all\";\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        } else {\n            throw new error_1.MongoUnexpectedServerResponseError(\"Error with profile command\");\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation; //# sourceMappingURL=profiling_level.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELCtCQUErQixHQUFHLEtBQUs7QUFDdkMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsY0FBYyxHQUNkLE1BQU1GLGdDQUFnQ0csVUFBVUMsZ0JBQWdCO0lBQzVEQyxZQUFZQyxFQUFFLEVBQUVDLE9BQU8sQ0FBRTtRQUNyQixLQUFLLENBQUNELElBQUlDO1FBQ1YsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0EsSUFBSUMsY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1DLE1BQU0sTUFBTSxLQUFLLENBQUNDLGVBQWVILFFBQVFDLFNBQVM7WUFBRUcsU0FBUyxDQUFDO1FBQUU7UUFDdEUsSUFBSUYsSUFBSUcsRUFBRSxLQUFLLEdBQUc7WUFDZCxNQUFNQyxNQUFNSixJQUFJSSxHQUFHO1lBQ25CLElBQUlBLFFBQVEsR0FDUixPQUFPO1lBQ1gsSUFBSUEsUUFBUSxHQUNSLE9BQU87WUFDWCxJQUFJQSxRQUFRLEdBQ1IsT0FBTztZQUNYLE1BQU0sSUFBSWYsUUFBUWdCLGtDQUFrQyxDQUFDLENBQUMsOEJBQThCLEVBQUVELElBQUksQ0FBQztRQUMvRixPQUNLO1lBQ0QsTUFBTSxJQUFJZixRQUFRZ0Isa0NBQWtDLENBQUM7UUFDekQ7SUFDSjtBQUNKO0FBQ0FuQiwrQkFBK0IsR0FBR0UseUJBQ2xDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwuanM/MmU5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3Byb2ZpbGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgcHJvZmlsZTogLTEgfSk7XG4gICAgICAgIGlmIChkb2Mub2sgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHdhcyA9IGRvYy53YXM7XG4gICAgICAgICAgICBpZiAod2FzID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiAnb2ZmJztcbiAgICAgICAgICAgIGlmICh3YXMgPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdzbG93X29ubHknO1xuICAgICAgICAgICAgaWYgKHdhcyA9PT0gMilcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2FsbCc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKGBJbGxlZ2FsIHByb2ZpbGluZyBsZXZlbCB2YWx1ZSAke3dhc31gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0Vycm9yIHdpdGggcHJvZmlsZSBjb21tYW5kJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9maWxpbmdfbGV2ZWwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24iLCJlcnJvcl8xIiwicmVxdWlyZSIsImNvbW1hbmRfMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwib3B0aW9ucyIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJkb2MiLCJleGVjdXRlQ29tbWFuZCIsInByb2ZpbGUiLCJvayIsIndhcyIsIk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/remove_user.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/remove_user.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RemoveUserOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options){\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    get commandName() {\n        return \"dropUser\";\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, {\n            dropUser: this.username\n        });\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=remove_user.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW1vdmVfdXNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUcsS0FBSztBQUNuQyxNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsNEJBQTRCQyxVQUFVRyxnQkFBZ0I7SUFDeERDLFlBQVlDLEVBQUUsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLENBQUU7UUFDL0IsS0FBSyxDQUFDRixJQUFJRTtRQUNWLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtJQUNwQjtJQUNBLElBQUlFLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNLEtBQUssQ0FBQ0MsZUFBZUYsUUFBUUMsU0FBUztZQUFFRSxVQUFVLElBQUksQ0FBQ1AsUUFBUTtRQUFDO1FBQ3RFLE9BQU87SUFDWDtBQUNKO0FBQ0FULDJCQUEyQixHQUFHRTtBQUM3QixJQUFHRyxZQUFZWSxhQUFhLEVBQUVmLHFCQUFxQjtJQUFDRyxZQUFZYSxNQUFNLENBQUNDLGVBQWU7Q0FBQyxHQUN4Rix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVtb3ZlX3VzZXIuanM/OThjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVtb3ZlVXNlck9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJlbW92ZVVzZXJPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHVzZXJuYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZHJvcFVzZXInO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcFVzZXI6IHRoaXMudXNlcm5hbWUgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVtb3ZlVXNlck9wZXJhdGlvbiA9IFJlbW92ZVVzZXJPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVtb3ZlVXNlck9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbW92ZV91c2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJlbW92ZVVzZXJPcGVyYXRpb24iLCJjb21tYW5kXzEiLCJyZXF1aXJlIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkYiIsInVzZXJuYW1lIiwib3B0aW9ucyIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJleGVjdXRlQ29tbWFuZCIsImRyb3BVc2VyIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIldSSVRFX09QRVJBVElPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/rename.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/rename.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RenameOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options){\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n    }\n    get commandName() {\n        return \"renameCollection\";\n    }\n    async execute(server, session) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === \"boolean\" ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=rename.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW5hbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMscUVBQWU7QUFDNUMsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUUsWUFBWUYsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLHdCQUF3QkksVUFBVUUsZ0JBQWdCO0lBQ3BEQyxZQUFZQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxDQUFFO1FBQ3RDLEtBQUssQ0FBQ0YsWUFBWUU7UUFDbEIsSUFBSSxDQUFDRixVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsRUFBRSxHQUFHLElBQUlSLFFBQVFTLGdCQUFnQixDQUFDLFNBQVM7SUFDcEQ7SUFDQSxJQUFJQyxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0Isb0JBQW9CO1FBQ3BCLE1BQU1DLG1CQUFtQixJQUFJLENBQUNULFVBQVUsQ0FBQ1UsU0FBUztRQUNsRCxNQUFNQyxlQUFlLElBQUksQ0FBQ1gsVUFBVSxDQUFDWSxDQUFDLENBQUNGLFNBQVMsQ0FBQ0csY0FBYyxDQUFDLElBQUksQ0FBQ1osT0FBTyxFQUFFYSxRQUFRO1FBQ3RGLE1BQU1DLGFBQWEsT0FBTyxJQUFJLENBQUNiLE9BQU8sQ0FBQ2EsVUFBVSxLQUFLLFlBQVksSUFBSSxDQUFDYixPQUFPLENBQUNhLFVBQVUsR0FBRztRQUM1RixNQUFNQyxVQUFVO1lBQ1pQLGtCQUFrQkE7WUFDbEJRLElBQUlOO1lBQ0pJLFlBQVlBO1FBQ2hCO1FBQ0EsTUFBTSxLQUFLLENBQUNHLGVBQWVYLFFBQVFDLFNBQVNRO1FBQzVDLE9BQU8sSUFBSXZCLGFBQWEwQixVQUFVLENBQUMsSUFBSSxDQUFDbkIsVUFBVSxDQUFDWSxDQUFDLENBQUNRLEVBQUUsRUFBRSxJQUFJLENBQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDRCxVQUFVLENBQUNZLENBQUMsQ0FBQ1YsT0FBTztJQUNwRztBQUNKO0FBQ0FaLHVCQUF1QixHQUFHRTtBQUN6QixJQUFHSyxZQUFZd0IsYUFBYSxFQUFFN0IsaUJBQWlCO0lBQUNLLFlBQVl5QixNQUFNLENBQUNDLGVBQWU7Q0FBQyxHQUNwRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVuYW1lLmpzPzA2MjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbmFtZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJlbmFtZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBuZXdOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5ld05hbWUgPSBuZXdOYW1lO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncmVuYW1lQ29sbGVjdGlvbic7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIC8vIEJ1aWxkIHRoZSBjb21tYW5kXG4gICAgICAgIGNvbnN0IHJlbmFtZUNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ubmFtZXNwYWNlO1xuICAgICAgICBjb25zdCB0b0NvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24odGhpcy5uZXdOYW1lKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBkcm9wVGFyZ2V0ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5kcm9wVGFyZ2V0ID09PSAnYm9vbGVhbicgPyB0aGlzLm9wdGlvbnMuZHJvcFRhcmdldCA6IGZhbHNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgcmVuYW1lQ29sbGVjdGlvbjogcmVuYW1lQ29sbGVjdGlvbixcbiAgICAgICAgICAgIHRvOiB0b0NvbGxlY3Rpb24sXG4gICAgICAgICAgICBkcm9wVGFyZ2V0OiBkcm9wVGFyZ2V0XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgICAgIHJldHVybiBuZXcgY29sbGVjdGlvbl8xLkNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uLnMuZGIsIHRoaXMubmV3TmFtZSwgdGhpcy5jb2xsZWN0aW9uLnMub3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5SZW5hbWVPcGVyYXRpb24gPSBSZW5hbWVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVuYW1lT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuYW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJlbmFtZU9wZXJhdGlvbiIsImNvbGxlY3Rpb25fMSIsInJlcXVpcmUiLCJ1dGlsc18xIiwiY29tbWFuZF8xIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwibmV3TmFtZSIsIm9wdGlvbnMiLCJucyIsIk1vbmdvREJOYW1lc3BhY2UiLCJjb21tYW5kTmFtZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwicmVuYW1lQ29sbGVjdGlvbiIsIm5hbWVzcGFjZSIsInRvQ29sbGVjdGlvbiIsInMiLCJ3aXRoQ29sbGVjdGlvbiIsInRvU3RyaW5nIiwiZHJvcFRhcmdldCIsImNvbW1hbmQiLCJ0byIsImV4ZWN1dGVDb21tYW5kIiwiQ29sbGVjdGlvbiIsImRiIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIldSSVRFX09QRVJBVElPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/rename.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/run_command.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/run_command.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options){\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection(\"$cmd\");\n    }\n    get commandName() {\n        return \"runCommand\";\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options){\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n    }\n    get commandName() {\n        return \"runCommand\";\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation; //# sourceMappingURL=run_command.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9ydW5fY29tbWFuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0NBQWdDLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFDdEUsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLDRCQUE0QkcsWUFBWUMsaUJBQWlCO0lBQzNEQyxZQUFZQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxDQUFFO1FBQ2xDLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNELE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLEVBQUUsR0FBR0gsT0FBT0ksQ0FBQyxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQztJQUNoRDtJQUNBLElBQUlDLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixJQUFJLENBQUNELE1BQU0sR0FBR0E7UUFDZCxPQUFPQSxPQUFPUixPQUFPLENBQUMsSUFBSSxDQUFDRSxFQUFFLEVBQUUsSUFBSSxDQUFDRixPQUFPLEVBQUU7WUFDekMsR0FBRyxJQUFJLENBQUNDLE9BQU87WUFDZlMsZ0JBQWdCLElBQUksQ0FBQ0EsY0FBYztZQUNuQ0Q7UUFDSjtJQUNKO0FBQ0o7QUFDQW5CLDJCQUEyQixHQUFHRztBQUM5QixNQUFNRCxpQ0FBaUNJLFlBQVlDLGlCQUFpQjtJQUNoRUMsWUFBWUUsT0FBTyxFQUFFQyxPQUFPLENBQUU7UUFDMUIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0QsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsRUFBRSxHQUFHLElBQUlSLFFBQVFpQixnQkFBZ0IsQ0FBQyxTQUFTO0lBQ3BEO0lBQ0EsSUFBSUwsY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLElBQUksQ0FBQ0QsTUFBTSxHQUFHQTtRQUNkLE9BQU9BLE9BQU9SLE9BQU8sQ0FBQyxJQUFJLENBQUNFLEVBQUUsRUFBRSxJQUFJLENBQUNGLE9BQU8sRUFBRTtZQUN6QyxHQUFHLElBQUksQ0FBQ0MsT0FBTztZQUNmUyxnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1lBQ25DRDtRQUNKO0lBQ0o7QUFDSjtBQUNBbkIsZ0NBQWdDLEdBQUdFLDBCQUNuQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcnVuX2NvbW1hbmQuanM/NmZmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uID0gZXhwb3J0cy5SdW5Db21tYW5kT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUnVuQ29tbWFuZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IGNvbW1hbmQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBwYXJlbnQucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24oJyRjbWQnKTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3J1bkNvbW1hbmQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgcmV0dXJuIHNlcnZlci5jb21tYW5kKHRoaXMubnMsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuQ29tbWFuZE9wZXJhdGlvbiA9IFJ1bkNvbW1hbmRPcGVyYXRpb247XG5jbGFzcyBSdW5BZG1pbkNvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29tbWFuZCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3J1bkNvbW1hbmQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgcmV0dXJuIHNlcnZlci5jb21tYW5kKHRoaXMubnMsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uID0gUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVuX2NvbW1hbmQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uIiwiUnVuQ29tbWFuZE9wZXJhdGlvbiIsInV0aWxzXzEiLCJyZXF1aXJlIiwib3BlcmF0aW9uXzEiLCJBYnN0cmFjdE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwiY29tbWFuZCIsIm9wdGlvbnMiLCJucyIsInMiLCJuYW1lc3BhY2UiLCJ3aXRoQ29sbGVjdGlvbiIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJyZWFkUHJlZmVyZW5jZSIsIk1vbmdvREJOYW1lc3BhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/run_command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/create.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions){\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    get commandName() {\n        return \"createSearchIndexes\";\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.command(namespace, command, {\n            session\n        });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name })=>name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation; //# sourceMappingURL=create.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9jcmVhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9DQUFvQyxHQUFHLEtBQUs7QUFDNUMsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsOEVBQWM7QUFDMUMsY0FBYyxHQUNkLE1BQU1GLHFDQUFxQ0MsWUFBWUUsaUJBQWlCO0lBQ3BFQyxZQUFZQyxVQUFVLEVBQUVDLFlBQVksQ0FBRTtRQUNsQyxLQUFLO1FBQ0wsSUFBSSxDQUFDRCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQTtJQUN4QjtJQUNBLElBQUlDLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxZQUFZLElBQUksQ0FBQ04sVUFBVSxDQUFDTyxhQUFhO1FBQy9DLE1BQU1DLFVBQVU7WUFDWkMscUJBQXFCSCxVQUFVTixVQUFVO1lBQ3pDVSxTQUFTLElBQUksQ0FBQ1QsWUFBWTtRQUM5QjtRQUNBLE1BQU1VLE1BQU0sTUFBTVAsT0FBT0ksT0FBTyxDQUFDRixXQUFXRSxTQUFTO1lBQUVIO1FBQVE7UUFDL0QsTUFBTU8saUJBQWlCRCxLQUFLQyxrQkFBa0IsRUFBRTtRQUNoRCxPQUFPQSxlQUFlQyxHQUFHLENBQUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUUsR0FBS0E7SUFDNUM7QUFDSjtBQUNBckIsb0NBQW9DLEdBQUdFLDhCQUN2QyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvY3JlYXRlLmpzP2RjMDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGRlc2NyaXB0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9ucyA9IGRlc2NyaXB0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2NyZWF0ZVNlYXJjaEluZGV4ZXMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGNyZWF0ZVNlYXJjaEluZGV4ZXM6IG5hbWVzcGFjZS5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgaW5kZXhlczogdGhpcy5kZXNjcmlwdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2VydmVyLmNvbW1hbmQobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIGNvbnN0IGluZGV4ZXNDcmVhdGVkID0gcmVzPy5pbmRleGVzQ3JlYXRlZCA/PyBbXTtcbiAgICAgICAgcmV0dXJuIGluZGV4ZXNDcmVhdGVkLm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiA9IENyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiIsIm9wZXJhdGlvbl8xIiwicmVxdWlyZSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwiZGVzY3JpcHRpb25zIiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsIm5hbWVzcGFjZSIsImZ1bGxOYW1lc3BhY2UiLCJjb21tYW5kIiwiY3JlYXRlU2VhcmNoSW5kZXhlcyIsImluZGV4ZXMiLCJyZXMiLCJpbmRleGVzQ3JlYXRlZCIsIm1hcCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/drop.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name){\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    get commandName() {\n        return \"dropSearchIndex\";\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === \"string\") {\n            command.name = this.name;\n        }\n        try {\n            await server.command(namespace, command, {\n                session\n            });\n        } catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation; //# sourceMappingURL=drop.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9kcm9wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDhFQUFjO0FBQzFDLGNBQWMsR0FDZCxNQUFNRixpQ0FBaUNHLFlBQVlDLGlCQUFpQjtJQUNoRUMsWUFBWUMsVUFBVSxFQUFFQyxJQUFJLENBQUU7UUFDMUIsS0FBSztRQUNMLElBQUksQ0FBQ0QsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLElBQUksR0FBR0E7SUFDaEI7SUFDQSxJQUFJQyxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTUMsWUFBWSxJQUFJLENBQUNOLFVBQVUsQ0FBQ08sYUFBYTtRQUMvQyxNQUFNQyxVQUFVO1lBQ1pDLGlCQUFpQkgsVUFBVU4sVUFBVTtRQUN6QztRQUNBLElBQUksT0FBTyxJQUFJLENBQUNDLElBQUksS0FBSyxVQUFVO1lBQy9CTyxRQUFRUCxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJO1FBQzVCO1FBQ0EsSUFBSTtZQUNBLE1BQU1HLE9BQU9JLE9BQU8sQ0FBQ0YsV0FBV0UsU0FBUztnQkFBRUg7WUFBUTtRQUN2RCxFQUNBLE9BQU9LLE9BQU87WUFDVixNQUFNQywyQkFBMkJELGlCQUFpQmYsUUFBUWlCLGdCQUFnQixJQUFJRixNQUFNRyxJQUFJLEtBQUtsQixRQUFRbUIsbUJBQW1CLENBQUNDLGlCQUFpQjtZQUMxSSxJQUFJLENBQUNKLDBCQUEwQjtnQkFDM0IsTUFBTUQ7WUFDVjtRQUNKO0lBQ0o7QUFDSjtBQUNBbEIsZ0NBQWdDLEdBQUdFLDBCQUNuQyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvZHJvcC5qcz9lYjkxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ecm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRHJvcFNlYXJjaEluZGV4T3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3BTZWFyY2hJbmRleCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29sbGVjdGlvbi5mdWxsTmFtZXNwYWNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgZHJvcFNlYXJjaEluZGV4OiBuYW1lc3BhY2UuY29sbGVjdGlvblxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMubmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbW1hbmQubmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc2VydmVyLmNvbW1hbmQobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBpc05hbWVzcGFjZU5vdEZvdW5kRXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvciAmJiBlcnJvci5jb2RlID09PSBlcnJvcl8xLk1PTkdPREJfRVJST1JfQ09ERVMuTmFtZXNwYWNlTm90Rm91bmQ7XG4gICAgICAgICAgICBpZiAoIWlzTmFtZXNwYWNlTm90Rm91bmRFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gPSBEcm9wU2VhcmNoSW5kZXhPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiIsImVycm9yXzEiLCJyZXF1aXJlIiwib3BlcmF0aW9uXzEiLCJBYnN0cmFjdE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsIm5hbWUiLCJjb21tYW5kTmFtZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwibmFtZXNwYWNlIiwiZnVsbE5hbWVzcGFjZSIsImNvbW1hbmQiLCJkcm9wU2VhcmNoSW5kZXgiLCJlcnJvciIsImlzTmFtZXNwYWNlTm90Rm91bmRFcnJvciIsIk1vbmdvU2VydmVyRXJyb3IiLCJjb2RlIiwiTU9OR09EQl9FUlJPUl9DT0RFUyIsIk5hbWVzcGFjZU5vdEZvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/update.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition){\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    get commandName() {\n        return \"updateSearchIndex\";\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.command(namespace, command, {\n            session\n        });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation; //# sourceMappingURL=update.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy91cGRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtDQUFrQyxHQUFHLEtBQUs7QUFDMUMsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsOEVBQWM7QUFDMUMsY0FBYyxHQUNkLE1BQU1GLG1DQUFtQ0MsWUFBWUUsaUJBQWlCO0lBQ2xFQyxZQUFZQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsVUFBVSxDQUFFO1FBQ3RDLEtBQUs7UUFDTCxJQUFJLENBQUNGLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0EsSUFBSUMsY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1DLFlBQVksSUFBSSxDQUFDUCxVQUFVLENBQUNRLGFBQWE7UUFDL0MsTUFBTUMsVUFBVTtZQUNaQyxtQkFBbUJILFVBQVVQLFVBQVU7WUFDdkNDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZDLFlBQVksSUFBSSxDQUFDQSxVQUFVO1FBQy9CO1FBQ0EsTUFBTUcsT0FBT0ksT0FBTyxDQUFDRixXQUFXRSxTQUFTO1lBQUVIO1FBQVE7UUFDbkQ7SUFDSjtBQUNKO0FBQ0FiLGtDQUFrQyxHQUFHRSw0QkFDckMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL3VwZGF0ZS5qcz9mMzYxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5hbWUsIGRlZmluaXRpb24pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3VwZGF0ZVNlYXJjaEluZGV4JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5jb2xsZWN0aW9uLmZ1bGxOYW1lc3BhY2U7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICB1cGRhdGVTZWFyY2hJbmRleDogbmFtZXNwYWNlLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZWZpbml0aW9uOiB0aGlzLmRlZmluaXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgc2VydmVyLmNvbW1hbmQobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5leHBvcnRzLlVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uID0gVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb24iLCJvcGVyYXRpb25fMSIsInJlcXVpcmUiLCJBYnN0cmFjdE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsIm5hbWUiLCJkZWZpbml0aW9uIiwiY29tbWFuZE5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsIm5hbWVzcGFjZSIsImZ1bGxOYW1lc3BhY2UiLCJjb21tYW5kIiwidXBkYXRlU2VhcmNoSW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/set_profiling_level.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst levelValues = new Set([\n    \"off\",\n    \"slow_only\",\n    \"all\"\n]);\n/** @public */ exports.ProfilingLevel = Object.freeze({\n    off: \"off\",\n    slowOnly: \"slow_only\",\n    all: \"all\"\n});\n/** @internal */ class SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options){\n        super(db, options);\n        this.options = options;\n        switch(level){\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    get commandName() {\n        return \"profile\";\n    }\n    async execute(server, session) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, {\n            profile: this.profile\n        });\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation; //# sourceMappingURL=set_profiling_level.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZXRfcHJvZmlsaW5nX2xldmVsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQ0FBa0MsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUNuRSxNQUFNSSxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNRSxZQUFZRixtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNRyxjQUFjLElBQUlDLElBQUk7SUFBQztJQUFPO0lBQWE7Q0FBTTtBQUN2RCxZQUFZLEdBQ1pULHNCQUFzQixHQUFHRixPQUFPWSxNQUFNLENBQUM7SUFDbkNDLEtBQUs7SUFDTEMsVUFBVTtJQUNWQyxLQUFLO0FBQ1Q7QUFDQSxjQUFjLEdBQ2QsTUFBTVgsbUNBQW1DSyxVQUFVTyxnQkFBZ0I7SUFDL0RDLFlBQVlDLEVBQUUsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLENBQUU7UUFDNUIsS0FBSyxDQUFDRixJQUFJRTtRQUNWLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLE9BQVFEO1lBQ0osS0FBS2pCLFFBQVFHLGNBQWMsQ0FBQ1EsR0FBRztnQkFDM0IsSUFBSSxDQUFDUSxPQUFPLEdBQUc7Z0JBQ2Y7WUFDSixLQUFLbkIsUUFBUUcsY0FBYyxDQUFDUyxRQUFRO2dCQUNoQyxJQUFJLENBQUNPLE9BQU8sR0FBRztnQkFDZjtZQUNKLEtBQUtuQixRQUFRRyxjQUFjLENBQUNVLEdBQUc7Z0JBQzNCLElBQUksQ0FBQ00sT0FBTyxHQUFHO2dCQUNmO1lBQ0o7Z0JBQ0ksSUFBSSxDQUFDQSxPQUFPLEdBQUc7Z0JBQ2Y7UUFDUjtRQUNBLElBQUksQ0FBQ0YsS0FBSyxHQUFHQTtJQUNqQjtJQUNBLElBQUlHLGNBQWM7UUFDZCxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNTixRQUFRLElBQUksQ0FBQ0EsS0FBSztRQUN4QixJQUFJLENBQUNULFlBQVlnQixHQUFHLENBQUNQLFFBQVE7WUFDekIsTUFBTSxJQUFJYixRQUFRcUIseUJBQXlCLENBQUMsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLEdBQUduQixRQUFRb0IsWUFBWSxFQUFFMUIsUUFBUUcsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUN2STtRQUNBLCtDQUErQztRQUMvQyxNQUFNLEtBQUssQ0FBQ3dCLGVBQWVMLFFBQVFDLFNBQVM7WUFBRUosU0FBUyxJQUFJLENBQUNBLE9BQU87UUFBQztRQUNwRSxPQUFPRjtJQUNYO0FBQ0o7QUFDQWpCLGtDQUFrQyxHQUFHRSw0QkFDckMsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NldF9wcm9maWxpbmdfbGV2ZWwuanM/YWRjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSBleHBvcnRzLlByb2ZpbGluZ0xldmVsID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3QgbGV2ZWxWYWx1ZXMgPSBuZXcgU2V0KFsnb2ZmJywgJ3Nsb3dfb25seScsICdhbGwnXSk7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCA9IE9iamVjdC5mcmVlemUoe1xuICAgIG9mZjogJ29mZicsXG4gICAgc2xvd09ubHk6ICdzbG93X29ubHknLFxuICAgIGFsbDogJ2FsbCdcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIGxldmVsLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgICAgICAgY2FzZSBleHBvcnRzLlByb2ZpbGluZ0xldmVsLm9mZjpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBleHBvcnRzLlByb2ZpbGluZ0xldmVsLnNsb3dPbmx5OlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwuYWxsOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncHJvZmlsZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5sZXZlbDtcbiAgICAgICAgaWYgKCFsZXZlbFZhbHVlcy5oYXMobGV2ZWwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBQcm9maWxpbmcgbGV2ZWwgbXVzdCBiZSBvbmUgb2YgXCIkeygwLCB1dGlsc18xLmVudW1Ub1N0cmluZykoZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCl9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IERldGVybWluZSBlcnJvciB0byBwdXQgaGVyZVxuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgcHJvZmlsZTogdGhpcy5wcm9maWxlIH0pO1xuICAgICAgICByZXR1cm4gbGV2ZWw7XG4gICAgfVxufVxuZXhwb3J0cy5TZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IFNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0X3Byb2ZpbGluZ19sZXZlbC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiIsIlByb2ZpbGluZ0xldmVsIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJ1dGlsc18xIiwiY29tbWFuZF8xIiwibGV2ZWxWYWx1ZXMiLCJTZXQiLCJmcmVlemUiLCJvZmYiLCJzbG93T25seSIsImFsbCIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwibGV2ZWwiLCJvcHRpb25zIiwicHJvZmlsZSIsImNvbW1hbmROYW1lIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJoYXMiLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIiwiZW51bVRvU3RyaW5nIiwiZXhlY3V0ZUNvbW1hbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/stats.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/stats.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DbStatsOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return \"dbStats\";\n    }\n    async execute(server, session) {\n        const command = {\n            dbStats: true\n        };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [\n    operation_1.Aspect.READ_OPERATION\n]); //# sourceMappingURL=stats.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zdGF0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYseUJBQXlCQyxVQUFVRyxnQkFBZ0I7SUFDckRDLFlBQVlDLEVBQUUsRUFBRUMsT0FBTyxDQUFFO1FBQ3JCLEtBQUssQ0FBQ0QsSUFBSUM7UUFDVixJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDbkI7SUFDQSxJQUFJQyxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTUMsVUFBVTtZQUFFQyxTQUFTO1FBQUs7UUFDaEMsSUFBSSxJQUFJLENBQUNOLE9BQU8sQ0FBQ08sS0FBSyxJQUFJLE1BQU07WUFDNUJGLFFBQVFFLEtBQUssR0FBRyxJQUFJLENBQUNQLE9BQU8sQ0FBQ08sS0FBSztRQUN0QztRQUNBLE9BQU8sS0FBSyxDQUFDQyxlQUFlTCxRQUFRQyxTQUFTQztJQUNqRDtBQUNKO0FBQ0FkLHdCQUF3QixHQUFHRTtBQUMxQixJQUFHRyxZQUFZYSxhQUFhLEVBQUVoQixrQkFBa0I7SUFBQ0csWUFBWWMsTUFBTSxDQUFDQyxjQUFjO0NBQUMsR0FDcEYsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3N0YXRzLmpzPzQ0MDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRiU3RhdHNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEYlN0YXRzT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2RiU3RhdHMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb21tYW5kID0geyBkYlN0YXRzOiB0cnVlIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29tbWFuZC5zY2FsZSA9IHRoaXMub3B0aW9ucy5zY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkRiU3RhdHNPcGVyYXRpb24gPSBEYlN0YXRzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERiU3RhdHNPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRiU3RhdHNPcGVyYXRpb24iLCJjb21tYW5kXzEiLCJyZXF1aXJlIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkYiIsIm9wdGlvbnMiLCJjb21tYW5kTmFtZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiY29tbWFuZCIsImRiU3RhdHMiLCJzY2FsZSIsImV4ZWN1dGVDb21tYW5kIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFQURfT1BFUkFUSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/stats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/update.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/update.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */ class UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options){\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return \"update\";\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every((op)=>op.multi == null || op.multi === false);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === \"boolean\" ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === \"boolean\") {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o)=>o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */ class UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options){\n        super(collection.s.namespace, [\n            makeUpdateStatement(filter, update, {\n                ...options,\n                multi: false\n            })\n        ], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */ class UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options){\n        super(collection.s.namespace, [\n            makeUpdateStatement(filter, update, {\n                ...options,\n                multi: true\n            })\n        ], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */ class ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options){\n        super(collection.s.namespace, [\n            makeUpdateStatement(filter, replacement, {\n                ...options,\n                multi: false\n            })\n        ], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError(\"Replacement document must not contain atomic operators\");\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== \"object\") {\n        throw new error_1.MongoInvalidArgumentError(\"Selector must be a valid JavaScript object\");\n    }\n    if (update == null || typeof update !== \"object\") {\n        throw new error_1.MongoInvalidArgumentError(\"Document must be a valid JavaScript object\");\n    }\n    const op = {\n        q: filter,\n        u: update\n    };\n    if (typeof options.upsert === \"boolean\") {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]); //# sourceMappingURL=update.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy91cGRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwyQkFBMkIsR0FBR0EsMkJBQTJCLEdBQUdBLDBCQUEwQixHQUFHQSx1QkFBdUIsR0FBRyxLQUFLO0FBQ3RKLE1BQU1PLFVBQVVDLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDLHlFQUFXO0FBQ3JDLE1BQU1HLGNBQWNILG1CQUFPQSxDQUFDLDZFQUFhO0FBQ3pDOzs7Q0FHQyxHQUNELE1BQU1GLHdCQUF3QkksVUFBVUUsZ0JBQWdCO0lBQ3BEQyxZQUFZQyxFQUFFLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQ2pDLEtBQUssQ0FBQ0MsV0FBV0Q7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRixFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0EsSUFBSUcsY0FBYztRQUNkLE9BQU87SUFDWDtJQUNBLElBQUlDLGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQ0Esa0JBQWtCLE9BQU87WUFDL0IsT0FBTztRQUNYO1FBQ0EsT0FBTyxJQUFJLENBQUNKLFVBQVUsQ0FBQ0ssS0FBSyxDQUFDQyxDQUFBQSxLQUFNQSxHQUFHQyxLQUFLLElBQUksUUFBUUQsR0FBR0MsS0FBSyxLQUFLO0lBQ3hFO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTVQsVUFBVSxJQUFJLENBQUNBLE9BQU8sSUFBSSxDQUFDO1FBQ2pDLE1BQU1VLFVBQVUsT0FBT1YsUUFBUVUsT0FBTyxLQUFLLFlBQVlWLFFBQVFVLE9BQU8sR0FBRztRQUN6RSxNQUFNQyxVQUFVO1lBQ1pDLFFBQVEsSUFBSSxDQUFDZCxFQUFFLENBQUNlLFVBQVU7WUFDMUJDLFNBQVMsSUFBSSxDQUFDZixVQUFVO1lBQ3hCVztRQUNKO1FBQ0EsSUFBSSxPQUFPVixRQUFRZSx3QkFBd0IsS0FBSyxXQUFXO1lBQ3ZESixRQUFRSSx3QkFBd0IsR0FBR2YsUUFBUWUsd0JBQXdCO1FBQ3ZFO1FBQ0EsSUFBSWYsUUFBUWdCLEdBQUcsRUFBRTtZQUNiTCxRQUFRSyxHQUFHLEdBQUdoQixRQUFRZ0IsR0FBRztRQUM3QjtRQUNBLGlFQUFpRTtRQUNqRSxnREFBZ0Q7UUFDaEQsSUFBSWhCLFFBQVFpQixPQUFPLEtBQUtoQixXQUFXO1lBQy9CVSxRQUFRTSxPQUFPLEdBQUdqQixRQUFRaUIsT0FBTztRQUNyQztRQUNBLE1BQU1DLHNCQUFzQixJQUFJLENBQUNDLFlBQVksSUFBSSxJQUFJLENBQUNBLFlBQVksQ0FBQ0MsQ0FBQyxLQUFLO1FBQ3pFLElBQUlGLHFCQUFxQjtZQUNyQixJQUFJLElBQUksQ0FBQ25CLFVBQVUsQ0FBQ3NCLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJLEdBQUc7Z0JBQ3JDLGlFQUFpRTtnQkFDakUsTUFBTSxJQUFJaEMsUUFBUWlDLHVCQUF1QixDQUFDLENBQUMsZ0RBQWdELENBQUM7WUFDaEc7UUFDSjtRQUNBLE9BQU8sS0FBSyxDQUFDQyxlQUFlakIsUUFBUUMsU0FBU0U7SUFDakQ7QUFDSjtBQUNBM0IsdUJBQXVCLEdBQUdNO0FBQzFCLGNBQWMsR0FDZCxNQUFNRCwyQkFBMkJDO0lBQzdCTyxZQUFZZ0IsVUFBVSxFQUFFYSxNQUFNLEVBQUVkLE1BQU0sRUFBRVosT0FBTyxDQUFFO1FBQzdDLEtBQUssQ0FBQ2EsV0FBV2MsQ0FBQyxDQUFDQyxTQUFTLEVBQUU7WUFBQzFDLG9CQUFvQndDLFFBQVFkLFFBQVE7Z0JBQUUsR0FBR1osT0FBTztnQkFBRU0sT0FBTztZQUFNO1NBQUcsRUFBRU47UUFDbkcsSUFBSSxDQUFDLENBQUMsR0FBR1AsUUFBUW9DLGtCQUFrQixFQUFFakIsU0FBUztZQUMxQyxNQUFNLElBQUlyQixRQUFRdUMseUJBQXlCLENBQUM7UUFDaEQ7SUFDSjtJQUNBLE1BQU12QixRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNc0IsTUFBTSxNQUFNLEtBQUssQ0FBQ3hCLFFBQVFDLFFBQVFDO1FBQ3hDLElBQUksSUFBSSxDQUFDdUIsT0FBTyxJQUFJLE1BQ2hCLE9BQU9EO1FBQ1gsSUFBSUEsSUFBSUUsSUFBSSxFQUNSLE1BQU0sSUFBSTFDLFFBQVEyQyxnQkFBZ0IsQ0FBQ0g7UUFDdkMsSUFBSUEsSUFBSUksV0FBVyxFQUNmLE1BQU0sSUFBSTVDLFFBQVEyQyxnQkFBZ0IsQ0FBQ0gsSUFBSUksV0FBVyxDQUFDLEVBQUU7UUFDekQsT0FBTztZQUNIQyxjQUFjLElBQUksQ0FBQ2pCLFlBQVksRUFBRUMsTUFBTTtZQUN2Q2lCLGVBQWVOLElBQUlPLFNBQVMsSUFBSVAsSUFBSVEsQ0FBQztZQUNyQ0MsWUFBWUMsTUFBTUMsT0FBTyxDQUFDWCxJQUFJWSxRQUFRLEtBQUtaLElBQUlZLFFBQVEsQ0FBQ0MsTUFBTSxHQUFHLElBQUliLElBQUlZLFFBQVEsQ0FBQyxFQUFFLENBQUNFLEdBQUcsR0FBRztZQUMzRkMsZUFBZUwsTUFBTUMsT0FBTyxDQUFDWCxJQUFJWSxRQUFRLEtBQUtaLElBQUlZLFFBQVEsQ0FBQ0MsTUFBTSxHQUFHYixJQUFJWSxRQUFRLENBQUNDLE1BQU0sR0FBRztZQUMxRkcsY0FBY04sTUFBTUMsT0FBTyxDQUFDWCxJQUFJWSxRQUFRLEtBQUtaLElBQUlZLFFBQVEsQ0FBQ0MsTUFBTSxHQUFHLElBQUksSUFBSWIsSUFBSVEsQ0FBQztRQUNwRjtJQUNKO0FBQ0o7QUFDQXZELDBCQUEwQixHQUFHSztBQUM3QixjQUFjLEdBQ2QsTUFBTUQsNEJBQTRCRTtJQUM5Qk8sWUFBWWdCLFVBQVUsRUFBRWEsTUFBTSxFQUFFZCxNQUFNLEVBQUVaLE9BQU8sQ0FBRTtRQUM3QyxLQUFLLENBQUNhLFdBQVdjLENBQUMsQ0FBQ0MsU0FBUyxFQUFFO1lBQUMxQyxvQkFBb0J3QyxRQUFRZCxRQUFRO2dCQUFFLEdBQUdaLE9BQU87Z0JBQUVNLE9BQU87WUFBSztTQUFHLEVBQUVOO1FBQ2xHLElBQUksQ0FBQyxDQUFDLEdBQUdQLFFBQVFvQyxrQkFBa0IsRUFBRWpCLFNBQVM7WUFDMUMsTUFBTSxJQUFJckIsUUFBUXVDLHlCQUF5QixDQUFDO1FBQ2hEO0lBQ0o7SUFDQSxNQUFNdkIsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTXNCLE1BQU0sTUFBTSxLQUFLLENBQUN4QixRQUFRQyxRQUFRQztRQUN4QyxJQUFJLElBQUksQ0FBQ3VCLE9BQU8sSUFBSSxNQUNoQixPQUFPRDtRQUNYLElBQUlBLElBQUlFLElBQUksRUFDUixNQUFNLElBQUkxQyxRQUFRMkMsZ0JBQWdCLENBQUNIO1FBQ3ZDLElBQUlBLElBQUlJLFdBQVcsRUFDZixNQUFNLElBQUk1QyxRQUFRMkMsZ0JBQWdCLENBQUNILElBQUlJLFdBQVcsQ0FBQyxFQUFFO1FBQ3pELE9BQU87WUFDSEMsY0FBYyxJQUFJLENBQUNqQixZQUFZLEVBQUVDLE1BQU07WUFDdkNpQixlQUFlTixJQUFJTyxTQUFTLElBQUlQLElBQUlRLENBQUM7WUFDckNDLFlBQVlDLE1BQU1DLE9BQU8sQ0FBQ1gsSUFBSVksUUFBUSxLQUFLWixJQUFJWSxRQUFRLENBQUNDLE1BQU0sR0FBRyxJQUFJYixJQUFJWSxRQUFRLENBQUMsRUFBRSxDQUFDRSxHQUFHLEdBQUc7WUFDM0ZDLGVBQWVMLE1BQU1DLE9BQU8sQ0FBQ1gsSUFBSVksUUFBUSxLQUFLWixJQUFJWSxRQUFRLENBQUNDLE1BQU0sR0FBR2IsSUFBSVksUUFBUSxDQUFDQyxNQUFNLEdBQUc7WUFDMUZHLGNBQWNOLE1BQU1DLE9BQU8sQ0FBQ1gsSUFBSVksUUFBUSxLQUFLWixJQUFJWSxRQUFRLENBQUNDLE1BQU0sR0FBRyxJQUFJLElBQUliLElBQUlRLENBQUM7UUFDcEY7SUFDSjtBQUNKO0FBQ0F2RCwyQkFBMkIsR0FBR0k7QUFDOUIsY0FBYyxHQUNkLE1BQU1ELDRCQUE0Qkc7SUFDOUJPLFlBQVlnQixVQUFVLEVBQUVhLE1BQU0sRUFBRXNCLFdBQVcsRUFBRWhELE9BQU8sQ0FBRTtRQUNsRCxLQUFLLENBQUNhLFdBQVdjLENBQUMsQ0FBQ0MsU0FBUyxFQUFFO1lBQUMxQyxvQkFBb0J3QyxRQUFRc0IsYUFBYTtnQkFBRSxHQUFHaEQsT0FBTztnQkFBRU0sT0FBTztZQUFNO1NBQUcsRUFBRU47UUFDeEcsSUFBSSxDQUFDLEdBQUdQLFFBQVFvQyxrQkFBa0IsRUFBRW1CLGNBQWM7WUFDOUMsTUFBTSxJQUFJekQsUUFBUXVDLHlCQUF5QixDQUFDO1FBQ2hEO0lBQ0o7SUFDQSxNQUFNdkIsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTXNCLE1BQU0sTUFBTSxLQUFLLENBQUN4QixRQUFRQyxRQUFRQztRQUN4QyxJQUFJLElBQUksQ0FBQ3VCLE9BQU8sSUFBSSxNQUNoQixPQUFPRDtRQUNYLElBQUlBLElBQUlFLElBQUksRUFDUixNQUFNLElBQUkxQyxRQUFRMkMsZ0JBQWdCLENBQUNIO1FBQ3ZDLElBQUlBLElBQUlJLFdBQVcsRUFDZixNQUFNLElBQUk1QyxRQUFRMkMsZ0JBQWdCLENBQUNILElBQUlJLFdBQVcsQ0FBQyxFQUFFO1FBQ3pELE9BQU87WUFDSEMsY0FBYyxJQUFJLENBQUNqQixZQUFZLEVBQUVDLE1BQU07WUFDdkNpQixlQUFlTixJQUFJTyxTQUFTLElBQUlQLElBQUlRLENBQUM7WUFDckNDLFlBQVlDLE1BQU1DLE9BQU8sQ0FBQ1gsSUFBSVksUUFBUSxLQUFLWixJQUFJWSxRQUFRLENBQUNDLE1BQU0sR0FBRyxJQUFJYixJQUFJWSxRQUFRLENBQUMsRUFBRSxDQUFDRSxHQUFHLEdBQUc7WUFDM0ZDLGVBQWVMLE1BQU1DLE9BQU8sQ0FBQ1gsSUFBSVksUUFBUSxLQUFLWixJQUFJWSxRQUFRLENBQUNDLE1BQU0sR0FBR2IsSUFBSVksUUFBUSxDQUFDQyxNQUFNLEdBQUc7WUFDMUZHLGNBQWNOLE1BQU1DLE9BQU8sQ0FBQ1gsSUFBSVksUUFBUSxLQUFLWixJQUFJWSxRQUFRLENBQUNDLE1BQU0sR0FBRyxJQUFJLElBQUliLElBQUlRLENBQUM7UUFDcEY7SUFDSjtBQUNKO0FBQ0F2RCwyQkFBMkIsR0FBR0c7QUFDOUIsU0FBU0Qsb0JBQW9Cd0MsTUFBTSxFQUFFZCxNQUFNLEVBQUVaLE9BQU87SUFDaEQsSUFBSTBCLFVBQVUsUUFBUSxPQUFPQSxXQUFXLFVBQVU7UUFDOUMsTUFBTSxJQUFJbkMsUUFBUXVDLHlCQUF5QixDQUFDO0lBQ2hEO0lBQ0EsSUFBSWxCLFVBQVUsUUFBUSxPQUFPQSxXQUFXLFVBQVU7UUFDOUMsTUFBTSxJQUFJckIsUUFBUXVDLHlCQUF5QixDQUFDO0lBQ2hEO0lBQ0EsTUFBTXpCLEtBQUs7UUFBRTRDLEdBQUd2QjtRQUFRd0IsR0FBR3RDO0lBQU87SUFDbEMsSUFBSSxPQUFPWixRQUFRbUQsTUFBTSxLQUFLLFdBQVc7UUFDckM5QyxHQUFHOEMsTUFBTSxHQUFHbkQsUUFBUW1ELE1BQU07SUFDOUI7SUFDQSxJQUFJbkQsUUFBUU0sS0FBSyxFQUFFO1FBQ2ZELEdBQUdDLEtBQUssR0FBR04sUUFBUU0sS0FBSztJQUM1QjtJQUNBLElBQUlOLFFBQVF1QixJQUFJLEVBQUU7UUFDZGxCLEdBQUdrQixJQUFJLEdBQUd2QixRQUFRdUIsSUFBSTtJQUMxQjtJQUNBLElBQUl2QixRQUFRb0QsWUFBWSxFQUFFO1FBQ3RCL0MsR0FBRytDLFlBQVksR0FBR3BELFFBQVFvRCxZQUFZO0lBQzFDO0lBQ0EsSUFBSXBELFFBQVFxRCxTQUFTLEVBQUU7UUFDbkJoRCxHQUFHZ0QsU0FBUyxHQUFHckQsUUFBUXFELFNBQVM7SUFDcEM7SUFDQSxPQUFPaEQ7QUFDWDtBQUNBckIsMkJBQTJCLEdBQUdFO0FBQzdCLElBQUdTLFlBQVkyRCxhQUFhLEVBQUVoRSxpQkFBaUI7SUFBQ0ssWUFBWTRELE1BQU0sQ0FBQ0MsU0FBUztJQUFFN0QsWUFBWTRELE1BQU0sQ0FBQ0UsZUFBZTtJQUFFOUQsWUFBWTRELE1BQU0sQ0FBQ0csY0FBYztDQUFDO0FBQ3BKLElBQUcvRCxZQUFZMkQsYUFBYSxFQUFFakUsb0JBQW9CO0lBQy9DTSxZQUFZNEQsTUFBTSxDQUFDQyxTQUFTO0lBQzVCN0QsWUFBWTRELE1BQU0sQ0FBQ0UsZUFBZTtJQUNsQzlELFlBQVk0RCxNQUFNLENBQUNJLFdBQVc7SUFDOUJoRSxZQUFZNEQsTUFBTSxDQUFDRyxjQUFjO0NBQ3BDO0FBQ0EsSUFBRy9ELFlBQVkyRCxhQUFhLEVBQUVsRSxxQkFBcUI7SUFDaERPLFlBQVk0RCxNQUFNLENBQUNFLGVBQWU7SUFDbEM5RCxZQUFZNEQsTUFBTSxDQUFDSSxXQUFXO0lBQzlCaEUsWUFBWTRELE1BQU0sQ0FBQ0csY0FBYztDQUNwQztBQUNBLElBQUcvRCxZQUFZMkQsYUFBYSxFQUFFbkUscUJBQXFCO0lBQ2hEUSxZQUFZNEQsTUFBTSxDQUFDQyxTQUFTO0lBQzVCN0QsWUFBWTRELE1BQU0sQ0FBQ0UsZUFBZTtJQUNsQzlELFlBQVk0RCxNQUFNLENBQUNHLGNBQWM7Q0FDcEMsR0FDRCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdXBkYXRlLmpzP2YwN2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1ha2VVcGRhdGVTdGF0ZW1lbnQgPSBleHBvcnRzLlJlcGxhY2VPbmVPcGVyYXRpb24gPSBleHBvcnRzLlVwZGF0ZU1hbnlPcGVyYXRpb24gPSBleHBvcnRzLlVwZGF0ZU9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuVXBkYXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogVXBkYXRlT3BlcmF0aW9uIGlzIHVzZWQgaW4gYnVsayB3cml0ZSwgd2hpbGUgVXBkYXRlT25lT3BlcmF0aW9uIGFuZCBVcGRhdGVNYW55T3BlcmF0aW9uIGFyZSBvbmx5IHVzZWQgaW4gdGhlIGNvbGxlY3Rpb25zIEFQSVxuICovXG5jbGFzcyBVcGRhdGVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIHN0YXRlbWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLnN0YXRlbWVudHMgPSBzdGF0ZW1lbnRzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAndXBkYXRlJztcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIGlmIChzdXBlci5jYW5SZXRyeVdyaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHMuZXZlcnkob3AgPT4gb3AubXVsdGkgPT0gbnVsbCB8fCBvcC5tdWx0aSA9PT0gZmFsc2UpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHVwZGF0ZTogdGhpcy5ucy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgdXBkYXRlczogdGhpcy5zdGF0ZW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID0gb3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGV0KSB7XG4gICAgICAgICAgICBjb21tYW5kLmxldCA9IG9wdGlvbnMubGV0O1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1bmFja25vd2xlZGdlZFdyaXRlID0gdGhpcy53cml0ZUNvbmNlcm4gJiYgdGhpcy53cml0ZUNvbmNlcm4udyA9PT0gMDtcbiAgICAgICAgaWYgKHVuYWNrbm93bGVkZ2VkV3JpdGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlbWVudHMuZmluZCgobykgPT4gby5oaW50KSkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNTQxKTogZml4IGVycm9yIGZvciBoaW50IHdpdGggdW5hY2tub3dsZWRnZWQgd3JpdGVzXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IoYGhpbnQgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHVuYWNrbm93bGVkZ2VkIHdyaXRlc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuVXBkYXRlT3BlcmF0aW9uID0gVXBkYXRlT3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVXBkYXRlT25lT3BlcmF0aW9uIGV4dGVuZHMgVXBkYXRlT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZVVwZGF0ZVN0YXRlbWVudChmaWx0ZXIsIHVwZGF0ZSwgeyAuLi5vcHRpb25zLCBtdWx0aTogZmFsc2UgfSldLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfMS5oYXNBdG9taWNPcGVyYXRvcnMpKHVwZGF0ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1VwZGF0ZSBkb2N1bWVudCByZXF1aXJlcyBhdG9taWMgb3BlcmF0b3JzJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICBpZiAodGhpcy5leHBsYWluICE9IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgbW9kaWZpZWRDb3VudDogcmVzLm5Nb2RpZmllZCA/PyByZXMubixcbiAgICAgICAgICAgIHVwc2VydGVkSWQ6IEFycmF5LmlzQXJyYXkocmVzLnVwc2VydGVkKSAmJiByZXMudXBzZXJ0ZWQubGVuZ3RoID4gMCA/IHJlcy51cHNlcnRlZFswXS5faWQgOiBudWxsLFxuICAgICAgICAgICAgdXBzZXJ0ZWRDb3VudDogQXJyYXkuaXNBcnJheShyZXMudXBzZXJ0ZWQpICYmIHJlcy51cHNlcnRlZC5sZW5ndGggPyByZXMudXBzZXJ0ZWQubGVuZ3RoIDogMCxcbiAgICAgICAgICAgIG1hdGNoZWRDb3VudDogQXJyYXkuaXNBcnJheShyZXMudXBzZXJ0ZWQpICYmIHJlcy51cHNlcnRlZC5sZW5ndGggPiAwID8gMCA6IHJlcy5uXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5VcGRhdGVPbmVPcGVyYXRpb24gPSBVcGRhdGVPbmVPcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5jbGFzcyBVcGRhdGVNYW55T3BlcmF0aW9uIGV4dGVuZHMgVXBkYXRlT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZVVwZGF0ZVN0YXRlbWVudChmaWx0ZXIsIHVwZGF0ZSwgeyAuLi5vcHRpb25zLCBtdWx0aTogdHJ1ZSB9KV0sIG9wdGlvbnMpO1xuICAgICAgICBpZiAoISgwLCB1dGlsc18xLmhhc0F0b21pY09wZXJhdG9ycykodXBkYXRlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignVXBkYXRlIGRvY3VtZW50IHJlcXVpcmVzIGF0b21pYyBvcGVyYXRvcnMnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlci5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4gIT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBtb2RpZmllZENvdW50OiByZXMubk1vZGlmaWVkID8/IHJlcy5uLFxuICAgICAgICAgICAgdXBzZXJ0ZWRJZDogQXJyYXkuaXNBcnJheShyZXMudXBzZXJ0ZWQpICYmIHJlcy51cHNlcnRlZC5sZW5ndGggPiAwID8gcmVzLnVwc2VydGVkWzBdLl9pZCA6IG51bGwsXG4gICAgICAgICAgICB1cHNlcnRlZENvdW50OiBBcnJheS5pc0FycmF5KHJlcy51cHNlcnRlZCkgJiYgcmVzLnVwc2VydGVkLmxlbmd0aCA/IHJlcy51cHNlcnRlZC5sZW5ndGggOiAwLFxuICAgICAgICAgICAgbWF0Y2hlZENvdW50OiBBcnJheS5pc0FycmF5KHJlcy51cHNlcnRlZCkgJiYgcmVzLnVwc2VydGVkLmxlbmd0aCA+IDAgPyAwIDogcmVzLm5cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlVwZGF0ZU1hbnlPcGVyYXRpb24gPSBVcGRhdGVNYW55T3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUmVwbGFjZU9uZU9wZXJhdGlvbiBleHRlbmRzIFVwZGF0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCByZXBsYWNlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZVVwZGF0ZVN0YXRlbWVudChmaWx0ZXIsIHJlcGxhY2VtZW50LCB7IC4uLm9wdGlvbnMsIG11bHRpOiBmYWxzZSB9KV0sIG9wdGlvbnMpO1xuICAgICAgICBpZiAoKDAsIHV0aWxzXzEuaGFzQXRvbWljT3BlcmF0b3JzKShyZXBsYWNlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1JlcGxhY2VtZW50IGRvY3VtZW50IG11c3Qgbm90IGNvbnRhaW4gYXRvbWljIG9wZXJhdG9ycycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbiAhPSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgaWYgKHJlcy5jb2RlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMpO1xuICAgICAgICBpZiAocmVzLndyaXRlRXJyb3JzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMud3JpdGVFcnJvcnNbMF0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB0aGlzLndyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgIG1vZGlmaWVkQ291bnQ6IHJlcy5uTW9kaWZpZWQgPz8gcmVzLm4sXG4gICAgICAgICAgICB1cHNlcnRlZElkOiBBcnJheS5pc0FycmF5KHJlcy51cHNlcnRlZCkgJiYgcmVzLnVwc2VydGVkLmxlbmd0aCA+IDAgPyByZXMudXBzZXJ0ZWRbMF0uX2lkIDogbnVsbCxcbiAgICAgICAgICAgIHVwc2VydGVkQ291bnQ6IEFycmF5LmlzQXJyYXkocmVzLnVwc2VydGVkKSAmJiByZXMudXBzZXJ0ZWQubGVuZ3RoID8gcmVzLnVwc2VydGVkLmxlbmd0aCA6IDAsXG4gICAgICAgICAgICBtYXRjaGVkQ291bnQ6IEFycmF5LmlzQXJyYXkocmVzLnVwc2VydGVkKSAmJiByZXMudXBzZXJ0ZWQubGVuZ3RoID4gMCA/IDAgOiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUmVwbGFjZU9uZU9wZXJhdGlvbiA9IFJlcGxhY2VPbmVPcGVyYXRpb247XG5mdW5jdGlvbiBtYWtlVXBkYXRlU3RhdGVtZW50KGZpbHRlciwgdXBkYXRlLCBvcHRpb25zKSB7XG4gICAgaWYgKGZpbHRlciA9PSBudWxsIHx8IHR5cGVvZiBmaWx0ZXIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1NlbGVjdG9yIG11c3QgYmUgYSB2YWxpZCBKYXZhU2NyaXB0IG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlID09IG51bGwgfHwgdHlwZW9mIHVwZGF0ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignRG9jdW1lbnQgbXVzdCBiZSBhIHZhbGlkIEphdmFTY3JpcHQgb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IG9wID0geyBxOiBmaWx0ZXIsIHU6IHVwZGF0ZSB9O1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy51cHNlcnQgPT09ICdib29sZWFuJykge1xuICAgICAgICBvcC51cHNlcnQgPSBvcHRpb25zLnVwc2VydDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubXVsdGkpIHtcbiAgICAgICAgb3AubXVsdGkgPSBvcHRpb25zLm11bHRpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICAgIG9wLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmFycmF5RmlsdGVycykge1xuICAgICAgICBvcC5hcnJheUZpbHRlcnMgPSBvcHRpb25zLmFycmF5RmlsdGVycztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uKSB7XG4gICAgICAgIG9wLmNvbGxhdGlvbiA9IG9wdGlvbnMuY29sbGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gb3A7XG59XG5leHBvcnRzLm1ha2VVcGRhdGVTdGF0ZW1lbnQgPSBtYWtlVXBkYXRlU3RhdGVtZW50O1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKFVwZGF0ZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKFVwZGF0ZU9uZU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShVcGRhdGVNYW55T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShSZXBsYWNlT25lT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTlxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWFrZVVwZGF0ZVN0YXRlbWVudCIsIlJlcGxhY2VPbmVPcGVyYXRpb24iLCJVcGRhdGVNYW55T3BlcmF0aW9uIiwiVXBkYXRlT25lT3BlcmF0aW9uIiwiVXBkYXRlT3BlcmF0aW9uIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJ1dGlsc18xIiwiY29tbWFuZF8xIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJucyIsInN0YXRlbWVudHMiLCJvcHRpb25zIiwidW5kZWZpbmVkIiwiY29tbWFuZE5hbWUiLCJjYW5SZXRyeVdyaXRlIiwiZXZlcnkiLCJvcCIsIm11bHRpIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJvcmRlcmVkIiwiY29tbWFuZCIsInVwZGF0ZSIsImNvbGxlY3Rpb24iLCJ1cGRhdGVzIiwiYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uIiwibGV0IiwiY29tbWVudCIsInVuYWNrbm93bGVkZ2VkV3JpdGUiLCJ3cml0ZUNvbmNlcm4iLCJ3IiwiZmluZCIsIm8iLCJoaW50IiwiTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IiLCJleGVjdXRlQ29tbWFuZCIsImZpbHRlciIsInMiLCJuYW1lc3BhY2UiLCJoYXNBdG9taWNPcGVyYXRvcnMiLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIiwicmVzIiwiZXhwbGFpbiIsImNvZGUiLCJNb25nb1NlcnZlckVycm9yIiwid3JpdGVFcnJvcnMiLCJhY2tub3dsZWRnZWQiLCJtb2RpZmllZENvdW50Iiwibk1vZGlmaWVkIiwibiIsInVwc2VydGVkSWQiLCJBcnJheSIsImlzQXJyYXkiLCJ1cHNlcnRlZCIsImxlbmd0aCIsIl9pZCIsInVwc2VydGVkQ291bnQiLCJtYXRjaGVkQ291bnQiLCJyZXBsYWNlbWVudCIsInEiLCJ1IiwidXBzZXJ0IiwiYXJyYXlGaWx0ZXJzIiwiY29sbGF0aW9uIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFVFJZQUJMRSIsIldSSVRFX09QRVJBVElPTiIsIlNLSVBfQ09MTEFUSU9OIiwiRVhQTEFJTkFCTEUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/validate_collection.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */ class ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options){\n        // Decorate command with extra options\n        const command = {\n            validate: collectionName\n        };\n        const keys = Object.keys(options);\n        for(let i = 0; i < keys.length; i++){\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== \"session\") {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return \"validate\";\n    }\n    async execute(server, session) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command);\n        if (doc.result != null && typeof doc.result !== \"string\") throw new error_1.MongoUnexpectedServerResponseError(\"Error with validation data\");\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null) throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid) throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation; //# sourceMappingURL=validate_collection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQ0FBbUMsR0FBRyxLQUFLO0FBQzNDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1DLFlBQVlELG1CQUFPQSxDQUFDLHlFQUFXO0FBQ3JDLGNBQWMsR0FDZCxNQUFNRixvQ0FBb0NHLFVBQVVDLGdCQUFnQjtJQUNoRUMsWUFBWUMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sQ0FBRTtRQUN4QyxzQ0FBc0M7UUFDdEMsTUFBTUMsVUFBVTtZQUFFQyxVQUFVSDtRQUFlO1FBQzNDLE1BQU1JLE9BQU9mLE9BQU9lLElBQUksQ0FBQ0g7UUFDekIsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlELEtBQUtFLE1BQU0sRUFBRUQsSUFBSztZQUNsQyxJQUFJaEIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLFNBQVNHLElBQUksQ0FBQ0MsRUFBRSxLQUFLRCxJQUFJLENBQUNDLEVBQUUsS0FBSyxXQUFXO2dCQUNqRkgsT0FBTyxDQUFDRSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxHQUFHSixPQUFPLENBQUNHLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1lBQ3ZDO1FBQ0o7UUFDQSxLQUFLLENBQUNOLE1BQU1XLENBQUMsQ0FBQ0MsRUFBRSxFQUFFVjtRQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNGLGNBQWMsR0FBR0E7SUFDMUI7SUFDQSxJQUFJWSxjQUFjO1FBQ2QsT0FBTztJQUNYO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTWYsaUJBQWlCLElBQUksQ0FBQ0EsY0FBYztRQUMxQyxNQUFNZ0IsTUFBTSxNQUFNLEtBQUssQ0FBQ0MsZUFBZUgsUUFBUUMsU0FBUyxJQUFJLENBQUNiLE9BQU87UUFDcEUsSUFBSWMsSUFBSUUsTUFBTSxJQUFJLFFBQVEsT0FBT0YsSUFBSUUsTUFBTSxLQUFLLFVBQzVDLE1BQU0sSUFBSXhCLFFBQVF5QixrQ0FBa0MsQ0FBQztRQUN6RCxJQUFJSCxJQUFJRSxNQUFNLElBQUksUUFBUUYsSUFBSUUsTUFBTSxDQUFDRSxLQUFLLENBQUMsd0JBQXdCLE1BQy9ELE1BQU0sSUFBSTFCLFFBQVF5QixrQ0FBa0MsQ0FBQyxDQUFDLG1CQUFtQixFQUFFbkIsZUFBZSxDQUFDO1FBQy9GLElBQUlnQixJQUFJSyxLQUFLLElBQUksUUFBUSxDQUFDTCxJQUFJSyxLQUFLLEVBQy9CLE1BQU0sSUFBSTNCLFFBQVF5QixrQ0FBa0MsQ0FBQyxDQUFDLG1CQUFtQixFQUFFbkIsZUFBZSxDQUFDO1FBQy9GLE9BQU9nQjtJQUNYO0FBQ0o7QUFDQXpCLG1DQUFtQyxHQUFHRSw2QkFDdEMsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3ZhbGlkYXRlX2NvbGxlY3Rpb24uanM/YmE5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoYWRtaW4sIGNvbGxlY3Rpb25OYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIERlY29yYXRlIGNvbW1hbmQgd2l0aCBleHRyYSBvcHRpb25zXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IHZhbGlkYXRlOiBjb2xsZWN0aW9uTmFtZSB9O1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBrZXlzW2ldKSAmJiBrZXlzW2ldICE9PSAnc2Vzc2lvbicpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kW2tleXNbaV1dID0gb3B0aW9uc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlcihhZG1pbi5zLmRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb25OYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAndmFsaWRhdGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IHRoaXMuY29sbGVjdGlvbk5hbWU7XG4gICAgICAgIGNvbnN0IGRvYyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgdGhpcy5jb21tYW5kKTtcbiAgICAgICAgaWYgKGRvYy5yZXN1bHQgIT0gbnVsbCAmJiB0eXBlb2YgZG9jLnJlc3VsdCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKCdFcnJvciB3aXRoIHZhbGlkYXRpb24gZGF0YScpO1xuICAgICAgICBpZiAoZG9jLnJlc3VsdCAhPSBudWxsICYmIGRvYy5yZXN1bHQubWF0Y2goL2V4Y2VwdGlvbnxjb3JydXB0LykgIT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoYEludmFsaWQgY29sbGVjdGlvbiAke2NvbGxlY3Rpb25OYW1lfWApO1xuICAgICAgICBpZiAoZG9jLnZhbGlkICE9IG51bGwgJiYgIWRvYy52YWxpZClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoYEludmFsaWQgY29sbGVjdGlvbiAke2NvbGxlY3Rpb25OYW1lfWApO1xuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVfY29sbGVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24iLCJlcnJvcl8xIiwicmVxdWlyZSIsImNvbW1hbmRfMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImFkbWluIiwiY29sbGVjdGlvbk5hbWUiLCJvcHRpb25zIiwiY29tbWFuZCIsInZhbGlkYXRlIiwia2V5cyIsImkiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzIiwiZGIiLCJjb21tYW5kTmFtZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiZG9jIiwiZXhlY3V0ZUNvbW1hbmQiLCJyZXN1bHQiLCJNb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yIiwibWF0Y2giLCJ2YWxpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_concern.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/read_concern.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */ exports.ReadConcernLevel = Object.freeze({\n    local: \"local\",\n    majority: \"majority\",\n    linearizable: \"linearizable\",\n    available: \"available\",\n    snapshot: \"snapshot\"\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */ class ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/ constructor(level){\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */ this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */ static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            } else if (typeof readConcern === \"string\") {\n                return new ReadConcern(readConcern);\n            } else if (\"level\" in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return {\n            level: this.level\n        };\n    }\n}\nexports.ReadConcern = ReadConcern; //# sourceMappingURL=read_concern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvcmVhZF9jb25jZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSztBQUN0RCxZQUFZLEdBQ1pBLHdCQUF3QixHQUFHRixPQUFPTSxNQUFNLENBQUM7SUFDckNDLE9BQU87SUFDUEMsVUFBVTtJQUNWQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsVUFBVTtBQUNkO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsTUFBTVA7SUFDRix5REFBeUQsR0FDekRRLFlBQVlDLEtBQUssQ0FBRTtRQUNmOzs7OztTQUtDLEdBQ0QsSUFBSSxDQUFDQSxLQUFLLEdBQUdYLFFBQVFHLGdCQUFnQixDQUFDUSxNQUFNLElBQUlBO0lBQ3BEO0lBQ0E7Ozs7S0FJQyxHQUNELE9BQU9DLFlBQVlDLE9BQU8sRUFBRTtRQUN4QixJQUFJQSxXQUFXLE1BQU07WUFDakI7UUFDSjtRQUNBLElBQUlBLFFBQVFDLFdBQVcsRUFBRTtZQUNyQixNQUFNLEVBQUVBLFdBQVcsRUFBRSxHQUFHRDtZQUN4QixJQUFJQyx1QkFBdUJaLGFBQWE7Z0JBQ3BDLE9BQU9ZO1lBQ1gsT0FDSyxJQUFJLE9BQU9BLGdCQUFnQixVQUFVO2dCQUN0QyxPQUFPLElBQUlaLFlBQVlZO1lBQzNCLE9BQ0ssSUFBSSxXQUFXQSxlQUFlQSxZQUFZSCxLQUFLLEVBQUU7Z0JBQ2xELE9BQU8sSUFBSVQsWUFBWVksWUFBWUgsS0FBSztZQUM1QztRQUNKO1FBQ0EsSUFBSUUsUUFBUUYsS0FBSyxFQUFFO1lBQ2YsT0FBTyxJQUFJVCxZQUFZVyxRQUFRRixLQUFLO1FBQ3hDO1FBQ0E7SUFDSjtJQUNBLFdBQVdJLFdBQVc7UUFDbEIsT0FBT2YsUUFBUUcsZ0JBQWdCLENBQUNHLFFBQVE7SUFDNUM7SUFDQSxXQUFXVSxZQUFZO1FBQ25CLE9BQU9oQixRQUFRRyxnQkFBZ0IsQ0FBQ0ssU0FBUztJQUM3QztJQUNBLFdBQVdTLGVBQWU7UUFDdEIsT0FBT2pCLFFBQVFHLGdCQUFnQixDQUFDSSxZQUFZO0lBQ2hEO0lBQ0EsV0FBV1csV0FBVztRQUNsQixPQUFPbEIsUUFBUUcsZ0JBQWdCLENBQUNNLFFBQVE7SUFDNUM7SUFDQVUsU0FBUztRQUNMLE9BQU87WUFBRVIsT0FBTyxJQUFJLENBQUNBLEtBQUs7UUFBQztJQUMvQjtBQUNKO0FBQ0FYLG1CQUFtQixHQUFHRSxhQUN0Qix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3JlYWRfY29uY2Vybi5qcz85NWNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWFkQ29uY2VybiA9IGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbCA9IHZvaWQgMDtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBsb2NhbDogJ2xvY2FsJyxcbiAgICBtYWpvcml0eTogJ21ham9yaXR5JyxcbiAgICBsaW5lYXJpemFibGU6ICdsaW5lYXJpemFibGUnLFxuICAgIGF2YWlsYWJsZTogJ2F2YWlsYWJsZScsXG4gICAgc25hcHNob3Q6ICdzbmFwc2hvdCdcbn0pO1xuLyoqXG4gKiBUaGUgTW9uZ29EQiBSZWFkQ29uY2Vybiwgd2hpY2ggYWxsb3dzIGZvciBjb250cm9sIG9mIHRoZSBjb25zaXN0ZW5jeSBhbmQgaXNvbGF0aW9uIHByb3BlcnRpZXNcbiAqIG9mIHRoZSBkYXRhIHJlYWQgZnJvbSByZXBsaWNhIHNldHMgYW5kIHJlcGxpY2Egc2V0IHNoYXJkcy5cbiAqIEBwdWJsaWNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9yZWFkLWNvbmNlcm4vaW5kZXguaHRtbFxuICovXG5jbGFzcyBSZWFkQ29uY2VybiB7XG4gICAgLyoqIENvbnN0cnVjdHMgYSBSZWFkQ29uY2VybiBmcm9tIHRoZSByZWFkIGNvbmNlcm4gbGV2ZWwuKi9cbiAgICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzcGVjIHRlc3QgZXhpc3RzIHRoYXQgYWxsb3dzIGxldmVsIHRvIGJlIGFueSBzdHJpbmcuXG4gICAgICAgICAqIFwiaW52YWxpZCByZWFkQ29uY2VybiB3aXRoIG91dCBzdGFnZVwiXG4gICAgICAgICAqIEBzZWUgLi90ZXN0L3NwZWMvY3J1ZC92Mi9hZ2dyZWdhdGUtb3V0LXJlYWRDb25jZXJuLmpzb25cbiAgICAgICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9uZ29kYi9zcGVjaWZpY2F0aW9ucy9ibG9iL21hc3Rlci9zb3VyY2UvcmVhZC13cml0ZS1jb25jZXJuL3JlYWQtd3JpdGUtY29uY2Vybi5yc3QjdW5rbm93bi1sZXZlbHMtYW5kLWFkZGl0aW9uYWwtb3B0aW9ucy1mb3Itc3RyaW5nLWJhc2VkLXJlYWRjb25jZXJuc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZXZlbCA9IGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbFtsZXZlbF0gPz8gbGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIFJlYWRDb25jZXJuIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSB3cml0ZSBjb25jZXJuLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5yZWFkQ29uY2Vybikge1xuICAgICAgICAgICAgY29uc3QgeyByZWFkQ29uY2VybiB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGlmIChyZWFkQ29uY2VybiBpbnN0YW5jZW9mIFJlYWRDb25jZXJuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRDb25jZXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJlYWRDb25jZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ocmVhZENvbmNlcm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ2xldmVsJyBpbiByZWFkQ29uY2VybiAmJiByZWFkQ29uY2Vybi5sZXZlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ocmVhZENvbmNlcm4ubGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxldmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRDb25jZXJuKG9wdGlvbnMubGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBNQUpPUklUWSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5tYWpvcml0eTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBBVkFJTEFCTEUoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwuYXZhaWxhYmxlO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IExJTkVBUklaQUJMRSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5saW5lYXJpemFibGU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgU05BUFNIT1QoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwuc25hcHNob3Q7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHsgbGV2ZWw6IHRoaXMubGV2ZWwgfTtcbiAgICB9XG59XG5leHBvcnRzLlJlYWRDb25jZXJuID0gUmVhZENvbmNlcm47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFkX2NvbmNlcm4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVhZENvbmNlcm4iLCJSZWFkQ29uY2VybkxldmVsIiwiZnJlZXplIiwibG9jYWwiLCJtYWpvcml0eSIsImxpbmVhcml6YWJsZSIsImF2YWlsYWJsZSIsInNuYXBzaG90IiwiY29uc3RydWN0b3IiLCJsZXZlbCIsImZyb21PcHRpb25zIiwib3B0aW9ucyIsInJlYWRDb25jZXJuIiwiTUFKT1JJVFkiLCJBVkFJTEFCTEUiLCJMSU5FQVJJWkFCTEUiLCJTTkFQU0hPVCIsInRvSlNPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_preference.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/read_preference.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */ exports.ReadPreferenceMode = Object.freeze({\n    primary: \"primary\",\n    primaryPreferred: \"primaryPreferred\",\n    secondary: \"secondary\",\n    secondaryPreferred: \"secondaryPreferred\",\n    nearest: \"nearest\"\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */ class ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */ constructor(mode, tags, options){\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === \"object\" && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        } else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError(\"ReadPreference tags must be an array\");\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError(\"maxStalenessSeconds must be a positive integer\");\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError(\"Primary read preference cannot be combined with tags\");\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError(\"Primary read preference cannot be combined with maxStalenessSeconds\");\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError(\"Primary read preference cannot be combined with hedge\");\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */ static fromOptions(options) {\n        if (!options) return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === \"string\") {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === \"object\") {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === \"string\") {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */ static translate(options) {\n        if (options.readPreference == null) return options;\n        const r = options.readPreference;\n        if (typeof r === \"string\") {\n            options.readPreference = new ReadPreference(r);\n        } else if (r && !(r instanceof ReadPreference) && typeof r === \"object\") {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === \"string\") {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        } else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */ static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */ isValid(mode) {\n        return ReadPreference.isValid(typeof mode === \"string\" ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */ secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */ equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */ toJSON() {\n        const readPreference = {\n            mode: this.mode\n        };\n        if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge) readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference; //# sourceMappingURL=read_preference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_preference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\n// shared state names\nexports.STATE_CLOSING = \"closing\";\nexports.STATE_CLOSED = \"closed\";\nexports.STATE_CONNECTING = \"connecting\";\nexports.STATE_CONNECTED = \"connected\";\n/**\n * An enumeration of topology types we know about\n * @public\n */ exports.TopologyType = Object.freeze({\n    Single: \"Single\",\n    ReplicaSetNoPrimary: \"ReplicaSetNoPrimary\",\n    ReplicaSetWithPrimary: \"ReplicaSetWithPrimary\",\n    Sharded: \"Sharded\",\n    Unknown: \"Unknown\",\n    LoadBalanced: \"LoadBalanced\"\n});\n/**\n * An enumeration of server types we know about\n * @public\n */ exports.ServerType = Object.freeze({\n    Standalone: \"Standalone\",\n    Mongos: \"Mongos\",\n    PossiblePrimary: \"PossiblePrimary\",\n    RSPrimary: \"RSPrimary\",\n    RSSecondary: \"RSSecondary\",\n    RSArbiter: \"RSArbiter\",\n    RSOther: \"RSOther\",\n    RSGhost: \"RSGhost\",\n    Unknown: \"Unknown\",\n    LoadBalancer: \"LoadBalancer\"\n});\n/** @internal */ function drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */ function _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    } else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime; //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSx1QkFBdUIsR0FBR0Esa0JBQWtCLEdBQUdBLG9CQUFvQixHQUFHQSx1QkFBdUIsR0FBR0Esd0JBQXdCLEdBQUdBLG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQzdNLE1BQU1VLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLHFCQUFxQjtBQUNyQlgscUJBQXFCLEdBQUc7QUFDeEJBLG9CQUFvQixHQUFHO0FBQ3ZCQSx3QkFBd0IsR0FBRztBQUMzQkEsdUJBQXVCLEdBQUc7QUFDMUI7OztDQUdDLEdBQ0RBLG9CQUFvQixHQUFHRixPQUFPYyxNQUFNLENBQUM7SUFDakNDLFFBQVE7SUFDUkMscUJBQXFCO0lBQ3JCQyx1QkFBdUI7SUFDdkJDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxjQUFjO0FBQ2xCO0FBQ0E7OztDQUdDLEdBQ0RsQixrQkFBa0IsR0FBR0YsT0FBT2MsTUFBTSxDQUFDO0lBQy9CTyxZQUFZO0lBQ1pDLFFBQVE7SUFDUkMsaUJBQWlCO0lBQ2pCQyxXQUFXO0lBQ1hDLGFBQWE7SUFDYkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVFQsU0FBUztJQUNUVSxjQUFjO0FBQ2xCO0FBQ0EsY0FBYyxHQUNkLFNBQVN4QixnQkFBZ0J5QixLQUFLO0lBQzFCQSxNQUFNQyxPQUFPLENBQUNuQixTQUFTb0IsWUFBWTtJQUNuQ0YsTUFBTUcsS0FBSztBQUNmO0FBQ0EvQix1QkFBdUIsR0FBR0c7QUFDMUIsNkVBQTZFLEdBQzdFLFNBQVNELG9CQUFvQjhCLE1BQU0sRUFBRUMsWUFBWTtJQUM3QyxJQUFJRCxPQUFPRSxXQUFXLElBQUksTUFBTTtRQUM1QkYsT0FBT0UsV0FBVyxHQUFHRDtJQUN6QixPQUNLO1FBQ0QsSUFBSUEsYUFBYUMsV0FBVyxDQUFDQyxXQUFXLENBQUNILE9BQU9FLFdBQVcsQ0FBQ0EsV0FBVyxHQUFHO1lBQ3RFRixPQUFPRSxXQUFXLEdBQUdEO1FBQ3pCO0lBQ0o7QUFDSjtBQUNBakMsMkJBQTJCLEdBQUdFLHFCQUM5QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vY29tbW9uLmpzP2ZhNzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9hZHZhbmNlQ2x1c3RlclRpbWUgPSBleHBvcnRzLmRyYWluVGltZXJRdWV1ZSA9IGV4cG9ydHMuU2VydmVyVHlwZSA9IGV4cG9ydHMuVG9wb2xvZ3lUeXBlID0gZXhwb3J0cy5TVEFURV9DT05ORUNURUQgPSBleHBvcnRzLlNUQVRFX0NPTk5FQ1RJTkcgPSBleHBvcnRzLlNUQVRFX0NMT1NFRCA9IGV4cG9ydHMuU1RBVEVfQ0xPU0lORyA9IHZvaWQgMDtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbi8vIHNoYXJlZCBzdGF0ZSBuYW1lc1xuZXhwb3J0cy5TVEFURV9DTE9TSU5HID0gJ2Nsb3NpbmcnO1xuZXhwb3J0cy5TVEFURV9DTE9TRUQgPSAnY2xvc2VkJztcbmV4cG9ydHMuU1RBVEVfQ09OTkVDVElORyA9ICdjb25uZWN0aW5nJztcbmV4cG9ydHMuU1RBVEVfQ09OTkVDVEVEID0gJ2Nvbm5lY3RlZCc7XG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHRvcG9sb2d5IHR5cGVzIHdlIGtub3cgYWJvdXRcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub3BvbG9neVR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTaW5nbGU6ICdTaW5nbGUnLFxuICAgIFJlcGxpY2FTZXROb1ByaW1hcnk6ICdSZXBsaWNhU2V0Tm9QcmltYXJ5JyxcbiAgICBSZXBsaWNhU2V0V2l0aFByaW1hcnk6ICdSZXBsaWNhU2V0V2l0aFByaW1hcnknLFxuICAgIFNoYXJkZWQ6ICdTaGFyZGVkJyxcbiAgICBVbmtub3duOiAnVW5rbm93bicsXG4gICAgTG9hZEJhbGFuY2VkOiAnTG9hZEJhbGFuY2VkJ1xufSk7XG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHNlcnZlciB0eXBlcyB3ZSBrbm93IGFib3V0XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuU2VydmVyVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIFN0YW5kYWxvbmU6ICdTdGFuZGFsb25lJyxcbiAgICBNb25nb3M6ICdNb25nb3MnLFxuICAgIFBvc3NpYmxlUHJpbWFyeTogJ1Bvc3NpYmxlUHJpbWFyeScsXG4gICAgUlNQcmltYXJ5OiAnUlNQcmltYXJ5JyxcbiAgICBSU1NlY29uZGFyeTogJ1JTU2Vjb25kYXJ5JyxcbiAgICBSU0FyYml0ZXI6ICdSU0FyYml0ZXInLFxuICAgIFJTT3RoZXI6ICdSU090aGVyJyxcbiAgICBSU0dob3N0OiAnUlNHaG9zdCcsXG4gICAgVW5rbm93bjogJ1Vua25vd24nLFxuICAgIExvYWRCYWxhbmNlcjogJ0xvYWRCYWxhbmNlcidcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gZHJhaW5UaW1lclF1ZXVlKHF1ZXVlKSB7XG4gICAgcXVldWUuZm9yRWFjaCh0aW1lcnNfMS5jbGVhclRpbWVvdXQpO1xuICAgIHF1ZXVlLmNsZWFyKCk7XG59XG5leHBvcnRzLmRyYWluVGltZXJRdWV1ZSA9IGRyYWluVGltZXJRdWV1ZTtcbi8qKiBTaGFyZWQgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGNsdXN0ZXJUaW1lIGZvciBhIGdpdmVuIHRvcG9sb2d5IG9yIHNlc3Npb24gKi9cbmZ1bmN0aW9uIF9hZHZhbmNlQ2x1c3RlclRpbWUoZW50aXR5LCAkY2x1c3RlclRpbWUpIHtcbiAgICBpZiAoZW50aXR5LmNsdXN0ZXJUaW1lID09IG51bGwpIHtcbiAgICAgICAgZW50aXR5LmNsdXN0ZXJUaW1lID0gJGNsdXN0ZXJUaW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCRjbHVzdGVyVGltZS5jbHVzdGVyVGltZS5ncmVhdGVyVGhhbihlbnRpdHkuY2x1c3RlclRpbWUuY2x1c3RlclRpbWUpKSB7XG4gICAgICAgICAgICBlbnRpdHkuY2x1c3RlclRpbWUgPSAkY2x1c3RlclRpbWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLl9hZHZhbmNlQ2x1c3RlclRpbWUgPSBfYWR2YW5jZUNsdXN0ZXJUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9hZHZhbmNlQ2x1c3RlclRpbWUiLCJkcmFpblRpbWVyUXVldWUiLCJTZXJ2ZXJUeXBlIiwiVG9wb2xvZ3lUeXBlIiwiU1RBVEVfQ09OTkVDVEVEIiwiU1RBVEVfQ09OTkVDVElORyIsIlNUQVRFX0NMT1NFRCIsIlNUQVRFX0NMT1NJTkciLCJ0aW1lcnNfMSIsInJlcXVpcmUiLCJmcmVlemUiLCJTaW5nbGUiLCJSZXBsaWNhU2V0Tm9QcmltYXJ5IiwiUmVwbGljYVNldFdpdGhQcmltYXJ5IiwiU2hhcmRlZCIsIlVua25vd24iLCJMb2FkQmFsYW5jZWQiLCJTdGFuZGFsb25lIiwiTW9uZ29zIiwiUG9zc2libGVQcmltYXJ5IiwiUlNQcmltYXJ5IiwiUlNTZWNvbmRhcnkiLCJSU0FyYml0ZXIiLCJSU090aGVyIiwiUlNHaG9zdCIsIkxvYWRCYWxhbmNlciIsInF1ZXVlIiwiZm9yRWFjaCIsImNsZWFyVGltZW91dCIsImNsZWFyIiwiZW50aXR5IiwiJGNsdXN0ZXJUaW1lIiwiY2x1c3RlclRpbWUiLCJncmVhdGVyVGhhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/events.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/events.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */ class ServerDescriptionChangedEvent {\n    /** @internal */ constructor(topologyId, address, previousDescription, newDescription){\n        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */ class ServerOpeningEvent {\n    /** @internal */ constructor(topologyId, address){\n        /** @internal */ this.name = constants_1.SERVER_OPENING;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */ class ServerClosedEvent {\n    /** @internal */ constructor(topologyId, address){\n        /** @internal */ this.name = constants_1.SERVER_CLOSED;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */ class TopologyDescriptionChangedEvent {\n    /** @internal */ constructor(topologyId, previousDescription, newDescription){\n        /** @internal */ this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */ class TopologyOpeningEvent {\n    /** @internal */ constructor(topologyId){\n        /** @internal */ this.name = constants_1.TOPOLOGY_OPENING;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */ class TopologyClosedEvent {\n    /** @internal */ constructor(topologyId){\n        /** @internal */ this.name = constants_1.TOPOLOGY_CLOSED;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */ class ServerHeartbeatStartedEvent {\n    /** @internal */ constructor(connectionId, awaited){\n        /** @internal */ this.name = constants_1.SERVER_HEARTBEAT_STARTED;\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */ class ServerHeartbeatSucceededEvent {\n    /** @internal */ constructor(connectionId, duration, reply, awaited){\n        /** @internal */ this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */ class ServerHeartbeatFailedEvent {\n    /** @internal */ constructor(connectionId, duration, failure, awaited){\n        /** @internal */ this.name = constants_1.SERVER_HEARTBEAT_FAILED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent; //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/monitor.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/monitor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst connect_1 = __webpack_require__(/*! ../cmap/connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst client_metadata_1 = __webpack_require__(/*! ../cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\n/** @internal */ const kServer = Symbol(\"server\");\n/** @internal */ const kMonitorId = Symbol(\"monitorId\");\n/** @internal */ const kCancellationToken = Symbol(\"cancellationToken\");\n/** @internal */ const kRoundTripTime = Symbol(\"roundTripTime\");\nconst STATE_IDLE = \"idle\";\nconst STATE_MONITORING = \"monitoring\";\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [\n        common_1.STATE_CLOSING,\n        STATE_IDLE,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CLOSED]: [\n        common_1.STATE_CLOSED,\n        STATE_MONITORING\n    ],\n    [STATE_IDLE]: [\n        STATE_IDLE,\n        STATE_MONITORING,\n        common_1.STATE_CLOSING\n    ],\n    [STATE_MONITORING]: [\n        STATE_MONITORING,\n        STATE_IDLE,\n        common_1.STATE_CLOSING\n    ]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([\n    common_1.STATE_CLOSING,\n    common_1.STATE_CLOSED,\n    STATE_MONITORING\n]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */ exports.ServerMonitoringMode = Object.freeze({\n    auto: \"auto\",\n    poll: \"poll\",\n    stream: \"stream\"\n});\n/** @internal */ class Monitor extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options){\n        super();\n        /** @internal */ this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n        this[kServer] = server;\n        this.connection = null;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = {\n            id: \"<monitor>\",\n            generation: server.pool.generation,\n            cancellationToken,\n            hostAddress: server.description.hostAddress,\n            ...options,\n            // force BSON serialization options\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        };\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this[kMonitorId]?.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit(\"close\");\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor[kMonitorId]?.stop();\n    monitor[kMonitorId] = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor[kCancellationToken].emit(\"cancel\");\n    monitor.connection?.destroy();\n    monitor.connection = null;\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null) return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll) return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream) return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv) return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start;\n    let awaited;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function onHeartbeatFailed(err) {\n        monitor.connection?.destroy();\n        monitor.connection = null;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), {\n            cause: err\n        }) : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit(\"resetServer\", error);\n        callback(err);\n    }\n    function onHeartbeatSucceeded(hello) {\n        if (!(\"isWritablePrimary\" in hello)) {\n            // Provide hello-style response document.\n            hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n        }\n        const duration = isAwaitable && monitor.rttPinger ? monitor.rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n        if (isAwaitable) {\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n            // We have not actually sent an outgoing handshake, but when we get the next response we\n            // want the duration to reflect the time since we last heard from the server\n            start = (0, utils_1.now)();\n        } else {\n            monitor.rttPinger?.close();\n            monitor.rttPinger = undefined;\n            callback(undefined, hello);\n        }\n    }\n    const { connection } = monitor;\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? \"hello\" : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...isAwaitable && topologyVersion ? {\n                maxAwaitTimeMS,\n                topologyVersion: makeTopologyVersion(topologyVersion)\n            } : {}\n        };\n        const options = isAwaitable ? {\n            socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n            exhaustAllowed: true\n        } : {\n            socketTimeoutMS: connectTimeoutMS\n        };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor[kCancellationToken], Object.assign({\n                heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n            }, monitor.connectOptions));\n        }\n        // Record new start time before sending handshake\n        start = (0, utils_1.now)();\n        if (isAwaitable) {\n            awaited = true;\n            return connection.exhaustCommand((0, utils_1.ns)(\"admin.$cmd\"), cmd, options, (error, hello)=>{\n                if (error) return onHeartbeatFailed(error);\n                return onHeartbeatSucceeded(hello);\n            });\n        }\n        awaited = false;\n        connection.command((0, utils_1.ns)(\"admin.$cmd\"), cmd, options).then(onHeartbeatSucceeded, onHeartbeatFailed);\n        return;\n    }\n    // connecting does an implicit `hello`\n    (async ()=>{\n        const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n        const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n        // The start time is after socket creation but before the handshake\n        start = (0, utils_1.now)();\n        try {\n            await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n            return connection;\n        } catch (error) {\n            connection.destroy();\n            throw error;\n        }\n    })().then((connection)=>{\n        if (isInCloseState(monitor)) {\n            connection.destroy();\n            return;\n        }\n        monitor.connection = connection;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n        callback(undefined, connection.hello);\n    }, (error)=>{\n        monitor.connection = null;\n        awaited = false;\n        onHeartbeatFailed(error);\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback)=>{\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello)=>{\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(()=>{\n                    if (!isInCloseState(monitor)) {\n                        monitor[kMonitorId]?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */ class RTTPinger {\n    constructor(cancellationToken, options){\n        this.connection = undefined;\n        this[kCancellationToken] = cancellationToken;\n        this[kRoundTripTime] = 0;\n        this.closed = false;\n        const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n        this[kMonitorId] = (0, timers_1.setTimeout)(()=>measureRoundTripTime(this, options), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this[kRoundTripTime];\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this[kMonitorId]);\n        this.connection?.destroy();\n        this.connection = undefined;\n    }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n    const start = (0, utils_1.now)();\n    options.cancellationToken = rttPinger[kCancellationToken];\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    if (rttPinger.closed) {\n        return;\n    }\n    function measureAndReschedule(conn) {\n        if (rttPinger.closed) {\n            conn?.destroy();\n            return;\n        }\n        if (rttPinger.connection == null) {\n            rttPinger.connection = conn;\n        }\n        rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n        rttPinger[kMonitorId] = (0, timers_1.setTimeout)(()=>measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n    }\n    const connection = rttPinger.connection;\n    if (connection == null) {\n        (0, connect_1.connect)(options).then((connection)=>{\n            measureAndReschedule(connection);\n        }, ()=>{\n            rttPinger.connection = undefined;\n            rttPinger[kRoundTripTime] = 0;\n        });\n        return;\n    }\n    const commandName = connection.serverApi?.version || connection.helloOk ? \"hello\" : constants_1.LEGACY_HELLO_COMMAND;\n    connection.command((0, utils_1.ns)(\"admin.$cmd\"), {\n        [commandName]: 1\n    }, undefined).then(()=>measureAndReschedule(), ()=>{\n        rttPinger.connection?.destroy();\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n    });\n}\n/**\n * @internal\n */ class MonitorInterval {\n    constructor(fn, options = {}){\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = ()=>{\n            if (this.stopped) return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(()=>{\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        } else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? \"set\" : \"cleared\",\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped) return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval; //# sourceMappingURL=monitor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Server = void 0;\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_1 = __webpack_require__(/*! ../cmap/connection_pool */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\");\nconst errors_1 = __webpack_require__(/*! ../cmap/errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst transactions_1 = __webpack_require__(/*! ../transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst monitor_1 = __webpack_require__(/*! ./monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [\n        common_1.STATE_CLOSED,\n        common_1.STATE_CONNECTING\n    ],\n    [common_1.STATE_CONNECTING]: [\n        common_1.STATE_CONNECTING,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CONNECTED]: [\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CLOSING]: [\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ]\n});\n/** @internal */ class Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */ constructor(topology, description, options){\n        super();\n        this.serverApi = options.serverApi;\n        const poolOptions = {\n            hostAddress: description.hostAddress,\n            ...options\n        };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [\n            ...constants_1.CMAP_EVENTS,\n            ...constants_1.APM_EVENTS\n        ]){\n            this.pool.on(event, (e)=>this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime)=>{\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS){\n            this.monitor.on(event, (e)=>this.emit(event, e));\n        }\n        this.monitor.on(\"resetServer\", (error)=>markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event)=>{\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */ connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        } else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */ destroy() {\n        if (this.s.state === common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close();\n        stateTransition(this, common_1.STATE_CLOSED);\n        this.emit(\"closed\");\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */ requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */ async command(ns, cmd, options) {\n        if (ns.db == null || typeof ns === \"string\") {\n            throw new error_1.MongoInvalidArgumentError(\"Namespace must not be a string\");\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            throw new error_1.MongoServerClosedError();\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, {\n            wireProtocolCommand: false,\n            directConnection: this.topology.s.options.directConnection\n        });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        const session = finalOptions.session;\n        let conn = session?.pinnedConnection;\n        this.incrementOperationCount();\n        if (conn == null) {\n            try {\n                conn = await this.pool.checkOut();\n                if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n                    session?.pin(conn);\n                }\n            } catch (checkoutError) {\n                this.decrementOperationCount();\n                if (!(checkoutError instanceof errors_1.PoolClearedError)) this.handleError(checkoutError);\n                throw checkoutError;\n            }\n        }\n        try {\n            try {\n                return await conn.command(ns, cmd, finalOptions);\n            } catch (commandError) {\n                throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n            }\n        } catch (operationError) {\n            if (operationError instanceof error_1.MongoError && operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                await this.pool.reauthenticate(conn);\n                try {\n                    return await conn.command(ns, cmd, finalOptions);\n                } catch (commandError) {\n                    throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n                }\n            } else {\n                throw operationError;\n            }\n        } finally{\n            this.decrementOperationCount();\n            if (session?.pinnedConnection !== conn) {\n                this.pool.checkIn(conn);\n            }\n        }\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */ handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            } else if (connection) {\n                this.pool.clear({\n                    serviceId: connection.serviceId\n                });\n            }\n        } else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({\n                            serviceId: connection.serviceId\n                        });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(()=>this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Ensure that error is properly decorated and internal state is updated before throwing\n     * @internal\n     */ decorateCommandError(connection, cmd, options, error) {\n        if (typeof error !== \"object\" || error == null || !(\"name\" in error)) {\n            throw new error_1.MongoRuntimeError(\"An unexpected error type: \" + typeof error);\n        }\n        if (error.name === \"AbortError\" && \"cause\" in error && error.cause instanceof error_1.MongoError) {\n            error = error.cause;\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return error;\n        }\n        if (connectionIsStale(this.pool, connection)) {\n            return error;\n        }\n        const session = options?.session;\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(this) && !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        } else {\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this)) && !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({\n                force: true\n            });\n        }\n        this.handleError(error, connection);\n        return error;\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */ decrementOperationCount() {\n        return this.s.operationCount -= 1;\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */ incrementOperationCount() {\n        return this.s.operationCount += 1;\n    }\n}\n/** @event */ Server.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */ Server.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */ Server.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */ Server.CONNECT = constants_1.CONNECT;\n/** @event */ Server.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */ Server.CLOSED = constants_1.CLOSED;\n/** @event */ Server.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n        error\n    }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return session.inTransaction() || session.transaction.isCommitted && \"commitTransaction\" in cmd || \"aggregate\" in cmd || \"find\" in cmd || \"getMore\" in cmd || \"listCollections\" in cmd || \"listIndexes\" in cmd;\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */ function isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n} //# sourceMappingURL=server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */ class ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */ constructor(address, hello, options = {}){\n        if (address == null || address === \"\") {\n            throw new error_1.MongoRuntimeError(\"ServerDescription must be provided with a non-empty address\");\n        }\n        this.address = typeof address === \"string\" ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n         : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host)=>host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host)=>host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host)=>host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        this.error = options.error ?? null;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/ get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */ get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */ get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(\":\").pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */ equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion || compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0 : this.electionId === other?.electionId;\n        return other != null && (0, utils_1.errorStrictEqual)(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === \"isdbgrid\") {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        } else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        } else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        } else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        } else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return tagsKeys.length === tags2Keys.length && tagsKeys.every((key)=>tags2[key] === tags[key]);\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */ function compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = bson_1.Long.isLong(currentTv.counter) ? currentTv.counter : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion; //# sourceMappingURL=server_description.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_selection.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */ function writableServerSelector() {\n    return function writableServer(topologyDescription, servers) {\n        return latencyWindowReducer(topologyDescription, servers.filter((s)=>s.isWritable));\n    };\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */ function sameServerSelector(description) {\n    return function sameServerSelector(topologyDescription, servers) {\n        if (!description) return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter((sd)=>{\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */ function secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference || !wireVersion || wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */ function maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server)=>{\n            const stalenessMS = server.lastUpdateTime - server.lastWriteDate - (primary.lastUpdateTime - primary.lastWriteDate) + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s)=>s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server)=>{\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */ function tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */ function tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null || Array.isArray(readPreference.tags) && readPreference.tags.length === 0) {\n        return servers;\n    }\n    for(let i = 0; i < readPreference.tags.length; ++i){\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server)=>{\n            if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */ function latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server)=>min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server)=>{\n        if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */ function readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError(\"Invalid read preference specified\");\n    }\n    return function readPreferenceServers(topologyDescription, servers, deprioritized = []) {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion && readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        if (topologyDescription.type === common_1.TopologyType.Sharded) {\n            const filtered = servers.filter((server)=>{\n                return !deprioritized.includes(server);\n            });\n            const selectable = filtered.length > 0 ? filtered : deprioritized;\n            return latencyWindowReducer(topologyDescription, selectable.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector; //# sourceMappingURL=server_selection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_selection_events.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = __webpack_require__(/*! .././utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */ class ServerSelectionEvent {\n    /** @internal */ constructor(selector, topologyDescription, operation){\n        this.selector = selector;\n        this.operation = operation;\n        this.topologyDescription = topologyDescription;\n    }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */ class ServerSelectionStartedEvent extends ServerSelectionEvent {\n    /** @internal */ constructor(selector, topologyDescription, operation){\n        super(selector, topologyDescription, operation);\n        /** @internal */ this.name = constants_1.SERVER_SELECTION_STARTED;\n        this.message = \"Server selection started\";\n    }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */ class ServerSelectionFailedEvent extends ServerSelectionEvent {\n    /** @internal */ constructor(selector, topologyDescription, error, operation){\n        super(selector, topologyDescription, operation);\n        /** @internal */ this.name = constants_1.SERVER_SELECTION_FAILED;\n        this.message = \"Server selection failed\";\n        this.failure = error;\n    }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */ class ServerSelectionSucceededEvent extends ServerSelectionEvent {\n    /** @internal */ constructor(selector, topologyDescription, address, operation){\n        super(selector, topologyDescription, operation);\n        /** @internal */ this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n        this.message = \"Server selection succeeded\";\n        const { host, port } = utils_1.HostAddress.fromString(address).toHostPort();\n        this.serverHost = host;\n        this.serverPort = port;\n    }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */ class WaitingForSuitableServerEvent extends ServerSelectionEvent {\n    /** @internal */ constructor(selector, topologyDescription, remainingTimeMS, operation){\n        super(selector, topologyDescription, operation);\n        /** @internal */ this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n        this.message = \"Waiting for suitable server to become available\";\n        this.remainingTimeMS = remainingTimeMS;\n    }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent; //# sourceMappingURL=server_selection_events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUNBQXFDLEdBQUdBLHFDQUFxQyxHQUFHQSxrQ0FBa0MsR0FBR0EsbUNBQW1DLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDL0wsTUFBTU8sVUFBVUMsbUJBQU9BLENBQUMsNkRBQVk7QUFDcEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsbUVBQWM7QUFDMUM7Ozs7Q0FJQyxHQUNELE1BQU1GO0lBQ0YsY0FBYyxHQUNkSSxZQUFZQyxRQUFRLEVBQUVDLG1CQUFtQixFQUFFQyxTQUFTLENBQUU7UUFDbEQsSUFBSSxDQUFDRixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0UsU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNELG1CQUFtQixHQUFHQTtJQUMvQjtBQUNKO0FBQ0FaLDRCQUE0QixHQUFHTTtBQUMvQjs7OztDQUlDLEdBQ0QsTUFBTUQsb0NBQW9DQztJQUN0QyxjQUFjLEdBQ2RJLFlBQVlDLFFBQVEsRUFBRUMsbUJBQW1CLEVBQUVDLFNBQVMsQ0FBRTtRQUNsRCxLQUFLLENBQUNGLFVBQVVDLHFCQUFxQkM7UUFDckMsY0FBYyxHQUNkLElBQUksQ0FBQ0MsSUFBSSxHQUFHTCxZQUFZTSx3QkFBd0I7UUFDaEQsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDbkI7QUFDSjtBQUNBaEIsbUNBQW1DLEdBQUdLO0FBQ3RDOzs7O0NBSUMsR0FDRCxNQUFNRCxtQ0FBbUNFO0lBQ3JDLGNBQWMsR0FDZEksWUFBWUMsUUFBUSxFQUFFQyxtQkFBbUIsRUFBRUssS0FBSyxFQUFFSixTQUFTLENBQUU7UUFDekQsS0FBSyxDQUFDRixVQUFVQyxxQkFBcUJDO1FBQ3JDLGNBQWMsR0FDZCxJQUFJLENBQUNDLElBQUksR0FBR0wsWUFBWVMsdUJBQXVCO1FBQy9DLElBQUksQ0FBQ0YsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDRyxPQUFPLEdBQUdGO0lBQ25CO0FBQ0o7QUFDQWpCLGtDQUFrQyxHQUFHSTtBQUNyQzs7OztDQUlDLEdBQ0QsTUFBTUQsc0NBQXNDRztJQUN4QyxjQUFjLEdBQ2RJLFlBQVlDLFFBQVEsRUFBRUMsbUJBQW1CLEVBQUVRLE9BQU8sRUFBRVAsU0FBUyxDQUFFO1FBQzNELEtBQUssQ0FBQ0YsVUFBVUMscUJBQXFCQztRQUNyQyxjQUFjLEdBQ2QsSUFBSSxDQUFDQyxJQUFJLEdBQUdMLFlBQVlZLDBCQUEwQjtRQUNsRCxJQUFJLENBQUNMLE9BQU8sR0FBRztRQUNmLE1BQU0sRUFBRU0sSUFBSSxFQUFFQyxJQUFJLEVBQUUsR0FBR2hCLFFBQVFpQixXQUFXLENBQUNDLFVBQVUsQ0FBQ0wsU0FBU00sVUFBVTtRQUN6RSxJQUFJLENBQUNDLFVBQVUsR0FBR0w7UUFDbEIsSUFBSSxDQUFDTSxVQUFVLEdBQUdMO0lBQ3RCO0FBQ0o7QUFDQXZCLHFDQUFxQyxHQUFHRztBQUN4Qzs7OztDQUlDLEdBQ0QsTUFBTUQsc0NBQXNDSTtJQUN4QyxjQUFjLEdBQ2RJLFlBQVlDLFFBQVEsRUFBRUMsbUJBQW1CLEVBQUVpQixlQUFlLEVBQUVoQixTQUFTLENBQUU7UUFDbkUsS0FBSyxDQUFDRixVQUFVQyxxQkFBcUJDO1FBQ3JDLGNBQWMsR0FDZCxJQUFJLENBQUNDLElBQUksR0FBR0wsWUFBWXFCLDJCQUEyQjtRQUNuRCxJQUFJLENBQUNkLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ2EsZUFBZSxHQUFHQTtJQUMzQjtBQUNKO0FBQ0E3QixxQ0FBcUMsR0FBR0UsK0JBQ3hDLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50cy5qcz85NThjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCA9IGV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25TdGFydGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvbkV2ZW50ID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uL3V0aWxzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBUaGUgYmFzZSBleHBvcnQgY2xhc3MgZm9yIGFsbCBsb2dzIHB1Ymxpc2hlZCBmcm9tIHNlcnZlciBzZWxlY3Rpb25cbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IExvZyBUeXBlXG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gb3BlcmF0aW9uO1xuICAgICAgICB0aGlzLnRvcG9sb2d5RGVzY3JpcHRpb24gPSB0b3BvbG9neURlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25FdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gc2VydmVyIHNlbGVjdGlvbiBzdGFydHNcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvblN0YXJ0ZWRFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX1NUQVJURUQ7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdTZXJ2ZXIgc2VsZWN0aW9uIHN0YXJ0ZWQnO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50ID0gU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBhIHNlcnZlciBzZWxlY3Rpb24gZmFpbHNcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50IGV4dGVuZHMgU2VydmVyU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgZXJyb3IsIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX0ZBSUxFRDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NlcnZlciBzZWxlY3Rpb24gZmFpbGVkJztcbiAgICAgICAgdGhpcy5mYWlsdXJlID0gZXJyb3I7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25GYWlsZWRFdmVudCA9IFNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBzZXJ2ZXIgc2VsZWN0aW9uIHN1Y2NlZWRzXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIGFkZHJlc3MsIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX1NVQ0NFRURFRDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NlcnZlciBzZWxlY3Rpb24gc3VjY2VlZGVkJztcbiAgICAgICAgY29uc3QgeyBob3N0LCBwb3J0IH0gPSB1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21TdHJpbmcoYWRkcmVzcykudG9Ib3N0UG9ydCgpO1xuICAgICAgICB0aGlzLnNlcnZlckhvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLnNlcnZlclBvcnQgPSBwb3J0O1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gc2VydmVyIHNlbGVjdGlvbiBpcyB3YWl0aW5nIGZvciBhIHN1aXRhYmxlIHNlcnZlciB0byBiZWNvbWUgYXZhaWxhYmxlXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBXYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIHJlbWFpbmluZ1RpbWVNUywgb3BlcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLldBSVRJTkdfRk9SX1NVSVRBQkxFX1NFUlZFUjtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1dhaXRpbmcgZm9yIHN1aXRhYmxlIHNlcnZlciB0byBiZWNvbWUgYXZhaWxhYmxlJztcbiAgICAgICAgdGhpcy5yZW1haW5pbmdUaW1lTVMgPSByZW1haW5pbmdUaW1lTVM7XG4gICAgfVxufVxuZXhwb3J0cy5XYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCA9IFdhaXRpbmdGb3JTdWl0YWJsZVNlcnZlckV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmVyX3NlbGVjdGlvbl9ldmVudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2FpdGluZ0ZvclN1aXRhYmxlU2VydmVyRXZlbnQiLCJTZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudCIsIlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50IiwiU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50IiwiU2VydmVyU2VsZWN0aW9uRXZlbnQiLCJ1dGlsc18xIiwicmVxdWlyZSIsImNvbnN0YW50c18xIiwiY29uc3RydWN0b3IiLCJzZWxlY3RvciIsInRvcG9sb2d5RGVzY3JpcHRpb24iLCJvcGVyYXRpb24iLCJuYW1lIiwiU0VSVkVSX1NFTEVDVElPTl9TVEFSVEVEIiwibWVzc2FnZSIsImVycm9yIiwiU0VSVkVSX1NFTEVDVElPTl9GQUlMRUQiLCJmYWlsdXJlIiwiYWRkcmVzcyIsIlNFUlZFUl9TRUxFQ1RJT05fU1VDQ0VFREVEIiwiaG9zdCIsInBvcnQiLCJIb3N0QWRkcmVzcyIsImZyb21TdHJpbmciLCJ0b0hvc3RQb3J0Iiwic2VydmVySG9zdCIsInNlcnZlclBvcnQiLCJyZW1haW5pbmdUaW1lTVMiLCJXQUlUSU5HX0ZPUl9TVUlUQUJMRV9TRVJWRVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/srv_polling.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/**\n * @internal\n * @category Event\n */ class SrvPollingEvent {\n    constructor(srvRecords){\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map((r)=>utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */ class SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options){\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError(\"Options for SrvPoller must exist and include srvHost\");\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? \"mongodb\";\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(()=>{\n            this._poll().catch(()=>null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        } catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords){\n            if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\n/** @event */ SrvPoller.SRV_RECORD_DISCOVERY = \"srvRecordDiscovery\";\nexports.SrvPoller = SrvPoller; //# sourceMappingURL=srv_polling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst connection_string_1 = __webpack_require__(/*! ../connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst server_selection_1 = __webpack_require__(/*! ./server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst server_selection_events_1 = __webpack_require__(/*! ./server_selection_events */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\");\nconst srv_polling_1 = __webpack_require__(/*! ./srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nconst topology_description_1 = __webpack_require__(/*! ./topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [\n        common_1.STATE_CLOSED,\n        common_1.STATE_CONNECTING\n    ],\n    [common_1.STATE_CONNECTING]: [\n        common_1.STATE_CONNECTING,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CONNECTED]: [\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CLOSING]: [\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ]\n});\n/** @internal */ const kCancelled = Symbol(\"cancelled\");\n/** @internal */ const kWaitQueue = Symbol(\"waitQueue\");\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */ class Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */ constructor(client, seeds, options){\n        super();\n        this.client = client;\n        this.selectServerAsync = (0, util_1.promisify)((selector, options, callback)=>this.selectServer(selector, options, callback));\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [\n                utils_1.HostAddress.fromString(\"localhost:27017\")\n            ],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === \"string\") {\n            seeds = [\n                utils_1.HostAddress.fromString(seeds)\n            ];\n        } else if (!Array.isArray(seeds)) {\n            seeds = [\n                seeds\n            ];\n        }\n        const seedlist = [];\n        for (const seed of seeds){\n            if (typeof seed === \"string\") {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            } else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            } else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts){\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: (ev)=>this.detectShardedTopology(ev),\n            detectSrvRecords: (ev)=>this.detectSrvRecords(ev)\n        };\n        this.mongoLogger = client.mongoLogger;\n        this.component = \"topology\";\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller = options.srvPoller ?? new srv_polling_1.SrvPoller({\n                heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                srvHost: options.srvHost,\n                srvMaxHosts: options.srvMaxHosts,\n                srvServiceName: options.srvServiceName\n            });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */ get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get serverApi() {\n        return this.s.options.serverApi;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    connect(options, callback) {\n        if (typeof options === \"function\") callback = options, options = {};\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === \"function\") {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map((serverDescription)=>[\n                serverDescription.address,\n                createAndConnectServer(this, serverDescription)\n            ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions){\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error)=>callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        const selectServerOptions = {\n            operationName: \"ping\",\n            ...options\n        };\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions, (err, server)=>{\n            if (err) {\n                this.close();\n                return exitWithError(err);\n            }\n            const skipPingOnConnect = this.s.options[Symbol.for(\"@@mdb.skipPingOnConnect\")] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)(\"admin.$cmd\"), {\n                    ping: 1\n                }, {}).then(()=>{\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback?.(undefined, this);\n                }, exitWithError);\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback?.(undefined, this);\n        });\n    }\n    /** Close this topology */ close() {\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return;\n        }\n        for (const server of this.s.servers.values()){\n            destroyServer(server, this);\n        }\n        this.s.servers.clear();\n        stateTransition(this, common_1.STATE_CLOSING);\n        drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n        (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n        if (this.s.srvPoller) {\n            this.s.srvPoller.stop();\n            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        stateTransition(this, common_1.STATE_CLOSED);\n        // emit an event for close\n        this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */ selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== \"function\") {\n            if (typeof selector === \"string\") {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            } else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                } else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        } else {\n            serverSelector = selector;\n        }\n        options = {\n            serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS,\n            ...options\n        };\n        if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n        }\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n            }\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            topologyDescription: this.description,\n            mongoLogger: this.client.mongoLogger,\n            transaction,\n            callback,\n            timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS),\n            startTime: (0, utils_1.now)(),\n            operationName: options.operationName,\n            waitingLogged: false,\n            previousServer: options.previousServer\n        };\n        waitQueueMember.timeoutController.signal.addEventListener(\"abort\", ()=>{\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n            }\n            waitQueueMember.callback(timeoutError);\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */ serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === \"function\") callback = credentials, credentials = undefined;\n        if (typeof callback === \"function\") callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0) return {};\n        const sd = serverDescriptions.filter((sd)=>sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || {\n            maxWireVersion: this.description.commonWireVersion\n        };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\n/** @event */ Topology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */ Topology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */ Topology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */ Topology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */ Topology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */ Topology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */ Topology.ERROR = constants_1.ERROR;\n/** @event */ Topology.OPEN = constants_1.OPEN;\n/** @event */ Topology.CONNECT = constants_1.CONNECT;\n/** @event */ Topology.CLOSE = constants_1.CLOSE;\n/** @event */ Topology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */ function destroyServer(server, topology) {\n    for (const event of constants_1.LOCAL_SERVER_EVENTS){\n        server.removeAllListeners(event);\n    }\n    server.destroy();\n    topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS){\n        server.removeAllListeners(event);\n    }\n}\n/** Predicts the TopologyType from options */ function topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */ function createAndConnectServer(topology, serverDescription) {\n    topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS){\n        server.on(event, (e)=>topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, (description)=>topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */ function updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({\n                    interruptInUseConnections\n                });\n            } else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()){\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers){\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while(queue.length){\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        waitQueueMember.timeoutController.clear();\n        if (!waitQueueMember[kCancelled]) {\n            if (err) {\n                if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                    waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, err, waitQueueMember.operationName));\n                }\n            }\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for(let i = 0; i < membersToProcess; ++i){\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            const previousServer = waitQueueMember.previousServer;\n            selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions, previousServer ? [\n                previousServer\n            ] : []) : serverDescriptions;\n        } catch (e) {\n            waitQueueMember.timeoutController.clear();\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, e, waitQueueMember.operationName));\n            }\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            if (!waitQueueMember.waitingLogged) {\n                if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n                    topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0 ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime) : -1, waitQueueMember.operationName));\n                }\n                waitQueueMember.waitingLogged = true;\n            }\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        } else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        } else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n        }\n        if (!selectedServer) {\n            const error = new error_1.MongoServerSelectionError(\"server selection returned a server description but the server was not found in the topology\", topology.description);\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, error, waitQueueMember.operationName));\n            }\n            waitQueueMember.callback(error);\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        waitQueueMember.timeoutController.clear();\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n        }\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers){\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */ class ServerCapabilities {\n    constructor(hello){\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities; //# sourceMappingURL=topology.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology_description.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TopologyDescription = void 0;\nconst WIRE_CONSTANTS = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Unknown\n]);\nconst MONGOS_OR_STANDALONE = new Set([\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone\n]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */ class TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */ constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null){\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()){\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown || serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers){\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */ updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */ const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames){\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove){\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd){\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            } else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts){\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, {\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            localThresholdMS: this.localThresholdMS\n        });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */ update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            } else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === \"string\" && typeof setName === \"string\" && serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            } else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n                heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n                localThresholdMS: this.localThresholdMS\n            });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            } else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            } else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            } else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            localThresholdMS: this.localThresholdMS\n        });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd)=>sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */ get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd)=>sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */ get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd)=>sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */ hasServer(address) {\n        return this.servers.has(address);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch(serverType){\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [\n            checkHasPrimary(serverDescriptions),\n            setName,\n            maxSetVersion,\n            maxElectionId\n        ];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || maxElectionIdIsEqual && maxSetVersionIsLessOrEqual) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        } else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n            return [\n                checkHasPrimary(serverDescriptions),\n                setName,\n                maxSetVersion,\n                maxElectionId\n            ];\n        }\n    } else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion || (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n                    return [\n                        checkHasPrimary(serverDescriptions),\n                        setName,\n                        maxSetVersion,\n                        maxElectionId\n                    ];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null && (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions){\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address)=>{\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses.filter((addr)=>responseAddresses.indexOf(addr) === -1).forEach((address)=>{\n        serverDescriptions.delete(address);\n    });\n    return [\n        checkHasPrimary(serverDescriptions),\n        setName,\n        maxSetVersion,\n        maxElectionId\n    ];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName || serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [\n            topologyType,\n            setName\n        ];\n    }\n    serverDescription.allHosts.forEach((address)=>{\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [\n        topologyType,\n        setName\n    ];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()){\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n} //# sourceMappingURL=topology_description.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sessions.js":
/*!**********************************************!*\
  !*** ./node_modules/mongodb/lib/sessions.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst metrics_1 = __webpack_require__(/*! ./cmap/metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\nconst shared_1 = __webpack_require__(/*! ./cmap/wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst transactions_1 = __webpack_require__(/*! ./transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */ const kServerSession = Symbol(\"serverSession\");\n/** @internal */ const kSnapshotTime = Symbol(\"snapshotTime\");\n/** @internal */ const kSnapshotEnabled = Symbol(\"snapshotEnabled\");\n/** @internal */ const kPinnedConnection = Symbol(\"pinnedConnection\");\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */ const kTxnNumberIncrement = Symbol(\"txnNumberIncrement\");\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */ class ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */ constructor(client, sessionPool, options, clientOptions){\n        super();\n        /** @internal */ this[_a] = false;\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(\"ClientSession requires a MongoClient\");\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(\"ClientSession requires a ServerSessionPool\");\n        }\n        options = options ?? {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.explicit = !!options.explicit;\n        this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n        this[kTxnNumberIncrement] = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */ get id() {\n        return this[kServerSession]?.id;\n    }\n    get serverSession() {\n        let serverSession = this[kServerSession];\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError(\"Unexpected null serverSession for an explicit session\");\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError(\"Unexpected null serverSession for an ended implicit session\");\n            }\n            serverSession = this.sessionPool.acquire();\n            this[kServerSession] = serverSession;\n        }\n        return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */ get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */ get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */ pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError(\"Cannot pin multiple connections to the same session\");\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */ unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */ async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction();\n            }\n            if (!this.hasEnded) {\n                const serverSession = this[kServerSession];\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Make sure a new serverSession never makes it onto this ClientSession\n                    Object.defineProperty(this, kServerSession, {\n                        value: ServerSession.clone(serverSession),\n                        writable: false\n                    });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit(\"ended\", this);\n            }\n        } catch  {\n        // spec indicates that we should ignore all errors for `endSessions`\n        } finally{\n            maybeClearPinnedConnection(this, {\n                force: true,\n                ...options\n            });\n        }\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */ advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */ advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError(\"input cluster time must be an object\");\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== \"Timestamp\") {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature || clusterTime.signature.hash?._bsontype !== \"Binary\" || typeof clusterTime.signature.keyId !== \"bigint\" && typeof clusterTime.signature.keyId !== \"number\" && clusterTime.signature.keyId?._bsontype !== \"Long\" // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */ equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */ incrementTransactionNumber() {\n        this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */ inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */ startTransaction(options) {\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError(\"Transactions are not supported in snapshot sessions\");\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError(\"Transaction already in progress\");\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError(\"Transactions are not supported on sharded clusters in MongoDB < 4.2.\");\n        }\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ?? this.defaultTransactionOptions.readConcern ?? this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ?? this.defaultTransactionOptions.writeConcern ?? this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ?? this.defaultTransactionOptions.readPreference ?? this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */ async commitTransaction() {\n        return endTransactionAsync(this, \"commitTransaction\");\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     */ async abortTransaction() {\n        return endTransactionAsync(this, \"abortTransaction\");\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */ toBSON() {\n        throw new error_1.MongoRuntimeError(\"ClientSession cannot be serialized to BSON.\");\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     *\n     * @remarks\n     * This function:\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then this function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then this function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - May be called multiple times if the driver needs to attempt to retry the operations.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */ async withTransaction(fn, options) {\n        const startTime = (0, utils_1.now)();\n        return attemptTransaction(this, startTime, fn, options);\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    \"CannotSatisfyWriteConcern\",\n    \"UnknownReplWriteConcern\",\n    \"UnsatisfiableWriteConcern\"\n]);\nfunction hasNotTimedOut(startTime, max) {\n    return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options?.error;\n    if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({\n                    serviceId: conn.serviceId\n                });\n            }\n        }\n        session[kPinnedConnection] = undefined;\n    }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\nfunction attemptTransactionCommit(session, startTime, fn, result, options) {\n    return session.commitTransaction().then(()=>result, (err)=>{\n        if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n                return attemptTransactionCommit(session, startTime, fn, result, options);\n            }\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n        }\n        throw err;\n    });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n    transactions_1.TxnState.NO_TRANSACTION,\n    transactions_1.TxnState.TRANSACTION_COMMITTED,\n    transactions_1.TxnState.TRANSACTION_ABORTED\n]);\nfunction userExplicitlyEndedTransaction(session) {\n    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options = {}) {\n    session.startTransaction(options);\n    let promise;\n    try {\n        promise = fn(session);\n    } catch (err) {\n        promise = Promise.reject(err);\n    }\n    if (!(0, utils_1.isPromiseLike)(promise)) {\n        session.abortTransaction().catch(()=>null);\n        return Promise.reject(new error_1.MongoInvalidArgumentError(\"Function provided to `withTransaction` must return a Promise\"));\n    }\n    return promise.then((result)=>{\n        if (userExplicitlyEndedTransaction(session)) {\n            return result;\n        }\n        return attemptTransactionCommit(session, startTime, fn, result, options);\n    }, (err)=>{\n        function maybeRetryOrThrow(err) {\n            if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n            if (isMaxTimeMSExpiredError(err)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            throw err;\n        }\n        if (session.inTransaction()) {\n            return session.abortTransaction().then(()=>maybeRetryOrThrow(err));\n        }\n        return maybeRetryOrThrow(err);\n    });\n}\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n    // handle any initial problematic cases\n    const txnState = session.transaction.state;\n    if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n        callback(new error_1.MongoTransactionError(\"No transaction started\"));\n        return;\n    }\n    if (commandName === \"commitTransaction\") {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError(\"Cannot call commitTransaction after calling abortTransaction\"));\n            return;\n        }\n    } else {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError(\"Cannot call abortTransaction twice\"));\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            callback(new error_1.MongoTransactionError(\"Cannot call abortTransaction after calling commitTransaction\"));\n            return;\n        }\n    }\n    // construct and send the command\n    const command = {\n        [commandName]: 1\n    };\n    // apply a writeConcern if specified\n    let writeConcern;\n    if (session.transaction.options.writeConcern) {\n        writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n    } else if (session.clientOptions && session.clientOptions.writeConcern) {\n        writeConcern = {\n            w: session.clientOptions.writeConcern.w\n        };\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n        writeConcern = Object.assign({\n            wtimeoutMS: 10000\n        }, writeConcern, {\n            w: \"majority\"\n        });\n    }\n    if (writeConcern) {\n        write_concern_1.WriteConcern.apply(command, writeConcern);\n    }\n    if (commandName === \"commitTransaction\" && session.transaction.options.maxTimeMS) {\n        Object.assign(command, {\n            maxTimeMS: session.transaction.options.maxTimeMS\n        });\n    }\n    function commandHandler(error) {\n        if (commandName !== \"commitTransaction\") {\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (session.loadBalanced) {\n                maybeClearPinnedConnection(session, {\n                    force: false\n                });\n            }\n            // The spec indicates that we should ignore all errors on `abortTransaction`\n            return callback();\n        }\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        if (error instanceof error_1.MongoError) {\n            if ((0, error_1.isRetryableWriteError)(error) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n                if (isUnknownTransactionCommitResult(error)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    // per txns spec, must unpin session in this case\n                    session.unpin({\n                        error\n                    });\n                }\n            } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                session.unpin({\n                    error\n                });\n            }\n        }\n        callback(error);\n    }\n    if (session.transaction.recoveryToken) {\n        command.recoveryToken = session.transaction.recoveryToken;\n    }\n    const handleFirstCommandAttempt = (error)=>{\n        if (command.abortTransaction) {\n            // always unpin on abort regardless of command outcome\n            session.unpin();\n        }\n        if (error instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(error)) {\n            // SPEC-1185: apply majority write concern when retrying commitTransaction\n            if (command.commitTransaction) {\n                // per txns spec, must unpin session in this case\n                session.unpin({\n                    force: true\n                });\n                command.writeConcern = Object.assign({\n                    wtimeout: 10000\n                }, command.writeConcern, {\n                    w: \"majority\"\n                });\n            }\n            (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n                session,\n                readPreference: read_preference_1.ReadPreference.primary,\n                bypassPinningCheck: true\n            })).then(()=>commandHandler(), commandHandler);\n            return;\n        }\n        commandHandler(error);\n    };\n    // send the command\n    (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n    })).then(()=>handleFirstCommandAttempt(), handleFirstCommandAttempt);\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */ class ServerSession {\n    /** @internal */ constructor(){\n        this.id = {\n            id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n        };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */ hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */ static clone(serverSession) {\n        const arrayBuffer = new ArrayBuffer(16);\n        const idBytes = Buffer.from(arrayBuffer);\n        idBytes.set(serverSession.id.id.buffer);\n        const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n        // Manual prototype construction to avoid modifying the constructor of this class\n        return Object.setPrototypeOf({\n            id: {\n                id\n            },\n            lastUse: serverSession.lastUse,\n            txnNumber: serverSession.txnNumber,\n            isDirty: serverSession.isDirty\n        }, ServerSession.prototype);\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */ class ServerSessionPool {\n    constructor(client){\n        if (client == null) {\n            throw new error_1.MongoRuntimeError(\"ServerSessionPool requires a MongoClient\");\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */ acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while(this.sessions.length > 0){\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null && (!!this.client.topology?.loadBalanced || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */ release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune((session)=>session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */ function applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError(\"Unable to acquire server session\");\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError(\"Cannot have explicit session with unacknowledged writes\");\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session[kTxnNumberIncrement];\n        session[kTxnNumberIncrement] = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, {\n                afterClusterTime: session.operationTime\n            });\n        } else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || {\n                level: read_concern_1.ReadConcernLevel.snapshot\n            };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, {\n                    atClusterTime: session[kSnapshotTime]\n                });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, {\n                afterClusterTime: session.operationTime\n            });\n        }\n    }\n    return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse; //# sourceMappingURL=sessions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sessions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sort.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/sort.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.formatSort = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @internal */ function prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction)) return direction;\n    switch(value){\n        case \"ascending\":\n        case \"asc\":\n        case \"1\":\n            return 1;\n        case \"descending\":\n        case \"desc\":\n        case \"-1\":\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */ function isMeta(t) {\n    return typeof t === \"object\" && t != null && \"$meta\" in t && typeof t.$meta === \"string\";\n}\n/** @internal */ function isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */ function pairToMap(v) {\n    return new Map([\n        [\n            `${v[0]}`,\n            prepareDirection([\n                v[1]\n            ])\n        ]\n    ]);\n}\n/** @internal */ function deepToMap(t) {\n    const sortEntries = t.map(([k, v])=>[\n            `${k}`,\n            prepareDirection(v)\n        ]);\n    return new Map(sortEntries);\n}\n/** @internal */ function stringsToMap(t) {\n    const sortEntries = t.map((key)=>[\n            `${key}`,\n            1\n        ]);\n    return new Map(sortEntries);\n}\n/** @internal */ function objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v])=>[\n            `${k}`,\n            prepareDirection(v)\n        ]);\n    return new Map(sortEntries);\n}\n/** @internal */ function mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v])=>[\n            `${k}`,\n            prepareDirection(v)\n        ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */ function formatSort(sort, direction) {\n    if (sort == null) return undefined;\n    if (typeof sort === \"string\") return new Map([\n        [\n            sort,\n            prepareDirection(direction)\n        ]\n    ]);\n    if (typeof sort !== \"object\") {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length) return undefined;\n    if (isDeep(sort)) return deepToMap(sort);\n    if (isPair(sort)) return pairToMap(sort);\n    return stringsToMap(sort);\n}\nexports.formatSort = formatSort; //# sourceMappingURL=sort.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywwREFBUztBQUNqQyxjQUFjLEdBQ2QsU0FBU0MsaUJBQWlCQyxZQUFZLENBQUM7SUFDbkMsTUFBTUwsUUFBUSxDQUFDLEVBQUVLLFVBQVUsQ0FBQyxDQUFDQyxXQUFXO0lBQ3hDLElBQUlDLE9BQU9GLFlBQ1AsT0FBT0E7SUFDWCxPQUFRTDtRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPLENBQUM7UUFDWjtZQUNJLE1BQU0sSUFBSUUsUUFBUU0seUJBQXlCLENBQUMsQ0FBQyx3QkFBd0IsRUFBRUMsS0FBS0MsU0FBUyxDQUFDTCxXQUFXLENBQUM7SUFDMUc7QUFDSjtBQUNBLGNBQWMsR0FDZCxTQUFTRSxPQUFPSSxDQUFDO0lBQ2IsT0FBTyxPQUFPQSxNQUFNLFlBQVlBLEtBQUssUUFBUSxXQUFXQSxLQUFLLE9BQU9BLEVBQUVDLEtBQUssS0FBSztBQUNwRjtBQUNBLGNBQWMsR0FDZCxTQUFTQyxPQUFPRixDQUFDO0lBQ2IsSUFBSUcsTUFBTUMsT0FBTyxDQUFDSixNQUFNQSxFQUFFSyxNQUFNLEtBQUssR0FBRztRQUNwQyxJQUFJO1lBQ0FaLGlCQUFpQk8sQ0FBQyxDQUFDLEVBQUU7WUFDckIsT0FBTztRQUNYLEVBQ0EsT0FBT00sR0FBRztZQUNOLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0EsU0FBU0MsT0FBT1AsQ0FBQztJQUNiLE9BQU9HLE1BQU1DLE9BQU8sQ0FBQ0osTUFBTUcsTUFBTUMsT0FBTyxDQUFDSixDQUFDLENBQUMsRUFBRTtBQUNqRDtBQUNBLFNBQVNRLE1BQU1SLENBQUM7SUFDWixPQUFPQSxhQUFhUyxPQUFPVCxFQUFFVSxJQUFJLEdBQUc7QUFDeEM7QUFDQSxjQUFjLEdBQ2QsU0FBU0MsVUFBVUMsQ0FBQztJQUNoQixPQUFPLElBQUlILElBQUk7UUFBQztZQUFDLENBQUMsRUFBRUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQUVuQixpQkFBaUI7Z0JBQUNtQixDQUFDLENBQUMsRUFBRTthQUFDO1NBQUU7S0FBQztBQUMxRDtBQUNBLGNBQWMsR0FDZCxTQUFTQyxVQUFVYixDQUFDO0lBQ2hCLE1BQU1jLGNBQWNkLEVBQUVlLEdBQUcsQ0FBQyxDQUFDLENBQUNDLEdBQUdKLEVBQUUsR0FBSztZQUFDLENBQUMsRUFBRUksRUFBRSxDQUFDO1lBQUV2QixpQkFBaUJtQjtTQUFHO0lBQ25FLE9BQU8sSUFBSUgsSUFBSUs7QUFDbkI7QUFDQSxjQUFjLEdBQ2QsU0FBU0csYUFBYWpCLENBQUM7SUFDbkIsTUFBTWMsY0FBY2QsRUFBRWUsR0FBRyxDQUFDRyxDQUFBQSxNQUFPO1lBQUMsQ0FBQyxFQUFFQSxJQUFJLENBQUM7WUFBRTtTQUFFO0lBQzlDLE9BQU8sSUFBSVQsSUFBSUs7QUFDbkI7QUFDQSxjQUFjLEdBQ2QsU0FBU0ssWUFBWW5CLENBQUM7SUFDbEIsTUFBTWMsY0FBYzVCLE9BQU9rQyxPQUFPLENBQUNwQixHQUFHZSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxHQUFHSixFQUFFLEdBQUs7WUFDbEQsQ0FBQyxFQUFFSSxFQUFFLENBQUM7WUFDTnZCLGlCQUFpQm1CO1NBQ3BCO0lBQ0QsT0FBTyxJQUFJSCxJQUFJSztBQUNuQjtBQUNBLGNBQWMsR0FDZCxTQUFTTyxTQUFTckIsQ0FBQztJQUNmLE1BQU1jLGNBQWNYLE1BQU1tQixJQUFJLENBQUN0QixHQUFHZSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxHQUFHSixFQUFFLEdBQUs7WUFDOUMsQ0FBQyxFQUFFSSxFQUFFLENBQUM7WUFDTnZCLGlCQUFpQm1CO1NBQ3BCO0lBQ0QsT0FBTyxJQUFJSCxJQUFJSztBQUNuQjtBQUNBLCtFQUErRSxHQUMvRSxTQUFTeEIsV0FBV2lDLElBQUksRUFBRTdCLFNBQVM7SUFDL0IsSUFBSTZCLFFBQVEsTUFDUixPQUFPQztJQUNYLElBQUksT0FBT0QsU0FBUyxVQUNoQixPQUFPLElBQUlkLElBQUk7UUFBQztZQUFDYztZQUFNOUIsaUJBQWlCQztTQUFXO0tBQUM7SUFDeEQsSUFBSSxPQUFPNkIsU0FBUyxVQUFVO1FBQzFCLE1BQU0sSUFBSWhDLFFBQVFNLHlCQUF5QixDQUFDLENBQUMscUJBQXFCLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ3dCLE1BQU0sNEJBQTRCLENBQUM7SUFDMUg7SUFDQSxJQUFJLENBQUNwQixNQUFNQyxPQUFPLENBQUNtQixPQUFPO1FBQ3RCLE9BQU9mLE1BQU1lLFFBQVFGLFNBQVNFLFFBQVFyQyxPQUFPdUMsSUFBSSxDQUFDRixNQUFNbEIsTUFBTSxHQUFHYyxZQUFZSSxRQUFRQztJQUN6RjtJQUNBLElBQUksQ0FBQ0QsS0FBS2xCLE1BQU0sRUFDWixPQUFPbUI7SUFDWCxJQUFJakIsT0FBT2dCLE9BQ1AsT0FBT1YsVUFBVVU7SUFDckIsSUFBSXJCLE9BQU9xQixPQUNQLE9BQU9aLFVBQVVZO0lBQ3JCLE9BQU9OLGFBQWFNO0FBQ3hCO0FBQ0FuQyxrQkFBa0IsR0FBR0UsWUFDckIsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zb3J0LmpzP2Y3NmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm1hdFNvcnQgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBwcmVwYXJlRGlyZWN0aW9uKGRpcmVjdGlvbiA9IDEpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGAke2RpcmVjdGlvbn1gLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGlzTWV0YShkaXJlY3Rpb24pKVxuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSAnYXNjZW5kaW5nJzpcbiAgICAgICAgY2FzZSAnYXNjJzpcbiAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgY2FzZSAnZGVzY2VuZGluZyc6XG4gICAgICAgIGNhc2UgJ2Rlc2MnOlxuICAgICAgICBjYXNlICctMSc6XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHNvcnQgZGlyZWN0aW9uOiAke0pTT04uc3RyaW5naWZ5KGRpcmVjdGlvbil9YCk7XG4gICAgfVxufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gaXNNZXRhKHQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHQgPT09ICdvYmplY3QnICYmIHQgIT0gbnVsbCAmJiAnJG1ldGEnIGluIHQgJiYgdHlwZW9mIHQuJG1ldGEgPT09ICdzdHJpbmcnO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gaXNQYWlyKHQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0KSAmJiB0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJlcGFyZURpcmVjdGlvbih0WzFdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNEZWVwKHQpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0KSAmJiBBcnJheS5pc0FycmF5KHRbMF0pO1xufVxuZnVuY3Rpb24gaXNNYXAodCkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgTWFwICYmIHQuc2l6ZSA+IDA7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBwYWlyVG9NYXAodikge1xuICAgIHJldHVybiBuZXcgTWFwKFtbYCR7dlswXX1gLCBwcmVwYXJlRGlyZWN0aW9uKFt2WzFdXSldXSk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBkZWVwVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdC5tYXAoKFtrLCB2XSkgPT4gW2Ake2t9YCwgcHJlcGFyZURpcmVjdGlvbih2KV0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHN0cmluZ3NUb01hcCh0KSB7XG4gICAgY29uc3Qgc29ydEVudHJpZXMgPSB0Lm1hcChrZXkgPT4gW2Ake2tleX1gLCAxXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gb2JqZWN0VG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModCkubWFwKChbaywgdl0pID0+IFtcbiAgICAgICAgYCR7a31gLFxuICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHYpXG4gICAgXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gbWFwVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gQXJyYXkuZnJvbSh0KS5tYXAoKFtrLCB2XSkgPT4gW1xuICAgICAgICBgJHtrfWAsXG4gICAgICAgIHByZXBhcmVEaXJlY3Rpb24odilcbiAgICBdKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogY29udmVydHMgYSBTb3J0IHR5cGUgaW50byBhIHR5cGUgdGhhdCBpcyB2YWxpZCBmb3IgdGhlIHNlcnZlciAoU29ydEZvckNtZCkgKi9cbmZ1bmN0aW9uIGZvcm1hdFNvcnQoc29ydCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKHNvcnQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHNvcnQgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gbmV3IE1hcChbW3NvcnQsIHByZXBhcmVEaXJlY3Rpb24oZGlyZWN0aW9uKV1dKTtcbiAgICBpZiAodHlwZW9mIHNvcnQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgc29ydCBmb3JtYXQ6ICR7SlNPTi5zdHJpbmdpZnkoc29ydCl9IFNvcnQgbXVzdCBiZSBhIHZhbGlkIG9iamVjdGApO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc29ydCkpIHtcbiAgICAgICAgcmV0dXJuIGlzTWFwKHNvcnQpID8gbWFwVG9NYXAoc29ydCkgOiBPYmplY3Qua2V5cyhzb3J0KS5sZW5ndGggPyBvYmplY3RUb01hcChzb3J0KSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFzb3J0Lmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAoaXNEZWVwKHNvcnQpKVxuICAgICAgICByZXR1cm4gZGVlcFRvTWFwKHNvcnQpO1xuICAgIGlmIChpc1BhaXIoc29ydCkpXG4gICAgICAgIHJldHVybiBwYWlyVG9NYXAoc29ydCk7XG4gICAgcmV0dXJuIHN0cmluZ3NUb01hcChzb3J0KTtcbn1cbmV4cG9ydHMuZm9ybWF0U29ydCA9IGZvcm1hdFNvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZvcm1hdFNvcnQiLCJlcnJvcl8xIiwicmVxdWlyZSIsInByZXBhcmVEaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJ0b0xvd2VyQ2FzZSIsImlzTWV0YSIsIk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwidCIsIiRtZXRhIiwiaXNQYWlyIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZSIsImlzRGVlcCIsImlzTWFwIiwiTWFwIiwic2l6ZSIsInBhaXJUb01hcCIsInYiLCJkZWVwVG9NYXAiLCJzb3J0RW50cmllcyIsIm1hcCIsImsiLCJzdHJpbmdzVG9NYXAiLCJrZXkiLCJvYmplY3RUb01hcCIsImVudHJpZXMiLCJtYXBUb01hcCIsImZyb20iLCJzb3J0IiwidW5kZWZpbmVkIiwia2V5cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/transactions.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/transactions.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */ exports.TxnState = Object.freeze({\n    NO_TRANSACTION: \"NO_TRANSACTION\",\n    STARTING_TRANSACTION: \"STARTING_TRANSACTION\",\n    TRANSACTION_IN_PROGRESS: \"TRANSACTION_IN_PROGRESS\",\n    TRANSACTION_COMMITTED: \"TRANSACTION_COMMITTED\",\n    TRANSACTION_COMMITTED_EMPTY: \"TRANSACTION_COMMITTED_EMPTY\",\n    TRANSACTION_ABORTED: \"TRANSACTION_ABORTED\"\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [\n        exports.TxnState.NO_TRANSACTION,\n        exports.TxnState.STARTING_TRANSACTION\n    ],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */ class Transaction {\n    /** Create a transaction @internal */ constructor(options){\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError(\"Transactions do not support unacknowledged write concern\");\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */ get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */ get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */ get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */ transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */ pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */ unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand; //# sourceMappingURL=transactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/transactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/utils.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.TimeoutController = exports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.maxWireVersion = exports.uuidV4 = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nexports.once = exports.randomBytes = exports.promiseWithResolvers = exports.isHostMatch = exports.COSMOS_DB_MSG = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nexports.ByteUtils = {\n    toLocalBufferType (buffer) {\n        return Buffer.isBuffer(buffer) ? buffer : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals (seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare (seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64 (uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString(\"base64\");\n    }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */ function hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards){\n        if (host === wildcard || wildcard.startsWith(\"*.\") && host?.endsWith(wildcard.substring(2, wildcard.length)) || wildcard.startsWith(\"*/\") && host?.endsWith(wildcard.substring(2, wildcard.length))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */ function normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === \"string\") {\n        finalHint = hint;\n    } else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach((param)=>{\n            finalHint[param] = 1;\n        });\n    } else if (hint != null && typeof hint === \"object\") {\n        finalHint = {};\n        for(const name in hint){\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = (object)=>Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */ function isObject(arg) {\n    return \"[object Object]\" === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */ function mergeOptions(target, source) {\n    return {\n        ...target,\n        ...source\n    };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */ function filterOptions(options, names) {\n    const filterOptions = {};\n    for(const name in options){\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */ function applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */ /**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */ function isPromiseLike(value) {\n    return value != null && typeof value === \"object\" && \"then\" in value && typeof value.then === \"function\";\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */ function decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === \"object\") {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        } else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */ function decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, {\n            readConcern: readConcern\n        });\n    }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */ function decorateWithExplain(command, explain) {\n    if (command.explain) {\n        return command;\n    }\n    return {\n        explain: command,\n        verbosity: explain.verbosity\n    };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */ function getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if (\"topology\" in provider && provider.topology) {\n        return provider.topology;\n    } else if (\"client\" in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError(\"MongoClient must be connected to perform this operation\");\n}\nexports.getTopology = getTopology;\n/** @internal */ function ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */ class MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */ constructor(db, collection){\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === \"\" ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== \"string\" || namespace === \"\") {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split(\".\");\n        const collection = collectionParts.join(\".\");\n        return new MongoDBNamespace(db, collection === \"\" ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */ class MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection){\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */ function* makeCounter(seed = 0) {\n    let count = seed;\n    while(true){\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\nexports.makeCounter = makeCounter;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */ function uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = result[6] & 0x0f | 0x40;\n    result[8] = result[8] & 0x3f | 0x80;\n    return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */ function maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n            // Since we do not have a monitor in the load balanced mode,\n            // we assume the load-balanced server is always pointed at the latest mongodb version.\n            // There is a risk that for on-prem deployments\n            // that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            // We also return the max supported wire version for serverAPI.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if (\"lastHello\" in topologyOrServer && typeof topologyOrServer.lastHello === \"function\") {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description && \"maxWireVersion\" in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/** @internal */ function arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx)=>elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */ function errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if (lhs == null && rhs != null || lhs != null && rhs == null) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */ function makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit(\"stateChanged\", target.s.state, newState);\n        target.s.state = newState;\n    };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */ function now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */ function calculateDurationInMs(started) {\n    if (typeof started !== \"number\") {\n        return -1;\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */ function hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc){\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === \"$\";\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */ function resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset){\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */ function isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */ function setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB){\n        difference.delete(elem);\n    }\n    return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop)=>Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, \"isPrototypeOf\")) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */ function deepCopy(value) {\n    if (value == null) {\n        return value;\n    } else if (Array.isArray(value)) {\n        return value.map((item)=>deepCopy(item));\n    } else if (isRecord(value)) {\n        const res = {};\n        for(const key in value){\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch(ctor.name.toLowerCase()){\n            case \"date\":\n                return new ctor(Number(value));\n            case \"map\":\n                return new Map(value);\n            case \"set\":\n                return new Set(value);\n            case \"buffer\":\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */ class List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return \"List\";\n    }\n    constructor(){\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(\" <=> \")} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()){\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while(ptr !== this.head){\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */ push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */ pushMany(iterable) {\n        for (const value of iterable){\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */ unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */ shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */ pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */ prune(filter) {\n        for (const node of this.nodes()){\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */ first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */ last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */ class BufferPool {\n    constructor(){\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */ append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */ getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */ read(size) {\n        if (typeof size !== \"number\" || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for(let bytesRead = 0; bytesRead < size;){\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */ class HostAddress {\n    constructor(hostString){\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(\" \").join(\"%20\"); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith(\".sock\")) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        } catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith(\"[\") && normalized.endsWith(\"]\")) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === \"number\") {\n            this.port = port;\n        } else if (typeof port === \"string\" && port !== \"\") {\n            this.port = Number.parseInt(port, 10);\n        } else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError(\"Invalid port (zero) with hostname\");\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === \"string\") {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(\":\")) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return {\n                host: this.socketPath,\n                port: 0\n            };\n        }\n        const host = this.host ?? \"\";\n        const port = this.port ?? 0;\n        return {\n            host,\n            port\n        };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk () {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */ exports.MONGODB_WARNING_CODE = \"MONGODB DRIVER\";\n/** @internal */ function emitWarning(message) {\n    return process.emitWarning(message, {\n        code: exports.MONGODB_WARNING_CODE\n    });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */ function emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */ function enumToString(en) {\n    return Object.values(en).join(\", \");\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */ function supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */ function shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError(\"Limit must be less than the number of items\");\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while(remainingItemsToShuffle > lowerBound){\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */ function compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n    if (typeof value === \"number\") return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */ function matchesParentDomain(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith(\".\") ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith(\".\") ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, \"\")}`;\n    const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, \"\")}`;\n    return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject)=>{\n        const requestOptions = {\n            method: \"GET\",\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, (res)=>{\n            res.setEncoding(\"utf8\");\n            let data = \"\";\n            res.on(\"data\", (d)=>{\n                data += d;\n            });\n            res.once(\"end\", ()=>{\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                } catch  {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once(\"timeout\", ()=>req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once(\"error\", (error)=>reject(error));\n        req.end();\n    });\n}\nexports.request = request;\n/**\n * A custom AbortController that aborts after a specified timeout.\n *\n * If `timeout` is undefined or \\<=0, the abort controller never aborts.\n *\n * This class provides two benefits over the built-in AbortSignal.timeout() method.\n * - This class provides a mechanism for cancelling the timeout\n * - This class supports infinite timeouts by interpreting a timeout of 0 as infinite.  This is\n *    consistent with existing timeout options in the Node driver (serverSelectionTimeoutMS, for example).\n * @internal\n */ class TimeoutController extends AbortController {\n    constructor(timeout = 0, timeoutId = timeout > 0 ? (0, timers_1.setTimeout)(()=>this.abort(), timeout) : null){\n        super();\n        this.timeoutId = timeoutId;\n    }\n    clear() {\n        if (this.timeoutId != null) {\n            (0, timers_1.clearTimeout)(this.timeoutId);\n        }\n        this.timeoutId = null;\n    }\n}\nexports.TimeoutController = TimeoutController;\n/** @internal */ exports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */ exports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */ exports.DOCUMENT_DB_MSG = \"You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb\";\n/** @internal */ exports.COSMOS_DB_MSG = \"You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb\";\n/** @internal */ function isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nexports.isHostMatch = isHostMatch;\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n        resolve = promiseResolve;\n        reject = promiseReject;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */ async function once(ee, name) {\n    const { promise, resolve, reject } = promiseWithResolvers();\n    const onEvent = (data)=>resolve(data);\n    const onError = (error)=>reject(error);\n    ee.once(name, onEvent).once(\"error\", onError);\n    try {\n        const res = await promise;\n        ee.off(\"error\", onError);\n        return res;\n    } catch (error) {\n        ee.off(name, onEvent);\n        throw error;\n    }\n}\nexports.once = once; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/write_concern.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/write_concern.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.WRITE_CONCERN_KEYS = [\n    \"w\",\n    \"wtimeout\",\n    \"j\",\n    \"journal\",\n    \"fsync\"\n];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */ class WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */ constructor(w, wtimeoutMS, journal, fsync){\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            } else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */ static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null) wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null) wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null) wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */ static fromOptions(options, inherit) {\n        if (options == null) return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === \"string\" || typeof options === \"number\") {\n            opts = {\n                w: options\n            };\n        } else if (options instanceof WriteConcern) {\n            opts = options;\n        } else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null || wtimeout != null || wtimeoutMS != null || j != null || journal != null || fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern; //# sourceMappingURL=write_concern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvd3JpdGVfY29uY2Vybi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDekRBLDBCQUEwQixHQUFHO0lBQUM7SUFBSztJQUFZO0lBQUs7SUFBVztDQUFRO0FBQ3ZFOzs7Ozs7Q0FNQyxHQUNELE1BQU1FO0lBQ0Y7Ozs7OztLQU1DLEdBQ0RFLFlBQVlDLENBQUMsRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssQ0FBRTtRQUN2QyxJQUFJSCxLQUFLLE1BQU07WUFDWCxJQUFJLENBQUNJLE9BQU9DLEtBQUssQ0FBQ0QsT0FBT0osS0FBSztnQkFDMUIsSUFBSSxDQUFDQSxDQUFDLEdBQUdJLE9BQU9KO1lBQ3BCLE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDQSxDQUFDLEdBQUdBO1lBQ2I7UUFDSjtRQUNBLElBQUlDLGNBQWMsTUFBTTtZQUNwQixJQUFJLENBQUNBLFVBQVUsR0FBRyxJQUFJLENBQUNLLFFBQVEsR0FBR0w7UUFDdEM7UUFDQSxJQUFJQyxXQUFXLE1BQU07WUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSSxDQUFDSyxDQUFDLEdBQUdMO1FBQzVCO1FBQ0EsSUFBSUMsU0FBUyxNQUFNO1lBQ2YsSUFBSSxDQUFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDSyxDQUFDLEdBQUdKLFFBQVEsT0FBTztRQUMzQztJQUNKO0lBQ0E7O0tBRUMsR0FDRCxPQUFPSyxNQUFNQyxPQUFPLEVBQUVDLFlBQVksRUFBRTtRQUNoQyxNQUFNQyxLQUFLLENBQUM7UUFDWix5RUFBeUU7UUFDekUsSUFBSUQsYUFBYVYsQ0FBQyxJQUFJLE1BQ2xCVyxHQUFHWCxDQUFDLEdBQUdVLGFBQWFWLENBQUM7UUFDekIsSUFBSVUsYUFBYVQsVUFBVSxJQUFJLE1BQzNCVSxHQUFHTCxRQUFRLEdBQUdJLGFBQWFULFVBQVU7UUFDekMsSUFBSVMsYUFBYVIsT0FBTyxJQUFJLE1BQ3hCUyxHQUFHSixDQUFDLEdBQUdHLGFBQWFILENBQUM7UUFDekJFLFFBQVFDLFlBQVksR0FBR0M7UUFDdkIsT0FBT0Y7SUFDWDtJQUNBLHNEQUFzRCxHQUN0RCxPQUFPRyxZQUFZQyxPQUFPLEVBQUVDLE9BQU8sRUFBRTtRQUNqQyxJQUFJRCxXQUFXLE1BQ1gsT0FBT0U7UUFDWEQsVUFBVUEsV0FBVyxDQUFDO1FBQ3RCLElBQUlFO1FBQ0osSUFBSSxPQUFPSCxZQUFZLFlBQVksT0FBT0EsWUFBWSxVQUFVO1lBQzVERyxPQUFPO2dCQUFFaEIsR0FBR2E7WUFBUTtRQUN4QixPQUNLLElBQUlBLG1CQUFtQmhCLGNBQWM7WUFDdENtQixPQUFPSDtRQUNYLE9BQ0s7WUFDREcsT0FBT0gsUUFBUUgsWUFBWTtRQUMvQjtRQUNBLE1BQU1PLGFBQWFILG1CQUFtQmpCLGVBQWVpQixVQUFVQSxRQUFRSixZQUFZO1FBQ25GLE1BQU0sRUFBRVYsSUFBSWUsU0FBUyxFQUFFVCxXQUFXUyxTQUFTLEVBQUVSLElBQUlRLFNBQVMsRUFBRVosUUFBUVksU0FBUyxFQUFFYixVQUFVYSxTQUFTLEVBQUVkLGFBQWFjLFNBQVMsRUFBRSxHQUFHO1lBQzNILEdBQUdFLFVBQVU7WUFDYixHQUFHRCxJQUFJO1FBQ1g7UUFDQSxJQUFJaEIsS0FBSyxRQUNMTSxZQUFZLFFBQ1pMLGNBQWMsUUFDZE0sS0FBSyxRQUNMTCxXQUFXLFFBQ1hDLFNBQVMsTUFBTTtZQUNmLE9BQU8sSUFBSU4sYUFBYUcsR0FBR00sWUFBWUwsWUFBWU0sS0FBS0wsU0FBU0M7UUFDckU7UUFDQSxPQUFPWTtJQUNYO0FBQ0o7QUFDQXBCLG9CQUFvQixHQUFHRSxjQUN2Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3dyaXRlX2NvbmNlcm4uanM/MjNiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gZXhwb3J0cy5XUklURV9DT05DRVJOX0tFWVMgPSB2b2lkIDA7XG5leHBvcnRzLldSSVRFX0NPTkNFUk5fS0VZUyA9IFsndycsICd3dGltZW91dCcsICdqJywgJ2pvdXJuYWwnLCAnZnN5bmMnXTtcbi8qKlxuICogQSBNb25nb0RCIFdyaXRlQ29uY2Vybiwgd2hpY2ggZGVzY3JpYmVzIHRoZSBsZXZlbCBvZiBhY2tub3dsZWRnZW1lbnRcbiAqIHJlcXVlc3RlZCBmcm9tIE1vbmdvREIgZm9yIHdyaXRlIG9wZXJhdGlvbnMuXG4gKiBAcHVibGljXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvd3JpdGUtY29uY2Vybi9cbiAqL1xuY2xhc3MgV3JpdGVDb25jZXJuIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgV3JpdGVDb25jZXJuIGZyb20gdGhlIHdyaXRlIGNvbmNlcm4gcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0gdyAtIHJlcXVlc3QgYWNrbm93bGVkZ21lbnQgdGhhdCB0aGUgd3JpdGUgb3BlcmF0aW9uIGhhcyBwcm9wYWdhdGVkIHRvIGEgc3BlY2lmaWVkIG51bWJlciBvZiBtb25nb2QgaW5zdGFuY2VzIG9yIHRvIG1vbmdvZCBpbnN0YW5jZXMgd2l0aCBzcGVjaWZpZWQgdGFncy5cbiAgICAgKiBAcGFyYW0gd3RpbWVvdXRNUyAtIHNwZWNpZnkgYSB0aW1lIGxpbWl0IHRvIHByZXZlbnQgd3JpdGUgb3BlcmF0aW9ucyBmcm9tIGJsb2NraW5nIGluZGVmaW5pdGVseVxuICAgICAqIEBwYXJhbSBqb3VybmFsIC0gcmVxdWVzdCBhY2tub3dsZWRnbWVudCB0aGF0IHRoZSB3cml0ZSBvcGVyYXRpb24gaGFzIGJlZW4gd3JpdHRlbiB0byB0aGUgb24tZGlzayBqb3VybmFsXG4gICAgICogQHBhcmFtIGZzeW5jIC0gZXF1aXZhbGVudCB0byB0aGUgaiBvcHRpb24uIElzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHcsIHd0aW1lb3V0TVMsIGpvdXJuYWwsIGZzeW5jKSB7XG4gICAgICAgIGlmICh3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKE51bWJlcih3KSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLncgPSBOdW1iZXIodyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLncgPSB3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3dGltZW91dE1TICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMud3RpbWVvdXRNUyA9IHRoaXMud3RpbWVvdXQgPSB3dGltZW91dE1TO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb3VybmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuam91cm5hbCA9IHRoaXMuaiA9IGpvdXJuYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZzeW5jICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuam91cm5hbCA9IHRoaXMuaiA9IGZzeW5jID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IGEgd3JpdGUgY29uY2VybiB0byBhIGNvbW1hbmQgZG9jdW1lbnQuIFdpbGwgbW9kaWZ5IGFuZCByZXR1cm4gdGhlIGNvbW1hbmQuXG4gICAgICovXG4gICAgc3RhdGljIGFwcGx5KGNvbW1hbmQsIHdyaXRlQ29uY2Vybikge1xuICAgICAgICBjb25zdCB3YyA9IHt9O1xuICAgICAgICAvLyBUaGUgd3JpdGUgY29uY2VybiBkb2N1bWVudCBzZW50IHRvIHRoZSBzZXJ2ZXIgaGFzIHcvd3RpbWVvdXQvaiBmaWVsZHMuXG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4udyAhPSBudWxsKVxuICAgICAgICAgICAgd2MudyA9IHdyaXRlQ29uY2Vybi53O1xuICAgICAgICBpZiAod3JpdGVDb25jZXJuLnd0aW1lb3V0TVMgIT0gbnVsbClcbiAgICAgICAgICAgIHdjLnd0aW1lb3V0ID0gd3JpdGVDb25jZXJuLnd0aW1lb3V0TVM7XG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4uam91cm5hbCAhPSBudWxsKVxuICAgICAgICAgICAgd2MuaiA9IHdyaXRlQ29uY2Vybi5qO1xuICAgICAgICBjb21tYW5kLndyaXRlQ29uY2VybiA9IHdjO1xuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG4gICAgLyoqIENvbnN0cnVjdCBhIFdyaXRlQ29uY2VybiBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC4gKi9cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucywgaW5oZXJpdCkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgaW5oZXJpdCA9IGluaGVyaXQgPz8ge307XG4gICAgICAgIGxldCBvcHRzO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgb3B0cyA9IHsgdzogb3B0aW9ucyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBXcml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIG9wdHMgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudE9wdHMgPSBpbmhlcml0IGluc3RhbmNlb2YgV3JpdGVDb25jZXJuID8gaW5oZXJpdCA6IGluaGVyaXQud3JpdGVDb25jZXJuO1xuICAgICAgICBjb25zdCB7IHcgPSB1bmRlZmluZWQsIHd0aW1lb3V0ID0gdW5kZWZpbmVkLCBqID0gdW5kZWZpbmVkLCBmc3luYyA9IHVuZGVmaW5lZCwgam91cm5hbCA9IHVuZGVmaW5lZCwgd3RpbWVvdXRNUyA9IHVuZGVmaW5lZCB9ID0ge1xuICAgICAgICAgICAgLi4ucGFyZW50T3B0cyxcbiAgICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHcgIT0gbnVsbCB8fFxuICAgICAgICAgICAgd3RpbWVvdXQgIT0gbnVsbCB8fFxuICAgICAgICAgICAgd3RpbWVvdXRNUyAhPSBudWxsIHx8XG4gICAgICAgICAgICBqICE9IG51bGwgfHxcbiAgICAgICAgICAgIGpvdXJuYWwgIT0gbnVsbCB8fFxuICAgICAgICAgICAgZnN5bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXcml0ZUNvbmNlcm4odywgd3RpbWVvdXQgPz8gd3RpbWVvdXRNUywgaiA/PyBqb3VybmFsLCBmc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLldyaXRlQ29uY2VybiA9IFdyaXRlQ29uY2Vybjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyaXRlX2NvbmNlcm4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV3JpdGVDb25jZXJuIiwiV1JJVEVfQ09OQ0VSTl9LRVlTIiwiY29uc3RydWN0b3IiLCJ3Iiwid3RpbWVvdXRNUyIsImpvdXJuYWwiLCJmc3luYyIsIk51bWJlciIsImlzTmFOIiwid3RpbWVvdXQiLCJqIiwiYXBwbHkiLCJjb21tYW5kIiwid3JpdGVDb25jZXJuIiwid2MiLCJmcm9tT3B0aW9ucyIsIm9wdGlvbnMiLCJpbmhlcml0IiwidW5kZWZpbmVkIiwib3B0cyIsInBhcmVudE9wdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/write_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/package.json":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"mongodb","version":"6.5.0","description":"The official MongoDB driver for Node.js","main":"lib/index.js","files":["lib","src","etc/prepare.js","mongodb.d.ts","tsconfig.json"],"types":"mongodb.d.ts","repository":{"type":"git","url":"git@github.com:mongodb/node-mongodb-native.git"},"keywords":["mongodb","driver","official"],"author":{"name":"The MongoDB NodeJS Team","email":"dbx-node@mongodb.com"},"dependencies":{"@mongodb-js/saslprep":"^1.1.5","bson":"^6.4.0","mongodb-connection-string-url":"^3.0.0"},"peerDependencies":{"@aws-sdk/credential-providers":"^3.188.0","@mongodb-js/zstd":"^1.1.0","gcp-metadata":"^5.2.0","kerberos":"^2.0.1","mongodb-client-encryption":">=6.0.0 <7","snappy":"^7.2.2","socks":"^2.7.1"},"peerDependenciesMeta":{"@aws-sdk/credential-providers":{"optional":true},"@mongodb-js/zstd":{"optional":true},"kerberos":{"optional":true},"snappy":{"optional":true},"mongodb-client-encryption":{"optional":true},"gcp-metadata":{"optional":true},"socks":{"optional":true}},"devDependencies":{"@aws-sdk/credential-providers":"^3.515.0","@iarna/toml":"^2.2.5","@istanbuljs/nyc-config-typescript":"^1.0.2","@microsoft/api-extractor":"^7.40.6","@microsoft/tsdoc-config":"^0.16.2","@mongodb-js/zstd":"^1.2.0","@octokit/core":"^5.1.0","@types/chai":"^4.3.11","@types/chai-subset":"^1.3.5","@types/express":"^4.17.21","@types/kerberos":"^1.1.5","@types/mocha":"^10.0.6","@types/node":"^20.11.20","@types/saslprep":"^1.0.3","@types/semver":"^7.5.7","@types/sinon":"^10.0.20","@types/sinon-chai":"^3.2.12","@types/whatwg-url":"^11.0.4","@typescript-eslint/eslint-plugin":"^5.62.0","@typescript-eslint/parser":"^5.62.0","chai":"^4.4.1","chai-subset":"^1.6.0","chalk":"^4.1.2","eslint":"^8.56.0","eslint-config-prettier":"^8.10.0","eslint-plugin-import":"^2.29.1","eslint-plugin-prettier":"^4.2.1","eslint-plugin-simple-import-sort":"^10.0.0","eslint-plugin-tsdoc":"^0.2.17","eslint-plugin-unused-imports":"^2.0.0","express":"^4.18.2","gcp-metadata":"^5.3.0","js-yaml":"^4.1.0","mocha":"^10.3.0","mocha-sinon":"^2.1.2","mongodb-client-encryption":"^6.0.0","mongodb-legacy":"^6.0.1","nyc":"^15.1.0","prettier":"^2.8.8","semver":"^7.6.0","sinon":"^15.2.0","sinon-chai":"^3.7.0","snappy":"^7.2.2","socks":"^2.8.1","source-map-support":"^0.5.21","ts-node":"^10.9.2","tsd":"^0.30.6","typescript":"5.0","typescript-cached-transpile":"^0.0.6","v8-heapsnapshot":"^1.3.1","yargs":"^17.7.2"},"license":"Apache-2.0","engines":{"node":">=16.20.1"},"bugs":{"url":"https://jira.mongodb.org/projects/NODE/issues/"},"homepage":"https://github.com/mongodb/node-mongodb-native","scripts":{"build:evergreen":"node .evergreen/generate_evergreen_tasks.js","build:ts":"node ./node_modules/typescript/bin/tsc","build:dts":"npm run build:ts && api-extractor run && node etc/clean_definition_files.cjs && eslint mongodb.d.ts --fix","build:docs":"./etc/docs/build.ts","build:typedoc":"typedoc","build:nightly":"node ./.github/scripts/nightly.mjs","check:bench":"node test/benchmarks/driverBench","check:coverage":"nyc npm run test:all","check:integration-coverage":"nyc npm run check:test","check:lambda":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/handler.test.js","check:lambda:aws":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/aws_handler.test.js","check:lint":"npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd","check:eslint":"eslint -v && eslint --max-warnings=0 --ext \'.js,.ts\' src test","check:tsd":"tsd --version && tsd","check:dependencies":"mocha test/action/dependency.test.ts","check:dts":"node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd","check:search-indexes":"nyc mocha --config test/mocha_mongodb.json test/manual/search-index-management.prose.test.ts","check:test":"mocha --config test/mocha_mongodb.json test/integration","check:unit":"mocha test/unit","check:ts":"node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit","check:atlas":"mocha --config test/manual/mocharc.json test/manual/atlas_connectivity.test.js","check:drivers-atlas-testing":"mocha --config test/mocha_mongodb.json test/atlas/drivers_atlas_testing.test.ts","check:adl":"mocha --config test/mocha_mongodb.json test/manual/atlas-data-lake-testing","check:aws":"nyc mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_aws.test.ts","check:oidc":"mocha --config test/mocha_mongodb.json test/manual/mongodb_oidc.prose.test.ts","check:oidc-azure":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc_azure.prose.test.ts","check:ocsp":"mocha --config test/manual/mocharc.json test/manual/ocsp_support.test.js","check:kerberos":"nyc mocha --config test/manual/mocharc.json test/manual/kerberos.test.ts","check:tls":"mocha --config test/manual/mocharc.json test/manual/tls_support.test.ts","check:ldap":"nyc mocha --config test/manual/mocharc.json test/manual/ldap.test.js","check:socks5":"mocha --config test/manual/mocharc.json test/manual/socks5.test.ts","check:csfle":"mocha --config test/mocha_mongodb.json test/integration/client-side-encryption","check:snappy":"mocha test/unit/assorted/snappy.test.js","fix:eslint":"npm run check:eslint -- --fix","prepare":"node etc/prepare.js","preview:docs":"ts-node etc/docs/preview.ts","test":"npm run check:lint && npm run test:all","test:all":"npm run check:unit && npm run check:test","update:docs":"npm run build:docs -- --yes"},"tsd":{"directory":"test/types","compilerOptions":{"strict":true,"target":"esnext","module":"commonjs","moduleResolution":"node"}}}');

/***/ })

};
;