"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/string-similarity";
exports.ids = ["vendor-chunks/string-similarity"];
exports.modules = {

/***/ "(ssr)/./node_modules/string-similarity/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/string-similarity/src/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    compareTwoStrings: compareTwoStrings,\n    findBestMatch: findBestMatch\n};\nfunction compareTwoStrings(first, second) {\n    first = first.replace(/\\s+/g, \"\");\n    second = second.replace(/\\s+/g, \"\");\n    if (first === second) return 1; // identical or empty\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 0-letter or 1-letter string\n    let firstBigrams = new Map();\n    for(let i = 0; i < first.length - 1; i++){\n        const bigram = first.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    ;\n    let intersectionSize = 0;\n    for(let i = 0; i < second.length - 1; i++){\n        const bigram = second.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n        if (count > 0) {\n            firstBigrams.set(bigram, count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n}\nfunction findBestMatch(mainString, targetStrings) {\n    if (!areArgsValid(mainString, targetStrings)) throw new Error(\"Bad arguments: First argument should be a string, second should be an array of strings\");\n    const ratings = [];\n    let bestMatchIndex = 0;\n    for(let i = 0; i < targetStrings.length; i++){\n        const currentTargetString = targetStrings[i];\n        const currentRating = compareTwoStrings(mainString, currentTargetString);\n        ratings.push({\n            target: currentTargetString,\n            rating: currentRating\n        });\n        if (currentRating > ratings[bestMatchIndex].rating) {\n            bestMatchIndex = i;\n        }\n    }\n    const bestMatch = ratings[bestMatchIndex];\n    return {\n        ratings: ratings,\n        bestMatch: bestMatch,\n        bestMatchIndex: bestMatchIndex\n    };\n}\nfunction areArgsValid(mainString, targetStrings) {\n    if (typeof mainString !== \"string\") return false;\n    if (!Array.isArray(targetStrings)) return false;\n    if (!targetStrings.length) return false;\n    if (targetStrings.find(function(s) {\n        return typeof s !== \"string\";\n    })) return false;\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RyaW5nLXNpbWlsYXJpdHkvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxtQkFBa0JBO0lBQ2xCQyxlQUFjQTtBQUNmO0FBRUEsU0FBU0Qsa0JBQWtCRSxLQUFLLEVBQUVDLE1BQU07SUFDdkNELFFBQVFBLE1BQU1FLE9BQU8sQ0FBQyxRQUFRO0lBQzlCRCxTQUFTQSxPQUFPQyxPQUFPLENBQUMsUUFBUTtJQUVoQyxJQUFJRixVQUFVQyxRQUFRLE9BQU8sR0FBRyxxQkFBcUI7SUFDckQsSUFBSUQsTUFBTUcsTUFBTSxHQUFHLEtBQUtGLE9BQU9FLE1BQU0sR0FBRyxHQUFHLE9BQU8sR0FBRyw2Q0FBNkM7SUFFbEcsSUFBSUMsZUFBZSxJQUFJQztJQUN2QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sTUFBTUcsTUFBTSxHQUFHLEdBQUdHLElBQUs7UUFDMUMsTUFBTUMsU0FBU1AsTUFBTVEsU0FBUyxDQUFDRixHQUFHQSxJQUFJO1FBQ3RDLE1BQU1HLFFBQVFMLGFBQWFNLEdBQUcsQ0FBQ0gsVUFDNUJILGFBQWFPLEdBQUcsQ0FBQ0osVUFBVSxJQUMzQjtRQUVISCxhQUFhUSxHQUFHLENBQUNMLFFBQVFFO0lBQzFCOztJQUVBLElBQUlJLG1CQUFtQjtJQUN2QixJQUFLLElBQUlQLElBQUksR0FBR0EsSUFBSUwsT0FBT0UsTUFBTSxHQUFHLEdBQUdHLElBQUs7UUFDM0MsTUFBTUMsU0FBU04sT0FBT08sU0FBUyxDQUFDRixHQUFHQSxJQUFJO1FBQ3ZDLE1BQU1HLFFBQVFMLGFBQWFNLEdBQUcsQ0FBQ0gsVUFDNUJILGFBQWFPLEdBQUcsQ0FBQ0osVUFDakI7UUFFSCxJQUFJRSxRQUFRLEdBQUc7WUFDZEwsYUFBYVEsR0FBRyxDQUFDTCxRQUFRRSxRQUFRO1lBQ2pDSTtRQUNEO0lBQ0Q7SUFFQSxPQUFPLE1BQU9BLG1CQUFxQmIsQ0FBQUEsTUFBTUcsTUFBTSxHQUFHRixPQUFPRSxNQUFNLEdBQUc7QUFDbkU7QUFFQSxTQUFTSixjQUFjZSxVQUFVLEVBQUVDLGFBQWE7SUFDL0MsSUFBSSxDQUFDQyxhQUFhRixZQUFZQyxnQkFBZ0IsTUFBTSxJQUFJRSxNQUFNO0lBRTlELE1BQU1DLFVBQVUsRUFBRTtJQUNsQixJQUFJQyxpQkFBaUI7SUFFckIsSUFBSyxJQUFJYixJQUFJLEdBQUdBLElBQUlTLGNBQWNaLE1BQU0sRUFBRUcsSUFBSztRQUM5QyxNQUFNYyxzQkFBc0JMLGFBQWEsQ0FBQ1QsRUFBRTtRQUM1QyxNQUFNZSxnQkFBZ0J2QixrQkFBa0JnQixZQUFZTTtRQUNwREYsUUFBUUksSUFBSSxDQUFDO1lBQUNDLFFBQVFIO1lBQXFCSSxRQUFRSDtRQUFhO1FBQ2hFLElBQUlBLGdCQUFnQkgsT0FBTyxDQUFDQyxlQUFlLENBQUNLLE1BQU0sRUFBRTtZQUNuREwsaUJBQWlCYjtRQUNsQjtJQUNEO0lBR0EsTUFBTW1CLFlBQVlQLE9BQU8sQ0FBQ0MsZUFBZTtJQUV6QyxPQUFPO1FBQUVELFNBQVNBO1FBQVNPLFdBQVdBO1FBQVdOLGdCQUFnQkE7SUFBZTtBQUNqRjtBQUVBLFNBQVNILGFBQWFGLFVBQVUsRUFBRUMsYUFBYTtJQUM5QyxJQUFJLE9BQU9ELGVBQWUsVUFBVSxPQUFPO0lBQzNDLElBQUksQ0FBQ1ksTUFBTUMsT0FBTyxDQUFDWixnQkFBZ0IsT0FBTztJQUMxQyxJQUFJLENBQUNBLGNBQWNaLE1BQU0sRUFBRSxPQUFPO0lBQ2xDLElBQUlZLGNBQWNhLElBQUksQ0FBRSxTQUFVQyxDQUFDO1FBQUksT0FBTyxPQUFPQSxNQUFNO0lBQVEsSUFBSSxPQUFPO0lBQzlFLE9BQU87QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvc3RyaW5nLXNpbWlsYXJpdHkvc3JjL2luZGV4LmpzPzlkMDYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNvbXBhcmVUd29TdHJpbmdzOmNvbXBhcmVUd29TdHJpbmdzLFxuXHRmaW5kQmVzdE1hdGNoOmZpbmRCZXN0TWF0Y2hcbn07XG5cbmZ1bmN0aW9uIGNvbXBhcmVUd29TdHJpbmdzKGZpcnN0LCBzZWNvbmQpIHtcblx0Zmlyc3QgPSBmaXJzdC5yZXBsYWNlKC9cXHMrL2csICcnKVxuXHRzZWNvbmQgPSBzZWNvbmQucmVwbGFjZSgvXFxzKy9nLCAnJylcblxuXHRpZiAoZmlyc3QgPT09IHNlY29uZCkgcmV0dXJuIDE7IC8vIGlkZW50aWNhbCBvciBlbXB0eVxuXHRpZiAoZmlyc3QubGVuZ3RoIDwgMiB8fCBzZWNvbmQubGVuZ3RoIDwgMikgcmV0dXJuIDA7IC8vIGlmIGVpdGhlciBpcyBhIDAtbGV0dGVyIG9yIDEtbGV0dGVyIHN0cmluZ1xuXG5cdGxldCBmaXJzdEJpZ3JhbXMgPSBuZXcgTWFwKCk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3QubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0Y29uc3QgYmlncmFtID0gZmlyc3Quc3Vic3RyaW5nKGksIGkgKyAyKTtcblx0XHRjb25zdCBjb3VudCA9IGZpcnN0QmlncmFtcy5oYXMoYmlncmFtKVxuXHRcdFx0PyBmaXJzdEJpZ3JhbXMuZ2V0KGJpZ3JhbSkgKyAxXG5cdFx0XHQ6IDE7XG5cblx0XHRmaXJzdEJpZ3JhbXMuc2V0KGJpZ3JhbSwgY291bnQpO1xuXHR9O1xuXG5cdGxldCBpbnRlcnNlY3Rpb25TaXplID0gMDtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzZWNvbmQubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0Y29uc3QgYmlncmFtID0gc2Vjb25kLnN1YnN0cmluZyhpLCBpICsgMik7XG5cdFx0Y29uc3QgY291bnQgPSBmaXJzdEJpZ3JhbXMuaGFzKGJpZ3JhbSlcblx0XHRcdD8gZmlyc3RCaWdyYW1zLmdldChiaWdyYW0pXG5cdFx0XHQ6IDA7XG5cblx0XHRpZiAoY291bnQgPiAwKSB7XG5cdFx0XHRmaXJzdEJpZ3JhbXMuc2V0KGJpZ3JhbSwgY291bnQgLSAxKTtcblx0XHRcdGludGVyc2VjdGlvblNpemUrKztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gKDIuMCAqIGludGVyc2VjdGlvblNpemUpIC8gKGZpcnN0Lmxlbmd0aCArIHNlY29uZC5sZW5ndGggLSAyKTtcbn1cblxuZnVuY3Rpb24gZmluZEJlc3RNYXRjaChtYWluU3RyaW5nLCB0YXJnZXRTdHJpbmdzKSB7XG5cdGlmICghYXJlQXJnc1ZhbGlkKG1haW5TdHJpbmcsIHRhcmdldFN0cmluZ3MpKSB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBhcmd1bWVudHM6IEZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhIHN0cmluZywgc2Vjb25kIHNob3VsZCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzJyk7XG5cdFxuXHRjb25zdCByYXRpbmdzID0gW107XG5cdGxldCBiZXN0TWF0Y2hJbmRleCA9IDA7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRTdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3QgY3VycmVudFRhcmdldFN0cmluZyA9IHRhcmdldFN0cmluZ3NbaV07XG5cdFx0Y29uc3QgY3VycmVudFJhdGluZyA9IGNvbXBhcmVUd29TdHJpbmdzKG1haW5TdHJpbmcsIGN1cnJlbnRUYXJnZXRTdHJpbmcpXG5cdFx0cmF0aW5ncy5wdXNoKHt0YXJnZXQ6IGN1cnJlbnRUYXJnZXRTdHJpbmcsIHJhdGluZzogY3VycmVudFJhdGluZ30pXG5cdFx0aWYgKGN1cnJlbnRSYXRpbmcgPiByYXRpbmdzW2Jlc3RNYXRjaEluZGV4XS5yYXRpbmcpIHtcblx0XHRcdGJlc3RNYXRjaEluZGV4ID0gaVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdGNvbnN0IGJlc3RNYXRjaCA9IHJhdGluZ3NbYmVzdE1hdGNoSW5kZXhdXG5cdFxuXHRyZXR1cm4geyByYXRpbmdzOiByYXRpbmdzLCBiZXN0TWF0Y2g6IGJlc3RNYXRjaCwgYmVzdE1hdGNoSW5kZXg6IGJlc3RNYXRjaEluZGV4IH07XG59XG5cbmZ1bmN0aW9uIGFyZUFyZ3NWYWxpZChtYWluU3RyaW5nLCB0YXJnZXRTdHJpbmdzKSB7XG5cdGlmICh0eXBlb2YgbWFpblN0cmluZyAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcblx0aWYgKCFBcnJheS5pc0FycmF5KHRhcmdldFN0cmluZ3MpKSByZXR1cm4gZmFsc2U7XG5cdGlmICghdGFyZ2V0U3RyaW5ncy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblx0aWYgKHRhcmdldFN0cmluZ3MuZmluZCggZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHR5cGVvZiBzICE9PSAnc3RyaW5nJ30pKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiB0cnVlO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21wYXJlVHdvU3RyaW5ncyIsImZpbmRCZXN0TWF0Y2giLCJmaXJzdCIsInNlY29uZCIsInJlcGxhY2UiLCJsZW5ndGgiLCJmaXJzdEJpZ3JhbXMiLCJNYXAiLCJpIiwiYmlncmFtIiwic3Vic3RyaW5nIiwiY291bnQiLCJoYXMiLCJnZXQiLCJzZXQiLCJpbnRlcnNlY3Rpb25TaXplIiwibWFpblN0cmluZyIsInRhcmdldFN0cmluZ3MiLCJhcmVBcmdzVmFsaWQiLCJFcnJvciIsInJhdGluZ3MiLCJiZXN0TWF0Y2hJbmRleCIsImN1cnJlbnRUYXJnZXRTdHJpbmciLCJjdXJyZW50UmF0aW5nIiwicHVzaCIsInRhcmdldCIsInJhdGluZyIsImJlc3RNYXRjaCIsIkFycmF5IiwiaXNBcnJheSIsImZpbmQiLCJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/string-similarity/src/index.js\n");

/***/ })

};
;