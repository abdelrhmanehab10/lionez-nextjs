"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-pool";
exports.ids = ["vendor-chunks/pg-pool"];
exports.modules = {

/***/ "(ssr)/./node_modules/pg-pool/index.js":
/*!***************************************!*\
  !*** ./node_modules/pg-pool/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst NOOP = function() {};\nconst removeWhere = (list, predicate)=>{\n    const i = list.findIndex(predicate);\n    return i === -1 ? undefined : list.splice(i, 1)[0];\n};\nclass IdleItem {\n    constructor(client, idleListener, timeoutId){\n        this.client = client;\n        this.idleListener = idleListener;\n        this.timeoutId = timeoutId;\n    }\n}\nclass PendingItem {\n    constructor(callback){\n        this.callback = callback;\n    }\n}\nfunction throwOnDoubleRelease() {\n    throw new Error(\"Release called on client which has already been released to the pool.\");\n}\nfunction promisify(Promise, callback) {\n    if (callback) {\n        return {\n            callback: callback,\n            result: undefined\n        };\n    }\n    let rej;\n    let res;\n    const cb = function(err, client) {\n        err ? rej(err) : res(client);\n    };\n    const result = new Promise(function(resolve, reject) {\n        res = resolve;\n        rej = reject;\n    }).catch((err)=>{\n        // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n        // application that created the query\n        Error.captureStackTrace(err);\n        throw err;\n    });\n    return {\n        callback: cb,\n        result: result\n    };\n}\nfunction makeIdleListener(pool, client) {\n    return function idleListener(err) {\n        err.client = client;\n        client.removeListener(\"error\", idleListener);\n        client.on(\"error\", ()=>{\n            pool.log(\"additional client error after disconnection due to error\", err);\n        });\n        pool._remove(client);\n        // TODO - document that once the pool emits an error\n        // the client has already been closed & purged and is unusable\n        pool.emit(\"error\", err, client);\n    };\n}\nclass Pool extends EventEmitter {\n    constructor(options, Client){\n        super();\n        this.options = Object.assign({}, options);\n        if (options != null && \"password\" in options) {\n            // \"hiding\" the password so it doesn't show up in stack traces\n            // or if the client is console.logged\n            Object.defineProperty(this.options, \"password\", {\n                configurable: true,\n                enumerable: false,\n                writable: true,\n                value: options.password\n            });\n        }\n        if (options != null && options.ssl && options.ssl.key) {\n            // \"hiding\" the ssl->key so it doesn't show up in stack traces\n            // or if the client is console.logged\n            Object.defineProperty(this.options.ssl, \"key\", {\n                enumerable: false\n            });\n        }\n        this.options.max = this.options.max || this.options.poolSize || 10;\n        this.options.maxUses = this.options.maxUses || Infinity;\n        this.options.allowExitOnIdle = this.options.allowExitOnIdle || false;\n        this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0;\n        this.log = this.options.log || function() {};\n        this.Client = this.options.Client || Client || (__webpack_require__(/*! pg */ \"(ssr)/./node_modules/pg/lib/index.js\").Client);\n        this.Promise = this.options.Promise || global.Promise;\n        if (typeof this.options.idleTimeoutMillis === \"undefined\") {\n            this.options.idleTimeoutMillis = 10000;\n        }\n        this._clients = [];\n        this._idle = [];\n        this._expired = new WeakSet();\n        this._pendingQueue = [];\n        this._endCallback = undefined;\n        this.ending = false;\n        this.ended = false;\n    }\n    _isFull() {\n        return this._clients.length >= this.options.max;\n    }\n    _pulseQueue() {\n        this.log(\"pulse queue\");\n        if (this.ended) {\n            this.log(\"pulse queue ended\");\n            return;\n        }\n        if (this.ending) {\n            this.log(\"pulse queue on ending\");\n            if (this._idle.length) {\n                this._idle.slice().map((item)=>{\n                    this._remove(item.client);\n                });\n            }\n            if (!this._clients.length) {\n                this.ended = true;\n                this._endCallback();\n            }\n            return;\n        }\n        // if we don't have any waiting, do nothing\n        if (!this._pendingQueue.length) {\n            this.log(\"no queued requests\");\n            return;\n        }\n        // if we don't have any idle clients and we have no more room do nothing\n        if (!this._idle.length && this._isFull()) {\n            return;\n        }\n        const pendingItem = this._pendingQueue.shift();\n        if (this._idle.length) {\n            const idleItem = this._idle.pop();\n            clearTimeout(idleItem.timeoutId);\n            const client = idleItem.client;\n            client.ref && client.ref();\n            const idleListener = idleItem.idleListener;\n            return this._acquireClient(client, pendingItem, idleListener, false);\n        }\n        if (!this._isFull()) {\n            return this.newClient(pendingItem);\n        }\n        throw new Error(\"unexpected condition\");\n    }\n    _remove(client) {\n        const removed = removeWhere(this._idle, (item)=>item.client === client);\n        if (removed !== undefined) {\n            clearTimeout(removed.timeoutId);\n        }\n        this._clients = this._clients.filter((c)=>c !== client);\n        client.end();\n        this.emit(\"remove\", client);\n    }\n    connect(cb) {\n        if (this.ending) {\n            const err = new Error(\"Cannot use a pool after calling end on the pool\");\n            return cb ? cb(err) : this.Promise.reject(err);\n        }\n        const response = promisify(this.Promise, cb);\n        const result = response.result;\n        // if we don't have to connect a new client, don't do so\n        if (this._isFull() || this._idle.length) {\n            // if we have idle clients schedule a pulse immediately\n            if (this._idle.length) {\n                process.nextTick(()=>this._pulseQueue());\n            }\n            if (!this.options.connectionTimeoutMillis) {\n                this._pendingQueue.push(new PendingItem(response.callback));\n                return result;\n            }\n            const queueCallback = (err, res, done)=>{\n                clearTimeout(tid);\n                response.callback(err, res, done);\n            };\n            const pendingItem = new PendingItem(queueCallback);\n            // set connection timeout on checking out an existing client\n            const tid = setTimeout(()=>{\n                // remove the callback from pending waiters because\n                // we're going to call it with a timeout error\n                removeWhere(this._pendingQueue, (i)=>i.callback === queueCallback);\n                pendingItem.timedOut = true;\n                response.callback(new Error(\"timeout exceeded when trying to connect\"));\n            }, this.options.connectionTimeoutMillis);\n            this._pendingQueue.push(pendingItem);\n            return result;\n        }\n        this.newClient(new PendingItem(response.callback));\n        return result;\n    }\n    newClient(pendingItem) {\n        const client = new this.Client(this.options);\n        this._clients.push(client);\n        const idleListener = makeIdleListener(this, client);\n        this.log(\"checking client timeout\");\n        // connection timeout logic\n        let tid;\n        let timeoutHit = false;\n        if (this.options.connectionTimeoutMillis) {\n            tid = setTimeout(()=>{\n                this.log(\"ending client due to timeout\");\n                timeoutHit = true;\n                // force kill the node driver, and let libpq do its teardown\n                client.connection ? client.connection.stream.destroy() : client.end();\n            }, this.options.connectionTimeoutMillis);\n        }\n        this.log(\"connecting new client\");\n        client.connect((err)=>{\n            if (tid) {\n                clearTimeout(tid);\n            }\n            client.on(\"error\", idleListener);\n            if (err) {\n                this.log(\"client failed to connect\", err);\n                // remove the dead client from our list of clients\n                this._clients = this._clients.filter((c)=>c !== client);\n                if (timeoutHit) {\n                    err.message = \"Connection terminated due to connection timeout\";\n                }\n                // this client wonâ€™t be released, so move on immediately\n                this._pulseQueue();\n                if (!pendingItem.timedOut) {\n                    pendingItem.callback(err, undefined, NOOP);\n                }\n            } else {\n                this.log(\"new client connected\");\n                if (this.options.maxLifetimeSeconds !== 0) {\n                    const maxLifetimeTimeout = setTimeout(()=>{\n                        this.log(\"ending client due to expired lifetime\");\n                        this._expired.add(client);\n                        const idleIndex = this._idle.findIndex((idleItem)=>idleItem.client === client);\n                        if (idleIndex !== -1) {\n                            this._acquireClient(client, new PendingItem((err, client, clientRelease)=>clientRelease()), idleListener, false);\n                        }\n                    }, this.options.maxLifetimeSeconds * 1000);\n                    maxLifetimeTimeout.unref();\n                    client.once(\"end\", ()=>clearTimeout(maxLifetimeTimeout));\n                }\n                return this._acquireClient(client, pendingItem, idleListener, true);\n            }\n        });\n    }\n    // acquire a client for a pending work item\n    _acquireClient(client, pendingItem, idleListener, isNew) {\n        if (isNew) {\n            this.emit(\"connect\", client);\n        }\n        this.emit(\"acquire\", client);\n        client.release = this._releaseOnce(client, idleListener);\n        client.removeListener(\"error\", idleListener);\n        if (!pendingItem.timedOut) {\n            if (isNew && this.options.verify) {\n                this.options.verify(client, (err)=>{\n                    if (err) {\n                        client.release(err);\n                        return pendingItem.callback(err, undefined, NOOP);\n                    }\n                    pendingItem.callback(undefined, client, client.release);\n                });\n            } else {\n                pendingItem.callback(undefined, client, client.release);\n            }\n        } else {\n            if (isNew && this.options.verify) {\n                this.options.verify(client, client.release);\n            } else {\n                client.release();\n            }\n        }\n    }\n    // returns a function that wraps _release and throws if called more than once\n    _releaseOnce(client, idleListener) {\n        let released = false;\n        return (err)=>{\n            if (released) {\n                throwOnDoubleRelease();\n            }\n            released = true;\n            this._release(client, idleListener, err);\n        };\n    }\n    // release a client back to the poll, include an error\n    // to remove it from the pool\n    _release(client, idleListener, err) {\n        client.on(\"error\", idleListener);\n        client._poolUseCount = (client._poolUseCount || 0) + 1;\n        this.emit(\"release\", err, client);\n        // TODO(bmc): expose a proper, public interface _queryable and _ending\n        if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n            if (client._poolUseCount >= this.options.maxUses) {\n                this.log(\"remove expended client\");\n            }\n            this._remove(client);\n            this._pulseQueue();\n            return;\n        }\n        const isExpired = this._expired.has(client);\n        if (isExpired) {\n            this.log(\"remove expired client\");\n            this._expired.delete(client);\n            this._remove(client);\n            this._pulseQueue();\n            return;\n        }\n        // idle timeout\n        let tid;\n        if (this.options.idleTimeoutMillis) {\n            tid = setTimeout(()=>{\n                this.log(\"remove idle client\");\n                this._remove(client);\n            }, this.options.idleTimeoutMillis);\n            if (this.options.allowExitOnIdle) {\n                // allow Node to exit if this is all that's left\n                tid.unref();\n            }\n        }\n        if (this.options.allowExitOnIdle) {\n            client.unref();\n        }\n        this._idle.push(new IdleItem(client, idleListener, tid));\n        this._pulseQueue();\n    }\n    query(text, values, cb) {\n        // guard clause against passing a function as the first parameter\n        if (typeof text === \"function\") {\n            const response = promisify(this.Promise, text);\n            setImmediate(function() {\n                return response.callback(new Error(\"Passing a function as the first parameter to pool.query is not supported\"));\n            });\n            return response.result;\n        }\n        // allow plain text query without values\n        if (typeof values === \"function\") {\n            cb = values;\n            values = undefined;\n        }\n        const response = promisify(this.Promise, cb);\n        cb = response.callback;\n        this.connect((err, client)=>{\n            if (err) {\n                return cb(err);\n            }\n            let clientReleased = false;\n            const onError = (err)=>{\n                if (clientReleased) {\n                    return;\n                }\n                clientReleased = true;\n                client.release(err);\n                cb(err);\n            };\n            client.once(\"error\", onError);\n            this.log(\"dispatching query\");\n            try {\n                client.query(text, values, (err, res)=>{\n                    this.log(\"query dispatched\");\n                    client.removeListener(\"error\", onError);\n                    if (clientReleased) {\n                        return;\n                    }\n                    clientReleased = true;\n                    client.release(err);\n                    if (err) {\n                        return cb(err);\n                    }\n                    return cb(undefined, res);\n                });\n            } catch (err) {\n                client.release(err);\n                return cb(err);\n            }\n        });\n        return response.result;\n    }\n    end(cb) {\n        this.log(\"ending\");\n        if (this.ending) {\n            const err = new Error(\"Called end on pool more than once\");\n            return cb ? cb(err) : this.Promise.reject(err);\n        }\n        this.ending = true;\n        const promised = promisify(this.Promise, cb);\n        this._endCallback = promised.callback;\n        this._pulseQueue();\n        return promised.result;\n    }\n    get waitingCount() {\n        return this._pendingQueue.length;\n    }\n    get idleCount() {\n        return this._idle.length;\n    }\n    get expiredCount() {\n        return this._clients.reduce((acc, client)=>acc + (this._expired.has(client) ? 1 : 0), 0);\n    }\n    get totalCount() {\n        return this._clients.length;\n    }\n}\nmodule.exports = Pool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg-pool/index.js\n");

/***/ })

};
;