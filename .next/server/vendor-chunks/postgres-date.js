"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres-date";
exports.ids = ["vendor-chunks/postgres-date"];
exports.modules = {

/***/ "(ssr)/./node_modules/postgres-date/index.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres-date/index.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/;\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/;\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/;\nvar INFINITY = /^-?infinity$/;\nmodule.exports = function parseDate(isoDate) {\n    if (INFINITY.test(isoDate)) {\n        // Capitalize to Infinity before passing to Number\n        return Number(isoDate.replace(\"i\", \"I\"));\n    }\n    var matches = DATE_TIME.exec(isoDate);\n    if (!matches) {\n        // Force YYYY-MM-DD dates to be parsed as local time\n        return getDate(isoDate) || null;\n    }\n    var isBC = !!matches[8];\n    var year = parseInt(matches[1], 10);\n    if (isBC) {\n        year = bcYearToNegativeYear(year);\n    }\n    var month = parseInt(matches[2], 10) - 1;\n    var day = matches[3];\n    var hour = parseInt(matches[4], 10);\n    var minute = parseInt(matches[5], 10);\n    var second = parseInt(matches[6], 10);\n    var ms = matches[7];\n    ms = ms ? 1000 * parseFloat(ms) : 0;\n    var date;\n    var offset = timeZoneOffset(isoDate);\n    if (offset != null) {\n        date = new Date(Date.UTC(year, month, day, hour, minute, second, ms));\n        // Account for years from 0 to 99 being interpreted as 1900-1999\n        // by Date.UTC / the multi-argument form of the Date constructor\n        if (is0To99(year)) {\n            date.setUTCFullYear(year);\n        }\n        if (offset !== 0) {\n            date.setTime(date.getTime() - offset);\n        }\n    } else {\n        date = new Date(year, month, day, hour, minute, second, ms);\n        if (is0To99(year)) {\n            date.setFullYear(year);\n        }\n    }\n    return date;\n};\nfunction getDate(isoDate) {\n    var matches = DATE.exec(isoDate);\n    if (!matches) {\n        return;\n    }\n    var year = parseInt(matches[1], 10);\n    var isBC = !!matches[4];\n    if (isBC) {\n        year = bcYearToNegativeYear(year);\n    }\n    var month = parseInt(matches[2], 10) - 1;\n    var day = matches[3];\n    // YYYY-MM-DD will be parsed as local time\n    var date = new Date(year, month, day);\n    if (is0To99(year)) {\n        date.setFullYear(year);\n    }\n    return date;\n}\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset(isoDate) {\n    if (isoDate.endsWith(\"+00\")) {\n        return 0;\n    }\n    var zone = TIME_ZONE.exec(isoDate.split(\" \")[1]);\n    if (!zone) return;\n    var type = zone[1];\n    if (type === \"Z\") {\n        return 0;\n    }\n    var sign = type === \"-\" ? -1 : 1;\n    var offset = parseInt(zone[2], 10) * 3600 + parseInt(zone[3] || 0, 10) * 60 + parseInt(zone[4] || 0, 10);\n    return offset * sign * 1000;\n}\nfunction bcYearToNegativeYear(year) {\n    // Account for numerical difference between representations of BC years\n    // See: https://github.com/bendrucker/postgres-date/issues/5\n    return -(year - 1);\n}\nfunction is0To99(num) {\n    return num >= 0 && num < 100;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMtZGF0ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFlBQVk7QUFDaEIsSUFBSUMsT0FBTztBQUNYLElBQUlDLFlBQVk7QUFDaEIsSUFBSUMsV0FBVztBQUVmQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsVUFBV0MsT0FBTztJQUMxQyxJQUFJSixTQUFTSyxJQUFJLENBQUNELFVBQVU7UUFDMUIsa0RBQWtEO1FBQ2xELE9BQU9FLE9BQU9GLFFBQVFHLE9BQU8sQ0FBQyxLQUFLO0lBQ3JDO0lBQ0EsSUFBSUMsVUFBVVgsVUFBVVksSUFBSSxDQUFDTDtJQUU3QixJQUFJLENBQUNJLFNBQVM7UUFDWixvREFBb0Q7UUFDcEQsT0FBT0UsUUFBUU4sWUFBWTtJQUM3QjtJQUVBLElBQUlPLE9BQU8sQ0FBQyxDQUFDSCxPQUFPLENBQUMsRUFBRTtJQUN2QixJQUFJSSxPQUFPQyxTQUFTTCxPQUFPLENBQUMsRUFBRSxFQUFFO0lBQ2hDLElBQUlHLE1BQU07UUFDUkMsT0FBT0UscUJBQXFCRjtJQUM5QjtJQUVBLElBQUlHLFFBQVFGLFNBQVNMLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTTtJQUN2QyxJQUFJUSxNQUFNUixPQUFPLENBQUMsRUFBRTtJQUNwQixJQUFJUyxPQUFPSixTQUFTTCxPQUFPLENBQUMsRUFBRSxFQUFFO0lBQ2hDLElBQUlVLFNBQVNMLFNBQVNMLE9BQU8sQ0FBQyxFQUFFLEVBQUU7SUFDbEMsSUFBSVcsU0FBU04sU0FBU0wsT0FBTyxDQUFDLEVBQUUsRUFBRTtJQUVsQyxJQUFJWSxLQUFLWixPQUFPLENBQUMsRUFBRTtJQUNuQlksS0FBS0EsS0FBSyxPQUFPQyxXQUFXRCxNQUFNO0lBRWxDLElBQUlFO0lBQ0osSUFBSUMsU0FBU0MsZUFBZXBCO0lBQzVCLElBQUltQixVQUFVLE1BQU07UUFDbEJELE9BQU8sSUFBSUcsS0FBS0EsS0FBS0MsR0FBRyxDQUFDZCxNQUFNRyxPQUFPQyxLQUFLQyxNQUFNQyxRQUFRQyxRQUFRQztRQUVqRSxnRUFBZ0U7UUFDaEUsZ0VBQWdFO1FBQ2hFLElBQUlPLFFBQVFmLE9BQU87WUFDakJVLEtBQUtNLGNBQWMsQ0FBQ2hCO1FBQ3RCO1FBRUEsSUFBSVcsV0FBVyxHQUFHO1lBQ2hCRCxLQUFLTyxPQUFPLENBQUNQLEtBQUtRLE9BQU8sS0FBS1A7UUFDaEM7SUFDRixPQUFPO1FBQ0xELE9BQU8sSUFBSUcsS0FBS2IsTUFBTUcsT0FBT0MsS0FBS0MsTUFBTUMsUUFBUUMsUUFBUUM7UUFFeEQsSUFBSU8sUUFBUWYsT0FBTztZQUNqQlUsS0FBS1MsV0FBVyxDQUFDbkI7UUFDbkI7SUFDRjtJQUVBLE9BQU9VO0FBQ1Q7QUFFQSxTQUFTWixRQUFTTixPQUFPO0lBQ3ZCLElBQUlJLFVBQVVWLEtBQUtXLElBQUksQ0FBQ0w7SUFDeEIsSUFBSSxDQUFDSSxTQUFTO1FBQ1o7SUFDRjtJQUVBLElBQUlJLE9BQU9DLFNBQVNMLE9BQU8sQ0FBQyxFQUFFLEVBQUU7SUFDaEMsSUFBSUcsT0FBTyxDQUFDLENBQUNILE9BQU8sQ0FBQyxFQUFFO0lBQ3ZCLElBQUlHLE1BQU07UUFDUkMsT0FBT0UscUJBQXFCRjtJQUM5QjtJQUVBLElBQUlHLFFBQVFGLFNBQVNMLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTTtJQUN2QyxJQUFJUSxNQUFNUixPQUFPLENBQUMsRUFBRTtJQUNwQiwwQ0FBMEM7SUFDMUMsSUFBSWMsT0FBTyxJQUFJRyxLQUFLYixNQUFNRyxPQUFPQztJQUVqQyxJQUFJVyxRQUFRZixPQUFPO1FBQ2pCVSxLQUFLUyxXQUFXLENBQUNuQjtJQUNuQjtJQUVBLE9BQU9VO0FBQ1Q7QUFFQSxtQkFBbUI7QUFDbkIsVUFBVTtBQUNWLE1BQU07QUFDTixTQUFTO0FBQ1QsU0FBU0UsZUFBZ0JwQixPQUFPO0lBQzlCLElBQUlBLFFBQVE0QixRQUFRLENBQUMsUUFBUTtRQUMzQixPQUFPO0lBQ1Q7SUFFQSxJQUFJQyxPQUFPbEMsVUFBVVUsSUFBSSxDQUFDTCxRQUFROEIsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQy9DLElBQUksQ0FBQ0QsTUFBTTtJQUNYLElBQUlFLE9BQU9GLElBQUksQ0FBQyxFQUFFO0lBRWxCLElBQUlFLFNBQVMsS0FBSztRQUNoQixPQUFPO0lBQ1Q7SUFDQSxJQUFJQyxPQUFPRCxTQUFTLE1BQU0sQ0FBQyxJQUFJO0lBQy9CLElBQUlaLFNBQVNWLFNBQVNvQixJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sT0FDbkNwQixTQUFTb0IsSUFBSSxDQUFDLEVBQUUsSUFBSSxHQUFHLE1BQU0sS0FDN0JwQixTQUFTb0IsSUFBSSxDQUFDLEVBQUUsSUFBSSxHQUFHO0lBRXpCLE9BQU9WLFNBQVNhLE9BQU87QUFDekI7QUFFQSxTQUFTdEIscUJBQXNCRixJQUFJO0lBQ2pDLHVFQUF1RTtJQUN2RSw0REFBNEQ7SUFDNUQsT0FBTyxDQUFFQSxDQUFBQSxPQUFPO0FBQ2xCO0FBRUEsU0FBU2UsUUFBU1UsR0FBRztJQUNuQixPQUFPQSxPQUFPLEtBQUtBLE1BQU07QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3Bvc3RncmVzLWRhdGUvaW5kZXguanM/ZGRlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIERBVEVfVElNRSA9IC8oXFxkezEsfSktKFxcZHsyfSktKFxcZHsyfSkgKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSkoXFwuXFxkezEsfSk/Lio/KCBCQyk/JC9cbnZhciBEQVRFID0gL14oXFxkezEsfSktKFxcZHsyfSktKFxcZHsyfSkoIEJDKT8kL1xudmFyIFRJTUVfWk9ORSA9IC8oW1orLV0pKFxcZHsyfSk/Oj8oXFxkezJ9KT86PyhcXGR7Mn0pPy9cbnZhciBJTkZJTklUWSA9IC9eLT9pbmZpbml0eSQvXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VEYXRlIChpc29EYXRlKSB7XG4gIGlmIChJTkZJTklUWS50ZXN0KGlzb0RhdGUpKSB7XG4gICAgLy8gQ2FwaXRhbGl6ZSB0byBJbmZpbml0eSBiZWZvcmUgcGFzc2luZyB0byBOdW1iZXJcbiAgICByZXR1cm4gTnVtYmVyKGlzb0RhdGUucmVwbGFjZSgnaScsICdJJykpXG4gIH1cbiAgdmFyIG1hdGNoZXMgPSBEQVRFX1RJTUUuZXhlYyhpc29EYXRlKVxuXG4gIGlmICghbWF0Y2hlcykge1xuICAgIC8vIEZvcmNlIFlZWVktTU0tREQgZGF0ZXMgdG8gYmUgcGFyc2VkIGFzIGxvY2FsIHRpbWVcbiAgICByZXR1cm4gZ2V0RGF0ZShpc29EYXRlKSB8fCBudWxsXG4gIH1cblxuICB2YXIgaXNCQyA9ICEhbWF0Y2hlc1s4XVxuICB2YXIgeWVhciA9IHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKVxuICBpZiAoaXNCQykge1xuICAgIHllYXIgPSBiY1llYXJUb05lZ2F0aXZlWWVhcih5ZWFyKVxuICB9XG5cbiAgdmFyIG1vbnRoID0gcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApIC0gMVxuICB2YXIgZGF5ID0gbWF0Y2hlc1szXVxuICB2YXIgaG91ciA9IHBhcnNlSW50KG1hdGNoZXNbNF0sIDEwKVxuICB2YXIgbWludXRlID0gcGFyc2VJbnQobWF0Y2hlc1s1XSwgMTApXG4gIHZhciBzZWNvbmQgPSBwYXJzZUludChtYXRjaGVzWzZdLCAxMClcblxuICB2YXIgbXMgPSBtYXRjaGVzWzddXG4gIG1zID0gbXMgPyAxMDAwICogcGFyc2VGbG9hdChtcykgOiAwXG5cbiAgdmFyIGRhdGVcbiAgdmFyIG9mZnNldCA9IHRpbWVab25lT2Zmc2V0KGlzb0RhdGUpXG4gIGlmIChvZmZzZXQgIT0gbnVsbCkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbXMpKVxuXG4gICAgLy8gQWNjb3VudCBmb3IgeWVhcnMgZnJvbSAwIHRvIDk5IGJlaW5nIGludGVycHJldGVkIGFzIDE5MDAtMTk5OVxuICAgIC8vIGJ5IERhdGUuVVRDIC8gdGhlIG11bHRpLWFyZ3VtZW50IGZvcm0gb2YgdGhlIERhdGUgY29uc3RydWN0b3JcbiAgICBpZiAoaXMwVG85OSh5ZWFyKSkge1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyKVxuICAgIH1cblxuICAgIGlmIChvZmZzZXQgIT09IDApIHtcbiAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIG9mZnNldClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtcylcblxuICAgIGlmIChpczBUbzk5KHllYXIpKSB7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKHllYXIpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGVcbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSAoaXNvRGF0ZSkge1xuICB2YXIgbWF0Y2hlcyA9IERBVEUuZXhlYyhpc29EYXRlKVxuICBpZiAoIW1hdGNoZXMpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciB5ZWFyID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApXG4gIHZhciBpc0JDID0gISFtYXRjaGVzWzRdXG4gIGlmIChpc0JDKSB7XG4gICAgeWVhciA9IGJjWWVhclRvTmVnYXRpdmVZZWFyKHllYXIpXG4gIH1cblxuICB2YXIgbW9udGggPSBwYXJzZUludChtYXRjaGVzWzJdLCAxMCkgLSAxXG4gIHZhciBkYXkgPSBtYXRjaGVzWzNdXG4gIC8vIFlZWVktTU0tREQgd2lsbCBiZSBwYXJzZWQgYXMgbG9jYWwgdGltZVxuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXkpXG5cbiAgaWYgKGlzMFRvOTkoeWVhcikpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKHllYXIpXG4gIH1cblxuICByZXR1cm4gZGF0ZVxufVxuXG4vLyBtYXRjaCB0aW1lem9uZXM6XG4vLyBaIChVVEMpXG4vLyAtMDVcbi8vICswNjozMFxuZnVuY3Rpb24gdGltZVpvbmVPZmZzZXQgKGlzb0RhdGUpIHtcbiAgaWYgKGlzb0RhdGUuZW5kc1dpdGgoJyswMCcpKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIHZhciB6b25lID0gVElNRV9aT05FLmV4ZWMoaXNvRGF0ZS5zcGxpdCgnICcpWzFdKVxuICBpZiAoIXpvbmUpIHJldHVyblxuICB2YXIgdHlwZSA9IHpvbmVbMV1cblxuICBpZiAodHlwZSA9PT0gJ1onKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICB2YXIgc2lnbiA9IHR5cGUgPT09ICctJyA/IC0xIDogMVxuICB2YXIgb2Zmc2V0ID0gcGFyc2VJbnQoem9uZVsyXSwgMTApICogMzYwMCArXG4gICAgcGFyc2VJbnQoem9uZVszXSB8fCAwLCAxMCkgKiA2MCArXG4gICAgcGFyc2VJbnQoem9uZVs0XSB8fCAwLCAxMClcblxuICByZXR1cm4gb2Zmc2V0ICogc2lnbiAqIDEwMDBcbn1cblxuZnVuY3Rpb24gYmNZZWFyVG9OZWdhdGl2ZVllYXIgKHllYXIpIHtcbiAgLy8gQWNjb3VudCBmb3IgbnVtZXJpY2FsIGRpZmZlcmVuY2UgYmV0d2VlbiByZXByZXNlbnRhdGlvbnMgb2YgQkMgeWVhcnNcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVuZHJ1Y2tlci9wb3N0Z3Jlcy1kYXRlL2lzc3Vlcy81XG4gIHJldHVybiAtKHllYXIgLSAxKVxufVxuXG5mdW5jdGlvbiBpczBUbzk5IChudW0pIHtcbiAgcmV0dXJuIG51bSA+PSAwICYmIG51bSA8IDEwMFxufVxuIl0sIm5hbWVzIjpbIkRBVEVfVElNRSIsIkRBVEUiLCJUSU1FX1pPTkUiLCJJTkZJTklUWSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZURhdGUiLCJpc29EYXRlIiwidGVzdCIsIk51bWJlciIsInJlcGxhY2UiLCJtYXRjaGVzIiwiZXhlYyIsImdldERhdGUiLCJpc0JDIiwieWVhciIsInBhcnNlSW50IiwiYmNZZWFyVG9OZWdhdGl2ZVllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJtcyIsInBhcnNlRmxvYXQiLCJkYXRlIiwib2Zmc2V0IiwidGltZVpvbmVPZmZzZXQiLCJEYXRlIiwiVVRDIiwiaXMwVG85OSIsInNldFVUQ0Z1bGxZZWFyIiwic2V0VGltZSIsImdldFRpbWUiLCJzZXRGdWxsWWVhciIsImVuZHNXaXRoIiwiem9uZSIsInNwbGl0IiwidHlwZSIsInNpZ24iLCJudW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postgres-date/index.js\n");

/***/ })

};
;