"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pgpass";
exports.ids = ["vendor-chunks/pgpass"];
exports.modules = {

/***/ "(ssr)/./node_modules/pgpass/lib/helper.js":
/*!*******************************************!*\
  !*** ./node_modules/pgpass/lib/helper.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar path = __webpack_require__(/*! path */ \"path\"), Stream = (__webpack_require__(/*! stream */ \"stream\").Stream), split = __webpack_require__(/*! split2 */ \"(ssr)/./node_modules/split2/index.js\"), util = __webpack_require__(/*! util */ \"util\"), defaultPort = 5432, isWin = process.platform === \"win32\", warnStream = process.stderr;\nvar S_IRWXG = 56 //    00070(8)\n, S_IRWXO = 7 //    00007(8)\n, S_IFMT = 61440 // 00170000(8)\n, S_IFREG = 32768 //  0100000(8)\n;\nfunction isRegFile(mode) {\n    return (mode & S_IFMT) == S_IFREG;\n}\nvar fieldNames = [\n    \"host\",\n    \"port\",\n    \"database\",\n    \"user\",\n    \"password\"\n];\nvar nrOfFields = fieldNames.length;\nvar passKey = fieldNames[nrOfFields - 1];\nfunction warn() {\n    var isWritable = warnStream instanceof Stream && true === warnStream.writable;\n    if (isWritable) {\n        var args = Array.prototype.slice.call(arguments).concat(\"\\n\");\n        warnStream.write(util.format.apply(util, args));\n    }\n}\nObject.defineProperty(module.exports, \"isWin\", ({\n    get: function() {\n        return isWin;\n    },\n    set: function(val) {\n        isWin = val;\n    }\n}));\nmodule.exports.warnTo = function(stream) {\n    var old = warnStream;\n    warnStream = stream;\n    return old;\n};\nmodule.exports.getFileName = function(rawEnv) {\n    var env = rawEnv || process.env;\n    var file = env.PGPASSFILE || (isWin ? path.join(env.APPDATA || \"./\", \"postgresql\", \"pgpass.conf\") : path.join(env.HOME || \"./\", \".pgpass\"));\n    return file;\n};\nmodule.exports.usePgPass = function(stats, fname) {\n    if (Object.prototype.hasOwnProperty.call(process.env, \"PGPASSWORD\")) {\n        return false;\n    }\n    if (isWin) {\n        return true;\n    }\n    fname = fname || \"<unkn>\";\n    if (!isRegFile(stats.mode)) {\n        warn('WARNING: password file \"%s\" is not a plain file', fname);\n        return false;\n    }\n    if (stats.mode & (S_IRWXG | S_IRWXO)) {\n        /* If password file is insecure, alert the user and ignore it. */ warn('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', fname);\n        return false;\n    }\n    return true;\n};\nvar matcher = module.exports.match = function(connInfo, entry) {\n    return fieldNames.slice(0, -1).reduce(function(prev, field, idx) {\n        if (idx == 1) {\n            // the port\n            if (Number(connInfo[field] || defaultPort) === Number(entry[field])) {\n                return prev && true;\n            }\n        }\n        return prev && (entry[field] === \"*\" || entry[field] === connInfo[field]);\n    }, true);\n};\nmodule.exports.getPassword = function(connInfo, stream, cb) {\n    var pass;\n    var lineStream = stream.pipe(split());\n    function onLine(line) {\n        var entry = parseLine(line);\n        if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {\n            pass = entry[passKey];\n            lineStream.end(); // -> calls onEnd(), but pass is set now\n        }\n    }\n    var onEnd = function() {\n        stream.destroy();\n        cb(pass);\n    };\n    var onErr = function(err) {\n        stream.destroy();\n        warn(\"WARNING: error on reading file: %s\", err);\n        cb(undefined);\n    };\n    stream.on(\"error\", onErr);\n    lineStream.on(\"data\", onLine).on(\"end\", onEnd).on(\"error\", onErr);\n};\nvar parseLine = module.exports.parseLine = function(line) {\n    if (line.length < 11 || line.match(/^\\s+#/)) {\n        return null;\n    }\n    var curChar = \"\";\n    var prevChar = \"\";\n    var fieldIdx = 0;\n    var startIdx = 0;\n    var endIdx = 0;\n    var obj = {};\n    var isLastField = false;\n    var addToObj = function(idx, i0, i1) {\n        var field = line.substring(i0, i1);\n        if (!Object.hasOwnProperty.call(process.env, \"PGPASS_NO_DEESCAPE\")) {\n            field = field.replace(/\\\\([:\\\\])/g, \"$1\");\n        }\n        obj[fieldNames[idx]] = field;\n    };\n    for(var i = 0; i < line.length - 1; i += 1){\n        curChar = line.charAt(i + 1);\n        prevChar = line.charAt(i);\n        isLastField = fieldIdx == nrOfFields - 1;\n        if (isLastField) {\n            addToObj(fieldIdx, startIdx);\n            break;\n        }\n        if (i >= 0 && curChar == \":\" && prevChar !== \"\\\\\") {\n            addToObj(fieldIdx, startIdx, i + 1);\n            startIdx = i + 2;\n            fieldIdx += 1;\n        }\n    }\n    obj = Object.keys(obj).length === nrOfFields ? obj : null;\n    return obj;\n};\nvar isValidEntry = module.exports.isValidEntry = function(entry) {\n    var rules = {\n        // host\n        0: function(x) {\n            return x.length > 0;\n        },\n        // port\n        1: function(x) {\n            if (x === \"*\") {\n                return true;\n            }\n            x = Number(x);\n            return isFinite(x) && x > 0 && x < 9007199254740992 && Math.floor(x) === x;\n        },\n        // database\n        2: function(x) {\n            return x.length > 0;\n        },\n        // username\n        3: function(x) {\n            return x.length > 0;\n        },\n        // password\n        4: function(x) {\n            return x.length > 0;\n        }\n    };\n    for(var idx = 0; idx < fieldNames.length; idx += 1){\n        var rule = rules[idx];\n        var value = entry[fieldNames[idx]] || \"\";\n        var res = rule(value);\n        if (!res) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pgpass/lib/helper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pgpass/lib/index.js":
/*!******************************************!*\
  !*** ./node_modules/pgpass/lib/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar path = __webpack_require__(/*! path */ \"path\"), fs = __webpack_require__(/*! fs */ \"fs\"), helper = __webpack_require__(/*! ./helper.js */ \"(ssr)/./node_modules/pgpass/lib/helper.js\");\nmodule.exports = function(connInfo, cb) {\n    var file = helper.getFileName();\n    fs.stat(file, function(err, stat) {\n        if (err || !helper.usePgPass(stat, file)) {\n            return cb(undefined);\n        }\n        var st = fs.createReadStream(file);\n        helper.getPassword(connInfo, st, cb);\n    });\n};\nmodule.exports.warnTo = helper.warnTo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGdwYXNzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLHFCQUNmQyxLQUFLRCxtQkFBT0EsQ0FBQyxpQkFDYkUsU0FBU0YsbUJBQU9BLENBQUM7QUFJckJHLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxRQUFRLEVBQUVDLEVBQUU7SUFDbEMsSUFBSUMsT0FBT0wsT0FBT00sV0FBVztJQUU3QlAsR0FBR1EsSUFBSSxDQUFDRixNQUFNLFNBQVNHLEdBQUcsRUFBRUQsSUFBSTtRQUM1QixJQUFJQyxPQUFPLENBQUNSLE9BQU9TLFNBQVMsQ0FBQ0YsTUFBTUYsT0FBTztZQUN0QyxPQUFPRCxHQUFHTTtRQUNkO1FBRUEsSUFBSUMsS0FBS1osR0FBR2EsZ0JBQWdCLENBQUNQO1FBRTdCTCxPQUFPYSxXQUFXLENBQUNWLFVBQVVRLElBQUlQO0lBQ3JDO0FBQ0o7QUFFQUgscUJBQXFCLEdBQUdELE9BQU9jLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3BncGFzcy9saWIvaW5kZXguanM/ZjQ1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG4gICwgZnMgPSByZXF1aXJlKCdmcycpXG4gICwgaGVscGVyID0gcmVxdWlyZSgnLi9oZWxwZXIuanMnKVxuO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29ubkluZm8sIGNiKSB7XG4gICAgdmFyIGZpbGUgPSBoZWxwZXIuZ2V0RmlsZU5hbWUoKTtcbiAgICBcbiAgICBmcy5zdGF0KGZpbGUsIGZ1bmN0aW9uKGVyciwgc3RhdCl7XG4gICAgICAgIGlmIChlcnIgfHwgIWhlbHBlci51c2VQZ1Bhc3Moc3RhdCwgZmlsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0ID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlKTtcblxuICAgICAgICBoZWxwZXIuZ2V0UGFzc3dvcmQoY29ubkluZm8sIHN0LCBjYik7XG4gICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy53YXJuVG8gPSBoZWxwZXIud2FyblRvO1xuIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiZnMiLCJoZWxwZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29ubkluZm8iLCJjYiIsImZpbGUiLCJnZXRGaWxlTmFtZSIsInN0YXQiLCJlcnIiLCJ1c2VQZ1Bhc3MiLCJ1bmRlZmluZWQiLCJzdCIsImNyZWF0ZVJlYWRTdHJlYW0iLCJnZXRQYXNzd29yZCIsIndhcm5UbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pgpass/lib/index.js\n");

/***/ })

};
;