/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sylvester";
exports.ids = ["vendor-chunks/sylvester"];
exports.modules = {

/***/ "(ssr)/./node_modules/sylvester/lib/node-sylvester/index.js":
/*!************************************************************!*\
  !*** ./node_modules/sylvester/lib/node-sylvester/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright (c) 2011, Chris Umbel\nexports.Vector = __webpack_require__(/*! ./vector */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/vector.js\");\nglobal.$V = exports.Vector.create;\nexports.Matrix = __webpack_require__(/*! ./matrix */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/matrix.js\");\nglobal.$M = exports.Matrix.create;\nexports.Line = __webpack_require__(/*! ./line */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/line.js\");\nglobal.$L = exports.Line.create;\nexports.Plane = __webpack_require__(/*! ./plane */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/plane.js\");\nglobal.$P = exports.Plane.create;\nexports.Line.Segment = __webpack_require__(/*! ./line.segment */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/line.segment.js\");\nexports.Sylvester = __webpack_require__(/*! ./sylvester */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/sylvester.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3lsdmVzdGVyL2xpYi9ub2RlLXN5bHZlc3Rlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFFbENBLG1IQUF5QjtBQUN6QkcsT0FBT0MsRUFBRSxHQUFHSixRQUFRQyxNQUFNLENBQUNJLE1BQU07QUFDakNMLG1IQUF5QjtBQUN6QkcsT0FBT0ksRUFBRSxHQUFHUCxRQUFRTSxNQUFNLENBQUNELE1BQU07QUFDakNMLDZHQUF1QjtBQUN2QkcsT0FBT00sRUFBRSxHQUFHVCxRQUFRUSxJQUFJLENBQUNILE1BQU07QUFDL0JMLGdIQUF3QjtBQUN4QkcsT0FBT1EsRUFBRSxHQUFHWCxRQUFRVSxLQUFLLENBQUNMLE1BQU07QUFDaENMLHFJQUErQjtBQUMvQkEsNEhBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9zeWx2ZXN0ZXIvbGliL25vZGUtc3lsdmVzdGVyL2luZGV4LmpzPzM4YzIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDExLCBDaHJpcyBVbWJlbFxuXG5leHBvcnRzLlZlY3RvciA9IHJlcXVpcmUoJy4vdmVjdG9yJyk7XG5nbG9iYWwuJFYgPSBleHBvcnRzLlZlY3Rvci5jcmVhdGU7XG5leHBvcnRzLk1hdHJpeCA9IHJlcXVpcmUoJy4vbWF0cml4Jyk7XG5nbG9iYWwuJE0gPSBleHBvcnRzLk1hdHJpeC5jcmVhdGU7XG5leHBvcnRzLkxpbmUgPSByZXF1aXJlKCcuL2xpbmUnKTtcbmdsb2JhbC4kTCA9IGV4cG9ydHMuTGluZS5jcmVhdGU7XG5leHBvcnRzLlBsYW5lID0gcmVxdWlyZSgnLi9wbGFuZScpO1xuZ2xvYmFsLiRQID0gZXhwb3J0cy5QbGFuZS5jcmVhdGU7XG5leHBvcnRzLkxpbmUuU2VnbWVudCA9IHJlcXVpcmUoJy4vbGluZS5zZWdtZW50Jyk7XG5leHBvcnRzLlN5bHZlc3RlciA9IHJlcXVpcmUoJy4vc3lsdmVzdGVyJyk7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsIlZlY3RvciIsInJlcXVpcmUiLCJnbG9iYWwiLCIkViIsImNyZWF0ZSIsIk1hdHJpeCIsIiRNIiwiTGluZSIsIiRMIiwiUGxhbmUiLCIkUCIsIlNlZ21lbnQiLCJTeWx2ZXN0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sylvester/lib/node-sylvester/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sylvester/lib/node-sylvester/line.js":
/*!***********************************************************!*\
  !*** ./node_modules/sylvester/lib/node-sylvester/line.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright (c) 2011, Chris Umbel, James Coglan\n\nvar Vector = __webpack_require__(/*! ./vector */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/vector.js\");\nvar Matrix = __webpack_require__(/*! ./matrix */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/matrix.js\");\nvar Plane = __webpack_require__(/*! ./plane */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/plane.js\");\nvar Sylvester = __webpack_require__(/*! ./sylvester */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/sylvester.js\");\n// Line class - depends on Vector, and some methods require Matrix and Plane.\nfunction Line() {}\nLine.prototype = {\n    // Returns true if the argument occupies the same space as the line\n    eql: function(line) {\n        return this.isParallelTo(line) && this.contains(line.anchor);\n    },\n    // Returns a copy of the line\n    dup: function() {\n        return Line.create(this.anchor, this.direction);\n    },\n    // Returns the result of translating the line by the given vector/array\n    translate: function(vector) {\n        var V = vector.elements || vector;\n        return Line.create([\n            this.anchor.elements[0] + V[0],\n            this.anchor.elements[1] + V[1],\n            this.anchor.elements[2] + (V[2] || 0)\n        ], this.direction);\n    },\n    // Returns true if the line is parallel to the argument. Here, 'parallel to'\n    // means that the argument's direction is either parallel or antiparallel to\n    // the line's own direction. A line is parallel to a plane if the two do not\n    // have a unique intersection.\n    isParallelTo: function(obj) {\n        if (obj.normal || obj.start && obj.end) {\n            return obj.isParallelTo(this);\n        }\n        var theta = this.direction.angleFrom(obj.direction);\n        return Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision;\n    },\n    // Returns the line's perpendicular distance from the argument,\n    // which can be a point, a line or a plane\n    distanceFrom: function(obj) {\n        if (obj.normal || obj.start && obj.end) {\n            return obj.distanceFrom(this);\n        }\n        if (obj.direction) {\n            // obj is a line\n            if (this.isParallelTo(obj)) {\n                return this.distanceFrom(obj.anchor);\n            }\n            var N = this.direction.cross(obj.direction).toUnitVector().elements;\n            var A = this.anchor.elements, B = obj.anchor.elements;\n            return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\n        } else {\n            // obj is a point\n            var P = obj.elements || obj;\n            var A = this.anchor.elements, D = this.direction.elements;\n            var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];\n            var modPA = Math.sqrt(PA1 * PA1 + PA2 * PA2 + PA3 * PA3);\n            if (modPA === 0) return 0;\n            // Assumes direction vector is normalized\n            var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;\n            var sin2 = 1 - cosTheta * cosTheta;\n            return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));\n        }\n    },\n    // Returns true iff the argument is a point on the line, or if the argument\n    // is a line segment lying within the receiver\n    contains: function(obj) {\n        if (obj.start && obj.end) {\n            return this.contains(obj.start) && this.contains(obj.end);\n        }\n        var dist = this.distanceFrom(obj);\n        return dist !== null && dist <= Sylvester.precision;\n    },\n    // Returns the distance from the anchor of the given point. Negative values are\n    // returned for points that are in the opposite direction to the line's direction from\n    // the line's anchor point.\n    positionOf: function(point) {\n        if (!this.contains(point)) {\n            return null;\n        }\n        var P = point.elements || point;\n        var A = this.anchor.elements, D = this.direction.elements;\n        return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];\n    },\n    // Returns true iff the line lies in the given plane\n    liesIn: function(plane) {\n        return plane.contains(this);\n    },\n    // Returns true iff the line has a unique point of intersection with the argument\n    intersects: function(obj) {\n        if (obj.normal) {\n            return obj.intersects(this);\n        }\n        return !this.isParallelTo(obj) && this.distanceFrom(obj) <= Sylvester.precision;\n    },\n    // Returns the unique intersection point with the argument, if one exists\n    intersectionWith: function(obj) {\n        if (obj.normal || obj.start && obj.end) {\n            return obj.intersectionWith(this);\n        }\n        if (!this.intersects(obj)) {\n            return null;\n        }\n        var P = this.anchor.elements, X = this.direction.elements, Q = obj.anchor.elements, Y = obj.direction.elements;\n        var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];\n        var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];\n        var XdotQsubP = -X1 * PsubQ1 - X2 * PsubQ2 - X3 * PsubQ3;\n        var YdotPsubQ = Y1 * PsubQ1 + Y2 * PsubQ2 + Y3 * PsubQ3;\n        var XdotX = X1 * X1 + X2 * X2 + X3 * X3;\n        var YdotY = Y1 * Y1 + Y2 * Y2 + Y3 * Y3;\n        var XdotY = X1 * Y1 + X2 * Y2 + X3 * Y3;\n        var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);\n        return Vector.create([\n            P[0] + k * X1,\n            P[1] + k * X2,\n            P[2] + k * X3\n        ]);\n    },\n    // Returns the point on the line that is closest to the given point or line/line segment\n    pointClosestTo: function(obj) {\n        if (obj.start && obj.end) {\n            // obj is a line segment\n            var P = obj.pointClosestTo(this);\n            return P === null ? null : this.pointClosestTo(P);\n        } else if (obj.direction) {\n            // obj is a line\n            if (this.intersects(obj)) {\n                return this.intersectionWith(obj);\n            }\n            if (this.isParallelTo(obj)) {\n                return null;\n            }\n            var D = this.direction.elements, E = obj.direction.elements;\n            var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];\n            // Create plane containing obj and the shared normal and intersect this with it\n            // Thank you: http://www.cgafaq.info/wiki/Line-line_distance\n            var x = D3 * E1 - D1 * E3, y = D1 * E2 - D2 * E1, z = D2 * E3 - D3 * E2;\n            var N = [\n                x * E3 - y * E2,\n                y * E1 - z * E3,\n                z * E2 - x * E1\n            ];\n            var P = Plane.create(obj.anchor, N);\n            return P.intersectionWith(this);\n        } else {\n            // obj is a point\n            var P = obj.elements || obj;\n            if (this.contains(P)) {\n                return Vector.create(P);\n            }\n            var A = this.anchor.elements, D = this.direction.elements;\n            var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];\n            var x = D1 * (P[1] - A2) - D2 * (P[0] - A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1] - A2), z = D3 * (P[0] - A1) - D1 * ((P[2] || 0) - A3);\n            var V = Vector.create([\n                D2 * x - D3 * z,\n                D3 * y - D1 * x,\n                D1 * z - D2 * y\n            ]);\n            var k = this.distanceFrom(P) / V.modulus();\n            return Vector.create([\n                P[0] + V.elements[0] * k,\n                P[1] + V.elements[1] * k,\n                (P[2] || 0) + V.elements[2] * k\n            ]);\n        }\n    },\n    // Returns a copy of the line rotated by t radians about the given line. Works by\n    // finding the argument's closest point to this line's anchor point (call this C) and\n    // rotating the anchor about C. Also rotates the line's direction about the argument's.\n    // Be careful with this - the rotation axis' direction affects the outcome!\n    rotate: function(t, line) {\n        // If we're working in 2D\n        if (typeof line.direction == \"undefined\") {\n            line = Line.create(line.to3D(), Vector.k);\n        }\n        var R = Matrix.Rotation(t, line.direction).elements;\n        var C = line.pointClosestTo(this.anchor).elements;\n        var A = this.anchor.elements, D = this.direction.elements;\n        var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];\n        var x = A1 - C1, y = A2 - C2, z = A3 - C3;\n        return Line.create([\n            C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n            C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n            C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z\n        ], [\n            R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],\n            R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],\n            R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]\n        ]);\n    },\n    // Returns a copy of the line with its direction vector reversed.\n    // Useful when using lines for rotations.\n    reverse: function() {\n        return Line.create(this.anchor, this.direction.x(-1));\n    },\n    // Returns the line's reflection in the given point or line\n    reflectionIn: function(obj) {\n        if (obj.normal) {\n            // obj is a plane\n            var A = this.anchor.elements, D = this.direction.elements;\n            var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];\n            var newA = this.anchor.reflectionIn(obj).elements;\n            // Add the line's direction vector to its anchor, then mirror that in the plane\n            var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;\n            var Q = obj.pointClosestTo([\n                AD1,\n                AD2,\n                AD3\n            ]).elements;\n            var newD = [\n                Q[0] + (Q[0] - AD1) - newA[0],\n                Q[1] + (Q[1] - AD2) - newA[1],\n                Q[2] + (Q[2] - AD3) - newA[2]\n            ];\n            return Line.create(newA, newD);\n        } else if (obj.direction) {\n            // obj is a line - reflection obtained by rotating PI radians about obj\n            return this.rotate(Math.PI, obj);\n        } else {\n            // obj is a point - just reflect the line's anchor in it\n            var P = obj.elements || obj;\n            return Line.create(this.anchor.reflectionIn([\n                P[0],\n                P[1],\n                P[2] || 0\n            ]), this.direction);\n        }\n    },\n    // Set the line's anchor point and direction.\n    setVectors: function(anchor, direction) {\n        // Need to do this so that line's properties are not\n        // references to the arguments passed in\n        anchor = Vector.create(anchor);\n        direction = Vector.create(direction);\n        if (anchor.elements.length == 2) {\n            anchor.elements.push(0);\n        }\n        if (direction.elements.length == 2) {\n            direction.elements.push(0);\n        }\n        if (anchor.elements.length > 3 || direction.elements.length > 3) {\n            return null;\n        }\n        var mod = direction.modulus();\n        if (mod === 0) {\n            return null;\n        }\n        this.anchor = anchor;\n        this.direction = Vector.create([\n            direction.elements[0] / mod,\n            direction.elements[1] / mod,\n            direction.elements[2] / mod\n        ]);\n        return this;\n    }\n};\n// Constructor function\nLine.create = function(anchor, direction) {\n    var L = new Line();\n    return L.setVectors(anchor, direction);\n};\n// Axes\nLine.X = Line.create(Vector.Zero(3), Vector.i);\nLine.Y = Line.create(Vector.Zero(3), Vector.j);\nLine.Z = Line.create(Vector.Zero(3), Vector.k);\nmodule.exports = Line;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sylvester/lib/node-sylvester/line.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sylvester/lib/node-sylvester/line.segment.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sylvester/lib/node-sylvester/line.segment.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright (c) 2011, Chris Umbel, James Coglan\n// Line.Segment class - depends on Line and its dependencies.\n\nvar Line = __webpack_require__(/*! ./line */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/line.js\");\nvar Vector = __webpack_require__(/*! ./vector */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/vector.js\");\nLine.Segment = function() {};\nLine.Segment.prototype = {\n    // Returns true iff the line segment is equal to the argument\n    eql: function(segment) {\n        return this.start.eql(segment.start) && this.end.eql(segment.end) || this.start.eql(segment.end) && this.end.eql(segment.start);\n    },\n    // Returns a copy of the line segment\n    dup: function() {\n        return Line.Segment.create(this.start, this.end);\n    },\n    // Returns the length of the line segment\n    length: function() {\n        var A = this.start.elements, B = this.end.elements;\n        var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];\n        return Math.sqrt(C1 * C1 + C2 * C2 + C3 * C3);\n    },\n    // Returns the line segment as a vector equal to its\n    // end point relative to its endpoint\n    toVector: function() {\n        var A = this.start.elements, B = this.end.elements;\n        return Vector.create([\n            B[0] - A[0],\n            B[1] - A[1],\n            B[2] - A[2]\n        ]);\n    },\n    // Returns the segment's midpoint as a vector\n    midpoint: function() {\n        var A = this.start.elements, B = this.end.elements;\n        return Vector.create([\n            (B[0] + A[0]) / 2,\n            (B[1] + A[1]) / 2,\n            (B[2] + A[2]) / 2\n        ]);\n    },\n    // Returns the plane that bisects the segment\n    bisectingPlane: function() {\n        return Plane.create(this.midpoint(), this.toVector());\n    },\n    // Returns the result of translating the line by the given vector/array\n    translate: function(vector) {\n        var V = vector.elements || vector;\n        var S = this.start.elements, E = this.end.elements;\n        return Line.Segment.create([\n            S[0] + V[0],\n            S[1] + V[1],\n            S[2] + (V[2] || 0)\n        ], [\n            E[0] + V[0],\n            E[1] + V[1],\n            E[2] + (V[2] || 0)\n        ]);\n    },\n    // Returns true iff the line segment is parallel to the argument. It simply forwards\n    // the method call onto its line property.\n    isParallelTo: function(obj) {\n        return this.line.isParallelTo(obj);\n    },\n    // Returns the distance between the argument and the line segment's closest point to the argument\n    distanceFrom: function(obj) {\n        var P = this.pointClosestTo(obj);\n        return P === null ? null : P.distanceFrom(obj);\n    },\n    // Returns true iff the given point lies on the segment\n    contains: function(obj) {\n        if (obj.start && obj.end) {\n            return this.contains(obj.start) && this.contains(obj.end);\n        }\n        var P = (obj.elements || obj).slice();\n        if (P.length == 2) {\n            P.push(0);\n        }\n        if (this.start.eql(P)) {\n            return true;\n        }\n        var S = this.start.elements;\n        var V = Vector.create([\n            S[0] - P[0],\n            S[1] - P[1],\n            S[2] - (P[2] || 0)\n        ]);\n        var vect = this.toVector();\n        return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();\n    },\n    // Returns true iff the line segment intersects the argument\n    intersects: function(obj) {\n        return this.intersectionWith(obj) !== null;\n    },\n    // Returns the unique point of intersection with the argument\n    intersectionWith: function(obj) {\n        if (!this.line.intersects(obj)) {\n            return null;\n        }\n        var P = this.line.intersectionWith(obj);\n        return this.contains(P) ? P : null;\n    },\n    // Returns the point on the line segment closest to the given object\n    pointClosestTo: function(obj) {\n        if (obj.normal) {\n            // obj is a plane\n            var V = this.line.intersectionWith(obj);\n            if (V === null) {\n                return null;\n            }\n            return this.pointClosestTo(V);\n        } else {\n            // obj is a line (segment) or point\n            var P = this.line.pointClosestTo(obj);\n            if (P === null) {\n                return null;\n            }\n            if (this.contains(P)) {\n                return P;\n            }\n            return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();\n        }\n    },\n    // Set the start and end-points of the segment\n    setPoints: function(startPoint, endPoint) {\n        startPoint = Vector.create(startPoint).to3D();\n        endPoint = Vector.create(endPoint).to3D();\n        if (startPoint === null || endPoint === null) {\n            return null;\n        }\n        this.line = Line.create(startPoint, endPoint.subtract(startPoint));\n        this.start = startPoint;\n        this.end = endPoint;\n        return this;\n    }\n};\n// Constructor function\nLine.Segment.create = function(v1, v2) {\n    var S = new Line.Segment();\n    return S.setPoints(v1, v2);\n};\nmodule.exports = Line.Segment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sylvester/lib/node-sylvester/line.segment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sylvester/lib/node-sylvester/matrix.js":
/*!*************************************************************!*\
  !*** ./node_modules/sylvester/lib/node-sylvester/matrix.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright (c) 2011, Chris Umbel, James Coglan\n// Matrix class - depends on Vector.\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar Sylvester = __webpack_require__(/*! ./sylvester */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/sylvester.js\");\nvar Vector = __webpack_require__(/*! ./vector */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/vector.js\");\n// augment a matrix M with identity rows/cols\nfunction identSize(M, m, n, k) {\n    var e = M.elements;\n    var i1 = k - 1;\n    while(i1--){\n        var row = [];\n        for(var j1 = 0; j1 < n; j1++)row.push(j1 == i1 ? 1 : 0);\n        e.unshift(row);\n    }\n    for(var i1 = k - 1; i1 < m; i1++){\n        while(e[i1].length < n)e[i1].unshift(0);\n    }\n    return $M(e);\n}\nfunction pca(X) {\n    var Sigma = X.transpose().x(X).x(1 / X.rows());\n    var svd = Sigma.svd();\n    return {\n        U: svd.U,\n        S: svd.S\n    };\n}\nfunction Matrix() {}\nMatrix.prototype = {\n    pcaProject: function(k, U) {\n        var U = U || pca(this).U;\n        var Ureduce = U.slice(1, U.rows(), 1, k);\n        return {\n            Z: this.x(Ureduce),\n            U: U\n        };\n    },\n    pcaRecover: function(U) {\n        var k = this.cols();\n        var Ureduce = U.slice(1, U.rows(), 1, k);\n        return this.x(Ureduce.transpose());\n    },\n    triu: function(k) {\n        if (!k) k = 0;\n        return this.map(function(x, i1, j1) {\n            return j1 - i1 >= k ? x : 0;\n        });\n    },\n    svd: function() {\n        var A = this;\n        var U = Matrix.I(A.rows());\n        var S = A.transpose();\n        var V = Matrix.I(A.cols());\n        var err = Number.MAX_VALUE;\n        var i1 = 0;\n        var maxLoop = 100;\n        while(err > 2.2737e-13 && i1 < maxLoop){\n            var qr = S.transpose().qr();\n            S = qr.R;\n            U = U.x(qr.Q);\n            qr = S.transpose().qr();\n            V = V.x(qr.Q);\n            S = qr.R;\n            var e = S.triu(1).unroll().norm();\n            var f = S.diagonal().norm();\n            if (f == 0) f = 1;\n            err = e / f;\n            i1++;\n        }\n        var ss = S.diagonal();\n        var s = [];\n        for(var i1 = 1; i1 <= ss.cols(); i1++){\n            var ssn = ss.e(i1);\n            s.push(Math.abs(ssn));\n            if (ssn < 0) {\n                for(var j1 = 0; j1 < U.rows(); j1++){\n                    U.elements[j1][i1 - 1] = -U.elements[j1][i1 - 1];\n                }\n            }\n        }\n        return {\n            U: U,\n            S: $V(s).toDiagonalMatrix(),\n            V: V\n        };\n    },\n    unroll: function() {\n        var v = [];\n        for(var i1 = 1; i1 <= this.cols(); i1++){\n            for(var j1 = 1; j1 <= this.rows(); j1++){\n                v.push(this.e(j1, i1));\n            }\n        }\n        return $V(v);\n    },\n    qr: function() {\n        var m = this.rows();\n        var n = this.cols();\n        var Q = Matrix.I(m);\n        var A = this;\n        for(var k = 1; k < Math.min(m, n); k++){\n            var ak = A.slice(k, 0, k, k).col(1);\n            var oneZero = [\n                1\n            ];\n            while(oneZero.length <= m - k)oneZero.push(0);\n            oneZero = $V(oneZero);\n            var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));\n            var Vk = $M(vk);\n            var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));\n            var Qk = identSize(Hk, m, n, k);\n            A = Qk.x(A);\n            Q = Q.x(Qk);\n        }\n        return {\n            Q: Q,\n            R: A\n        };\n    },\n    slice: function(startRow, endRow, startCol, endCol) {\n        var x = [];\n        if (endRow == 0) endRow = this.rows();\n        if (endCol == 0) endCol = this.cols();\n        for(i = startRow; i <= endRow; i++){\n            var row = [];\n            for(j = startCol; j <= endCol; j++){\n                row.push(this.e(i, j));\n            }\n            x.push(row);\n        }\n        return $M(x);\n    },\n    // Returns element (i,j) of the matrix\n    e: function(i1, j1) {\n        if (i1 < 1 || i1 > this.elements.length || j1 < 1 || j1 > this.elements[0].length) {\n            return null;\n        }\n        return this.elements[i1 - 1][j1 - 1];\n    },\n    // Returns row k of the matrix as a vector\n    row: function(i1) {\n        if (i1 > this.elements.length) {\n            return null;\n        }\n        return $V(this.elements[i1 - 1]);\n    },\n    // Returns column k of the matrix as a vector\n    col: function(j1) {\n        if (j1 > this.elements[0].length) {\n            return null;\n        }\n        var col = [], n = this.elements.length;\n        for(var i1 = 0; i1 < n; i1++){\n            col.push(this.elements[i1][j1 - 1]);\n        }\n        return $V(col);\n    },\n    // Returns the number of rows/columns the matrix has\n    dimensions: function() {\n        return {\n            rows: this.elements.length,\n            cols: this.elements[0].length\n        };\n    },\n    // Returns the number of rows in the matrix\n    rows: function() {\n        return this.elements.length;\n    },\n    // Returns the number of columns in the matrix\n    cols: function() {\n        return this.elements[0].length;\n    },\n    // Returns true iff the matrix is equal to the argument. You can supply\n    // a vector as the argument, in which case the receiver must be a\n    // one-column matrix equal to the vector.\n    eql: function(matrix) {\n        var M = matrix.elements || matrix;\n        if (typeof M[0][0] == \"undefined\") {\n            M = Matrix.create(M).elements;\n        }\n        if (this.elements.length != M.length || this.elements[0].length != M[0].length) {\n            return false;\n        }\n        var i1 = this.elements.length, nj = this.elements[0].length, j1;\n        while(i1--){\n            j1 = nj;\n            while(j1--){\n                if (Math.abs(this.elements[i1][j1] - M[i1][j1]) > Sylvester.precision) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n    // Returns a copy of the matrix\n    dup: function() {\n        return Matrix.create(this.elements);\n    },\n    // Maps the matrix to another matrix (of the same dimensions) according to the given function\n    map: function(fn) {\n        var els = [], i1 = this.elements.length, nj = this.elements[0].length, j1;\n        while(i1--){\n            j1 = nj;\n            els[i1] = [];\n            while(j1--){\n                els[i1][j1] = fn(this.elements[i1][j1], i1 + 1, j1 + 1);\n            }\n        }\n        return Matrix.create(els);\n    },\n    // Returns true iff the argument has the same dimensions as the matrix\n    isSameSizeAs: function(matrix) {\n        var M = matrix.elements || matrix;\n        if (typeof M[0][0] == \"undefined\") {\n            M = Matrix.create(M).elements;\n        }\n        return this.elements.length == M.length && this.elements[0].length == M[0].length;\n    },\n    // Returns the result of adding the argument to the matrix\n    add: function(matrix) {\n        if (typeof matrix == \"number\") {\n            return this.map(function(x, i1, j1) {\n                return x + matrix;\n            });\n        } else {\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] == \"undefined\") {\n                M = Matrix.create(M).elements;\n            }\n            if (!this.isSameSizeAs(M)) {\n                return null;\n            }\n            return this.map(function(x, i1, j1) {\n                return x + M[i1 - 1][j1 - 1];\n            });\n        }\n    },\n    // Returns the result of subtracting the argument from the matrix\n    subtract: function(matrix) {\n        if (typeof matrix == \"number\") {\n            return this.map(function(x, i1, j1) {\n                return x - matrix;\n            });\n        } else {\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] == \"undefined\") {\n                M = Matrix.create(M).elements;\n            }\n            if (!this.isSameSizeAs(M)) {\n                return null;\n            }\n            return this.map(function(x, i1, j1) {\n                return x - M[i1 - 1][j1 - 1];\n            });\n        }\n    },\n    // Returns true iff the matrix can multiply the argument from the left\n    canMultiplyFromLeft: function(matrix) {\n        var M = matrix.elements || matrix;\n        if (typeof M[0][0] == \"undefined\") {\n            M = Matrix.create(M).elements;\n        }\n        // this.columns should equal matrix.rows\n        return this.elements[0].length == M.length;\n    },\n    // Returns the result of a multiplication-style operation the matrix from the right by the argument.\n    // If the argument is a scalar then just operate on all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    mulOp: function(matrix, op) {\n        if (!matrix.elements) {\n            return this.map(function(x) {\n                return op(x, matrix);\n            });\n        }\n        var returnVector = matrix.modulus ? true : false;\n        var M = matrix.elements || matrix;\n        if (typeof M[0][0] == \"undefined\") M = Matrix.create(M).elements;\n        if (!this.canMultiplyFromLeft(M)) return null;\n        var e = this.elements, rowThis, rowElem, elements = [], sum, m = e.length, n = M[0].length, o = e[0].length, i1 = m, j1, k;\n        while(i1--){\n            rowElem = [];\n            rowThis = e[i1];\n            j1 = n;\n            while(j1--){\n                sum = 0;\n                k = o;\n                while(k--){\n                    sum += op(rowThis[k], M[k][j1]);\n                }\n                rowElem[j1] = sum;\n            }\n            elements[i1] = rowElem;\n        }\n        var M = Matrix.create(elements);\n        return returnVector ? M.col(1) : M;\n    },\n    // Returns the result of dividing the matrix from the right by the argument.\n    // If the argument is a scalar then just divide all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    div: function(matrix) {\n        return this.mulOp(matrix, function(x, y) {\n            return x / y;\n        });\n    },\n    // Returns the result of multiplying the matrix from the right by the argument.\n    // If the argument is a scalar then just multiply all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    multiply: function(matrix) {\n        return this.mulOp(matrix, function(x, y) {\n            return x * y;\n        });\n    },\n    x: function(matrix) {\n        return this.multiply(matrix);\n    },\n    elementMultiply: function(v) {\n        return this.map(function(k, i1, j1) {\n            return v.e(i1, j1) * k;\n        });\n    },\n    sum: function() {\n        var sum = 0;\n        this.map(function(x) {\n            sum += x;\n        });\n        return sum;\n    },\n    // Returns a Vector of each colum averaged.\n    mean: function() {\n        var dim = this.dimensions();\n        var r = [];\n        for(var i1 = 1; i1 <= dim.cols; i1++){\n            r.push(this.col(i1).sum() / dim.rows);\n        }\n        return $V(r);\n    },\n    column: function(n) {\n        return this.col(n);\n    },\n    log: function() {\n        return this.map(function(x) {\n            return Math.log(x);\n        });\n    },\n    // Returns a submatrix taken from the matrix\n    // Argument order is: start row, start col, nrows, ncols\n    // Element selection wraps if the required index is outside the matrix's bounds, so you could\n    // use this to perform row/column cycling or copy-augmenting.\n    minor: function(a, b, c, d) {\n        var elements = [], ni = c, i1, nj, j1;\n        var rows = this.elements.length, cols = this.elements[0].length;\n        while(ni--){\n            i1 = c - ni - 1;\n            elements[i1] = [];\n            nj = d;\n            while(nj--){\n                j1 = d - nj - 1;\n                elements[i1][j1] = this.elements[(a + i1 - 1) % rows][(b + j1 - 1) % cols];\n            }\n        }\n        return Matrix.create(elements);\n    },\n    // Returns the transpose of the matrix\n    transpose: function() {\n        var rows = this.elements.length, i1, cols = this.elements[0].length, j1;\n        var elements = [], i1 = cols;\n        while(i1--){\n            j1 = rows;\n            elements[i1] = [];\n            while(j1--){\n                elements[i1][j1] = this.elements[j1][i1];\n            }\n        }\n        return Matrix.create(elements);\n    },\n    // Returns true iff the matrix is square\n    isSquare: function() {\n        return this.elements.length == this.elements[0].length;\n    },\n    // Returns the (absolute) largest element of the matrix\n    max: function() {\n        var m = 0, i1 = this.elements.length, nj = this.elements[0].length, j1;\n        while(i1--){\n            j1 = nj;\n            while(j1--){\n                if (Math.abs(this.elements[i1][j1]) > Math.abs(m)) {\n                    m = this.elements[i1][j1];\n                }\n            }\n        }\n        return m;\n    },\n    // Returns the indeces of the first match found by reading row-by-row from left to right\n    indexOf: function(x) {\n        var index = null, ni = this.elements.length, i1, nj = this.elements[0].length, j1;\n        for(i1 = 0; i1 < ni; i1++){\n            for(j1 = 0; j1 < nj; j1++){\n                if (this.elements[i1][j1] == x) {\n                    return {\n                        i: i1 + 1,\n                        j: j1 + 1\n                    };\n                }\n            }\n        }\n        return null;\n    },\n    // If the matrix is square, returns the diagonal elements as a vector.\n    // Otherwise, returns null.\n    diagonal: function() {\n        if (!this.isSquare) {\n            return null;\n        }\n        var els = [], n = this.elements.length;\n        for(var i1 = 0; i1 < n; i1++){\n            els.push(this.elements[i1][i1]);\n        }\n        return $V(els);\n    },\n    // Make the matrix upper (right) triangular by Gaussian elimination.\n    // This method only adds multiples of rows to other rows. No rows are\n    // scaled up or switched, and the determinant is preserved.\n    toRightTriangular: function() {\n        var M = this.dup(), els;\n        var n = this.elements.length, i1, j1, np = this.elements[0].length, p;\n        for(i1 = 0; i1 < n; i1++){\n            if (M.elements[i1][i1] == 0) {\n                for(j1 = i1 + 1; j1 < n; j1++){\n                    if (M.elements[j1][i1] != 0) {\n                        els = [];\n                        for(p = 0; p < np; p++){\n                            els.push(M.elements[i1][p] + M.elements[j1][p]);\n                        }\n                        M.elements[i1] = els;\n                        break;\n                    }\n                }\n            }\n            if (M.elements[i1][i1] != 0) {\n                for(j1 = i1 + 1; j1 < n; j1++){\n                    var multiplier = M.elements[j1][i1] / M.elements[i1][i1];\n                    els = [];\n                    for(p = 0; p < np; p++){\n                        // Elements with column numbers up to an including the number\n                        // of the row that we're subtracting can safely be set straight to\n                        // zero, since that's the point of this routine and it avoids having\n                        // to loop over and correct rounding errors later\n                        els.push(p <= i1 ? 0 : M.elements[j1][p] - M.elements[i1][p] * multiplier);\n                    }\n                    M.elements[j1] = els;\n                }\n            }\n        }\n        return M;\n    },\n    toUpperTriangular: function() {\n        return this.toRightTriangular();\n    },\n    // Returns the determinant for square matrices\n    determinant: function() {\n        if (!this.isSquare()) {\n            return null;\n        }\n        if (this.cols == 1 && this.rows == 1) {\n            return this.row(1);\n        }\n        if (this.cols == 0 && this.rows == 0) {\n            return 1;\n        }\n        var M = this.toRightTriangular();\n        var det = M.elements[0][0], n = M.elements.length;\n        for(var i1 = 1; i1 < n; i1++){\n            det = det * M.elements[i1][i1];\n        }\n        return det;\n    },\n    det: function() {\n        return this.determinant();\n    },\n    // Returns true iff the matrix is singular\n    isSingular: function() {\n        return this.isSquare() && this.determinant() === 0;\n    },\n    // Returns the trace for square matrices\n    trace: function() {\n        if (!this.isSquare()) {\n            return null;\n        }\n        var tr = this.elements[0][0], n = this.elements.length;\n        for(var i1 = 1; i1 < n; i1++){\n            tr += this.elements[i1][i1];\n        }\n        return tr;\n    },\n    tr: function() {\n        return this.trace();\n    },\n    // Returns the rank of the matrix\n    rank: function() {\n        var M = this.toRightTriangular(), rank = 0;\n        var i1 = this.elements.length, nj = this.elements[0].length, j1;\n        while(i1--){\n            j1 = nj;\n            while(j1--){\n                if (Math.abs(M.elements[i1][j1]) > Sylvester.precision) {\n                    rank++;\n                    break;\n                }\n            }\n        }\n        return rank;\n    },\n    rk: function() {\n        return this.rank();\n    },\n    // Returns the result of attaching the given argument to the right-hand side of the matrix\n    augment: function(matrix) {\n        var M = matrix.elements || matrix;\n        if (typeof M[0][0] == \"undefined\") {\n            M = Matrix.create(M).elements;\n        }\n        var T = this.dup(), cols = T.elements[0].length;\n        var i1 = T.elements.length, nj = M[0].length, j1;\n        if (i1 != M.length) {\n            return null;\n        }\n        while(i1--){\n            j1 = nj;\n            while(j1--){\n                T.elements[i1][cols + j1] = M[i1][j1];\n            }\n        }\n        return T;\n    },\n    // Returns the inverse (if one exists) using Gauss-Jordan\n    inverse: function() {\n        if (!this.isSquare() || this.isSingular()) {\n            return null;\n        }\n        var n = this.elements.length, i1 = n, j1;\n        var M = this.augment(Matrix.I(n)).toRightTriangular();\n        var np = M.elements[0].length, p, els, divisor;\n        var inverse_elements = [], new_element;\n        // Matrix is non-singular so there will be no zeros on the diagonal\n        // Cycle through rows from last to first\n        while(i1--){\n            // First, normalise diagonal elements to 1\n            els = [];\n            inverse_elements[i1] = [];\n            divisor = M.elements[i1][i1];\n            for(p = 0; p < np; p++){\n                new_element = M.elements[i1][p] / divisor;\n                els.push(new_element);\n                // Shuffle off the current row of the right hand side into the results\n                // array as it will not be modified by later runs through this loop\n                if (p >= n) {\n                    inverse_elements[i1].push(new_element);\n                }\n            }\n            M.elements[i1] = els;\n            // Then, subtract this row from those above it to\n            // give the identity matrix on the left hand side\n            j1 = i1;\n            while(j1--){\n                els = [];\n                for(p = 0; p < np; p++){\n                    els.push(M.elements[j1][p] - M.elements[i1][p] * M.elements[j1][i1]);\n                }\n                M.elements[j1] = els;\n            }\n        }\n        return Matrix.create(inverse_elements);\n    },\n    inv: function() {\n        return this.inverse();\n    },\n    // Returns the result of rounding all the elements\n    round: function() {\n        return this.map(function(x) {\n            return Math.round(x);\n        });\n    },\n    // Returns a copy of the matrix with elements set to the given value if they\n    // differ from it by less than Sylvester.precision\n    snapTo: function(x) {\n        return this.map(function(p) {\n            return Math.abs(p - x) <= Sylvester.precision ? x : p;\n        });\n    },\n    // Returns a string representation of the matrix\n    inspect: function() {\n        var matrix_rows = [];\n        var n = this.elements.length;\n        for(var i1 = 0; i1 < n; i1++){\n            matrix_rows.push($V(this.elements[i1]).inspect());\n        }\n        return matrix_rows.join(\"\\n\");\n    },\n    // Returns a array representation of the matrix\n    toArray: function() {\n        var matrix_rows = [];\n        var n = this.elements.length;\n        for(var i1 = 0; i1 < n; i1++){\n            matrix_rows.push(this.elements[i1]);\n        }\n        return matrix_rows;\n    },\n    // Set the matrix's elements from an array. If the argument passed\n    // is a vector, the resulting matrix will be a single column.\n    setElements: function(els) {\n        var i1, j1, elements = els.elements || els;\n        if (typeof elements[0][0] != \"undefined\") {\n            i1 = elements.length;\n            this.elements = [];\n            while(i1--){\n                j1 = elements[i1].length;\n                this.elements[i1] = [];\n                while(j1--){\n                    this.elements[i1][j1] = elements[i1][j1];\n                }\n            }\n            return this;\n        }\n        var n = elements.length;\n        this.elements = [];\n        for(i1 = 0; i1 < n; i1++){\n            this.elements.push([\n                elements[i1]\n            ]);\n        }\n        return this;\n    },\n    maxColumnIndexes: function() {\n        var maxes = [];\n        for(var i1 = 1; i1 <= this.rows(); i1++){\n            var max = null;\n            var maxIndex = -1;\n            for(var j1 = 1; j1 <= this.cols(); j1++){\n                if (max === null || this.e(i1, j1) > max) {\n                    max = this.e(i1, j1);\n                    maxIndex = j1;\n                }\n            }\n            maxes.push(maxIndex);\n        }\n        return $V(maxes);\n    },\n    maxColumns: function() {\n        var maxes = [];\n        for(var i1 = 1; i1 <= this.rows(); i1++){\n            var max = null;\n            for(var j1 = 1; j1 <= this.cols(); j1++){\n                if (max === null || this.e(i1, j1) > max) {\n                    max = this.e(i1, j1);\n                }\n            }\n            maxes.push(max);\n        }\n        return $V(maxes);\n    },\n    minColumnIndexes: function() {\n        var mins = [];\n        for(var i1 = 1; i1 <= this.rows(); i1++){\n            var min = null;\n            var minIndex = -1;\n            for(var j1 = 1; j1 <= this.cols(); j1++){\n                if (min === null || this.e(i1, j1) < min) {\n                    min = this.e(i1, j1);\n                    minIndex = j1;\n                }\n            }\n            mins.push(minIndex);\n        }\n        return $V(mins);\n    },\n    minColumns: function() {\n        var mins = [];\n        for(var i1 = 1; i1 <= this.rows(); i1++){\n            var min = null;\n            for(var j1 = 1; j1 <= this.cols(); j1++){\n                if (min === null || this.e(i1, j1) < min) {\n                    min = this.e(i1, j1);\n                }\n            }\n            mins.push(min);\n        }\n        return $V(mins);\n    }\n};\n// Constructor function\nMatrix.create = function(elements) {\n    var M = new Matrix();\n    return M.setElements(elements);\n};\n// Identity matrix of size n\nMatrix.I = function(n) {\n    var els = [], i1 = n, j1;\n    while(i1--){\n        j1 = n;\n        els[i1] = [];\n        while(j1--){\n            els[i1][j1] = i1 == j1 ? 1 : 0;\n        }\n    }\n    return Matrix.create(els);\n};\nMatrix.loadFile = function(file) {\n    var contents = fs.readFileSync(file, \"utf-8\");\n    var matrix = [];\n    var rowArray = contents.split(\"\\n\");\n    for(var i1 = 0; i1 < rowArray.length; i1++){\n        var d = rowArray[i1].split(\",\");\n        if (d.length > 1) {\n            matrix.push(d);\n        }\n    }\n    var M = new Matrix();\n    return M.setElements(matrix);\n};\n// Diagonal matrix - all off-diagonal elements are zero\nMatrix.Diagonal = function(elements) {\n    var i1 = elements.length;\n    var M = Matrix.I(i1);\n    while(i1--){\n        M.elements[i1][i1] = elements[i1];\n    }\n    return M;\n};\n// Rotation matrix about some axis. If no axis is\n// supplied, assume we're after a 2D transform\nMatrix.Rotation = function(theta, a) {\n    if (!a) {\n        return Matrix.create([\n            [\n                Math.cos(theta),\n                -Math.sin(theta)\n            ],\n            [\n                Math.sin(theta),\n                Math.cos(theta)\n            ]\n        ]);\n    }\n    var axis = a.dup();\n    if (axis.elements.length != 3) {\n        return null;\n    }\n    var mod = axis.modulus();\n    var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;\n    var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;\n    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\n    // That proof rotates the co-ordinate system so theta\n    // becomes -theta and sin becomes -sin here.\n    return Matrix.create([\n        [\n            t * x * x + c,\n            t * x * y - s * z,\n            t * x * z + s * y\n        ],\n        [\n            t * x * y + s * z,\n            t * y * y + c,\n            t * y * z - s * x\n        ],\n        [\n            t * x * z - s * y,\n            t * y * z + s * x,\n            t * z * z + c\n        ]\n    ]);\n};\n// Special case rotations\nMatrix.RotationX = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n        [\n            1,\n            0,\n            0\n        ],\n        [\n            0,\n            c,\n            -s\n        ],\n        [\n            0,\n            s,\n            c\n        ]\n    ]);\n};\nMatrix.RotationY = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n        [\n            c,\n            0,\n            s\n        ],\n        [\n            0,\n            1,\n            0\n        ],\n        [\n            -s,\n            0,\n            c\n        ]\n    ]);\n};\nMatrix.RotationZ = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n        [\n            c,\n            -s,\n            0\n        ],\n        [\n            s,\n            c,\n            0\n        ],\n        [\n            0,\n            0,\n            1\n        ]\n    ]);\n};\n// Random matrix of n rows, m columns\nMatrix.Random = function(n, m) {\n    if (arguments.length === 1) m = n;\n    return Matrix.Zero(n, m).map(function() {\n        return Math.random();\n    });\n};\nMatrix.Fill = function(n, m, v) {\n    if (arguments.length === 2) {\n        v = m;\n        m = n;\n    }\n    var els = [], i1 = n, j1;\n    while(i1--){\n        j1 = m;\n        els[i1] = [];\n        while(j1--){\n            els[i1][j1] = v;\n        }\n    }\n    return Matrix.create(els);\n};\n// Matrix filled with zeros\nMatrix.Zero = function(n, m) {\n    return Matrix.Fill(n, m, 0);\n};\n// Matrix filled with zeros\nMatrix.Zeros = function(n, m) {\n    return Matrix.Zero(n, m);\n};\n// Matrix filled with ones\nMatrix.One = function(n, m) {\n    return Matrix.Fill(n, m, 1);\n};\n// Matrix filled with ones\nMatrix.Ones = function(n, m) {\n    return Matrix.One(n, m);\n};\nmodule.exports = Matrix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3lsdmVzdGVyL2xpYi9ub2RlLXN5bHZlc3Rlci9tYXRyaXguanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELG9DQUFvQzs7QUFFcEMsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUM7QUFFckIsNkNBQTZDO0FBQzdDLFNBQVNHLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDekIsSUFBSUMsSUFBSUosRUFBRUssUUFBUTtJQUNsQixJQUFJQyxLQUFJSCxJQUFJO0lBRVosTUFBTUcsS0FBSztRQUNkLElBQUlDLE1BQU0sRUFBRTtRQUVaLElBQUksSUFBSUMsS0FBSSxHQUFHQSxLQUFJTixHQUFHTSxLQUNsQkQsSUFBSUUsSUFBSSxDQUFDRCxNQUFLRixLQUFJLElBQUk7UUFFbkJGLEVBQUVNLE9BQU8sQ0FBQ0g7SUFDZDtJQUVBLElBQUksSUFBSUQsS0FBSUgsSUFBSSxHQUFHRyxLQUFJTCxHQUFHSyxLQUFLO1FBQzNCLE1BQU1GLENBQUMsQ0FBQ0UsR0FBRSxDQUFDSyxNQUFNLEdBQUdULEVBQ2hCRSxDQUFDLENBQUNFLEdBQUUsQ0FBQ0ksT0FBTyxDQUFDO0lBQ3JCO0lBRUEsT0FBT0UsR0FBR1I7QUFDZDtBQUVBLFNBQVNTLElBQUlDLENBQUM7SUFDVixJQUFJQyxRQUFRRCxFQUFFRSxTQUFTLEdBQUdDLENBQUMsQ0FBQ0gsR0FBR0csQ0FBQyxDQUFDLElBQUlILEVBQUVJLElBQUk7SUFDM0MsSUFBSUMsTUFBTUosTUFBTUksR0FBRztJQUNuQixPQUFPO1FBQUNDLEdBQUdELElBQUlDLENBQUM7UUFBRUMsR0FBR0YsSUFBSUUsQ0FBQztJQUFBO0FBQzlCO0FBRUEsU0FBU0MsVUFBVTtBQUNuQkEsT0FBT0MsU0FBUyxHQUFHO0lBQ2ZDLFlBQVksU0FBU3JCLENBQUMsRUFBRWlCLENBQUM7UUFDNUIsSUFBSUEsSUFBSUEsS0FBS1AsSUFBSSxJQUFJLEVBQUVPLENBQUM7UUFDeEIsSUFBSUssVUFBU0wsRUFBRU0sS0FBSyxDQUFDLEdBQUdOLEVBQUVGLElBQUksSUFBSSxHQUFHZjtRQUNyQyxPQUFPO1lBQUN3QixHQUFHLElBQUksQ0FBQ1YsQ0FBQyxDQUFDUTtZQUFVTCxHQUFHQTtRQUFDO0lBQzdCO0lBRUFRLFlBQVksU0FBU1IsQ0FBQztRQUN6QixJQUFJakIsSUFBSSxJQUFJLENBQUMwQixJQUFJO1FBQ2pCLElBQUlKLFVBQVVMLEVBQUVNLEtBQUssQ0FBQyxHQUFHTixFQUFFRixJQUFJLElBQUksR0FBR2Y7UUFDdEMsT0FBTyxJQUFJLENBQUNjLENBQUMsQ0FBQ1EsUUFBUVQsU0FBUztJQUM1QjtJQUVBYyxNQUFNLFNBQVMzQixDQUFDO1FBQ25CLElBQUcsQ0FBQ0EsR0FDQUEsSUFBSTtRQUVSLE9BQU8sSUFBSSxDQUFDNEIsR0FBRyxDQUFDLFNBQVNkLENBQUMsRUFBRVgsRUFBQyxFQUFFRSxFQUFDO1lBQzVCLE9BQU9BLEtBQUlGLE1BQUtILElBQUljLElBQUk7UUFDNUI7SUFDRztJQUVBRSxLQUFLO1FBQ1IsSUFBSWEsSUFBSSxJQUFJO1FBQ1osSUFBSVosSUFBSUUsT0FBT1csQ0FBQyxDQUFDRCxFQUFFZCxJQUFJO1FBQ3ZCLElBQUlHLElBQUlXLEVBQUVoQixTQUFTO1FBQ25CLElBQUlrQixJQUFJWixPQUFPVyxDQUFDLENBQUNELEVBQUVILElBQUk7UUFDdkIsSUFBSU0sTUFBTUMsT0FBT0MsU0FBUztRQUMxQixJQUFJL0IsS0FBSTtRQUNSLElBQUlnQyxVQUFVO1FBRWQsTUFBTUgsTUFBTSxjQUFjN0IsS0FBSWdDLFFBQVM7WUFDbkMsSUFBSUMsS0FBS2xCLEVBQUVMLFNBQVMsR0FBR3VCLEVBQUU7WUFDekJsQixJQUFJa0IsR0FBR0MsQ0FBQztZQUNScEIsSUFBSUEsRUFBRUgsQ0FBQyxDQUFDc0IsR0FBR0UsQ0FBQztZQUNaRixLQUFLbEIsRUFBRUwsU0FBUyxHQUFHdUIsRUFBRTtZQUNyQkwsSUFBSUEsRUFBRWpCLENBQUMsQ0FBQ3NCLEdBQUdFLENBQUM7WUFDWnBCLElBQUlrQixHQUFHQyxDQUFDO1lBRVIsSUFBSXBDLElBQUlpQixFQUFFUyxJQUFJLENBQUMsR0FBR1ksTUFBTSxHQUFHQyxJQUFJO1lBQy9CLElBQUlDLElBQUl2QixFQUFFd0IsUUFBUSxHQUFHRixJQUFJO1lBRXpCLElBQUdDLEtBQUssR0FDWEEsSUFBSTtZQUVEVCxNQUFNL0IsSUFBSXdDO1lBRVZ0QztRQUNKO1FBRUEsSUFBSXdDLEtBQUt6QixFQUFFd0IsUUFBUTtRQUNuQixJQUFJRSxJQUFJLEVBQUU7UUFFVixJQUFJLElBQUl6QyxLQUFJLEdBQUdBLE1BQUt3QyxHQUFHakIsSUFBSSxJQUFJdkIsS0FBSztZQUNoQyxJQUFJMEMsTUFBTUYsR0FBRzFDLENBQUMsQ0FBQ0U7WUFDZnlDLEVBQUV0QyxJQUFJLENBQUN3QyxLQUFLQyxHQUFHLENBQUNGO1lBRWhCLElBQUdBLE1BQU0sR0FBRztnQkFDZixJQUFJLElBQUl4QyxLQUFJLEdBQUdBLEtBQUlZLEVBQUVGLElBQUksSUFBSVYsS0FBSztvQkFDOUJZLEVBQUVmLFFBQVEsQ0FBQ0csR0FBRSxDQUFDRixLQUFJLEVBQUUsR0FBRyxDQUFFYyxFQUFFZixRQUFRLENBQUNHLEdBQUUsQ0FBQ0YsS0FBSSxFQUFFO2dCQUNqRDtZQUNHO1FBQ0o7UUFFQSxPQUFPO1lBQUNjLEdBQUdBO1lBQUdDLEdBQUc4QixHQUFHSixHQUFHSyxnQkFBZ0I7WUFBSWxCLEdBQUdBO1FBQUM7SUFDNUM7SUFFQVEsUUFBUTtRQUNYLElBQUlXLElBQUksRUFBRTtRQUVWLElBQUksSUFBSS9DLEtBQUksR0FBR0EsTUFBSyxJQUFJLENBQUN1QixJQUFJLElBQUl2QixLQUFLO1lBQ2xDLElBQUksSUFBSUUsS0FBSSxHQUFHQSxNQUFLLElBQUksQ0FBQ1UsSUFBSSxJQUFJVixLQUFLO2dCQUN6QzZDLEVBQUU1QyxJQUFJLENBQUMsSUFBSSxDQUFDTCxDQUFDLENBQUNJLElBQUdGO1lBQ2Q7UUFDSjtRQUVBLE9BQU82QyxHQUFHRTtJQUNQO0lBRUFkLElBQUk7UUFDUCxJQUFJdEMsSUFBSSxJQUFJLENBQUNpQixJQUFJO1FBQ2pCLElBQUloQixJQUFJLElBQUksQ0FBQzJCLElBQUk7UUFDakIsSUFBSVksSUFBSW5CLE9BQU9XLENBQUMsQ0FBQ2hDO1FBQ2pCLElBQUkrQixJQUFJLElBQUk7UUFFWixJQUFJLElBQUk3QixJQUFJLEdBQUdBLElBQUk4QyxLQUFLSyxHQUFHLENBQUNyRCxHQUFHQyxJQUFJQyxJQUFLO1lBQ3BDLElBQUlvRCxLQUFLdkIsRUFBRU4sS0FBSyxDQUFDdkIsR0FBRyxHQUFHQSxHQUFHQSxHQUFHcUQsR0FBRyxDQUFDO1lBQ2pDLElBQUlDLFVBQVU7Z0JBQUM7YUFBRTtZQUVqQixNQUFNQSxRQUFROUMsTUFBTSxJQUFLVixJQUFJRSxFQUNoQ3NELFFBQVFoRCxJQUFJLENBQUM7WUFFVmdELFVBQVVOLEdBQUdNO1lBQ2IsSUFBSUMsS0FBS0gsR0FBR0ksR0FBRyxDQUFDRixRQUFReEMsQ0FBQyxDQUFDc0MsR0FBR1osSUFBSSxLQUFLTSxLQUFLVyxJQUFJLENBQUNMLEdBQUduRCxDQUFDLENBQUM7WUFDckQsSUFBSXlELEtBQUtqRCxHQUFHOEM7WUFDWixJQUFJSSxLQUFLeEMsT0FBT1csQ0FBQyxDQUFDaEMsSUFBSUUsSUFBSSxHQUFHNEQsUUFBUSxDQUFDRixHQUFHNUMsQ0FBQyxDQUFDLEdBQUdBLENBQUMsQ0FBQzRDLEdBQUc3QyxTQUFTLElBQUlnRCxHQUFHLENBQUNILEdBQUc3QyxTQUFTLEdBQUdDLENBQUMsQ0FBQzRDLElBQUl6RCxDQUFDLENBQUMsR0FBRztZQUM5RixJQUFJNkQsS0FBS2xFLFVBQVUrRCxJQUFJN0QsR0FBR0MsR0FBR0M7WUFDN0I2QixJQUFJaUMsR0FBR2hELENBQUMsQ0FBQ2U7WUFDVFMsSUFBSUEsRUFBRXhCLENBQUMsQ0FBQ2dEO1FBQ1o7UUFFQSxPQUFPO1lBQUN4QixHQUFHQTtZQUFHRCxHQUFHUjtRQUFDO0lBQ2Y7SUFHQU4sT0FBTyxTQUFTd0MsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsTUFBTTtRQUNyRCxJQUFJcEQsSUFBSSxFQUFFO1FBRVYsSUFBR2tELFVBQVUsR0FDVEEsU0FBUyxJQUFJLENBQUNqRCxJQUFJO1FBRXRCLElBQUdtRCxVQUFVLEdBQ1RBLFNBQVMsSUFBSSxDQUFDeEMsSUFBSTtRQUV0QixJQUFJdkIsSUFBSTRELFVBQVU1RCxLQUFLNkQsUUFBUTdELElBQUs7WUFDaEMsSUFBSUMsTUFBTSxFQUFFO1lBRVosSUFBSUMsSUFBSTRELFVBQVU1RCxLQUFLNkQsUUFBUTdELElBQUs7Z0JBQ3ZDRCxJQUFJRSxJQUFJLENBQUMsSUFBSSxDQUFDTCxDQUFDLENBQUNFLEdBQUdFO1lBQ2hCO1lBRUFTLEVBQUVSLElBQUksQ0FBQ0Y7UUFDWDtRQUVBLE9BQU9LLEdBQUdLO0lBQ1A7SUFFQSxzQ0FBc0M7SUFDdENiLEdBQUcsU0FBU0UsRUFBQyxFQUFDRSxFQUFDO1FBQ2xCLElBQUlGLEtBQUksS0FBS0EsS0FBSSxJQUFJLENBQUNELFFBQVEsQ0FBQ00sTUFBTSxJQUFJSCxLQUFJLEtBQUtBLEtBQUksSUFBSSxDQUFDSCxRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLEVBQUU7WUFBRSxPQUFPO1FBQU07UUFDOUYsT0FBTyxJQUFJLENBQUNOLFFBQVEsQ0FBQ0MsS0FBSSxFQUFFLENBQUNFLEtBQUksRUFBRTtJQUMvQjtJQUVBLDBDQUEwQztJQUMxQ0QsS0FBSyxTQUFTRCxFQUFDO1FBQ2xCLElBQUlBLEtBQUksSUFBSSxDQUFDRCxRQUFRLENBQUNNLE1BQU0sRUFBRTtZQUFFLE9BQU87UUFBTTtRQUM3QyxPQUFPd0MsR0FBRyxJQUFJLENBQUM5QyxRQUFRLENBQUNDLEtBQUksRUFBRTtJQUMzQjtJQUVBLDZDQUE2QztJQUM3Q2tELEtBQUssU0FBU2hELEVBQUM7UUFDbEIsSUFBSUEsS0FBSSxJQUFJLENBQUNILFFBQVEsQ0FBQyxFQUFFLENBQUNNLE1BQU0sRUFBRTtZQUFFLE9BQU87UUFBTTtRQUNoRCxJQUFJNkMsTUFBTSxFQUFFLEVBQUV0RCxJQUFJLElBQUksQ0FBQ0csUUFBUSxDQUFDTSxNQUFNO1FBQ3RDLElBQUssSUFBSUwsS0FBSSxHQUFHQSxLQUFJSixHQUFHSSxLQUFLO1lBQUVrRCxJQUFJL0MsSUFBSSxDQUFDLElBQUksQ0FBQ0osUUFBUSxDQUFDQyxHQUFFLENBQUNFLEtBQUksRUFBRTtRQUFHO1FBQ2pFLE9BQU8yQyxHQUFHSztJQUNQO0lBRUEsb0RBQW9EO0lBQ3BEYyxZQUFZO1FBQ2YsT0FBTztZQUFDcEQsTUFBTSxJQUFJLENBQUNiLFFBQVEsQ0FBQ00sTUFBTTtZQUFFa0IsTUFBTSxJQUFJLENBQUN4QixRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNO1FBQUE7SUFDOUQ7SUFFQSwyQ0FBMkM7SUFDM0NPLE1BQU07UUFDVCxPQUFPLElBQUksQ0FBQ2IsUUFBUSxDQUFDTSxNQUFNO0lBQ3hCO0lBRUEsOENBQThDO0lBQzlDa0IsTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDeEIsUUFBUSxDQUFDLEVBQUUsQ0FBQ00sTUFBTTtJQUMzQjtJQUVBLHVFQUF1RTtJQUN2RSxpRUFBaUU7SUFDakUseUNBQXlDO0lBQ3pDNEQsS0FBSyxTQUFTQyxNQUFNO1FBQ3ZCLElBQUl4RSxJQUFJd0UsT0FBT25FLFFBQVEsSUFBSW1FO1FBQzNCLElBQUksT0FBT3hFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFLLGFBQWE7WUFBRUEsSUFBSXNCLE9BQU9tRCxNQUFNLENBQUN6RSxHQUFHSyxRQUFRO1FBQUU7UUFDckUsSUFBSSxJQUFJLENBQUNBLFFBQVEsQ0FBQ00sTUFBTSxJQUFJWCxFQUFFVyxNQUFNLElBQ3pCLElBQUksQ0FBQ04sUUFBUSxDQUFDLEVBQUUsQ0FBQ00sTUFBTSxJQUFJWCxDQUFDLENBQUMsRUFBRSxDQUFDVyxNQUFNLEVBQUU7WUFBRSxPQUFPO1FBQU87UUFDbkUsSUFBSUwsS0FBSSxJQUFJLENBQUNELFFBQVEsQ0FBQ00sTUFBTSxFQUFFK0QsS0FBSyxJQUFJLENBQUNyRSxRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLEVBQUVIO1FBQzVELE1BQU9GLEtBQUs7WUFBRUUsS0FBSWtFO1lBQ1gsTUFBT2xFLEtBQUs7Z0JBQ2YsSUFBSXlDLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUM3QyxRQUFRLENBQUNDLEdBQUUsQ0FBQ0UsR0FBRSxHQUFHUixDQUFDLENBQUNNLEdBQUUsQ0FBQ0UsR0FBRSxJQUFJWCxVQUFVOEUsU0FBUyxFQUFFO29CQUFFLE9BQU87Z0JBQU87WUFDaEY7UUFDRjtRQUNMLE9BQU87SUFDSjtJQUVBLCtCQUErQjtJQUMvQkMsS0FBSztRQUNSLE9BQU90RCxPQUFPbUQsTUFBTSxDQUFDLElBQUksQ0FBQ3BFLFFBQVE7SUFDL0I7SUFFQSw2RkFBNkY7SUFDN0YwQixLQUFLLFNBQVM4QyxFQUFFO1FBQ2hCLElBQUlDLE1BQU0sRUFBRSxFQUFFeEUsS0FBSSxJQUFJLENBQUNELFFBQVEsQ0FBQ00sTUFBTSxFQUFFK0QsS0FBSyxJQUFJLENBQUNyRSxRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLEVBQUVIO1FBQ3pFLE1BQU9GLEtBQUs7WUFBRUUsS0FBSWtFO1lBQ1hJLEdBQUcsQ0FBQ3hFLEdBQUUsR0FBRyxFQUFFO1lBQ1gsTUFBT0UsS0FBSztnQkFDZnNFLEdBQUcsQ0FBQ3hFLEdBQUUsQ0FBQ0UsR0FBRSxHQUFHcUUsR0FBRyxJQUFJLENBQUN4RSxRQUFRLENBQUNDLEdBQUUsQ0FBQ0UsR0FBRSxFQUFFRixLQUFJLEdBQUdFLEtBQUk7WUFDNUM7UUFDRjtRQUNMLE9BQU9jLE9BQU9tRCxNQUFNLENBQUNLO0lBQ2xCO0lBRUEsc0VBQXNFO0lBQ3RFQyxjQUFjLFNBQVNQLE1BQU07UUFDaEMsSUFBSXhFLElBQUl3RSxPQUFPbkUsUUFBUSxJQUFJbUU7UUFDM0IsSUFBSSxPQUFPeEUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUssYUFBYTtZQUFFQSxJQUFJc0IsT0FBT21ELE1BQU0sQ0FBQ3pFLEdBQUdLLFFBQVE7UUFBRTtRQUNyRSxPQUFRLElBQUksQ0FBQ0EsUUFBUSxDQUFDTSxNQUFNLElBQUlYLEVBQUVXLE1BQU0sSUFDdkMsSUFBSSxDQUFDTixRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLElBQUlYLENBQUMsQ0FBQyxFQUFFLENBQUNXLE1BQU07SUFDcEM7SUFFQSwwREFBMEQ7SUFDMURnRCxLQUFLLFNBQVNhLE1BQU07UUFDdkIsSUFBRyxPQUFPQSxVQUFXLFVBQVU7WUFDM0IsT0FBTyxJQUFJLENBQUN6QyxHQUFHLENBQUMsU0FBU2QsQ0FBQyxFQUFFWCxFQUFDLEVBQUVFLEVBQUM7Z0JBQUksT0FBT1MsSUFBSXVEO1lBQU07UUFDekQsT0FBTztZQUNILElBQUl4RSxJQUFJd0UsT0FBT25FLFFBQVEsSUFBSW1FO1lBQzNCLElBQUksT0FBT3hFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFLLGFBQWE7Z0JBQUVBLElBQUlzQixPQUFPbUQsTUFBTSxDQUFDekUsR0FBR0ssUUFBUTtZQUFFO1lBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMwRSxZQUFZLENBQUMvRSxJQUFJO2dCQUFFLE9BQU87WUFBTTtZQUMxQyxPQUFPLElBQUksQ0FBQytCLEdBQUcsQ0FBQyxTQUFTZCxDQUFDLEVBQUVYLEVBQUMsRUFBRUUsRUFBQztnQkFBSSxPQUFPUyxJQUFJakIsQ0FBQyxDQUFDTSxLQUFJLEVBQUUsQ0FBQ0UsS0FBSSxFQUFFO1lBQUU7UUFDcEU7SUFDRztJQUVBLGlFQUFpRTtJQUNqRXVELFVBQVUsU0FBU1MsTUFBTTtRQUM1QixJQUFHLE9BQU9BLFVBQVcsVUFBVTtZQUMzQixPQUFPLElBQUksQ0FBQ3pDLEdBQUcsQ0FBQyxTQUFTZCxDQUFDLEVBQUVYLEVBQUMsRUFBRUUsRUFBQztnQkFBSSxPQUFPUyxJQUFJdUQ7WUFBTTtRQUN6RCxPQUFPO1lBQ0gsSUFBSXhFLElBQUl3RSxPQUFPbkUsUUFBUSxJQUFJbUU7WUFDM0IsSUFBSSxPQUFPeEUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUssYUFBYTtnQkFBRUEsSUFBSXNCLE9BQU9tRCxNQUFNLENBQUN6RSxHQUFHSyxRQUFRO1lBQUU7WUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQzBFLFlBQVksQ0FBQy9FLElBQUk7Z0JBQUUsT0FBTztZQUFNO1lBQzFDLE9BQU8sSUFBSSxDQUFDK0IsR0FBRyxDQUFDLFNBQVNkLENBQUMsRUFBRVgsRUFBQyxFQUFFRSxFQUFDO2dCQUFJLE9BQU9TLElBQUlqQixDQUFDLENBQUNNLEtBQUksRUFBRSxDQUFDRSxLQUFJLEVBQUU7WUFBRTtRQUNwRTtJQUNHO0lBRUEsc0VBQXNFO0lBQ3RFd0UscUJBQXFCLFNBQVNSLE1BQU07UUFDdkMsSUFBSXhFLElBQUl3RSxPQUFPbkUsUUFBUSxJQUFJbUU7UUFDM0IsSUFBSSxPQUFPeEUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUssYUFBYTtZQUFFQSxJQUFJc0IsT0FBT21ELE1BQU0sQ0FBQ3pFLEdBQUdLLFFBQVE7UUFBRTtRQUNyRSx3Q0FBd0M7UUFDeEMsT0FBUSxJQUFJLENBQUNBLFFBQVEsQ0FBQyxFQUFFLENBQUNNLE1BQU0sSUFBSVgsRUFBRVcsTUFBTTtJQUN4QztJQUVBLG9HQUFvRztJQUNwRyx3RkFBd0Y7SUFDeEYsNkVBQTZFO0lBQzdFLHdCQUF3QjtJQUN4QnNFLE9BQU8sU0FBU1QsTUFBTSxFQUFFVSxFQUFFO1FBQzdCLElBQUksQ0FBQ1YsT0FBT25FLFFBQVEsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQzBCLEdBQUcsQ0FBQyxTQUFTZCxDQUFDO2dCQUFJLE9BQU9pRSxHQUFHakUsR0FBR3VEO1lBQVM7UUFDeEQ7UUFFQSxJQUFJVyxlQUFlWCxPQUFPWSxPQUFPLEdBQUcsT0FBTztRQUMzQyxJQUFJcEYsSUFBSXdFLE9BQU9uRSxRQUFRLElBQUltRTtRQUMzQixJQUFJLE9BQU94RSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSyxhQUNuQkEsSUFBSXNCLE9BQU9tRCxNQUFNLENBQUN6RSxHQUFHSyxRQUFRO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMyRSxtQkFBbUIsQ0FBQ2hGLElBQzFCLE9BQU87UUFDWCxJQUFJSSxJQUFJLElBQUksQ0FBQ0MsUUFBUSxFQUFFZ0YsU0FBU0MsU0FBU2pGLFdBQVcsRUFBRSxFQUMvQ2tGLEtBQUt0RixJQUFJRyxFQUFFTyxNQUFNLEVBQUVULElBQUlGLENBQUMsQ0FBQyxFQUFFLENBQUNXLE1BQU0sRUFBRTZFLElBQUlwRixDQUFDLENBQUMsRUFBRSxDQUFDTyxNQUFNLEVBQUVMLEtBQUlMLEdBQUdPLElBQUdMO1FBRXRFLE1BQU9HLEtBQUs7WUFDRGdGLFVBQVUsRUFBRTtZQUNaRCxVQUFVakYsQ0FBQyxDQUFDRSxHQUFFO1lBQ2RFLEtBQUlOO1lBRUosTUFBT00sS0FBSztnQkFDdEIrRSxNQUFNO2dCQUNOcEYsSUFBSXFGO2dCQUVKLE1BQU9yRixJQUFLO29CQUNNb0YsT0FBT0wsR0FBR0csT0FBTyxDQUFDbEYsRUFBRSxFQUFFSCxDQUFDLENBQUNHLEVBQUUsQ0FBQ0ssR0FBRTtnQkFDL0M7Z0JBRUE4RSxPQUFPLENBQUM5RSxHQUFFLEdBQUcrRTtZQUNIO1lBRUFsRixRQUFRLENBQUNDLEdBQUUsR0FBR2dGO1FBQ3pCO1FBRUEsSUFBSXRGLElBQUlzQixPQUFPbUQsTUFBTSxDQUFDcEU7UUFDdEIsT0FBTzhFLGVBQWVuRixFQUFFd0QsR0FBRyxDQUFDLEtBQUt4RDtJQUM5QjtJQUVBLDRFQUE0RTtJQUM1RSxvRkFBb0Y7SUFDcEYsNkVBQTZFO0lBQzdFLHdCQUF3QjtJQUN4QmdFLEtBQUssU0FBU1EsTUFBTTtRQUN2QixPQUFPLElBQUksQ0FBQ1MsS0FBSyxDQUFDVCxRQUFRLFNBQVN2RCxDQUFDLEVBQUV3RSxDQUFDO1lBQUksT0FBT3hFLElBQUl3RTtRQUFDO0lBQ3BEO0lBRUEsK0VBQStFO0lBQy9FLHNGQUFzRjtJQUN0Riw2RUFBNkU7SUFDN0Usd0JBQXdCO0lBQ3hCQyxVQUFVLFNBQVNsQixNQUFNO1FBQzVCLE9BQU8sSUFBSSxDQUFDUyxLQUFLLENBQUNULFFBQVEsU0FBU3ZELENBQUMsRUFBRXdFLENBQUM7WUFBSSxPQUFPeEUsSUFBSXdFO1FBQUM7SUFDcEQ7SUFFQXhFLEdBQUcsU0FBU3VELE1BQU07UUFBSSxPQUFPLElBQUksQ0FBQ2tCLFFBQVEsQ0FBQ2xCO0lBQVM7SUFFcERtQixpQkFBaUIsU0FBU3RDLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUN0QixHQUFHLENBQUMsU0FBUzVCLENBQUMsRUFBRUcsRUFBQyxFQUFFRSxFQUFDO1lBQzVCLE9BQU82QyxFQUFFakQsQ0FBQyxDQUFDRSxJQUFHRSxNQUFLTDtRQUN2QjtJQUNKO0lBRUFvRixLQUFLO1FBQ0QsSUFBSUEsTUFBTTtRQUVWLElBQUksQ0FBQ3hELEdBQUcsQ0FBQyxTQUFTZCxDQUFDO1lBQUlzRSxPQUFPdEU7UUFBRTtRQUVoQyxPQUFPc0U7SUFDWDtJQUVBLDJDQUEyQztJQUMzQ0ssTUFBTTtRQUNKLElBQUlDLE1BQU0sSUFBSSxDQUFDdkIsVUFBVTtRQUN6QixJQUFJd0IsSUFBSSxFQUFFO1FBQ1YsSUFBSyxJQUFJeEYsS0FBSSxHQUFHQSxNQUFLdUYsSUFBSWhFLElBQUksRUFBRXZCLEtBQUs7WUFDbEN3RixFQUFFckYsSUFBSSxDQUFDLElBQUksQ0FBQytDLEdBQUcsQ0FBQ2xELElBQUdpRixHQUFHLEtBQUtNLElBQUkzRSxJQUFJO1FBQ3JDO1FBQ0EsT0FBT2lDLEdBQUcyQztJQUNaO0lBRUFDLFFBQVEsU0FBUzdGLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUNzRCxHQUFHLENBQUN0RDtJQUNiO0lBRUE4RixLQUFLO1FBQ1IsT0FBTyxJQUFJLENBQUNqRSxHQUFHLENBQUMsU0FBU2QsQ0FBQztZQUFJLE9BQU9nQyxLQUFLK0MsR0FBRyxDQUFDL0U7UUFBSTtJQUMvQztJQUVBLDRDQUE0QztJQUM1Qyx3REFBd0Q7SUFDeEQsNkZBQTZGO0lBQzdGLDZEQUE2RDtJQUM3RGdGLE9BQU8sU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztRQUM3QixJQUFJaEcsV0FBVyxFQUFFLEVBQUVpRyxLQUFLRixHQUFHOUYsSUFBR29FLElBQUlsRTtRQUNsQyxJQUFJVSxPQUFPLElBQUksQ0FBQ2IsUUFBUSxDQUFDTSxNQUFNLEVBQUVrQixPQUFPLElBQUksQ0FBQ3hCLFFBQVEsQ0FBQyxFQUFFLENBQUNNLE1BQU07UUFDL0QsTUFBTzJGLEtBQU07WUFDVGhHLEtBQUk4RixJQUFJRSxLQUFLO1lBQ2JqRyxRQUFRLENBQUNDLEdBQUUsR0FBRyxFQUFFO1lBQ2hCb0UsS0FBSzJCO1lBQ0wsTUFBTzNCLEtBQU07Z0JBQ2hCbEUsS0FBSTZGLElBQUkzQixLQUFLO2dCQUNickUsUUFBUSxDQUFDQyxHQUFFLENBQUNFLEdBQUUsR0FBRyxJQUFJLENBQUNILFFBQVEsQ0FBQyxDQUFDNkYsSUFBSTVGLEtBQUksS0FBS1ksS0FBSyxDQUFDLENBQUNpRixJQUFJM0YsS0FBSSxLQUFLcUIsS0FBSztZQUNuRTtRQUNKO1FBQ0EsT0FBT1AsT0FBT21ELE1BQU0sQ0FBQ3BFO0lBQ2xCO0lBRUEsc0NBQXNDO0lBQ3RDVyxXQUFXO1FBQ1gsSUFBSUUsT0FBTyxJQUFJLENBQUNiLFFBQVEsQ0FBQ00sTUFBTSxFQUFFTCxJQUFHdUIsT0FBTyxJQUFJLENBQUN4QixRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLEVBQUVIO1FBQ3ZFLElBQUlILFdBQVcsRUFBRSxFQUFFQyxLQUFJdUI7UUFDdkIsTUFBT3ZCLEtBQUs7WUFDUkUsS0FBSVU7WUFDSmIsUUFBUSxDQUFDQyxHQUFFLEdBQUcsRUFBRTtZQUNoQixNQUFPRSxLQUFLO2dCQUNmSCxRQUFRLENBQUNDLEdBQUUsQ0FBQ0UsR0FBRSxHQUFHLElBQUksQ0FBQ0gsUUFBUSxDQUFDRyxHQUFFLENBQUNGLEdBQUU7WUFDakM7UUFDSjtRQUNBLE9BQU9nQixPQUFPbUQsTUFBTSxDQUFDcEU7SUFDbEI7SUFFQSx3Q0FBd0M7SUFDeENrRyxVQUFVO1FBQ2IsT0FBUSxJQUFJLENBQUNsRyxRQUFRLENBQUNNLE1BQU0sSUFBSSxJQUFJLENBQUNOLFFBQVEsQ0FBQyxFQUFFLENBQUNNLE1BQU07SUFDcEQ7SUFFQSx1REFBdUQ7SUFDdkQ2RixLQUFLO1FBQ1IsSUFBSXZHLElBQUksR0FBR0ssS0FBSSxJQUFJLENBQUNELFFBQVEsQ0FBQ00sTUFBTSxFQUFFK0QsS0FBSyxJQUFJLENBQUNyRSxRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLEVBQUVIO1FBQ25FLE1BQU9GLEtBQUs7WUFDUkUsS0FBSWtFO1lBQ0osTUFBT2xFLEtBQUs7Z0JBQ2YsSUFBSXlDLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUM3QyxRQUFRLENBQUNDLEdBQUUsQ0FBQ0UsR0FBRSxJQUFJeUMsS0FBS0MsR0FBRyxDQUFDakQsSUFBSTtvQkFBRUEsSUFBSSxJQUFJLENBQUNJLFFBQVEsQ0FBQ0MsR0FBRSxDQUFDRSxHQUFFO2dCQUFFO1lBQ3pFO1FBQ0o7UUFDQSxPQUFPUDtJQUNKO0lBRUEsd0ZBQXdGO0lBQ3hGd0csU0FBUyxTQUFTeEYsQ0FBQztRQUN0QixJQUFJeUYsUUFBUSxNQUFNSixLQUFLLElBQUksQ0FBQ2pHLFFBQVEsQ0FBQ00sTUFBTSxFQUFFTCxJQUFHb0UsS0FBSyxJQUFJLENBQUNyRSxRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLEVBQUVIO1FBQzlFLElBQUtGLEtBQUksR0FBR0EsS0FBSWdHLElBQUloRyxLQUFLO1lBQ3JCLElBQUtFLEtBQUksR0FBR0EsS0FBSWtFLElBQUlsRSxLQUFLO2dCQUM1QixJQUFJLElBQUksQ0FBQ0gsUUFBUSxDQUFDQyxHQUFFLENBQUNFLEdBQUUsSUFBSVMsR0FBRztvQkFBRSxPQUFPO3dCQUFDWCxHQUFHQSxLQUFJO3dCQUFHRSxHQUFHQSxLQUFJO29CQUFDO2dCQUFHO1lBQzFEO1FBQ0o7UUFDQSxPQUFPO0lBQ0o7SUFFQSxzRUFBc0U7SUFDdEUsMkJBQTJCO0lBQzNCcUMsVUFBVTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMwRCxRQUFRLEVBQUU7WUFBRSxPQUFPO1FBQU07UUFDbkMsSUFBSXpCLE1BQU0sRUFBRSxFQUFFNUUsSUFBSSxJQUFJLENBQUNHLFFBQVEsQ0FBQ00sTUFBTTtRQUN0QyxJQUFLLElBQUlMLEtBQUksR0FBR0EsS0FBSUosR0FBR0ksS0FBSztZQUN4QndFLElBQUlyRSxJQUFJLENBQUMsSUFBSSxDQUFDSixRQUFRLENBQUNDLEdBQUUsQ0FBQ0EsR0FBRTtRQUNoQztRQUNBLE9BQU82QyxHQUFHMkI7SUFDUDtJQUVBLG9FQUFvRTtJQUNwRSxxRUFBcUU7SUFDckUsMkRBQTJEO0lBQzNENkIsbUJBQW1CO1FBQ3RCLElBQUkzRyxJQUFJLElBQUksQ0FBQzRFLEdBQUcsSUFBSUU7UUFDcEIsSUFBSTVFLElBQUksSUFBSSxDQUFDRyxRQUFRLENBQUNNLE1BQU0sRUFBRUwsSUFBR0UsSUFBR29HLEtBQUssSUFBSSxDQUFDdkcsUUFBUSxDQUFDLEVBQUUsQ0FBQ00sTUFBTSxFQUFFa0c7UUFDbEUsSUFBS3ZHLEtBQUksR0FBR0EsS0FBSUosR0FBR0ksS0FBSztZQUNwQixJQUFJTixFQUFFSyxRQUFRLENBQUNDLEdBQUUsQ0FBQ0EsR0FBRSxJQUFJLEdBQUc7Z0JBQzlCLElBQUtFLEtBQUlGLEtBQUksR0FBR0UsS0FBSU4sR0FBR00sS0FBSztvQkFDeEIsSUFBSVIsRUFBRUssUUFBUSxDQUFDRyxHQUFFLENBQUNGLEdBQUUsSUFBSSxHQUFHO3dCQUM5QndFLE1BQU0sRUFBRTt3QkFDUixJQUFLK0IsSUFBSSxHQUFHQSxJQUFJRCxJQUFJQyxJQUFLOzRCQUFFL0IsSUFBSXJFLElBQUksQ0FBQ1QsRUFBRUssUUFBUSxDQUFDQyxHQUFFLENBQUN1RyxFQUFFLEdBQUc3RyxFQUFFSyxRQUFRLENBQUNHLEdBQUUsQ0FBQ3FHLEVBQUU7d0JBQUc7d0JBQzFFN0csRUFBRUssUUFBUSxDQUFDQyxHQUFFLEdBQUd3RTt3QkFDaEI7b0JBQ0c7Z0JBQ0o7WUFDRztZQUNBLElBQUk5RSxFQUFFSyxRQUFRLENBQUNDLEdBQUUsQ0FBQ0EsR0FBRSxJQUFJLEdBQUc7Z0JBQzlCLElBQUtFLEtBQUlGLEtBQUksR0FBR0UsS0FBSU4sR0FBR00sS0FBSztvQkFDeEIsSUFBSXNHLGFBQWE5RyxFQUFFSyxRQUFRLENBQUNHLEdBQUUsQ0FBQ0YsR0FBRSxHQUFHTixFQUFFSyxRQUFRLENBQUNDLEdBQUUsQ0FBQ0EsR0FBRTtvQkFDcER3RSxNQUFNLEVBQUU7b0JBQ1IsSUFBSytCLElBQUksR0FBR0EsSUFBSUQsSUFBSUMsSUFBSzt3QkFDNUIsNkRBQTZEO3dCQUM3RCxrRUFBa0U7d0JBQ2xFLG9FQUFvRTt3QkFDcEUsaURBQWlEO3dCQUNqRC9CLElBQUlyRSxJQUFJLENBQUNvRyxLQUFLdkcsS0FBSSxJQUFJTixFQUFFSyxRQUFRLENBQUNHLEdBQUUsQ0FBQ3FHLEVBQUUsR0FBRzdHLEVBQUVLLFFBQVEsQ0FBQ0MsR0FBRSxDQUFDdUcsRUFBRSxHQUFHQztvQkFDekQ7b0JBQ0E5RyxFQUFFSyxRQUFRLENBQUNHLEdBQUUsR0FBR3NFO2dCQUNwQjtZQUNHO1FBQ0o7UUFDQSxPQUFPOUU7SUFDSjtJQUVBK0csbUJBQW1CO1FBQWEsT0FBTyxJQUFJLENBQUNKLGlCQUFpQjtJQUFJO0lBRWpFLDhDQUE4QztJQUM5Q0ssYUFBYTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDVCxRQUFRLElBQUk7WUFBRSxPQUFPO1FBQU07UUFDckMsSUFBSSxJQUFJLENBQUMxRSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUNYLElBQUksSUFBSSxHQUFHO1lBQUUsT0FBTyxJQUFJLENBQUNYLEdBQUcsQ0FBQztRQUFJO1FBQzVELElBQUksSUFBSSxDQUFDc0IsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDWCxJQUFJLElBQUksR0FBRztZQUFFLE9BQU87UUFBRztRQUNsRCxJQUFJbEIsSUFBSSxJQUFJLENBQUMyRyxpQkFBaUI7UUFDOUIsSUFBSU0sTUFBTWpILEVBQUVLLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFSCxJQUFJRixFQUFFSyxRQUFRLENBQUNNLE1BQU07UUFDakQsSUFBSyxJQUFJTCxLQUFJLEdBQUdBLEtBQUlKLEdBQUdJLEtBQUs7WUFDeEIyRyxNQUFNQSxNQUFNakgsRUFBRUssUUFBUSxDQUFDQyxHQUFFLENBQUNBLEdBQUU7UUFDaEM7UUFDQSxPQUFPMkc7SUFDSjtJQUNBQSxLQUFLO1FBQWEsT0FBTyxJQUFJLENBQUNELFdBQVc7SUFBSTtJQUU3QywwQ0FBMEM7SUFDMUNFLFlBQVk7UUFDZixPQUFRLElBQUksQ0FBQ1gsUUFBUSxNQUFNLElBQUksQ0FBQ1MsV0FBVyxPQUFPO0lBQy9DO0lBRUEsd0NBQXdDO0lBQ3hDRyxPQUFPO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQ1osUUFBUSxJQUFJO1lBQUUsT0FBTztRQUFNO1FBQ3JDLElBQUlhLEtBQUssSUFBSSxDQUFDL0csUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVILElBQUksSUFBSSxDQUFDRyxRQUFRLENBQUNNLE1BQU07UUFDdEQsSUFBSyxJQUFJTCxLQUFJLEdBQUdBLEtBQUlKLEdBQUdJLEtBQUs7WUFDeEI4RyxNQUFNLElBQUksQ0FBQy9HLFFBQVEsQ0FBQ0MsR0FBRSxDQUFDQSxHQUFFO1FBQzdCO1FBQ0EsT0FBTzhHO0lBQ0o7SUFFQUEsSUFBSTtRQUFhLE9BQU8sSUFBSSxDQUFDRCxLQUFLO0lBQUk7SUFFdEMsaUNBQWlDO0lBQ2pDRSxNQUFNO1FBQ1QsSUFBSXJILElBQUksSUFBSSxDQUFDMkcsaUJBQWlCLElBQUlVLE9BQU87UUFDekMsSUFBSS9HLEtBQUksSUFBSSxDQUFDRCxRQUFRLENBQUNNLE1BQU0sRUFBRStELEtBQUssSUFBSSxDQUFDckUsUUFBUSxDQUFDLEVBQUUsQ0FBQ00sTUFBTSxFQUFFSDtRQUM1RCxNQUFPRixLQUFLO1lBQ1JFLEtBQUlrRTtZQUNKLE1BQU9sRSxLQUFLO2dCQUNmLElBQUl5QyxLQUFLQyxHQUFHLENBQUNsRCxFQUFFSyxRQUFRLENBQUNDLEdBQUUsQ0FBQ0UsR0FBRSxJQUFJWCxVQUFVOEUsU0FBUyxFQUFFO29CQUFFMEM7b0JBQVE7Z0JBQU87WUFDcEU7UUFDSjtRQUNBLE9BQU9BO0lBQ0o7SUFFQUMsSUFBSTtRQUFhLE9BQU8sSUFBSSxDQUFDRCxJQUFJO0lBQUk7SUFFckMsMEZBQTBGO0lBQzFGRSxTQUFTLFNBQVMvQyxNQUFNO1FBQzNCLElBQUl4RSxJQUFJd0UsT0FBT25FLFFBQVEsSUFBSW1FO1FBQzNCLElBQUksT0FBT3hFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFLLGFBQWE7WUFBRUEsSUFBSXNCLE9BQU9tRCxNQUFNLENBQUN6RSxHQUFHSyxRQUFRO1FBQUU7UUFDckUsSUFBSW1ILElBQUksSUFBSSxDQUFDNUMsR0FBRyxJQUFJL0MsT0FBTzJGLEVBQUVuSCxRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNO1FBQy9DLElBQUlMLEtBQUlrSCxFQUFFbkgsUUFBUSxDQUFDTSxNQUFNLEVBQUUrRCxLQUFLMUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQ1csTUFBTSxFQUFFSDtRQUM3QyxJQUFJRixNQUFLTixFQUFFVyxNQUFNLEVBQUU7WUFBRSxPQUFPO1FBQU07UUFDbEMsTUFBT0wsS0FBSztZQUNSRSxLQUFJa0U7WUFDSixNQUFPbEUsS0FBSztnQkFDZmdILEVBQUVuSCxRQUFRLENBQUNDLEdBQUUsQ0FBQ3VCLE9BQU9yQixHQUFFLEdBQUdSLENBQUMsQ0FBQ00sR0FBRSxDQUFDRSxHQUFFO1lBQzlCO1FBQ0o7UUFDQSxPQUFPZ0g7SUFDSjtJQUVBLHlEQUF5RDtJQUN6REMsU0FBUztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUNsQixRQUFRLE1BQU0sSUFBSSxDQUFDVyxVQUFVLElBQUk7WUFBRSxPQUFPO1FBQU07UUFDMUQsSUFBSWhILElBQUksSUFBSSxDQUFDRyxRQUFRLENBQUNNLE1BQU0sRUFBRUwsS0FBSUosR0FBR007UUFDckMsSUFBSVIsSUFBSSxJQUFJLENBQUN1SCxPQUFPLENBQUNqRyxPQUFPVyxDQUFDLENBQUMvQixJQUFJeUcsaUJBQWlCO1FBQ25ELElBQUlDLEtBQUs1RyxFQUFFSyxRQUFRLENBQUMsRUFBRSxDQUFDTSxNQUFNLEVBQUVrRyxHQUFHL0IsS0FBSzRDO1FBQ3ZDLElBQUlDLG1CQUFtQixFQUFFLEVBQUVDO1FBQzNCLG1FQUFtRTtRQUNuRSx3Q0FBd0M7UUFDeEMsTUFBT3RILEtBQUs7WUFDUiwwQ0FBMEM7WUFDMUN3RSxNQUFNLEVBQUU7WUFDUjZDLGdCQUFnQixDQUFDckgsR0FBRSxHQUFHLEVBQUU7WUFDeEJvSCxVQUFVMUgsRUFBRUssUUFBUSxDQUFDQyxHQUFFLENBQUNBLEdBQUU7WUFDMUIsSUFBS3VHLElBQUksR0FBR0EsSUFBSUQsSUFBSUMsSUFBSztnQkFDdEJlLGNBQWM1SCxFQUFFSyxRQUFRLENBQUNDLEdBQUUsQ0FBQ3VHLEVBQUUsR0FBR2E7Z0JBQ3ZDNUMsSUFBSXJFLElBQUksQ0FBQ21IO2dCQUNULHNFQUFzRTtnQkFDdEUsbUVBQW1FO2dCQUNuRSxJQUFJZixLQUFLM0csR0FBRztvQkFBRXlILGdCQUFnQixDQUFDckgsR0FBRSxDQUFDRyxJQUFJLENBQUNtSDtnQkFBYztZQUNsRDtZQUNBNUgsRUFBRUssUUFBUSxDQUFDQyxHQUFFLEdBQUd3RTtZQUNoQixpREFBaUQ7WUFDakQsaURBQWlEO1lBQ2pEdEUsS0FBSUY7WUFDSixNQUFPRSxLQUFLO2dCQUNmc0UsTUFBTSxFQUFFO2dCQUNSLElBQUsrQixJQUFJLEdBQUdBLElBQUlELElBQUlDLElBQUs7b0JBQ3JCL0IsSUFBSXJFLElBQUksQ0FBQ1QsRUFBRUssUUFBUSxDQUFDRyxHQUFFLENBQUNxRyxFQUFFLEdBQUc3RyxFQUFFSyxRQUFRLENBQUNDLEdBQUUsQ0FBQ3VHLEVBQUUsR0FBRzdHLEVBQUVLLFFBQVEsQ0FBQ0csR0FBRSxDQUFDRixHQUFFO2dCQUNuRTtnQkFDQU4sRUFBRUssUUFBUSxDQUFDRyxHQUFFLEdBQUdzRTtZQUNiO1FBQ0o7UUFDQSxPQUFPeEQsT0FBT21ELE1BQU0sQ0FBQ2tEO0lBQ2xCO0lBRUFFLEtBQUs7UUFBYSxPQUFPLElBQUksQ0FBQ0osT0FBTztJQUFJO0lBRXpDLGtEQUFrRDtJQUNsREssT0FBTztRQUNWLE9BQU8sSUFBSSxDQUFDL0YsR0FBRyxDQUFDLFNBQVNkLENBQUM7WUFBSSxPQUFPZ0MsS0FBSzZFLEtBQUssQ0FBQzdHO1FBQUk7SUFDakQ7SUFFQSw0RUFBNEU7SUFDNUUsa0RBQWtEO0lBQ2xEOEcsUUFBUSxTQUFTOUcsQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQ2MsR0FBRyxDQUFDLFNBQVM4RSxDQUFDO1lBQ3RCLE9BQU8sS0FBTTNELEdBQUcsQ0FBQzJELElBQUk1RixNQUFNcEIsVUFBVThFLFNBQVMsR0FBSTFELElBQUk0RjtRQUMxRDtJQUNHO0lBRUEsZ0RBQWdEO0lBQ2hEbUIsU0FBUztRQUNaLElBQUlDLGNBQWMsRUFBRTtRQUNwQixJQUFJL0gsSUFBSSxJQUFJLENBQUNHLFFBQVEsQ0FBQ00sTUFBTTtRQUM1QixJQUFLLElBQUlMLEtBQUksR0FBR0EsS0FBSUosR0FBR0ksS0FBSztZQUN4QjJILFlBQVl4SCxJQUFJLENBQUMwQyxHQUFHLElBQUksQ0FBQzlDLFFBQVEsQ0FBQ0MsR0FBRSxFQUFFMEgsT0FBTztRQUNqRDtRQUNBLE9BQU9DLFlBQVlDLElBQUksQ0FBQztJQUNyQjtJQUVBLCtDQUErQztJQUMvQ0MsU0FBUztRQUNSLElBQUlGLGNBQWMsRUFBRTtRQUNwQixJQUFJL0gsSUFBSSxJQUFJLENBQUNHLFFBQVEsQ0FBQ00sTUFBTTtRQUM1QixJQUFLLElBQUlMLEtBQUksR0FBR0EsS0FBSUosR0FBR0ksS0FBSztZQUN6QjJILFlBQVl4SCxJQUFJLENBQUMsSUFBSSxDQUFDSixRQUFRLENBQUNDLEdBQUU7UUFDcEM7UUFDQyxPQUFPMkg7SUFDVDtJQUdBLGtFQUFrRTtJQUNsRSw2REFBNkQ7SUFDN0RHLGFBQWEsU0FBU3RELEdBQUc7UUFDNUIsSUFBSXhFLElBQUdFLElBQUdILFdBQVd5RSxJQUFJekUsUUFBUSxJQUFJeUU7UUFDckMsSUFBSSxPQUFPekUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUssYUFBYTtZQUN2Q0MsS0FBSUQsU0FBU00sTUFBTTtZQUNuQixJQUFJLENBQUNOLFFBQVEsR0FBRyxFQUFFO1lBQ2xCLE1BQU9DLEtBQUs7Z0JBQ2ZFLEtBQUlILFFBQVEsQ0FBQ0MsR0FBRSxDQUFDSyxNQUFNO2dCQUN0QixJQUFJLENBQUNOLFFBQVEsQ0FBQ0MsR0FBRSxHQUFHLEVBQUU7Z0JBQ3JCLE1BQU9FLEtBQUs7b0JBQ1IsSUFBSSxDQUFDSCxRQUFRLENBQUNDLEdBQUUsQ0FBQ0UsR0FBRSxHQUFHSCxRQUFRLENBQUNDLEdBQUUsQ0FBQ0UsR0FBRTtnQkFDeEM7WUFDRztZQUNBLE9BQU8sSUFBSTtRQUNmO1FBQ0EsSUFBSU4sSUFBSUcsU0FBU00sTUFBTTtRQUN2QixJQUFJLENBQUNOLFFBQVEsR0FBRyxFQUFFO1FBQ2xCLElBQUtDLEtBQUksR0FBR0EsS0FBSUosR0FBR0ksS0FBSztZQUNwQixJQUFJLENBQUNELFFBQVEsQ0FBQ0ksSUFBSSxDQUFDO2dCQUFDSixRQUFRLENBQUNDLEdBQUU7YUFBQztRQUNwQztRQUNBLE9BQU8sSUFBSTtJQUNSO0lBRUErSCxrQkFBa0I7UUFDckIsSUFBSUMsUUFBUSxFQUFFO1FBRWQsSUFBSSxJQUFJaEksS0FBSSxHQUFHQSxNQUFLLElBQUksQ0FBQ1ksSUFBSSxJQUFJWixLQUFLO1lBQ2xDLElBQUlrRyxNQUFNO1lBQ1YsSUFBSStCLFdBQVcsQ0FBQztZQUVoQixJQUFJLElBQUkvSCxLQUFJLEdBQUdBLE1BQUssSUFBSSxDQUFDcUIsSUFBSSxJQUFJckIsS0FBSztnQkFDekMsSUFBR2dHLFFBQVEsUUFBUSxJQUFJLENBQUNwRyxDQUFDLENBQUNFLElBQUdFLE1BQUtnRyxLQUFLO29CQUNuQ0EsTUFBTSxJQUFJLENBQUNwRyxDQUFDLENBQUNFLElBQUdFO29CQUNoQitILFdBQVcvSDtnQkFDZjtZQUNHO1lBRUE4SCxNQUFNN0gsSUFBSSxDQUFDOEg7UUFDZjtRQUVBLE9BQU9wRixHQUFHbUY7SUFDUDtJQUVBRSxZQUFZO1FBQ2YsSUFBSUYsUUFBUSxFQUFFO1FBRWQsSUFBSSxJQUFJaEksS0FBSSxHQUFHQSxNQUFLLElBQUksQ0FBQ1ksSUFBSSxJQUFJWixLQUFLO1lBQ2xDLElBQUlrRyxNQUFNO1lBRVYsSUFBSSxJQUFJaEcsS0FBSSxHQUFHQSxNQUFLLElBQUksQ0FBQ3FCLElBQUksSUFBSXJCLEtBQUs7Z0JBQ3pDLElBQUdnRyxRQUFRLFFBQVEsSUFBSSxDQUFDcEcsQ0FBQyxDQUFDRSxJQUFHRSxNQUFLZ0csS0FBSztvQkFDbkNBLE1BQU0sSUFBSSxDQUFDcEcsQ0FBQyxDQUFDRSxJQUFHRTtnQkFDcEI7WUFDRztZQUVBOEgsTUFBTTdILElBQUksQ0FBQytGO1FBQ2Y7UUFFQSxPQUFPckQsR0FBR21GO0lBQ1A7SUFFQUcsa0JBQWtCO1FBQ3JCLElBQUlDLE9BQU8sRUFBRTtRQUViLElBQUksSUFBSXBJLEtBQUksR0FBR0EsTUFBSyxJQUFJLENBQUNZLElBQUksSUFBSVosS0FBSztZQUNsQyxJQUFJZ0QsTUFBTTtZQUNWLElBQUlxRixXQUFXLENBQUM7WUFFaEIsSUFBSSxJQUFJbkksS0FBSSxHQUFHQSxNQUFLLElBQUksQ0FBQ3FCLElBQUksSUFBSXJCLEtBQUs7Z0JBQ3pDLElBQUc4QyxRQUFRLFFBQVEsSUFBSSxDQUFDbEQsQ0FBQyxDQUFDRSxJQUFHRSxNQUFLOEMsS0FBSztvQkFDbkNBLE1BQU0sSUFBSSxDQUFDbEQsQ0FBQyxDQUFDRSxJQUFHRTtvQkFDaEJtSSxXQUFXbkk7Z0JBQ2Y7WUFDRztZQUVBa0ksS0FBS2pJLElBQUksQ0FBQ2tJO1FBQ2Q7UUFFQSxPQUFPeEYsR0FBR3VGO0lBQ1A7SUFFQUUsWUFBWTtRQUNmLElBQUlGLE9BQU8sRUFBRTtRQUViLElBQUksSUFBSXBJLEtBQUksR0FBR0EsTUFBSyxJQUFJLENBQUNZLElBQUksSUFBSVosS0FBSztZQUNsQyxJQUFJZ0QsTUFBTTtZQUVWLElBQUksSUFBSTlDLEtBQUksR0FBR0EsTUFBSyxJQUFJLENBQUNxQixJQUFJLElBQUlyQixLQUFLO2dCQUN6QyxJQUFHOEMsUUFBUSxRQUFRLElBQUksQ0FBQ2xELENBQUMsQ0FBQ0UsSUFBR0UsTUFBSzhDLEtBQUs7b0JBQ25DQSxNQUFNLElBQUksQ0FBQ2xELENBQUMsQ0FBQ0UsSUFBR0U7Z0JBQ3BCO1lBQ0c7WUFFQWtJLEtBQUtqSSxJQUFJLENBQUM2QztRQUNkO1FBRUEsT0FBT0gsR0FBR3VGO0lBQ1A7QUFDSjtBQUVBLHVCQUF1QjtBQUN2QnBILE9BQU9tRCxNQUFNLEdBQUcsU0FBU3BFLFFBQVE7SUFDN0IsSUFBSUwsSUFBSSxJQUFJc0I7SUFDWixPQUFPdEIsRUFBRW9JLFdBQVcsQ0FBQy9IO0FBQ3pCO0FBRUEsNEJBQTRCO0FBQzVCaUIsT0FBT1csQ0FBQyxHQUFHLFNBQVMvQixDQUFDO0lBQ2pCLElBQUk0RSxNQUFNLEVBQUUsRUFBRXhFLEtBQUlKLEdBQUdNO0lBQ3JCLE1BQU9GLEtBQUs7UUFDZkUsS0FBSU47UUFDSjRFLEdBQUcsQ0FBQ3hFLEdBQUUsR0FBRyxFQUFFO1FBQ1gsTUFBT0UsS0FBSztZQUNSc0UsR0FBRyxDQUFDeEUsR0FBRSxDQUFDRSxHQUFFLEdBQUcsTUFBTUEsS0FBSyxJQUFJO1FBQy9CO0lBQ0c7SUFDQSxPQUFPYyxPQUFPbUQsTUFBTSxDQUFDSztBQUN6QjtBQUVBeEQsT0FBT3VILFFBQVEsR0FBRyxTQUFTQyxJQUFJO0lBQzNCLElBQUlDLFdBQVdwSixHQUFHcUosWUFBWSxDQUFDRixNQUFNO0lBQ3JDLElBQUl0RSxTQUFTLEVBQUU7SUFFZixJQUFJeUUsV0FBV0YsU0FBU0csS0FBSyxDQUFDO0lBQzlCLElBQUssSUFBSTVJLEtBQUksR0FBR0EsS0FBSTJJLFNBQVN0SSxNQUFNLEVBQUVMLEtBQUs7UUFDN0MsSUFBSStGLElBQUk0QyxRQUFRLENBQUMzSSxHQUFFLENBQUM0SSxLQUFLLENBQUM7UUFDMUIsSUFBSTdDLEVBQUUxRixNQUFNLEdBQUcsR0FBRztZQUNkNkQsT0FBTy9ELElBQUksQ0FBQzRGO1FBQ2hCO0lBQ0c7SUFFQSxJQUFJckcsSUFBSSxJQUFJc0I7SUFDWixPQUFPdEIsRUFBRW9JLFdBQVcsQ0FBQzVEO0FBQ3pCO0FBRUEsdURBQXVEO0FBQ3ZEbEQsT0FBTzZILFFBQVEsR0FBRyxTQUFTOUksUUFBUTtJQUMvQixJQUFJQyxLQUFJRCxTQUFTTSxNQUFNO0lBQ3ZCLElBQUlYLElBQUlzQixPQUFPVyxDQUFDLENBQUMzQjtJQUNqQixNQUFPQSxLQUFLO1FBQ2ZOLEVBQUVLLFFBQVEsQ0FBQ0MsR0FBRSxDQUFDQSxHQUFFLEdBQUdELFFBQVEsQ0FBQ0MsR0FBRTtJQUMzQjtJQUNBLE9BQU9OO0FBQ1g7QUFFQSxpREFBaUQ7QUFDakQsOENBQThDO0FBQzlDc0IsT0FBTzhILFFBQVEsR0FBRyxTQUFTQyxLQUFLLEVBQUVuRCxDQUFDO0lBQy9CLElBQUksQ0FBQ0EsR0FBRztRQUNYLE9BQU81RSxPQUFPbUQsTUFBTSxDQUFDO1lBQ2pCO2dCQUFDeEIsS0FBS3FHLEdBQUcsQ0FBQ0Q7Z0JBQVEsQ0FBQ3BHLEtBQUtzRyxHQUFHLENBQUNGO2FBQU87WUFDbkM7Z0JBQUNwRyxLQUFLc0csR0FBRyxDQUFDRjtnQkFBUXBHLEtBQUtxRyxHQUFHLENBQUNEO2FBQU87U0FDckM7SUFDQTtJQUNFLElBQUlHLE9BQU90RCxFQUFFdEIsR0FBRztJQUNoQixJQUFJNEUsS0FBS25KLFFBQVEsQ0FBQ00sTUFBTSxJQUFJLEdBQUc7UUFBRSxPQUFPO0lBQU07SUFDOUMsSUFBSThJLE1BQU1ELEtBQUtwRSxPQUFPO0lBQ3RCLElBQUluRSxJQUFJdUksS0FBS25KLFFBQVEsQ0FBQyxFQUFFLEdBQUdvSixLQUFLaEUsSUFBSStELEtBQUtuSixRQUFRLENBQUMsRUFBRSxHQUFHb0osS0FBS0MsSUFBSUYsS0FBS25KLFFBQVEsQ0FBQyxFQUFFLEdBQUdvSjtJQUNuRixJQUFJMUcsSUFBSUUsS0FBS3NHLEdBQUcsQ0FBQ0YsUUFBUWpELElBQUluRCxLQUFLcUcsR0FBRyxDQUFDRCxRQUFRTSxJQUFJLElBQUl2RDtJQUN0RCxrRkFBa0Y7SUFDbEYscURBQXFEO0lBQ3JELDRDQUE0QztJQUM1QyxPQUFPOUUsT0FBT21ELE1BQU0sQ0FBQztRQUN4QjtZQUFDa0YsSUFBSTFJLElBQUlBLElBQUltRjtZQUFHdUQsSUFBSTFJLElBQUl3RSxJQUFJMUMsSUFBSTJHO1lBQUdDLElBQUkxSSxJQUFJeUksSUFBSTNHLElBQUkwQztTQUFFO1FBQ3JEO1lBQUNrRSxJQUFJMUksSUFBSXdFLElBQUkxQyxJQUFJMkc7WUFBR0MsSUFBSWxFLElBQUlBLElBQUlXO1lBQUd1RCxJQUFJbEUsSUFBSWlFLElBQUkzRyxJQUFJOUI7U0FBRTtRQUNyRDtZQUFDMEksSUFBSTFJLElBQUl5SSxJQUFJM0csSUFBSTBDO1lBQUdrRSxJQUFJbEUsSUFBSWlFLElBQUkzRyxJQUFJOUI7WUFBRzBJLElBQUlELElBQUlBLElBQUl0RDtTQUFFO0tBQ2pEO0FBQ0w7QUFFQSx5QkFBeUI7QUFDekI5RSxPQUFPc0ksU0FBUyxHQUFHLFNBQVNELENBQUM7SUFDekIsSUFBSXZELElBQUluRCxLQUFLcUcsR0FBRyxDQUFDSyxJQUFJNUcsSUFBSUUsS0FBS3NHLEdBQUcsQ0FBQ0k7SUFDbEMsT0FBT3JJLE9BQU9tRCxNQUFNLENBQUM7UUFDeEI7WUFBQztZQUFHO1lBQUc7U0FBRTtRQUNUO1lBQUM7WUFBRzJCO1lBQUcsQ0FBQ3JEO1NBQUU7UUFDVjtZQUFDO1lBQUdBO1lBQUdxRDtTQUFFO0tBQ0w7QUFDTDtBQUVBOUUsT0FBT3VJLFNBQVMsR0FBRyxTQUFTRixDQUFDO0lBQ3pCLElBQUl2RCxJQUFJbkQsS0FBS3FHLEdBQUcsQ0FBQ0ssSUFBSTVHLElBQUlFLEtBQUtzRyxHQUFHLENBQUNJO0lBQ2xDLE9BQU9ySSxPQUFPbUQsTUFBTSxDQUFDO1FBQ3hCO1lBQUMyQjtZQUFHO1lBQUdyRDtTQUFFO1FBQ1Q7WUFBQztZQUFHO1lBQUc7U0FBRTtRQUNUO1lBQUMsQ0FBQ0E7WUFBRztZQUFHcUQ7U0FBRTtLQUNOO0FBQ0w7QUFFQTlFLE9BQU93SSxTQUFTLEdBQUcsU0FBU0gsQ0FBQztJQUN6QixJQUFJdkQsSUFBSW5ELEtBQUtxRyxHQUFHLENBQUNLLElBQUk1RyxJQUFJRSxLQUFLc0csR0FBRyxDQUFDSTtJQUNsQyxPQUFPckksT0FBT21ELE1BQU0sQ0FBQztRQUN4QjtZQUFDMkI7WUFBRyxDQUFDckQ7WUFBRztTQUFFO1FBQ1Y7WUFBQ0E7WUFBR3FEO1lBQUc7U0FBRTtRQUNUO1lBQUM7WUFBRztZQUFHO1NBQUU7S0FDTDtBQUNMO0FBRUEscUNBQXFDO0FBQ3JDOUUsT0FBT3lJLE1BQU0sR0FBRyxTQUFTN0osQ0FBQyxFQUFFRCxDQUFDO0lBQ3pCLElBQUkrSixVQUFVckosTUFBTSxLQUFLLEdBQUdWLElBQUlDO0lBQ2hDLE9BQU9vQixPQUFPMkksSUFBSSxDQUFDL0osR0FBR0QsR0FBRzhCLEdBQUcsQ0FDL0I7UUFBYSxPQUFPa0IsS0FBS2lILE1BQU07SUFBSTtBQUVwQztBQUVBNUksT0FBTzZJLElBQUksR0FBRyxTQUFTakssQ0FBQyxFQUFFRCxDQUFDLEVBQUVvRCxDQUFDO0lBQzFCLElBQUkyRyxVQUFVckosTUFBTSxLQUFLLEdBQUc7UUFDL0IwQyxJQUFJcEQ7UUFDSkEsSUFBSUM7SUFDRDtJQUVBLElBQUk0RSxNQUFNLEVBQUUsRUFBRXhFLEtBQUlKLEdBQUdNO0lBRXJCLE1BQU9GLEtBQUs7UUFDZkUsS0FBSVA7UUFDSjZFLEdBQUcsQ0FBQ3hFLEdBQUUsR0FBRyxFQUFFO1FBRVgsTUFBT0UsS0FBSztZQUNSc0UsR0FBRyxDQUFDeEUsR0FBRSxDQUFDRSxHQUFFLEdBQUc2QztRQUNoQjtJQUNHO0lBRUEsT0FBTy9CLE9BQU9tRCxNQUFNLENBQUNLO0FBQ3pCO0FBRUEsMkJBQTJCO0FBQzNCeEQsT0FBTzJJLElBQUksR0FBRyxTQUFTL0osQ0FBQyxFQUFFRCxDQUFDO0lBQ3ZCLE9BQU9xQixPQUFPNkksSUFBSSxDQUFDakssR0FBR0QsR0FBRztBQUM3QjtBQUVBLDJCQUEyQjtBQUMzQnFCLE9BQU84SSxLQUFLLEdBQUcsU0FBU2xLLENBQUMsRUFBRUQsQ0FBQztJQUN4QixPQUFPcUIsT0FBTzJJLElBQUksQ0FBQy9KLEdBQUdEO0FBQzFCO0FBRUEsMEJBQTBCO0FBQzFCcUIsT0FBTytJLEdBQUcsR0FBRyxTQUFTbkssQ0FBQyxFQUFFRCxDQUFDO0lBQ3RCLE9BQU9xQixPQUFPNkksSUFBSSxDQUFDakssR0FBR0QsR0FBRztBQUM3QjtBQUVBLDBCQUEwQjtBQUMxQnFCLE9BQU9nSixJQUFJLEdBQUcsU0FBU3BLLENBQUMsRUFBRUQsQ0FBQztJQUN2QixPQUFPcUIsT0FBTytJLEdBQUcsQ0FBQ25LLEdBQUdEO0FBQ3pCO0FBRUFzSyxPQUFPQyxPQUFPLEdBQUdsSiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvc3lsdmVzdGVyL2xpYi9ub2RlLXN5bHZlc3Rlci9tYXRyaXguanM/YWM4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTEsIENocmlzIFVtYmVsLCBKYW1lcyBDb2dsYW5cbi8vIE1hdHJpeCBjbGFzcyAtIGRlcGVuZHMgb24gVmVjdG9yLlxuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIFN5bHZlc3RlciA9IHJlcXVpcmUoJy4vc3lsdmVzdGVyJyk7XG52YXIgVmVjdG9yID0gcmVxdWlyZSgnLi92ZWN0b3InKTtcblxuLy8gYXVnbWVudCBhIG1hdHJpeCBNIHdpdGggaWRlbnRpdHkgcm93cy9jb2xzXG5mdW5jdGlvbiBpZGVudFNpemUoTSwgbSwgbiwgaykge1xuICAgIHZhciBlID0gTS5lbGVtZW50cztcbiAgICB2YXIgaSA9IGsgLSAxO1xuXG4gICAgd2hpbGUoaS0tKSB7XG5cdHZhciByb3cgPSBbXTtcblx0XG5cdGZvcih2YXIgaiA9IDA7IGogPCBuOyBqKyspXG5cdCAgICByb3cucHVzaChqID09IGkgPyAxIDogMCk7XG5cdFxuICAgICAgICBlLnVuc2hpZnQocm93KTtcbiAgICB9XG4gICAgXG4gICAgZm9yKHZhciBpID0gayAtIDE7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgd2hpbGUoZVtpXS5sZW5ndGggPCBuKVxuICAgICAgICAgICAgZVtpXS51bnNoaWZ0KDApO1xuICAgIH1cblxuICAgIHJldHVybiAkTShlKTtcbn1cblxuZnVuY3Rpb24gcGNhKFgpIHtcbiAgICB2YXIgU2lnbWEgPSBYLnRyYW5zcG9zZSgpLngoWCkueCgxIC8gWC5yb3dzKCkpO1xuICAgIHZhciBzdmQgPSBTaWdtYS5zdmQoKTtcbiAgICByZXR1cm4ge1U6IHN2ZC5VLCBTOiBzdmQuU307XG59XG5cbmZ1bmN0aW9uIE1hdHJpeCgpIHt9XG5NYXRyaXgucHJvdG90eXBlID0ge1xuICAgIHBjYVByb2plY3Q6IGZ1bmN0aW9uKGssIFUpIHtcblx0dmFyIFUgPSBVIHx8IHBjYSh0aGlzKS5VO1xuXHR2YXIgVXJlZHVjZT0gVS5zbGljZSgxLCBVLnJvd3MoKSwgMSwgayk7XG5cdHJldHVybiB7WjogdGhpcy54KFVyZWR1Y2UpLCBVOiBVfTtcbiAgICB9LFxuXG4gICAgcGNhUmVjb3ZlcjogZnVuY3Rpb24oVSkge1xuXHR2YXIgayA9IHRoaXMuY29scygpO1xuXHR2YXIgVXJlZHVjZSA9IFUuc2xpY2UoMSwgVS5yb3dzKCksIDEsIGspO1xuXHRyZXR1cm4gdGhpcy54KFVyZWR1Y2UudHJhbnNwb3NlKCkpO1xuICAgIH0sICAgIFxuXG4gICAgdHJpdTogZnVuY3Rpb24oaykge1xuXHRpZighaylcblx0ICAgIGsgPSAwO1xuXHRcblx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHgsIGksIGopIHtcblx0ICAgIHJldHVybiBqIC0gaSA+PSBrID8geCA6IDA7XG5cdH0pO1xuICAgIH0sXG5cbiAgICBzdmQ6IGZ1bmN0aW9uKCkge1xuXHR2YXIgQSA9IHRoaXM7XG5cdHZhciBVID0gTWF0cml4LkkoQS5yb3dzKCkpO1xuXHR2YXIgUyA9IEEudHJhbnNwb3NlKCk7XG5cdHZhciBWID0gTWF0cml4LkkoQS5jb2xzKCkpO1xuXHR2YXIgZXJyID0gTnVtYmVyLk1BWF9WQUxVRTtcblx0dmFyIGkgPSAwO1xuXHR2YXIgbWF4TG9vcCA9IDEwMDtcblxuXHR3aGlsZShlcnIgPiAyLjI3MzdlLTEzICYmIGkgPCBtYXhMb29wKSB7XG5cdCAgICB2YXIgcXIgPSBTLnRyYW5zcG9zZSgpLnFyKCk7XG5cdCAgICBTID0gcXIuUjtcblx0ICAgIFUgPSBVLngocXIuUSk7XG5cdCAgICBxciA9IFMudHJhbnNwb3NlKCkucXIoKTtcblx0ICAgIFYgPSBWLngocXIuUSk7XG5cdCAgICBTID0gcXIuUjtcblxuXHQgICAgdmFyIGUgPSBTLnRyaXUoMSkudW5yb2xsKCkubm9ybSgpO1xuXHQgICAgdmFyIGYgPSBTLmRpYWdvbmFsKCkubm9ybSgpO1xuXG5cdCAgICBpZihmID09IDApXG5cdFx0ZiA9IDE7XG5cblx0ICAgIGVyciA9IGUgLyBmO1xuXG5cdCAgICBpKys7XG5cdH1cblxuXHR2YXIgc3MgPSBTLmRpYWdvbmFsKCk7XG5cdHZhciBzID0gW107XG5cblx0Zm9yKHZhciBpID0gMTsgaSA8PSBzcy5jb2xzKCk7IGkrKykge1xuXHQgICAgdmFyIHNzbiA9IHNzLmUoaSk7XG5cdCAgICBzLnB1c2goTWF0aC5hYnMoc3NuKSk7XG5cblx0ICAgIGlmKHNzbiA8IDApIHtcblx0XHRmb3IodmFyIGogPSAwOyBqIDwgVS5yb3dzKCk7IGorKykge1xuXHRcdCAgICBVLmVsZW1lbnRzW2pdW2kgLSAxXSA9IC0oVS5lbGVtZW50c1tqXVtpIC0gMV0pO1xuXHRcdH1cblx0ICAgIH1cblx0fVxuXG5cdHJldHVybiB7VTogVSwgUzogJFYocykudG9EaWFnb25hbE1hdHJpeCgpLCBWOiBWfTtcbiAgICB9LFxuXG4gICAgdW5yb2xsOiBmdW5jdGlvbigpIHtcblx0dmFyIHYgPSBbXTtcblx0XG5cdGZvcih2YXIgaSA9IDE7IGkgPD0gdGhpcy5jb2xzKCk7IGkrKykge1xuXHQgICAgZm9yKHZhciBqID0gMTsgaiA8PSB0aGlzLnJvd3MoKTsgaisrKSB7XG5cdFx0di5wdXNoKHRoaXMuZShqLCBpKSk7XG5cdCAgICB9XG5cdH1cblxuXHRyZXR1cm4gJFYodik7XG4gICAgfSxcblxuICAgIHFyOiBmdW5jdGlvbigpIHtcblx0dmFyIG0gPSB0aGlzLnJvd3MoKTtcblx0dmFyIG4gPSB0aGlzLmNvbHMoKTtcblx0dmFyIFEgPSBNYXRyaXguSShtKTtcblx0dmFyIEEgPSB0aGlzO1xuXHRcblx0Zm9yKHZhciBrID0gMTsgayA8IE1hdGgubWluKG0sIG4pOyBrKyspIHtcblx0ICAgIHZhciBhayA9IEEuc2xpY2UoaywgMCwgaywgaykuY29sKDEpO1xuXHQgICAgdmFyIG9uZVplcm8gPSBbMV07XG5cdCAgICBcblx0ICAgIHdoaWxlKG9uZVplcm8ubGVuZ3RoIDw9ICBtIC0gaylcblx0XHRvbmVaZXJvLnB1c2goMCk7XG5cdCAgICBcblx0ICAgIG9uZVplcm8gPSAkVihvbmVaZXJvKTtcblx0ICAgIHZhciB2ayA9IGFrLmFkZChvbmVaZXJvLngoYWsubm9ybSgpICogTWF0aC5zaWduKGFrLmUoMSkpKSk7XG5cdCAgICB2YXIgVmsgPSAkTSh2ayk7XG5cdCAgICB2YXIgSGsgPSBNYXRyaXguSShtIC0gayArIDEpLnN1YnRyYWN0KFZrLngoMikueChWay50cmFuc3Bvc2UoKSkuZGl2KFZrLnRyYW5zcG9zZSgpLngoVmspLmUoMSwgMSkpKTtcblx0ICAgIHZhciBRayA9IGlkZW50U2l6ZShIaywgbSwgbiwgayk7XG5cdCAgICBBID0gUWsueChBKTtcblx0ICAgIFEgPSBRLngoUWspO1xuXHR9XG5cblx0cmV0dXJuIHtROiBRLCBSOiBBfTtcbiAgICB9LFxuXG5cbiAgICBzbGljZTogZnVuY3Rpb24oc3RhcnRSb3csIGVuZFJvdywgc3RhcnRDb2wsIGVuZENvbCkge1xuXHR2YXIgeCA9IFtdO1xuXHRcblx0aWYoZW5kUm93ID09IDApXG5cdCAgICBlbmRSb3cgPSB0aGlzLnJvd3MoKTtcblx0XG5cdGlmKGVuZENvbCA9PSAwKVxuXHQgICAgZW5kQ29sID0gdGhpcy5jb2xzKCk7XG5cblx0Zm9yKGkgPSBzdGFydFJvdzsgaSA8PSBlbmRSb3c7IGkrKykge1xuXHQgICAgdmFyIHJvdyA9IFtdO1xuXG5cdCAgICBmb3IoaiA9IHN0YXJ0Q29sOyBqIDw9IGVuZENvbDsgaisrKSB7XG5cdFx0cm93LnB1c2godGhpcy5lKGksIGopKTtcblx0ICAgIH1cblxuXHQgICAgeC5wdXNoKHJvdyk7XG5cdH1cblxuXHRyZXR1cm4gJE0oeCk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgZWxlbWVudCAoaSxqKSBvZiB0aGUgbWF0cml4XG4gICAgZTogZnVuY3Rpb24oaSxqKSB7XG5cdGlmIChpIDwgMSB8fCBpID4gdGhpcy5lbGVtZW50cy5sZW5ndGggfHwgaiA8IDEgfHwgaiA+IHRoaXMuZWxlbWVudHNbMF0ubGVuZ3RoKSB7IHJldHVybiBudWxsOyB9XG5cdHJldHVybiB0aGlzLmVsZW1lbnRzW2kgLSAxXVtqIC0gMV07XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgcm93IGsgb2YgdGhlIG1hdHJpeCBhcyBhIHZlY3RvclxuICAgIHJvdzogZnVuY3Rpb24oaSkge1xuXHRpZiAoaSA+IHRoaXMuZWxlbWVudHMubGVuZ3RoKSB7IHJldHVybiBudWxsOyB9XG5cdHJldHVybiAkVih0aGlzLmVsZW1lbnRzW2kgLSAxXSk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgY29sdW1uIGsgb2YgdGhlIG1hdHJpeCBhcyBhIHZlY3RvclxuICAgIGNvbDogZnVuY3Rpb24oaikge1xuXHRpZiAoaiA+IHRoaXMuZWxlbWVudHNbMF0ubGVuZ3RoKSB7IHJldHVybiBudWxsOyB9XG5cdHZhciBjb2wgPSBbXSwgbiA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgeyBjb2wucHVzaCh0aGlzLmVsZW1lbnRzW2ldW2ogLSAxXSk7IH1cblx0cmV0dXJuICRWKGNvbCk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgdGhlIG51bWJlciBvZiByb3dzL2NvbHVtbnMgdGhlIG1hdHJpeCBoYXNcbiAgICBkaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHtyb3dzOiB0aGlzLmVsZW1lbnRzLmxlbmd0aCwgY29sczogdGhpcy5lbGVtZW50c1swXS5sZW5ndGh9O1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygcm93cyBpbiB0aGUgbWF0cml4XG4gICAgcm93czogZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhlIG1hdHJpeFxuICAgIGNvbHM6IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5lbGVtZW50c1swXS5sZW5ndGg7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgdHJ1ZSBpZmYgdGhlIG1hdHJpeCBpcyBlcXVhbCB0byB0aGUgYXJndW1lbnQuIFlvdSBjYW4gc3VwcGx5XG4gICAgLy8gYSB2ZWN0b3IgYXMgdGhlIGFyZ3VtZW50LCBpbiB3aGljaCBjYXNlIHRoZSByZWNlaXZlciBtdXN0IGJlIGFcbiAgICAvLyBvbmUtY29sdW1uIG1hdHJpeCBlcXVhbCB0byB0aGUgdmVjdG9yLlxuICAgIGVxbDogZnVuY3Rpb24obWF0cml4KSB7XG5cdHZhciBNID0gbWF0cml4LmVsZW1lbnRzIHx8IG1hdHJpeDtcblx0aWYgKHR5cGVvZihNWzBdWzBdKSA9PSAndW5kZWZpbmVkJykgeyBNID0gTWF0cml4LmNyZWF0ZShNKS5lbGVtZW50czsgfVxuXHRpZiAodGhpcy5lbGVtZW50cy5sZW5ndGggIT0gTS5sZW5ndGggfHxcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHNbMF0ubGVuZ3RoICE9IE1bMF0ubGVuZ3RoKSB7IHJldHVybiBmYWxzZTsgfVxuXHR2YXIgaSA9IHRoaXMuZWxlbWVudHMubGVuZ3RoLCBuaiA9IHRoaXMuZWxlbWVudHNbMF0ubGVuZ3RoLCBqO1xuXHR3aGlsZSAoaS0tKSB7IGogPSBuajtcblx0XHQgICAgICB3aGlsZSAoai0tKSB7XG5cdFx0XHQgIGlmIChNYXRoLmFicyh0aGlzLmVsZW1lbnRzW2ldW2pdIC0gTVtpXVtqXSkgPiBTeWx2ZXN0ZXIucHJlY2lzaW9uKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRyZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIG1hdHJpeFxuICAgIGR1cDogZnVuY3Rpb24oKSB7XG5cdHJldHVybiBNYXRyaXguY3JlYXRlKHRoaXMuZWxlbWVudHMpO1xuICAgIH0sXG5cbiAgICAvLyBNYXBzIHRoZSBtYXRyaXggdG8gYW5vdGhlciBtYXRyaXggKG9mIHRoZSBzYW1lIGRpbWVuc2lvbnMpIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gZnVuY3Rpb25cbiAgICBtYXA6IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIGVscyA9IFtdLCBpID0gdGhpcy5lbGVtZW50cy5sZW5ndGgsIG5qID0gdGhpcy5lbGVtZW50c1swXS5sZW5ndGgsIGo7XG5cdHdoaWxlIChpLS0pIHsgaiA9IG5qO1xuXHRcdCAgICAgIGVsc1tpXSA9IFtdO1xuXHRcdCAgICAgIHdoaWxlIChqLS0pIHtcblx0XHRcdCAgZWxzW2ldW2pdID0gZm4odGhpcy5lbGVtZW50c1tpXVtqXSwgaSArIDEsIGogKyAxKTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH1cblx0cmV0dXJuIE1hdHJpeC5jcmVhdGUoZWxzKTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyB0cnVlIGlmZiB0aGUgYXJndW1lbnQgaGFzIHRoZSBzYW1lIGRpbWVuc2lvbnMgYXMgdGhlIG1hdHJpeFxuICAgIGlzU2FtZVNpemVBczogZnVuY3Rpb24obWF0cml4KSB7XG5cdHZhciBNID0gbWF0cml4LmVsZW1lbnRzIHx8IG1hdHJpeDtcblx0aWYgKHR5cGVvZihNWzBdWzBdKSA9PSAndW5kZWZpbmVkJykgeyBNID0gTWF0cml4LmNyZWF0ZShNKS5lbGVtZW50czsgfVxuXHRyZXR1cm4gKHRoaXMuZWxlbWVudHMubGVuZ3RoID09IE0ubGVuZ3RoICYmXG5cdFx0dGhpcy5lbGVtZW50c1swXS5sZW5ndGggPT0gTVswXS5sZW5ndGgpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYWRkaW5nIHRoZSBhcmd1bWVudCB0byB0aGUgbWF0cml4XG4gICAgYWRkOiBmdW5jdGlvbihtYXRyaXgpIHtcblx0aWYodHlwZW9mKG1hdHJpeCkgPT0gJ251bWJlcicpIHtcblx0ICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih4LCBpLCBqKSB7IHJldHVybiB4ICsgbWF0cml4fSk7XG5cdH0gZWxzZSB7XG5cdCAgICB2YXIgTSA9IG1hdHJpeC5lbGVtZW50cyB8fCBtYXRyaXg7XG5cdCAgICBpZiAodHlwZW9mKE1bMF1bMF0pID09ICd1bmRlZmluZWQnKSB7IE0gPSBNYXRyaXguY3JlYXRlKE0pLmVsZW1lbnRzOyB9XG5cdCAgICBpZiAoIXRoaXMuaXNTYW1lU2l6ZUFzKE0pKSB7IHJldHVybiBudWxsOyB9XG5cdCAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oeCwgaSwgaikgeyByZXR1cm4geCArIE1baSAtIDFdW2ogLSAxXTsgfSk7XG5cdH1cbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHN1YnRyYWN0aW5nIHRoZSBhcmd1bWVudCBmcm9tIHRoZSBtYXRyaXhcbiAgICBzdWJ0cmFjdDogZnVuY3Rpb24obWF0cml4KSB7XG5cdGlmKHR5cGVvZihtYXRyaXgpID09ICdudW1iZXInKSB7XG5cdCAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oeCwgaSwgaikgeyByZXR1cm4geCAtIG1hdHJpeH0pO1xuXHR9IGVsc2Uge1xuXHQgICAgdmFyIE0gPSBtYXRyaXguZWxlbWVudHMgfHwgbWF0cml4O1xuXHQgICAgaWYgKHR5cGVvZihNWzBdWzBdKSA9PSAndW5kZWZpbmVkJykgeyBNID0gTWF0cml4LmNyZWF0ZShNKS5lbGVtZW50czsgfVxuXHQgICAgaWYgKCF0aGlzLmlzU2FtZVNpemVBcyhNKSkgeyByZXR1cm4gbnVsbDsgfVxuXHQgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHgsIGksIGopIHsgcmV0dXJuIHggLSBNW2kgLSAxXVtqIC0gMV07IH0pO1xuXHR9XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgdHJ1ZSBpZmYgdGhlIG1hdHJpeCBjYW4gbXVsdGlwbHkgdGhlIGFyZ3VtZW50IGZyb20gdGhlIGxlZnRcbiAgICBjYW5NdWx0aXBseUZyb21MZWZ0OiBmdW5jdGlvbihtYXRyaXgpIHtcblx0dmFyIE0gPSBtYXRyaXguZWxlbWVudHMgfHwgbWF0cml4O1xuXHRpZiAodHlwZW9mKE1bMF1bMF0pID09ICd1bmRlZmluZWQnKSB7IE0gPSBNYXRyaXguY3JlYXRlKE0pLmVsZW1lbnRzOyB9XG5cdC8vIHRoaXMuY29sdW1ucyBzaG91bGQgZXF1YWwgbWF0cml4LnJvd3Ncblx0cmV0dXJuICh0aGlzLmVsZW1lbnRzWzBdLmxlbmd0aCA9PSBNLmxlbmd0aCk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgdGhlIHJlc3VsdCBvZiBhIG11bHRpcGxpY2F0aW9uLXN0eWxlIG9wZXJhdGlvbiB0aGUgbWF0cml4IGZyb20gdGhlIHJpZ2h0IGJ5IHRoZSBhcmd1bWVudC5cbiAgICAvLyBJZiB0aGUgYXJndW1lbnQgaXMgYSBzY2FsYXIgdGhlbiBqdXN0IG9wZXJhdGUgb24gYWxsIHRoZSBlbGVtZW50cy4gSWYgdGhlIGFyZ3VtZW50IGlzXG4gICAgLy8gYSB2ZWN0b3IsIGEgdmVjdG9yIGlzIHJldHVybmVkLCB3aGljaCBzYXZlcyB5b3UgaGF2aW5nIHRvIHJlbWVtYmVyIGNhbGxpbmdcbiAgICAvLyBjb2woMSkgb24gdGhlIHJlc3VsdC5cbiAgICBtdWxPcDogZnVuY3Rpb24obWF0cml4LCBvcCkge1xuXHRpZiAoIW1hdHJpeC5lbGVtZW50cykge1xuXHQgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIG9wKHgsIG1hdHJpeCk7IH0pO1xuXHR9XG5cblx0dmFyIHJldHVyblZlY3RvciA9IG1hdHJpeC5tb2R1bHVzID8gdHJ1ZSA6IGZhbHNlO1xuXHR2YXIgTSA9IG1hdHJpeC5lbGVtZW50cyB8fCBtYXRyaXg7XG5cdGlmICh0eXBlb2YoTVswXVswXSkgPT0gJ3VuZGVmaW5lZCcpIFxuXHQgICAgTSA9IE1hdHJpeC5jcmVhdGUoTSkuZWxlbWVudHM7XG5cdGlmICghdGhpcy5jYW5NdWx0aXBseUZyb21MZWZ0KE0pKSBcblx0ICAgIHJldHVybiBudWxsOyBcblx0dmFyIGUgPSB0aGlzLmVsZW1lbnRzLCByb3dUaGlzLCByb3dFbGVtLCBlbGVtZW50cyA9IFtdLFxuICAgICAgICBzdW0sIG0gPSBlLmxlbmd0aCwgbiA9IE1bMF0ubGVuZ3RoLCBvID0gZVswXS5sZW5ndGgsIGkgPSBtLCBqLCBrO1xuXG5cdHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIHJvd0VsZW0gPSBbXTtcbiAgICAgICAgICAgIHJvd1RoaXMgPSBlW2ldO1xuICAgICAgICAgICAgaiA9IG47XG5cbiAgICAgICAgICAgIHdoaWxlIChqLS0pIHtcblx0XHRzdW0gPSAwO1xuXHRcdGsgPSBvO1xuXG5cdFx0d2hpbGUgKGstLSkge1xuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gb3Aocm93VGhpc1trXSwgTVtrXVtqXSk7XG5cdFx0fVxuXG5cdFx0cm93RWxlbVtqXSA9IHN1bTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxlbWVudHNbaV0gPSByb3dFbGVtO1xuXHR9XG5cblx0dmFyIE0gPSBNYXRyaXguY3JlYXRlKGVsZW1lbnRzKTtcblx0cmV0dXJuIHJldHVyblZlY3RvciA/IE0uY29sKDEpIDogTTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGRpdmlkaW5nIHRoZSBtYXRyaXggZnJvbSB0aGUgcmlnaHQgYnkgdGhlIGFyZ3VtZW50LlxuICAgIC8vIElmIHRoZSBhcmd1bWVudCBpcyBhIHNjYWxhciB0aGVuIGp1c3QgZGl2aWRlIGFsbCB0aGUgZWxlbWVudHMuIElmIHRoZSBhcmd1bWVudCBpc1xuICAgIC8vIGEgdmVjdG9yLCBhIHZlY3RvciBpcyByZXR1cm5lZCwgd2hpY2ggc2F2ZXMgeW91IGhhdmluZyB0byByZW1lbWJlciBjYWxsaW5nXG4gICAgLy8gY29sKDEpIG9uIHRoZSByZXN1bHQuXG4gICAgZGl2OiBmdW5jdGlvbihtYXRyaXgpIHtcblx0cmV0dXJuIHRoaXMubXVsT3AobWF0cml4LCBmdW5jdGlvbih4LCB5KSB7IHJldHVybiB4IC8geX0pO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIHRoZSByZXN1bHQgb2YgbXVsdGlwbHlpbmcgdGhlIG1hdHJpeCBmcm9tIHRoZSByaWdodCBieSB0aGUgYXJndW1lbnQuXG4gICAgLy8gSWYgdGhlIGFyZ3VtZW50IGlzIGEgc2NhbGFyIHRoZW4ganVzdCBtdWx0aXBseSBhbGwgdGhlIGVsZW1lbnRzLiBJZiB0aGUgYXJndW1lbnQgaXNcbiAgICAvLyBhIHZlY3RvciwgYSB2ZWN0b3IgaXMgcmV0dXJuZWQsIHdoaWNoIHNhdmVzIHlvdSBoYXZpbmcgdG8gcmVtZW1iZXIgY2FsbGluZ1xuICAgIC8vIGNvbCgxKSBvbiB0aGUgcmVzdWx0LlxuICAgIG11bHRpcGx5OiBmdW5jdGlvbihtYXRyaXgpIHtcblx0cmV0dXJuIHRoaXMubXVsT3AobWF0cml4LCBmdW5jdGlvbih4LCB5KSB7IHJldHVybiB4ICogeX0pO1xuICAgIH0sXG5cbiAgICB4OiBmdW5jdGlvbihtYXRyaXgpIHsgcmV0dXJuIHRoaXMubXVsdGlwbHkobWF0cml4KTsgfSxcblxuICAgIGVsZW1lbnRNdWx0aXBseTogZnVuY3Rpb24odikge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oaywgaSwgaikge1xuICAgICAgICAgICAgcmV0dXJuIHYuZShpLCBqKSAqIGs7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBzdW06IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3VtID0gMDtcblxuICAgICAgICB0aGlzLm1hcChmdW5jdGlvbih4KSB7IHN1bSArPSB4O30pO1xuXG4gICAgICAgIHJldHVybiBzdW07XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgYSBWZWN0b3Igb2YgZWFjaCBjb2x1bSBhdmVyYWdlZC5cbiAgICBtZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkaW0gPSB0aGlzLmRpbWVuc2lvbnMoKTtcbiAgICAgIHZhciByID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBkaW0uY29sczsgaSsrKSB7XG4gICAgICAgIHIucHVzaCh0aGlzLmNvbChpKS5zdW0oKSAvIGRpbS5yb3dzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkVihyKTtcbiAgICB9LFxuXG4gICAgY29sdW1uOiBmdW5jdGlvbihuKSB7XG5cdHJldHVybiB0aGlzLmNvbChuKTtcbiAgICB9LFxuXG4gICAgbG9nOiBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpOyB9KTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyBhIHN1Ym1hdHJpeCB0YWtlbiBmcm9tIHRoZSBtYXRyaXhcbiAgICAvLyBBcmd1bWVudCBvcmRlciBpczogc3RhcnQgcm93LCBzdGFydCBjb2wsIG5yb3dzLCBuY29sc1xuICAgIC8vIEVsZW1lbnQgc2VsZWN0aW9uIHdyYXBzIGlmIHRoZSByZXF1aXJlZCBpbmRleCBpcyBvdXRzaWRlIHRoZSBtYXRyaXgncyBib3VuZHMsIHNvIHlvdSBjb3VsZFxuICAgIC8vIHVzZSB0aGlzIHRvIHBlcmZvcm0gcm93L2NvbHVtbiBjeWNsaW5nIG9yIGNvcHktYXVnbWVudGluZy5cbiAgICBtaW5vcjogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuXHR2YXIgZWxlbWVudHMgPSBbXSwgbmkgPSBjLCBpLCBuaiwgajtcblx0dmFyIHJvd3MgPSB0aGlzLmVsZW1lbnRzLmxlbmd0aCwgY29scyA9IHRoaXMuZWxlbWVudHNbMF0ubGVuZ3RoO1xuXHR3aGlsZSAobmktLSkge1xuXHQgICAgaSA9IGMgLSBuaSAtIDE7XG5cdCAgICBlbGVtZW50c1tpXSA9IFtdO1xuXHQgICAgbmogPSBkO1xuXHQgICAgd2hpbGUgKG5qLS0pIHtcblx0XHRqID0gZCAtIG5qIC0gMTtcblx0XHRlbGVtZW50c1tpXVtqXSA9IHRoaXMuZWxlbWVudHNbKGEgKyBpIC0gMSkgJSByb3dzXVsoYiArIGogLSAxKSAlIGNvbHNdO1xuXHQgICAgfVxuXHR9XG5cdHJldHVybiBNYXRyaXguY3JlYXRlKGVsZW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyB0aGUgdHJhbnNwb3NlIG9mIHRoZSBtYXRyaXhcbiAgICB0cmFuc3Bvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByb3dzID0gdGhpcy5lbGVtZW50cy5sZW5ndGgsIGksIGNvbHMgPSB0aGlzLmVsZW1lbnRzWzBdLmxlbmd0aCwgajtcblx0dmFyIGVsZW1lbnRzID0gW10sIGkgPSBjb2xzO1xuXHR3aGlsZSAoaS0tKSB7XG5cdCAgICBqID0gcm93cztcblx0ICAgIGVsZW1lbnRzW2ldID0gW107XG5cdCAgICB3aGlsZSAoai0tKSB7XG5cdFx0ZWxlbWVudHNbaV1bal0gPSB0aGlzLmVsZW1lbnRzW2pdW2ldO1xuXHQgICAgfVxuXHR9XG5cdHJldHVybiBNYXRyaXguY3JlYXRlKGVsZW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyB0cnVlIGlmZiB0aGUgbWF0cml4IGlzIHNxdWFyZVxuICAgIGlzU3F1YXJlOiBmdW5jdGlvbigpIHtcblx0cmV0dXJuICh0aGlzLmVsZW1lbnRzLmxlbmd0aCA9PSB0aGlzLmVsZW1lbnRzWzBdLmxlbmd0aCk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgdGhlIChhYnNvbHV0ZSkgbGFyZ2VzdCBlbGVtZW50IG9mIHRoZSBtYXRyaXhcbiAgICBtYXg6IGZ1bmN0aW9uKCkge1xuXHR2YXIgbSA9IDAsIGkgPSB0aGlzLmVsZW1lbnRzLmxlbmd0aCwgbmogPSB0aGlzLmVsZW1lbnRzWzBdLmxlbmd0aCwgajtcblx0d2hpbGUgKGktLSkge1xuXHQgICAgaiA9IG5qO1xuXHQgICAgd2hpbGUgKGotLSkge1xuXHRcdGlmIChNYXRoLmFicyh0aGlzLmVsZW1lbnRzW2ldW2pdKSA+IE1hdGguYWJzKG0pKSB7IG0gPSB0aGlzLmVsZW1lbnRzW2ldW2pdOyB9XG5cdCAgICB9XG5cdH1cblx0cmV0dXJuIG07XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgdGhlIGluZGVjZXMgb2YgdGhlIGZpcnN0IG1hdGNoIGZvdW5kIGJ5IHJlYWRpbmcgcm93LWJ5LXJvdyBmcm9tIGxlZnQgdG8gcmlnaHRcbiAgICBpbmRleE9mOiBmdW5jdGlvbih4KSB7XG5cdHZhciBpbmRleCA9IG51bGwsIG5pID0gdGhpcy5lbGVtZW50cy5sZW5ndGgsIGksIG5qID0gdGhpcy5lbGVtZW50c1swXS5sZW5ndGgsIGo7XG5cdGZvciAoaSA9IDA7IGkgPCBuaTsgaSsrKSB7XG5cdCAgICBmb3IgKGogPSAwOyBqIDwgbmo7IGorKykge1xuXHRcdGlmICh0aGlzLmVsZW1lbnRzW2ldW2pdID09IHgpIHsgcmV0dXJuIHtpOiBpICsgMSwgajogaiArIDF9OyB9XG5cdCAgICB9XG5cdH1cblx0cmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8vIElmIHRoZSBtYXRyaXggaXMgc3F1YXJlLCByZXR1cm5zIHRoZSBkaWFnb25hbCBlbGVtZW50cyBhcyBhIHZlY3Rvci5cbiAgICAvLyBPdGhlcndpc2UsIHJldHVybnMgbnVsbC5cbiAgICBkaWFnb25hbDogZnVuY3Rpb24oKSB7XG5cdGlmICghdGhpcy5pc1NxdWFyZSkgeyByZXR1cm4gbnVsbDsgfVxuXHR2YXIgZWxzID0gW10sIG4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0ICAgIGVscy5wdXNoKHRoaXMuZWxlbWVudHNbaV1baV0pO1xuXHR9XG5cdHJldHVybiAkVihlbHMpO1xuICAgIH0sXG5cbiAgICAvLyBNYWtlIHRoZSBtYXRyaXggdXBwZXIgKHJpZ2h0KSB0cmlhbmd1bGFyIGJ5IEdhdXNzaWFuIGVsaW1pbmF0aW9uLlxuICAgIC8vIFRoaXMgbWV0aG9kIG9ubHkgYWRkcyBtdWx0aXBsZXMgb2Ygcm93cyB0byBvdGhlciByb3dzLiBObyByb3dzIGFyZVxuICAgIC8vIHNjYWxlZCB1cCBvciBzd2l0Y2hlZCwgYW5kIHRoZSBkZXRlcm1pbmFudCBpcyBwcmVzZXJ2ZWQuXG4gICAgdG9SaWdodFRyaWFuZ3VsYXI6IGZ1bmN0aW9uKCkge1xuXHR2YXIgTSA9IHRoaXMuZHVwKCksIGVscztcblx0dmFyIG4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aCwgaSwgaiwgbnAgPSB0aGlzLmVsZW1lbnRzWzBdLmxlbmd0aCwgcDtcblx0Zm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuXHQgICAgaWYgKE0uZWxlbWVudHNbaV1baV0gPT0gMCkge1xuXHRcdGZvciAoaiA9IGkgKyAxOyBqIDwgbjsgaisrKSB7XG5cdFx0ICAgIGlmIChNLmVsZW1lbnRzW2pdW2ldICE9IDApIHtcblx0XHRcdGVscyA9IFtdO1xuXHRcdFx0Zm9yIChwID0gMDsgcCA8IG5wOyBwKyspIHsgZWxzLnB1c2goTS5lbGVtZW50c1tpXVtwXSArIE0uZWxlbWVudHNbal1bcF0pOyB9XG5cdFx0XHRNLmVsZW1lbnRzW2ldID0gZWxzO1xuXHRcdFx0YnJlYWs7XG5cdFx0ICAgIH1cblx0XHR9XG5cdCAgICB9XG5cdCAgICBpZiAoTS5lbGVtZW50c1tpXVtpXSAhPSAwKSB7XG5cdFx0Zm9yIChqID0gaSArIDE7IGogPCBuOyBqKyspIHtcblx0XHQgICAgdmFyIG11bHRpcGxpZXIgPSBNLmVsZW1lbnRzW2pdW2ldIC8gTS5lbGVtZW50c1tpXVtpXTtcblx0XHQgICAgZWxzID0gW107XG5cdFx0ICAgIGZvciAocCA9IDA7IHAgPCBucDsgcCsrKSB7XG5cdFx0XHQvLyBFbGVtZW50cyB3aXRoIGNvbHVtbiBudW1iZXJzIHVwIHRvIGFuIGluY2x1ZGluZyB0aGUgbnVtYmVyXG5cdFx0XHQvLyBvZiB0aGUgcm93IHRoYXQgd2UncmUgc3VidHJhY3RpbmcgY2FuIHNhZmVseSBiZSBzZXQgc3RyYWlnaHQgdG9cblx0XHRcdC8vIHplcm8sIHNpbmNlIHRoYXQncyB0aGUgcG9pbnQgb2YgdGhpcyByb3V0aW5lIGFuZCBpdCBhdm9pZHMgaGF2aW5nXG5cdFx0XHQvLyB0byBsb29wIG92ZXIgYW5kIGNvcnJlY3Qgcm91bmRpbmcgZXJyb3JzIGxhdGVyXG5cdFx0XHRlbHMucHVzaChwIDw9IGkgPyAwIDogTS5lbGVtZW50c1tqXVtwXSAtIE0uZWxlbWVudHNbaV1bcF0gKiBtdWx0aXBsaWVyKTtcblx0XHQgICAgfVxuXHRcdCAgICBNLmVsZW1lbnRzW2pdID0gZWxzO1xuXHRcdH1cblx0ICAgIH1cblx0fVxuXHRyZXR1cm4gTTtcbiAgICB9LFxuXG4gICAgdG9VcHBlclRyaWFuZ3VsYXI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy50b1JpZ2h0VHJpYW5ndWxhcigpOyB9LFxuXG4gICAgLy8gUmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgZm9yIHNxdWFyZSBtYXRyaWNlc1xuICAgIGRldGVybWluYW50OiBmdW5jdGlvbigpIHtcblx0aWYgKCF0aGlzLmlzU3F1YXJlKCkpIHsgcmV0dXJuIG51bGw7IH1cblx0aWYgKHRoaXMuY29scyA9PSAxICYmIHRoaXMucm93cyA9PSAxKSB7IHJldHVybiB0aGlzLnJvdygxKTsgfVxuXHRpZiAodGhpcy5jb2xzID09IDAgJiYgdGhpcy5yb3dzID09IDApIHsgcmV0dXJuIDE7IH1cblx0dmFyIE0gPSB0aGlzLnRvUmlnaHRUcmlhbmd1bGFyKCk7XG5cdHZhciBkZXQgPSBNLmVsZW1lbnRzWzBdWzBdLCBuID0gTS5lbGVtZW50cy5sZW5ndGg7XG5cdGZvciAodmFyIGkgPSAxOyBpIDwgbjsgaSsrKSB7XG5cdCAgICBkZXQgPSBkZXQgKiBNLmVsZW1lbnRzW2ldW2ldO1xuXHR9XG5cdHJldHVybiBkZXQ7XG4gICAgfSxcbiAgICBkZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5kZXRlcm1pbmFudCgpOyB9LFxuXG4gICAgLy8gUmV0dXJucyB0cnVlIGlmZiB0aGUgbWF0cml4IGlzIHNpbmd1bGFyXG4gICAgaXNTaW5ndWxhcjogZnVuY3Rpb24oKSB7XG5cdHJldHVybiAodGhpcy5pc1NxdWFyZSgpICYmIHRoaXMuZGV0ZXJtaW5hbnQoKSA9PT0gMCk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgdGhlIHRyYWNlIGZvciBzcXVhcmUgbWF0cmljZXNcbiAgICB0cmFjZTogZnVuY3Rpb24oKSB7XG5cdGlmICghdGhpcy5pc1NxdWFyZSgpKSB7IHJldHVybiBudWxsOyB9XG5cdHZhciB0ciA9IHRoaXMuZWxlbWVudHNbMF1bMF0sIG4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblx0Zm9yICh2YXIgaSA9IDE7IGkgPCBuOyBpKyspIHtcblx0ICAgIHRyICs9IHRoaXMuZWxlbWVudHNbaV1baV07XG5cdH1cblx0cmV0dXJuIHRyO1xuICAgIH0sXG5cbiAgICB0cjogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnRyYWNlKCk7IH0sXG5cbiAgICAvLyBSZXR1cm5zIHRoZSByYW5rIG9mIHRoZSBtYXRyaXhcbiAgICByYW5rOiBmdW5jdGlvbigpIHtcblx0dmFyIE0gPSB0aGlzLnRvUmlnaHRUcmlhbmd1bGFyKCksIHJhbmsgPSAwO1xuXHR2YXIgaSA9IHRoaXMuZWxlbWVudHMubGVuZ3RoLCBuaiA9IHRoaXMuZWxlbWVudHNbMF0ubGVuZ3RoLCBqO1xuXHR3aGlsZSAoaS0tKSB7XG5cdCAgICBqID0gbmo7XG5cdCAgICB3aGlsZSAoai0tKSB7XG5cdFx0aWYgKE1hdGguYWJzKE0uZWxlbWVudHNbaV1bal0pID4gU3lsdmVzdGVyLnByZWNpc2lvbikgeyByYW5rKys7IGJyZWFrOyB9XG5cdCAgICB9XG5cdH1cblx0cmV0dXJuIHJhbms7XG4gICAgfSxcblxuICAgIHJrOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucmFuaygpOyB9LFxuXG4gICAgLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGF0dGFjaGluZyB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gdGhlIHJpZ2h0LWhhbmQgc2lkZSBvZiB0aGUgbWF0cml4XG4gICAgYXVnbWVudDogZnVuY3Rpb24obWF0cml4KSB7XG5cdHZhciBNID0gbWF0cml4LmVsZW1lbnRzIHx8IG1hdHJpeDtcblx0aWYgKHR5cGVvZihNWzBdWzBdKSA9PSAndW5kZWZpbmVkJykgeyBNID0gTWF0cml4LmNyZWF0ZShNKS5lbGVtZW50czsgfVxuXHR2YXIgVCA9IHRoaXMuZHVwKCksIGNvbHMgPSBULmVsZW1lbnRzWzBdLmxlbmd0aDtcblx0dmFyIGkgPSBULmVsZW1lbnRzLmxlbmd0aCwgbmogPSBNWzBdLmxlbmd0aCwgajtcblx0aWYgKGkgIT0gTS5sZW5ndGgpIHsgcmV0dXJuIG51bGw7IH1cblx0d2hpbGUgKGktLSkge1xuXHQgICAgaiA9IG5qO1xuXHQgICAgd2hpbGUgKGotLSkge1xuXHRcdFQuZWxlbWVudHNbaV1bY29scyArIGpdID0gTVtpXVtqXTtcblx0ICAgIH1cblx0fVxuXHRyZXR1cm4gVDtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyB0aGUgaW52ZXJzZSAoaWYgb25lIGV4aXN0cykgdXNpbmcgR2F1c3MtSm9yZGFuXG4gICAgaW52ZXJzZTogZnVuY3Rpb24oKSB7XG5cdGlmICghdGhpcy5pc1NxdWFyZSgpIHx8IHRoaXMuaXNTaW5ndWxhcigpKSB7IHJldHVybiBudWxsOyB9XG5cdHZhciBuID0gdGhpcy5lbGVtZW50cy5sZW5ndGgsIGkgPSBuLCBqO1xuXHR2YXIgTSA9IHRoaXMuYXVnbWVudChNYXRyaXguSShuKSkudG9SaWdodFRyaWFuZ3VsYXIoKTtcblx0dmFyIG5wID0gTS5lbGVtZW50c1swXS5sZW5ndGgsIHAsIGVscywgZGl2aXNvcjtcblx0dmFyIGludmVyc2VfZWxlbWVudHMgPSBbXSwgbmV3X2VsZW1lbnQ7XG5cdC8vIE1hdHJpeCBpcyBub24tc2luZ3VsYXIgc28gdGhlcmUgd2lsbCBiZSBubyB6ZXJvcyBvbiB0aGUgZGlhZ29uYWxcblx0Ly8gQ3ljbGUgdGhyb3VnaCByb3dzIGZyb20gbGFzdCB0byBmaXJzdFxuXHR3aGlsZSAoaS0tKSB7XG5cdCAgICAvLyBGaXJzdCwgbm9ybWFsaXNlIGRpYWdvbmFsIGVsZW1lbnRzIHRvIDFcblx0ICAgIGVscyA9IFtdO1xuXHQgICAgaW52ZXJzZV9lbGVtZW50c1tpXSA9IFtdO1xuXHQgICAgZGl2aXNvciA9IE0uZWxlbWVudHNbaV1baV07XG5cdCAgICBmb3IgKHAgPSAwOyBwIDwgbnA7IHArKykge1xuICAgICAgICBuZXdfZWxlbWVudCA9IE0uZWxlbWVudHNbaV1bcF0gLyBkaXZpc29yO1xuXHRcdGVscy5wdXNoKG5ld19lbGVtZW50KTtcblx0XHQvLyBTaHVmZmxlIG9mZiB0aGUgY3VycmVudCByb3cgb2YgdGhlIHJpZ2h0IGhhbmQgc2lkZSBpbnRvIHRoZSByZXN1bHRzXG5cdFx0Ly8gYXJyYXkgYXMgaXQgd2lsbCBub3QgYmUgbW9kaWZpZWQgYnkgbGF0ZXIgcnVucyB0aHJvdWdoIHRoaXMgbG9vcFxuXHRcdGlmIChwID49IG4pIHsgaW52ZXJzZV9lbGVtZW50c1tpXS5wdXNoKG5ld19lbGVtZW50KTsgfVxuXHQgICAgfVxuXHQgICAgTS5lbGVtZW50c1tpXSA9IGVscztcblx0ICAgIC8vIFRoZW4sIHN1YnRyYWN0IHRoaXMgcm93IGZyb20gdGhvc2UgYWJvdmUgaXQgdG9cblx0ICAgIC8vIGdpdmUgdGhlIGlkZW50aXR5IG1hdHJpeCBvbiB0aGUgbGVmdCBoYW5kIHNpZGVcblx0ICAgIGogPSBpO1xuXHQgICAgd2hpbGUgKGotLSkge1xuXHRcdGVscyA9IFtdO1xuXHRcdGZvciAocCA9IDA7IHAgPCBucDsgcCsrKSB7XG5cdFx0ICAgIGVscy5wdXNoKE0uZWxlbWVudHNbal1bcF0gLSBNLmVsZW1lbnRzW2ldW3BdICogTS5lbGVtZW50c1tqXVtpXSk7XG5cdFx0fVxuXHRcdE0uZWxlbWVudHNbal0gPSBlbHM7XG5cdCAgICB9XG5cdH1cblx0cmV0dXJuIE1hdHJpeC5jcmVhdGUoaW52ZXJzZV9lbGVtZW50cyk7XG4gICAgfSxcblxuICAgIGludjogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmludmVyc2UoKTsgfSxcblxuICAgIC8vIFJldHVybnMgdGhlIHJlc3VsdCBvZiByb3VuZGluZyBhbGwgdGhlIGVsZW1lbnRzXG4gICAgcm91bmQ6IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KTsgfSk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXRyaXggd2l0aCBlbGVtZW50cyBzZXQgdG8gdGhlIGdpdmVuIHZhbHVlIGlmIHRoZXlcbiAgICAvLyBkaWZmZXIgZnJvbSBpdCBieSBsZXNzIHRoYW4gU3lsdmVzdGVyLnByZWNpc2lvblxuICAgIHNuYXBUbzogZnVuY3Rpb24oeCkge1xuXHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24ocCkge1xuXHQgICAgcmV0dXJuIChNYXRoLmFicyhwIC0geCkgPD0gU3lsdmVzdGVyLnByZWNpc2lvbikgPyB4IDogcDtcblx0fSk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxuICAgIGluc3BlY3Q6IGZ1bmN0aW9uKCkge1xuXHR2YXIgbWF0cml4X3Jvd3MgPSBbXTtcblx0dmFyIG4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0ICAgIG1hdHJpeF9yb3dzLnB1c2goJFYodGhpcy5lbGVtZW50c1tpXSkuaW5zcGVjdCgpKTtcblx0fVxuXHRyZXR1cm4gbWF0cml4X3Jvd3Muam9pbignXFxuJyk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybnMgYSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XG4gICAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgXHR2YXIgbWF0cml4X3Jvd3MgPSBbXTtcbiAgICBcdHZhciBuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG4gICAgXHRmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBtYXRyaXhfcm93cy5wdXNoKHRoaXMuZWxlbWVudHNbaV0pO1xuICAgIFx0fVxuICAgICAgcmV0dXJuIG1hdHJpeF9yb3dzO1xuICAgIH0sXG5cblxuICAgIC8vIFNldCB0aGUgbWF0cml4J3MgZWxlbWVudHMgZnJvbSBhbiBhcnJheS4gSWYgdGhlIGFyZ3VtZW50IHBhc3NlZFxuICAgIC8vIGlzIGEgdmVjdG9yLCB0aGUgcmVzdWx0aW5nIG1hdHJpeCB3aWxsIGJlIGEgc2luZ2xlIGNvbHVtbi5cbiAgICBzZXRFbGVtZW50czogZnVuY3Rpb24oZWxzKSB7XG5cdHZhciBpLCBqLCBlbGVtZW50cyA9IGVscy5lbGVtZW50cyB8fCBlbHM7XG5cdGlmICh0eXBlb2YoZWxlbWVudHNbMF1bMF0pICE9ICd1bmRlZmluZWQnKSB7XG5cdCAgICBpID0gZWxlbWVudHMubGVuZ3RoO1xuXHQgICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuXHQgICAgd2hpbGUgKGktLSkge1xuXHRcdGogPSBlbGVtZW50c1tpXS5sZW5ndGg7XG5cdFx0dGhpcy5lbGVtZW50c1tpXSA9IFtdO1xuXHRcdHdoaWxlIChqLS0pIHtcblx0XHQgICAgdGhpcy5lbGVtZW50c1tpXVtqXSA9IGVsZW1lbnRzW2ldW2pdO1xuXHRcdH1cblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzO1xuXHR9XG5cdHZhciBuID0gZWxlbWVudHMubGVuZ3RoO1xuXHR0aGlzLmVsZW1lbnRzID0gW107XG5cdGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0ICAgIHRoaXMuZWxlbWVudHMucHVzaChbZWxlbWVudHNbaV1dKTtcblx0fVxuXHRyZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgbWF4Q29sdW1uSW5kZXhlczogZnVuY3Rpb24oKSB7XG5cdHZhciBtYXhlcyA9IFtdO1xuXG5cdGZvcih2YXIgaSA9IDE7IGkgPD0gdGhpcy5yb3dzKCk7IGkrKykge1xuXHQgICAgdmFyIG1heCA9IG51bGw7XG5cdCAgICB2YXIgbWF4SW5kZXggPSAtMTtcblxuXHQgICAgZm9yKHZhciBqID0gMTsgaiA8PSB0aGlzLmNvbHMoKTsgaisrKSB7XG5cdFx0aWYobWF4ID09PSBudWxsIHx8IHRoaXMuZShpLCBqKSA+IG1heCkge1xuXHRcdCAgICBtYXggPSB0aGlzLmUoaSwgaik7XG5cdFx0ICAgIG1heEluZGV4ID0gajtcblx0XHR9XG5cdCAgICB9XG5cblx0ICAgIG1heGVzLnB1c2gobWF4SW5kZXgpO1xuXHR9XG5cblx0cmV0dXJuICRWKG1heGVzKTtcbiAgICB9LFxuXG4gICAgbWF4Q29sdW1uczogZnVuY3Rpb24oKSB7XG5cdHZhciBtYXhlcyA9IFtdO1xuXG5cdGZvcih2YXIgaSA9IDE7IGkgPD0gdGhpcy5yb3dzKCk7IGkrKykge1xuXHQgICAgdmFyIG1heCA9IG51bGw7XG5cblx0ICAgIGZvcih2YXIgaiA9IDE7IGogPD0gdGhpcy5jb2xzKCk7IGorKykge1xuXHRcdGlmKG1heCA9PT0gbnVsbCB8fCB0aGlzLmUoaSwgaikgPiBtYXgpIHtcblx0XHQgICAgbWF4ID0gdGhpcy5lKGksIGopO1xuXHRcdH1cblx0ICAgIH1cblxuXHQgICAgbWF4ZXMucHVzaChtYXgpO1xuXHR9XG5cblx0cmV0dXJuICRWKG1heGVzKTtcbiAgICB9LFxuXG4gICAgbWluQ29sdW1uSW5kZXhlczogZnVuY3Rpb24oKSB7XG5cdHZhciBtaW5zID0gW107XG5cblx0Zm9yKHZhciBpID0gMTsgaSA8PSB0aGlzLnJvd3MoKTsgaSsrKSB7XG5cdCAgICB2YXIgbWluID0gbnVsbDtcblx0ICAgIHZhciBtaW5JbmRleCA9IC0xO1xuXG5cdCAgICBmb3IodmFyIGogPSAxOyBqIDw9IHRoaXMuY29scygpOyBqKyspIHtcblx0XHRpZihtaW4gPT09IG51bGwgfHwgdGhpcy5lKGksIGopIDwgbWluKSB7XG5cdFx0ICAgIG1pbiA9IHRoaXMuZShpLCBqKTtcblx0XHQgICAgbWluSW5kZXggPSBqO1xuXHRcdH1cblx0ICAgIH1cblxuXHQgICAgbWlucy5wdXNoKG1pbkluZGV4KTtcblx0fVxuXG5cdHJldHVybiAkVihtaW5zKTtcbiAgICB9LFxuXG4gICAgbWluQ29sdW1uczogZnVuY3Rpb24oKSB7XG5cdHZhciBtaW5zID0gW107XG5cblx0Zm9yKHZhciBpID0gMTsgaSA8PSB0aGlzLnJvd3MoKTsgaSsrKSB7XG5cdCAgICB2YXIgbWluID0gbnVsbDtcblxuXHQgICAgZm9yKHZhciBqID0gMTsgaiA8PSB0aGlzLmNvbHMoKTsgaisrKSB7XG5cdFx0aWYobWluID09PSBudWxsIHx8IHRoaXMuZShpLCBqKSA8IG1pbikge1xuXHRcdCAgICBtaW4gPSB0aGlzLmUoaSwgaik7XG5cdFx0fVxuXHQgICAgfVxuXG5cdCAgICBtaW5zLnB1c2gobWluKTtcblx0fVxuXG5cdHJldHVybiAkVihtaW5zKTtcbiAgICB9XG59O1xuXG4vLyBDb25zdHJ1Y3RvciBmdW5jdGlvblxuTWF0cml4LmNyZWF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG4gICAgdmFyIE0gPSBuZXcgTWF0cml4KCk7XG4gICAgcmV0dXJuIE0uc2V0RWxlbWVudHMoZWxlbWVudHMpO1xufTtcblxuLy8gSWRlbnRpdHkgbWF0cml4IG9mIHNpemUgblxuTWF0cml4LkkgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGVscyA9IFtdLCBpID0gbiwgajtcbiAgICB3aGlsZSAoaS0tKSB7XG5cdGogPSBuO1xuXHRlbHNbaV0gPSBbXTtcblx0d2hpbGUgKGotLSkge1xuXHQgICAgZWxzW2ldW2pdID0gKGkgPT0gaikgPyAxIDogMDtcblx0fVxuICAgIH1cbiAgICByZXR1cm4gTWF0cml4LmNyZWF0ZShlbHMpO1xufTtcblxuTWF0cml4LmxvYWRGaWxlID0gZnVuY3Rpb24oZmlsZSkge1xuICAgIHZhciBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmLTgnKTtcbiAgICB2YXIgbWF0cml4ID0gW107XG5cbiAgICB2YXIgcm93QXJyYXkgPSBjb250ZW50cy5zcGxpdCgnXFxuJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dBcnJheS5sZW5ndGg7IGkrKykge1xuXHR2YXIgZCA9IHJvd0FycmF5W2ldLnNwbGl0KCcsJyk7XG5cdGlmIChkLmxlbmd0aCA+IDEpIHtcblx0ICAgIG1hdHJpeC5wdXNoKGQpO1xuXHR9XG4gICAgfVxuXG4gICAgdmFyIE0gPSBuZXcgTWF0cml4KCk7XG4gICAgcmV0dXJuIE0uc2V0RWxlbWVudHMobWF0cml4KTtcbn07XG5cbi8vIERpYWdvbmFsIG1hdHJpeCAtIGFsbCBvZmYtZGlhZ29uYWwgZWxlbWVudHMgYXJlIHplcm9cbk1hdHJpeC5EaWFnb25hbCA9IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG4gICAgdmFyIGkgPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgdmFyIE0gPSBNYXRyaXguSShpKTtcbiAgICB3aGlsZSAoaS0tKSB7XG5cdE0uZWxlbWVudHNbaV1baV0gPSBlbGVtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIE07XG59O1xuXG4vLyBSb3RhdGlvbiBtYXRyaXggYWJvdXQgc29tZSBheGlzLiBJZiBubyBheGlzIGlzXG4vLyBzdXBwbGllZCwgYXNzdW1lIHdlJ3JlIGFmdGVyIGEgMkQgdHJhbnNmb3JtXG5NYXRyaXguUm90YXRpb24gPSBmdW5jdGlvbih0aGV0YSwgYSkge1xuICAgIGlmICghYSkge1xuXHRyZXR1cm4gTWF0cml4LmNyZWF0ZShbXG5cdCAgICBbTWF0aC5jb3ModGhldGEpLCAtTWF0aC5zaW4odGhldGEpXSxcblx0ICAgIFtNYXRoLnNpbih0aGV0YSksIE1hdGguY29zKHRoZXRhKV1cblx0XSk7XG4gIH1cbiAgICB2YXIgYXhpcyA9IGEuZHVwKCk7XG4gICAgaWYgKGF4aXMuZWxlbWVudHMubGVuZ3RoICE9IDMpIHsgcmV0dXJuIG51bGw7IH1cbiAgICB2YXIgbW9kID0gYXhpcy5tb2R1bHVzKCk7XG4gICAgdmFyIHggPSBheGlzLmVsZW1lbnRzWzBdIC8gbW9kLCB5ID0gYXhpcy5lbGVtZW50c1sxXSAvIG1vZCwgeiA9IGF4aXMuZWxlbWVudHNbMl0gLyBtb2Q7XG4gICAgdmFyIHMgPSBNYXRoLnNpbih0aGV0YSksIGMgPSBNYXRoLmNvcyh0aGV0YSksIHQgPSAxIC0gYztcbiAgICAvLyBGb3JtdWxhIGRlcml2ZWQgaGVyZTogaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXG4gICAgLy8gVGhhdCBwcm9vZiByb3RhdGVzIHRoZSBjby1vcmRpbmF0ZSBzeXN0ZW0gc28gdGhldGFcbiAgICAvLyBiZWNvbWVzIC10aGV0YSBhbmQgc2luIGJlY29tZXMgLXNpbiBoZXJlLlxuICAgIHJldHVybiBNYXRyaXguY3JlYXRlKFtcblx0W3QgKiB4ICogeCArIGMsIHQgKiB4ICogeSAtIHMgKiB6LCB0ICogeCAqIHogKyBzICogeV0sXG5cdFt0ICogeCAqIHkgKyBzICogeiwgdCAqIHkgKiB5ICsgYywgdCAqIHkgKiB6IC0gcyAqIHhdLFxuXHRbdCAqIHggKiB6IC0gcyAqIHksIHQgKiB5ICogeiArIHMgKiB4LCB0ICogeiAqIHogKyBjXVxuICAgIF0pO1xufTtcblxuLy8gU3BlY2lhbCBjYXNlIHJvdGF0aW9uc1xuTWF0cml4LlJvdGF0aW9uWCA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgYyA9IE1hdGguY29zKHQpLCBzID0gTWF0aC5zaW4odCk7XG4gICAgcmV0dXJuIE1hdHJpeC5jcmVhdGUoW1xuXHRbMSwgMCwgMF0sXG5cdFswLCBjLCAtc10sXG5cdFswLCBzLCBjXVxuICAgIF0pO1xufTtcblxuTWF0cml4LlJvdGF0aW9uWSA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgYyA9IE1hdGguY29zKHQpLCBzID0gTWF0aC5zaW4odCk7XG4gICAgcmV0dXJuIE1hdHJpeC5jcmVhdGUoW1xuXHRbYywgMCwgc10sXG5cdFswLCAxLCAwXSxcblx0Wy1zLCAwLCBjXVxuICAgIF0pO1xufTtcblxuTWF0cml4LlJvdGF0aW9uWiA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgYyA9IE1hdGguY29zKHQpLCBzID0gTWF0aC5zaW4odCk7XG4gICAgcmV0dXJuIE1hdHJpeC5jcmVhdGUoW1xuXHRbYywgLXMsIDBdLFxuXHRbcywgYywgMF0sXG5cdFswLCAwLCAxXVxuICAgIF0pO1xufTtcblxuLy8gUmFuZG9tIG1hdHJpeCBvZiBuIHJvd3MsIG0gY29sdW1uc1xuTWF0cml4LlJhbmRvbSA9IGZ1bmN0aW9uKG4sIG0pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbSA9IG47XG4gICAgcmV0dXJuIE1hdHJpeC5aZXJvKG4sIG0pLm1hcChcblx0ZnVuY3Rpb24oKSB7IHJldHVybiBNYXRoLnJhbmRvbSgpOyB9XG4gICk7XG59O1xuXG5NYXRyaXguRmlsbCA9IGZ1bmN0aW9uKG4sIG0sIHYpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuXHR2ID0gbTtcblx0bSA9IG47XG4gICAgfVxuXG4gICAgdmFyIGVscyA9IFtdLCBpID0gbiwgajtcblxuICAgIHdoaWxlIChpLS0pIHtcblx0aiA9IG07XG5cdGVsc1tpXSA9IFtdO1xuXG5cdHdoaWxlIChqLS0pIHtcblx0ICAgIGVsc1tpXVtqXSA9IHY7XG5cdH1cbiAgICB9XG5cbiAgICByZXR1cm4gTWF0cml4LmNyZWF0ZShlbHMpO1xufTtcblxuLy8gTWF0cml4IGZpbGxlZCB3aXRoIHplcm9zXG5NYXRyaXguWmVybyA9IGZ1bmN0aW9uKG4sIG0pIHtcbiAgICByZXR1cm4gTWF0cml4LkZpbGwobiwgbSwgMCk7XG59O1xuXG4vLyBNYXRyaXggZmlsbGVkIHdpdGggemVyb3Ncbk1hdHJpeC5aZXJvcyA9IGZ1bmN0aW9uKG4sIG0pIHtcbiAgICByZXR1cm4gTWF0cml4Llplcm8obiwgbSk7XG59O1xuXG4vLyBNYXRyaXggZmlsbGVkIHdpdGggb25lc1xuTWF0cml4Lk9uZSA9IGZ1bmN0aW9uKG4sIG0pIHtcbiAgICByZXR1cm4gTWF0cml4LkZpbGwobiwgbSwgMSk7XG59O1xuXG4vLyBNYXRyaXggZmlsbGVkIHdpdGggb25lc1xuTWF0cml4Lk9uZXMgPSBmdW5jdGlvbihuLCBtKSB7XG4gICAgcmV0dXJuIE1hdHJpeC5PbmUobiwgbSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdHJpeDtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJTeWx2ZXN0ZXIiLCJWZWN0b3IiLCJpZGVudFNpemUiLCJNIiwibSIsIm4iLCJrIiwiZSIsImVsZW1lbnRzIiwiaSIsInJvdyIsImoiLCJwdXNoIiwidW5zaGlmdCIsImxlbmd0aCIsIiRNIiwicGNhIiwiWCIsIlNpZ21hIiwidHJhbnNwb3NlIiwieCIsInJvd3MiLCJzdmQiLCJVIiwiUyIsIk1hdHJpeCIsInByb3RvdHlwZSIsInBjYVByb2plY3QiLCJVcmVkdWNlIiwic2xpY2UiLCJaIiwicGNhUmVjb3ZlciIsImNvbHMiLCJ0cml1IiwibWFwIiwiQSIsIkkiLCJWIiwiZXJyIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwibWF4TG9vcCIsInFyIiwiUiIsIlEiLCJ1bnJvbGwiLCJub3JtIiwiZiIsImRpYWdvbmFsIiwic3MiLCJzIiwic3NuIiwiTWF0aCIsImFicyIsIiRWIiwidG9EaWFnb25hbE1hdHJpeCIsInYiLCJtaW4iLCJhayIsImNvbCIsIm9uZVplcm8iLCJ2ayIsImFkZCIsInNpZ24iLCJWayIsIkhrIiwic3VidHJhY3QiLCJkaXYiLCJRayIsInN0YXJ0Um93IiwiZW5kUm93Iiwic3RhcnRDb2wiLCJlbmRDb2wiLCJkaW1lbnNpb25zIiwiZXFsIiwibWF0cml4IiwiY3JlYXRlIiwibmoiLCJwcmVjaXNpb24iLCJkdXAiLCJmbiIsImVscyIsImlzU2FtZVNpemVBcyIsImNhbk11bHRpcGx5RnJvbUxlZnQiLCJtdWxPcCIsIm9wIiwicmV0dXJuVmVjdG9yIiwibW9kdWx1cyIsInJvd1RoaXMiLCJyb3dFbGVtIiwic3VtIiwibyIsInkiLCJtdWx0aXBseSIsImVsZW1lbnRNdWx0aXBseSIsIm1lYW4iLCJkaW0iLCJyIiwiY29sdW1uIiwibG9nIiwibWlub3IiLCJhIiwiYiIsImMiLCJkIiwibmkiLCJpc1NxdWFyZSIsIm1heCIsImluZGV4T2YiLCJpbmRleCIsInRvUmlnaHRUcmlhbmd1bGFyIiwibnAiLCJwIiwibXVsdGlwbGllciIsInRvVXBwZXJUcmlhbmd1bGFyIiwiZGV0ZXJtaW5hbnQiLCJkZXQiLCJpc1Npbmd1bGFyIiwidHJhY2UiLCJ0ciIsInJhbmsiLCJyayIsImF1Z21lbnQiLCJUIiwiaW52ZXJzZSIsImRpdmlzb3IiLCJpbnZlcnNlX2VsZW1lbnRzIiwibmV3X2VsZW1lbnQiLCJpbnYiLCJyb3VuZCIsInNuYXBUbyIsImluc3BlY3QiLCJtYXRyaXhfcm93cyIsImpvaW4iLCJ0b0FycmF5Iiwic2V0RWxlbWVudHMiLCJtYXhDb2x1bW5JbmRleGVzIiwibWF4ZXMiLCJtYXhJbmRleCIsIm1heENvbHVtbnMiLCJtaW5Db2x1bW5JbmRleGVzIiwibWlucyIsIm1pbkluZGV4IiwibWluQ29sdW1ucyIsImxvYWRGaWxlIiwiZmlsZSIsImNvbnRlbnRzIiwicmVhZEZpbGVTeW5jIiwicm93QXJyYXkiLCJzcGxpdCIsIkRpYWdvbmFsIiwiUm90YXRpb24iLCJ0aGV0YSIsImNvcyIsInNpbiIsImF4aXMiLCJtb2QiLCJ6IiwidCIsIlJvdGF0aW9uWCIsIlJvdGF0aW9uWSIsIlJvdGF0aW9uWiIsIlJhbmRvbSIsImFyZ3VtZW50cyIsIlplcm8iLCJyYW5kb20iLCJGaWxsIiwiWmVyb3MiLCJPbmUiLCJPbmVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sylvester/lib/node-sylvester/matrix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sylvester/lib/node-sylvester/plane.js":
/*!************************************************************!*\
  !*** ./node_modules/sylvester/lib/node-sylvester/plane.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright (c) 2011, Chris Umbel, James Coglan\n// Plane class - depends on Vector. Some methods require Matrix and Line.\n\nvar Vector = __webpack_require__(/*! ./vector */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/vector.js\");\nvar Matrix = __webpack_require__(/*! ./matrix */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/matrix.js\");\nvar Line = __webpack_require__(/*! ./line */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/line.js\");\nvar Sylvester = __webpack_require__(/*! ./sylvester */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/sylvester.js\");\nfunction Plane() {}\nPlane.prototype = {\n    // Returns true iff the plane occupies the same space as the argument\n    eql: function(plane) {\n        return this.contains(plane.anchor) && this.isParallelTo(plane);\n    },\n    // Returns a copy of the plane\n    dup: function() {\n        return Plane.create(this.anchor, this.normal);\n    },\n    // Returns the result of translating the plane by the given vector\n    translate: function(vector) {\n        var V = vector.elements || vector;\n        return Plane.create([\n            this.anchor.elements[0] + V[0],\n            this.anchor.elements[1] + V[1],\n            this.anchor.elements[2] + (V[2] || 0)\n        ], this.normal);\n    },\n    // Returns true iff the plane is parallel to the argument. Will return true\n    // if the planes are equal, or if you give a line and it lies in the plane.\n    isParallelTo: function(obj) {\n        var theta;\n        if (obj.normal) {\n            // obj is a plane\n            theta = this.normal.angleFrom(obj.normal);\n            return Math.abs(theta) <= Sylvester.precision || Math.abs(Math.PI - theta) <= Sylvester.precision;\n        } else if (obj.direction) {\n            // obj is a line\n            return this.normal.isPerpendicularTo(obj.direction);\n        }\n        return null;\n    },\n    // Returns true iff the receiver is perpendicular to the argument\n    isPerpendicularTo: function(plane) {\n        var theta = this.normal.angleFrom(plane.normal);\n        return Math.abs(Math.PI / 2 - theta) <= Sylvester.precision;\n    },\n    // Returns the plane's distance from the given object (point, line or plane)\n    distanceFrom: function(obj) {\n        if (this.intersects(obj) || this.contains(obj)) {\n            return 0;\n        }\n        if (obj.anchor) {\n            // obj is a plane or line\n            var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;\n            return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\n        } else {\n            // obj is a point\n            var P = obj.elements || obj;\n            var A = this.anchor.elements, N = this.normal.elements;\n            return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);\n        }\n    },\n    // Returns true iff the plane contains the given point or line\n    contains: function(obj) {\n        if (obj.normal) {\n            return null;\n        }\n        if (obj.direction) {\n            return this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction));\n        } else {\n            var P = obj.elements || obj;\n            var A = this.anchor.elements, N = this.normal.elements;\n            var diff = Math.abs(N[0] * (A[0] - P[0]) + N[1] * (A[1] - P[1]) + N[2] * (A[2] - (P[2] || 0)));\n            return diff <= Sylvester.precision;\n        }\n    },\n    // Returns true iff the plane has a unique point/line of intersection with the argument\n    intersects: function(obj) {\n        if (typeof obj.direction == \"undefined\" && typeof obj.normal == \"undefined\") {\n            return null;\n        }\n        return !this.isParallelTo(obj);\n    },\n    // Returns the unique intersection with the argument, if one exists. The result\n    // will be a vector if a line is supplied, and a line if a plane is supplied.\n    intersectionWith: function(obj) {\n        if (!this.intersects(obj)) {\n            return null;\n        }\n        if (obj.direction) {\n            // obj is a line\n            var A = obj.anchor.elements, D = obj.direction.elements, P = this.anchor.elements, N = this.normal.elements;\n            var multiplier = (N[0] * (P[0] - A[0]) + N[1] * (P[1] - A[1]) + N[2] * (P[2] - A[2])) / (N[0] * D[0] + N[1] * D[1] + N[2] * D[2]);\n            return Vector.create([\n                A[0] + D[0] * multiplier,\n                A[1] + D[1] * multiplier,\n                A[2] + D[2] * multiplier\n            ]);\n        } else if (obj.normal) {\n            // obj is a plane\n            var direction = this.normal.cross(obj.normal).toUnitVector();\n            // To find an anchor point, we find one co-ordinate that has a value\n            // of zero somewhere on the intersection, and remember which one we picked\n            var N = this.normal.elements, A = this.anchor.elements, O = obj.normal.elements, B = obj.anchor.elements;\n            var solver = Matrix.Zero(2, 2), i = 0;\n            while(solver.isSingular()){\n                i++;\n                solver = Matrix.create([\n                    [\n                        N[i % 3],\n                        N[(i + 1) % 3]\n                    ],\n                    [\n                        O[i % 3],\n                        O[(i + 1) % 3]\n                    ]\n                ]);\n            }\n            // Then we solve the simultaneous equations in the remaining dimensions\n            var inverse = solver.inverse().elements;\n            var x = N[0] * A[0] + N[1] * A[1] + N[2] * A[2];\n            var y = O[0] * B[0] + O[1] * B[1] + O[2] * B[2];\n            var intersection = [\n                inverse[0][0] * x + inverse[0][1] * y,\n                inverse[1][0] * x + inverse[1][1] * y\n            ];\n            var anchor = [];\n            for(var j = 1; j <= 3; j++){\n                // This formula picks the right element from intersection by\n                // cycling depending on which element we set to zero above\n                anchor.push(i == j ? 0 : intersection[(j + (5 - i) % 3) % 3]);\n            }\n            return Line.create(anchor, direction);\n        }\n    },\n    // Returns the point in the plane closest to the given point\n    pointClosestTo: function(point) {\n        var P = point.elements || point;\n        var A = this.anchor.elements, N = this.normal.elements;\n        var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];\n        return Vector.create([\n            P[0] + N[0] * dot,\n            P[1] + N[1] * dot,\n            (P[2] || 0) + N[2] * dot\n        ]);\n    },\n    // Returns a copy of the plane, rotated by t radians about the given line\n    // See notes on Line#rotate.\n    rotate: function(t, line) {\n        var R = t.determinant ? t.elements : Matrix.Rotation(t, line.direction).elements;\n        var C = line.pointClosestTo(this.anchor).elements;\n        var A = this.anchor.elements, N = this.normal.elements;\n        var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];\n        var x = A1 - C1, y = A2 - C2, z = A3 - C3;\n        return Plane.create([\n            C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n            C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n            C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z\n        ], [\n            R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],\n            R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],\n            R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]\n        ]);\n    },\n    // Returns the reflection of the plane in the given point, line or plane.\n    reflectionIn: function(obj) {\n        if (obj.normal) {\n            // obj is a plane\n            var A = this.anchor.elements, N = this.normal.elements;\n            var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];\n            var newA = this.anchor.reflectionIn(obj).elements;\n            // Add the plane's normal to its anchor, then mirror that in the other plane\n            var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;\n            var Q = obj.pointClosestTo([\n                AN1,\n                AN2,\n                AN3\n            ]).elements;\n            var newN = [\n                Q[0] + (Q[0] - AN1) - newA[0],\n                Q[1] + (Q[1] - AN2) - newA[1],\n                Q[2] + (Q[2] - AN3) - newA[2]\n            ];\n            return Plane.create(newA, newN);\n        } else if (obj.direction) {\n            // obj is a line\n            return this.rotate(Math.PI, obj);\n        } else {\n            // obj is a point\n            var P = obj.elements || obj;\n            return Plane.create(this.anchor.reflectionIn([\n                P[0],\n                P[1],\n                P[2] || 0\n            ]), this.normal);\n        }\n    },\n    // Sets the anchor point and normal to the plane. If three arguments are specified,\n    // the normal is calculated by assuming the three points should lie in the same plane.\n    // If only two are sepcified, the second is taken to be the normal. Normal vector is\n    // normalised before storage.\n    setVectors: function(anchor, v1, v2) {\n        anchor = Vector.create(anchor);\n        anchor = anchor.to3D();\n        if (anchor === null) {\n            return null;\n        }\n        v1 = Vector.create(v1);\n        v1 = v1.to3D();\n        if (v1 === null) {\n            return null;\n        }\n        if (typeof v2 == \"undefined\") {\n            v2 = null;\n        } else {\n            v2 = Vector.create(v2);\n            v2 = v2.to3D();\n            if (v2 === null) {\n                return null;\n            }\n        }\n        var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];\n        var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];\n        var normal, mod;\n        if (v2 !== null) {\n            var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];\n            normal = Vector.create([\n                (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),\n                (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),\n                (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)\n            ]);\n            mod = normal.modulus();\n            if (mod === 0) {\n                return null;\n            }\n            normal = Vector.create([\n                normal.elements[0] / mod,\n                normal.elements[1] / mod,\n                normal.elements[2] / mod\n            ]);\n        } else {\n            mod = Math.sqrt(v11 * v11 + v12 * v12 + v13 * v13);\n            if (mod === 0) {\n                return null;\n            }\n            normal = Vector.create([\n                v1.elements[0] / mod,\n                v1.elements[1] / mod,\n                v1.elements[2] / mod\n            ]);\n        }\n        this.anchor = anchor;\n        this.normal = normal;\n        return this;\n    }\n};\n// Constructor function\nPlane.create = function(anchor, v1, v2) {\n    var P = new Plane();\n    return P.setVectors(anchor, v1, v2);\n};\n// X-Y-Z planes\nPlane.XY = Plane.create(Vector.Zero(3), Vector.k);\nPlane.YZ = Plane.create(Vector.Zero(3), Vector.i);\nPlane.ZX = Plane.create(Vector.Zero(3), Vector.j);\nPlane.YX = Plane.XY;\nPlane.ZY = Plane.YZ;\nPlane.XZ = Plane.ZX;\n// Returns the plane containing the given points (can be arrays as\n// well as vectors). If the points are not coplanar, returns null.\nPlane.fromPoints = function(points) {\n    var np = points.length, list = [], i, P, n, N, A, B, C, D, theta, prevN, totalN = Vector.Zero(3);\n    for(i = 0; i < np; i++){\n        P = Vector.create(points[i]).to3D();\n        if (P === null) {\n            return null;\n        }\n        list.push(P);\n        n = list.length;\n        if (n > 2) {\n            // Compute plane normal for the latest three points\n            A = list[n - 1].elements;\n            B = list[n - 2].elements;\n            C = list[n - 3].elements;\n            N = Vector.create([\n                (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n                (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n                (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n            ]).toUnitVector();\n            if (n > 3) {\n                // If the latest normal is not (anti)parallel to the previous one, we've strayed off the plane.\n                // This might be a slightly long-winded way of doing things, but we need the sum of all the normals\n                // to find which way the plane normal should point so that the points form an anticlockwise list.\n                theta = N.angleFrom(prevN);\n                if (theta !== null) {\n                    if (!(Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision)) {\n                        return null;\n                    }\n                }\n            }\n            totalN = totalN.add(N);\n            prevN = N;\n        }\n    }\n    // We need to add in the normals at the start and end points, which the above misses out\n    A = list[1].elements;\n    B = list[0].elements;\n    C = list[n - 1].elements;\n    D = list[n - 2].elements;\n    totalN = totalN.add(Vector.create([\n        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n    ]).toUnitVector()).add(Vector.create([\n        (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),\n        (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),\n        (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])\n    ]).toUnitVector());\n    return Plane.create(list[0], totalN);\n};\nmodule.exports = Plane;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sylvester/lib/node-sylvester/plane.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sylvester/lib/node-sylvester/sylvester.js":
/*!****************************************************************!*\
  !*** ./node_modules/sylvester/lib/node-sylvester/sylvester.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright (c) 2011, Chris Umbel, James Coglan\n// This file is required in order for any other classes to work. Some Vector methods work with the\n// other Sylvester classes and are useless unless they are included. Other classes such as Line and\n// Plane will not function at all without Vector being loaded first.           \n\nMath.sign = function(x) {\n    return x < 0 ? -1 : 1;\n};\nvar Sylvester = {\n    precision: 1e-6\n};\nmodule.exports = Sylvester;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3lsdmVzdGVyL2xpYi9ub2RlLXN5bHZlc3Rlci9zeWx2ZXN0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELGtHQUFrRztBQUNsRyxtR0FBbUc7QUFDbkcsK0VBQStFOztBQUUvRUEsS0FBS0MsSUFBSSxHQUFHLFNBQVNDLENBQUM7SUFDbEIsT0FBT0EsSUFBSSxJQUFJLENBQUMsSUFBRztBQUN2QjtBQUVBLElBQUlDLFlBQVk7SUFDWkMsV0FBVztBQUNmO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3N5bHZlc3Rlci9saWIvbm9kZS1zeWx2ZXN0ZXIvc3lsdmVzdGVyLmpzPzIzOTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDExLCBDaHJpcyBVbWJlbCwgSmFtZXMgQ29nbGFuXG4vLyBUaGlzIGZpbGUgaXMgcmVxdWlyZWQgaW4gb3JkZXIgZm9yIGFueSBvdGhlciBjbGFzc2VzIHRvIHdvcmsuIFNvbWUgVmVjdG9yIG1ldGhvZHMgd29yayB3aXRoIHRoZVxuLy8gb3RoZXIgU3lsdmVzdGVyIGNsYXNzZXMgYW5kIGFyZSB1c2VsZXNzIHVubGVzcyB0aGV5IGFyZSBpbmNsdWRlZC4gT3RoZXIgY2xhc3NlcyBzdWNoIGFzIExpbmUgYW5kXG4vLyBQbGFuZSB3aWxsIG5vdCBmdW5jdGlvbiBhdCBhbGwgd2l0aG91dCBWZWN0b3IgYmVpbmcgbG9hZGVkIGZpcnN0LiAgICAgICAgICAgXG5cbk1hdGguc2lnbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtMTogMTtcbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbnZhciBTeWx2ZXN0ZXIgPSB7XG4gICAgcHJlY2lzaW9uOiAxZS02XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bHZlc3RlcjtcbiJdLCJuYW1lcyI6WyJNYXRoIiwic2lnbiIsIngiLCJTeWx2ZXN0ZXIiLCJwcmVjaXNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sylvester/lib/node-sylvester/sylvester.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sylvester/lib/node-sylvester/vector.js":
/*!*************************************************************!*\
  !*** ./node_modules/sylvester/lib/node-sylvester/vector.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright (c) 2011, Chris Umbel, James Coglan\n// This file is required in order for any other classes to work. Some Vector methods work with the\n// other Sylvester classes and are useless unless they are included. Other classes such as Line and\n// Plane will not function at all without Vector being loaded first.\n\nvar Sylvester = __webpack_require__(/*! ./sylvester */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/sylvester.js\"), Matrix = __webpack_require__(/*! ./matrix */ \"(ssr)/./node_modules/sylvester/lib/node-sylvester/matrix.js\");\nfunction Vector() {}\nVector.prototype = {\n    norm: function() {\n        var n = this.elements.length;\n        var sum = 0;\n        while(n--){\n            sum += Math.pow(this.elements[n], 2);\n        }\n        return Math.sqrt(sum);\n    },\n    // Returns element i of the vector\n    e: function(i) {\n        return i < 1 || i > this.elements.length ? null : this.elements[i - 1];\n    },\n    // Returns the number of rows/columns the vector has\n    dimensions: function() {\n        return {\n            rows: 1,\n            cols: this.elements.length\n        };\n    },\n    // Returns the number of rows in the vector\n    rows: function() {\n        return 1;\n    },\n    // Returns the number of columns in the vector\n    cols: function() {\n        return this.elements.length;\n    },\n    // Returns the modulus ('length') of the vector\n    modulus: function() {\n        return Math.sqrt(this.dot(this));\n    },\n    // Returns true iff the vector is equal to the argument\n    eql: function(vector) {\n        var n = this.elements.length;\n        var V = vector.elements || vector;\n        if (n != V.length) {\n            return false;\n        }\n        while(n--){\n            if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) {\n                return false;\n            }\n        }\n        return true;\n    },\n    // Returns a copy of the vector\n    dup: function() {\n        return Vector.create(this.elements);\n    },\n    // Maps the vector to another vector according to the given function\n    map: function(fn) {\n        var elements = [];\n        this.each(function(x, i) {\n            elements.push(fn(x, i));\n        });\n        return Vector.create(elements);\n    },\n    // Calls the iterator for each element of the vector in turn\n    each: function(fn) {\n        var n = this.elements.length;\n        for(var i = 0; i < n; i++){\n            fn(this.elements[i], i + 1);\n        }\n    },\n    // Returns a new vector created by normalizing the receiver\n    toUnitVector: function() {\n        var r = this.modulus();\n        if (r === 0) {\n            return this.dup();\n        }\n        return this.map(function(x) {\n            return x / r;\n        });\n    },\n    // Returns the angle between the vector and the argument (also a vector)\n    angleFrom: function(vector) {\n        var V = vector.elements || vector;\n        var n = this.elements.length, k = n, i;\n        if (n != V.length) {\n            return null;\n        }\n        var dot = 0, mod1 = 0, mod2 = 0;\n        // Work things out in parallel to save time\n        this.each(function(x, i) {\n            dot += x * V[i - 1];\n            mod1 += x * x;\n            mod2 += V[i - 1] * V[i - 1];\n        });\n        mod1 = Math.sqrt(mod1);\n        mod2 = Math.sqrt(mod2);\n        if (mod1 * mod2 === 0) {\n            return null;\n        }\n        var theta = dot / (mod1 * mod2);\n        if (theta < -1) {\n            theta = -1;\n        }\n        if (theta > 1) {\n            theta = 1;\n        }\n        return Math.acos(theta);\n    },\n    // Returns true iff the vector is parallel to the argument\n    isParallelTo: function(vector) {\n        var angle = this.angleFrom(vector);\n        return angle === null ? null : angle <= Sylvester.precision;\n    },\n    // Returns true iff the vector is antiparallel to the argument\n    isAntiparallelTo: function(vector) {\n        var angle = this.angleFrom(vector);\n        return angle === null ? null : Math.abs(angle - Math.PI) <= Sylvester.precision;\n    },\n    // Returns true iff the vector is perpendicular to the argument\n    isPerpendicularTo: function(vector) {\n        var dot = this.dot(vector);\n        return dot === null ? null : Math.abs(dot) <= Sylvester.precision;\n    },\n    // Returns the result of adding the argument to the vector\n    add: function(value) {\n        var V = value.elements || value;\n        if (this.elements.length != V.length) return this.map(function(v) {\n            return v + value;\n        });\n        else return this.map(function(x, i) {\n            return x + V[i - 1];\n        });\n    },\n    // Returns the result of subtracting the argument from the vector\n    subtract: function(v) {\n        if (typeof v == \"number\") return this.map(function(k) {\n            return k - v;\n        });\n        var V = v.elements || v;\n        if (this.elements.length != V.length) {\n            return null;\n        }\n        return this.map(function(x, i) {\n            return x - V[i - 1];\n        });\n    },\n    // Returns the result of multiplying the elements of the vector by the argument\n    multiply: function(k) {\n        return this.map(function(x) {\n            return x * k;\n        });\n    },\n    elementMultiply: function(v) {\n        return this.map(function(k, i) {\n            return v.e(i) * k;\n        });\n    },\n    sum: function() {\n        var sum = 0;\n        this.map(function(x) {\n            sum += x;\n        });\n        return sum;\n    },\n    chomp: function(n) {\n        var elements = [];\n        for(var i = n; i < this.elements.length; i++){\n            elements.push(this.elements[i]);\n        }\n        return Vector.create(elements);\n    },\n    top: function(n) {\n        var elements = [];\n        for(var i = 0; i < n; i++){\n            elements.push(this.elements[i]);\n        }\n        return Vector.create(elements);\n    },\n    augment: function(elements) {\n        var newElements = this.elements;\n        for(var i = 0; i < elements.length; i++){\n            newElements.push(elements[i]);\n        }\n        return Vector.create(newElements);\n    },\n    x: function(k) {\n        return this.multiply(k);\n    },\n    log: function() {\n        return Vector.log(this);\n    },\n    elementDivide: function(vector) {\n        return this.map(function(v, i) {\n            return v / vector.e(i);\n        });\n    },\n    product: function() {\n        var p = 1;\n        this.map(function(v) {\n            p *= v;\n        });\n        return p;\n    },\n    // Returns the scalar product of the vector with the argument\n    // Both vectors must have equal dimensionality\n    dot: function(vector) {\n        var V = vector.elements || vector;\n        var i, product = 0, n = this.elements.length;\n        if (n != V.length) {\n            return null;\n        }\n        while(n--){\n            product += this.elements[n] * V[n];\n        }\n        return product;\n    },\n    // Returns the vector product of the vector with the argument\n    // Both vectors must have dimensionality 3\n    cross: function(vector) {\n        var B = vector.elements || vector;\n        if (this.elements.length != 3 || B.length != 3) {\n            return null;\n        }\n        var A = this.elements;\n        return Vector.create([\n            A[1] * B[2] - A[2] * B[1],\n            A[2] * B[0] - A[0] * B[2],\n            A[0] * B[1] - A[1] * B[0]\n        ]);\n    },\n    // Returns the (absolute) largest element of the vector\n    max: function() {\n        var m = 0, i = this.elements.length;\n        while(i--){\n            if (Math.abs(this.elements[i]) > Math.abs(m)) {\n                m = this.elements[i];\n            }\n        }\n        return m;\n    },\n    maxIndex: function() {\n        var m = 0, i = this.elements.length;\n        var maxIndex = -1;\n        while(i--){\n            if (Math.abs(this.elements[i]) > Math.abs(m)) {\n                m = this.elements[i];\n                maxIndex = i + 1;\n            }\n        }\n        return maxIndex;\n    },\n    // Returns the index of the first match found\n    indexOf: function(x) {\n        var index = null, n = this.elements.length;\n        for(var i = 0; i < n; i++){\n            if (index === null && this.elements[i] == x) {\n                index = i + 1;\n            }\n        }\n        return index;\n    },\n    // Returns a diagonal matrix with the vector's elements as its diagonal elements\n    toDiagonalMatrix: function() {\n        return Matrix.Diagonal(this.elements);\n    },\n    // Returns the result of rounding the elements of the vector\n    round: function() {\n        return this.map(function(x) {\n            return Math.round(x);\n        });\n    },\n    // Transpose a Vector, return a 1xn Matrix\n    transpose: function() {\n        var rows = this.elements.length;\n        var elements = [];\n        for(var i = 0; i < rows; i++){\n            elements.push([\n                this.elements[i]\n            ]);\n        }\n        return Matrix.create(elements);\n    },\n    // Returns a copy of the vector with elements set to the given value if they\n    // differ from it by less than Sylvester.precision\n    snapTo: function(x) {\n        return this.map(function(y) {\n            return Math.abs(y - x) <= Sylvester.precision ? x : y;\n        });\n    },\n    // Returns the vector's distance from the argument, when considered as a point in space\n    distanceFrom: function(obj) {\n        if (obj.anchor || obj.start && obj.end) {\n            return obj.distanceFrom(this);\n        }\n        var V = obj.elements || obj;\n        if (V.length != this.elements.length) {\n            return null;\n        }\n        var sum = 0, part;\n        this.each(function(x, i) {\n            part = x - V[i - 1];\n            sum += part * part;\n        });\n        return Math.sqrt(sum);\n    },\n    // Returns true if the vector is point on the given line\n    liesOn: function(line) {\n        return line.contains(this);\n    },\n    // Return true iff the vector is a point in the given plane\n    liesIn: function(plane) {\n        return plane.contains(this);\n    },\n    // Rotates the vector about the given object. The object should be a\n    // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!\n    rotate: function(t, obj) {\n        var V, R = null, x, y, z;\n        if (t.determinant) {\n            R = t.elements;\n        }\n        switch(this.elements.length){\n            case 2:\n                V = obj.elements || obj;\n                if (V.length != 2) {\n                    return null;\n                }\n                if (!R) {\n                    R = Matrix.Rotation(t).elements;\n                }\n                x = this.elements[0] - V[0];\n                y = this.elements[1] - V[1];\n                return Vector.create([\n                    V[0] + R[0][0] * x + R[0][1] * y,\n                    V[1] + R[1][0] * x + R[1][1] * y\n                ]);\n                break;\n            case 3:\n                if (!obj.direction) {\n                    return null;\n                }\n                var C = obj.pointClosestTo(this).elements;\n                if (!R) {\n                    R = Matrix.Rotation(t, obj.direction).elements;\n                }\n                x = this.elements[0] - C[0];\n                y = this.elements[1] - C[1];\n                z = this.elements[2] - C[2];\n                return Vector.create([\n                    C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n                    C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n                    C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z\n                ]);\n                break;\n            default:\n                return null;\n        }\n    },\n    // Returns the result of reflecting the point in the given point, line or plane\n    reflectionIn: function(obj) {\n        if (obj.anchor) {\n            // obj is a plane or line\n            var P = this.elements.slice();\n            var C = obj.pointClosestTo(P).elements;\n            return Vector.create([\n                C[0] + (C[0] - P[0]),\n                C[1] + (C[1] - P[1]),\n                C[2] + (C[2] - (P[2] || 0))\n            ]);\n        } else {\n            // obj is a point\n            var Q = obj.elements || obj;\n            if (this.elements.length != Q.length) {\n                return null;\n            }\n            return this.map(function(x, i) {\n                return Q[i - 1] + (Q[i - 1] - x);\n            });\n        }\n    },\n    // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added\n    to3D: function() {\n        var V = this.dup();\n        switch(V.elements.length){\n            case 3:\n                break;\n            case 2:\n                V.elements.push(0);\n                break;\n            default:\n                return null;\n        }\n        return V;\n    },\n    // Returns a string representation of the vector\n    inspect: function() {\n        return \"[\" + this.elements.join(\", \") + \"]\";\n    },\n    // Set vector's elements from an array\n    setElements: function(els) {\n        this.elements = (els.elements || els).slice();\n        return this;\n    }\n};\n// Constructor function\nVector.create = function(elements) {\n    var V = new Vector();\n    return V.setElements(elements);\n};\n// i, j, k unit vectors\nVector.i = Vector.create([\n    1,\n    0,\n    0\n]);\nVector.j = Vector.create([\n    0,\n    1,\n    0\n]);\nVector.k = Vector.create([\n    0,\n    0,\n    1\n]);\n// Random vector of size n\nVector.Random = function(n) {\n    var elements = [];\n    while(n--){\n        elements.push(Math.random());\n    }\n    return Vector.create(elements);\n};\nVector.Fill = function(n, v) {\n    var elements = [];\n    while(n--){\n        elements.push(v);\n    }\n    return Vector.create(elements);\n};\n// Vector filled with zeros\nVector.Zero = function(n) {\n    return Vector.Fill(n, 0);\n};\nVector.One = function(n) {\n    return Vector.Fill(n, 1);\n};\nVector.log = function(v) {\n    return v.map(function(x) {\n        return Math.log(x);\n    });\n};\nmodule.exports = Vector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sylvester/lib/node-sylvester/vector.js\n");

/***/ })

};
;