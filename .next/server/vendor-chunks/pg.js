"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg";
exports.ids = ["vendor-chunks/pg"];
exports.modules = {

/***/ "(ssr)/./node_modules/pg/lib/client.js":
/*!***************************************!*\
  !*** ./node_modules/pg/lib/client.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/pg/lib/utils.js\");\nvar sasl = __webpack_require__(/*! ./crypto/sasl */ \"(ssr)/./node_modules/pg/lib/crypto/sasl.js\");\nvar TypeOverrides = __webpack_require__(/*! ./type-overrides */ \"(ssr)/./node_modules/pg/lib/type-overrides.js\");\nvar ConnectionParameters = __webpack_require__(/*! ./connection-parameters */ \"(ssr)/./node_modules/pg/lib/connection-parameters.js\");\nvar Query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/pg/lib/query.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/pg/lib/defaults.js\");\nvar Connection = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/pg/lib/connection.js\");\nconst crypto = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/pg/lib/crypto/utils.js\");\nclass Client extends EventEmitter {\n    constructor(config){\n        super();\n        this.connectionParameters = new ConnectionParameters(config);\n        this.user = this.connectionParameters.user;\n        this.database = this.connectionParameters.database;\n        this.port = this.connectionParameters.port;\n        this.host = this.connectionParameters.host;\n        // \"hiding\" the password so it doesn't show up in stack traces\n        // or if the client is console.logged\n        Object.defineProperty(this, \"password\", {\n            configurable: true,\n            enumerable: false,\n            writable: true,\n            value: this.connectionParameters.password\n        });\n        this.replication = this.connectionParameters.replication;\n        var c = config || {};\n        this._Promise = c.Promise || global.Promise;\n        this._types = new TypeOverrides(c.types);\n        this._ending = false;\n        this._ended = false;\n        this._connecting = false;\n        this._connected = false;\n        this._connectionError = false;\n        this._queryable = true;\n        this.connection = c.connection || new Connection({\n            stream: c.stream,\n            ssl: this.connectionParameters.ssl,\n            keepAlive: c.keepAlive || false,\n            keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n            encoding: this.connectionParameters.client_encoding || \"utf8\"\n        });\n        this.queryQueue = [];\n        this.binary = c.binary || defaults.binary;\n        this.processID = null;\n        this.secretKey = null;\n        this.ssl = this.connectionParameters.ssl || false;\n        // As with Password, make SSL->Key (the private key) non-enumerable.\n        // It won't show up in stack traces\n        // or if the client is console.logged\n        if (this.ssl && this.ssl.key) {\n            Object.defineProperty(this.ssl, \"key\", {\n                enumerable: false\n            });\n        }\n        this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0;\n    }\n    _errorAllQueries(err) {\n        const enqueueError = (query)=>{\n            process.nextTick(()=>{\n                query.handleError(err, this.connection);\n            });\n        };\n        if (this.activeQuery) {\n            enqueueError(this.activeQuery);\n            this.activeQuery = null;\n        }\n        this.queryQueue.forEach(enqueueError);\n        this.queryQueue.length = 0;\n    }\n    _connect(callback) {\n        var self = this;\n        var con = this.connection;\n        this._connectionCallback = callback;\n        if (this._connecting || this._connected) {\n            const err = new Error(\"Client has already been connected. You cannot reuse a client.\");\n            process.nextTick(()=>{\n                callback(err);\n            });\n            return;\n        }\n        this._connecting = true;\n        this.connectionTimeoutHandle;\n        if (this._connectionTimeoutMillis > 0) {\n            this.connectionTimeoutHandle = setTimeout(()=>{\n                con._ending = true;\n                con.stream.destroy(new Error(\"timeout expired\"));\n            }, this._connectionTimeoutMillis);\n        }\n        if (this.host && this.host.indexOf(\"/\") === 0) {\n            con.connect(this.host + \"/.s.PGSQL.\" + this.port);\n        } else {\n            con.connect(this.port, this.host);\n        }\n        // once connection is established send startup message\n        con.on(\"connect\", function() {\n            if (self.ssl) {\n                con.requestSsl();\n            } else {\n                con.startup(self.getStartupConf());\n            }\n        });\n        con.on(\"sslconnect\", function() {\n            con.startup(self.getStartupConf());\n        });\n        this._attachListeners(con);\n        con.once(\"end\", ()=>{\n            const error = this._ending ? new Error(\"Connection terminated\") : new Error(\"Connection terminated unexpectedly\");\n            clearTimeout(this.connectionTimeoutHandle);\n            this._errorAllQueries(error);\n            this._ended = true;\n            if (!this._ending) {\n                // if the connection is ended without us calling .end()\n                // on this client then we have an unexpected disconnection\n                // treat this as an error unless we've already emitted an error\n                // during connection.\n                if (this._connecting && !this._connectionError) {\n                    if (this._connectionCallback) {\n                        this._connectionCallback(error);\n                    } else {\n                        this._handleErrorEvent(error);\n                    }\n                } else if (!this._connectionError) {\n                    this._handleErrorEvent(error);\n                }\n            }\n            process.nextTick(()=>{\n                this.emit(\"end\");\n            });\n        });\n    }\n    connect(callback) {\n        if (callback) {\n            this._connect(callback);\n            return;\n        }\n        return new this._Promise((resolve, reject)=>{\n            this._connect((error)=>{\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    _attachListeners(con) {\n        // password request handling\n        con.on(\"authenticationCleartextPassword\", this._handleAuthCleartextPassword.bind(this));\n        // password request handling\n        con.on(\"authenticationMD5Password\", this._handleAuthMD5Password.bind(this));\n        // password request handling (SASL)\n        con.on(\"authenticationSASL\", this._handleAuthSASL.bind(this));\n        con.on(\"authenticationSASLContinue\", this._handleAuthSASLContinue.bind(this));\n        con.on(\"authenticationSASLFinal\", this._handleAuthSASLFinal.bind(this));\n        con.on(\"backendKeyData\", this._handleBackendKeyData.bind(this));\n        con.on(\"error\", this._handleErrorEvent.bind(this));\n        con.on(\"errorMessage\", this._handleErrorMessage.bind(this));\n        con.on(\"readyForQuery\", this._handleReadyForQuery.bind(this));\n        con.on(\"notice\", this._handleNotice.bind(this));\n        con.on(\"rowDescription\", this._handleRowDescription.bind(this));\n        con.on(\"dataRow\", this._handleDataRow.bind(this));\n        con.on(\"portalSuspended\", this._handlePortalSuspended.bind(this));\n        con.on(\"emptyQuery\", this._handleEmptyQuery.bind(this));\n        con.on(\"commandComplete\", this._handleCommandComplete.bind(this));\n        con.on(\"parseComplete\", this._handleParseComplete.bind(this));\n        con.on(\"copyInResponse\", this._handleCopyInResponse.bind(this));\n        con.on(\"copyData\", this._handleCopyData.bind(this));\n        con.on(\"notification\", this._handleNotification.bind(this));\n    }\n    // TODO(bmc): deprecate pgpass \"built in\" integration since this.password can be a function\n    // it can be supplied by the user if required - this is a breaking change!\n    _checkPgPass(cb) {\n        const con = this.connection;\n        if (typeof this.password === \"function\") {\n            this._Promise.resolve().then(()=>this.password()).then((pass)=>{\n                if (pass !== undefined) {\n                    if (typeof pass !== \"string\") {\n                        con.emit(\"error\", new TypeError(\"Password must be a string\"));\n                        return;\n                    }\n                    this.connectionParameters.password = this.password = pass;\n                } else {\n                    this.connectionParameters.password = this.password = null;\n                }\n                cb();\n            }).catch((err)=>{\n                con.emit(\"error\", err);\n            });\n        } else if (this.password !== null) {\n            cb();\n        } else {\n            try {\n                const pgPass = __webpack_require__(/*! pgpass */ \"(ssr)/./node_modules/pgpass/lib/index.js\");\n                pgPass(this.connectionParameters, (pass)=>{\n                    if (undefined !== pass) {\n                        this.connectionParameters.password = this.password = pass;\n                    }\n                    cb();\n                });\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        }\n    }\n    _handleAuthCleartextPassword(msg) {\n        this._checkPgPass(()=>{\n            this.connection.password(this.password);\n        });\n    }\n    _handleAuthMD5Password(msg) {\n        this._checkPgPass(async ()=>{\n            try {\n                const hashedPassword = await crypto.postgresMd5PasswordHash(this.user, this.password, msg.salt);\n                this.connection.password(hashedPassword);\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        });\n    }\n    _handleAuthSASL(msg) {\n        this._checkPgPass(()=>{\n            try {\n                this.saslSession = sasl.startSession(msg.mechanisms);\n                this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);\n            } catch (err) {\n                this.connection.emit(\"error\", err);\n            }\n        });\n    }\n    async _handleAuthSASLContinue(msg) {\n        try {\n            await sasl.continueSession(this.saslSession, this.password, msg.data);\n            this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n        } catch (err) {\n            this.connection.emit(\"error\", err);\n        }\n    }\n    _handleAuthSASLFinal(msg) {\n        try {\n            sasl.finalizeSession(this.saslSession, msg.data);\n            this.saslSession = null;\n        } catch (err) {\n            this.connection.emit(\"error\", err);\n        }\n    }\n    _handleBackendKeyData(msg) {\n        this.processID = msg.processID;\n        this.secretKey = msg.secretKey;\n    }\n    _handleReadyForQuery(msg) {\n        if (this._connecting) {\n            this._connecting = false;\n            this._connected = true;\n            clearTimeout(this.connectionTimeoutHandle);\n            // process possible callback argument to Client#connect\n            if (this._connectionCallback) {\n                this._connectionCallback(null, this);\n                // remove callback for proper error handling\n                // after the connect event\n                this._connectionCallback = null;\n            }\n            this.emit(\"connect\");\n        }\n        const { activeQuery } = this;\n        this.activeQuery = null;\n        this.readyForQuery = true;\n        if (activeQuery) {\n            activeQuery.handleReadyForQuery(this.connection);\n        }\n        this._pulseQueryQueue();\n    }\n    // if we receieve an error event or error message\n    // during the connection process we handle it here\n    _handleErrorWhileConnecting(err) {\n        if (this._connectionError) {\n            // TODO(bmc): this is swallowing errors - we shouldn't do this\n            return;\n        }\n        this._connectionError = true;\n        clearTimeout(this.connectionTimeoutHandle);\n        if (this._connectionCallback) {\n            return this._connectionCallback(err);\n        }\n        this.emit(\"error\", err);\n    }\n    // if we're connected and we receive an error event from the connection\n    // this means the socket is dead - do a hard abort of all queries and emit\n    // the socket error on the client as well\n    _handleErrorEvent(err) {\n        if (this._connecting) {\n            return this._handleErrorWhileConnecting(err);\n        }\n        this._queryable = false;\n        this._errorAllQueries(err);\n        this.emit(\"error\", err);\n    }\n    // handle error messages from the postgres backend\n    _handleErrorMessage(msg) {\n        if (this._connecting) {\n            return this._handleErrorWhileConnecting(msg);\n        }\n        const activeQuery = this.activeQuery;\n        if (!activeQuery) {\n            this._handleErrorEvent(msg);\n            return;\n        }\n        this.activeQuery = null;\n        activeQuery.handleError(msg, this.connection);\n    }\n    _handleRowDescription(msg) {\n        // delegate rowDescription to active query\n        this.activeQuery.handleRowDescription(msg);\n    }\n    _handleDataRow(msg) {\n        // delegate dataRow to active query\n        this.activeQuery.handleDataRow(msg);\n    }\n    _handlePortalSuspended(msg) {\n        // delegate portalSuspended to active query\n        this.activeQuery.handlePortalSuspended(this.connection);\n    }\n    _handleEmptyQuery(msg) {\n        // delegate emptyQuery to active query\n        this.activeQuery.handleEmptyQuery(this.connection);\n    }\n    _handleCommandComplete(msg) {\n        // delegate commandComplete to active query\n        this.activeQuery.handleCommandComplete(msg, this.connection);\n    }\n    _handleParseComplete(msg) {\n        // if a prepared statement has a name and properly parses\n        // we track that its already been executed so we don't parse\n        // it again on the same client\n        if (this.activeQuery.name) {\n            this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text;\n        }\n    }\n    _handleCopyInResponse(msg) {\n        this.activeQuery.handleCopyInResponse(this.connection);\n    }\n    _handleCopyData(msg) {\n        this.activeQuery.handleCopyData(msg, this.connection);\n    }\n    _handleNotification(msg) {\n        this.emit(\"notification\", msg);\n    }\n    _handleNotice(msg) {\n        this.emit(\"notice\", msg);\n    }\n    getStartupConf() {\n        var params = this.connectionParameters;\n        var data = {\n            user: params.user,\n            database: params.database\n        };\n        var appName = params.application_name || params.fallback_application_name;\n        if (appName) {\n            data.application_name = appName;\n        }\n        if (params.replication) {\n            data.replication = \"\" + params.replication;\n        }\n        if (params.statement_timeout) {\n            data.statement_timeout = String(parseInt(params.statement_timeout, 10));\n        }\n        if (params.lock_timeout) {\n            data.lock_timeout = String(parseInt(params.lock_timeout, 10));\n        }\n        if (params.idle_in_transaction_session_timeout) {\n            data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10));\n        }\n        if (params.options) {\n            data.options = params.options;\n        }\n        return data;\n    }\n    cancel(client, query) {\n        if (client.activeQuery === query) {\n            var con = this.connection;\n            if (this.host && this.host.indexOf(\"/\") === 0) {\n                con.connect(this.host + \"/.s.PGSQL.\" + this.port);\n            } else {\n                con.connect(this.port, this.host);\n            }\n            // once connection is established send cancel message\n            con.on(\"connect\", function() {\n                con.cancel(client.processID, client.secretKey);\n            });\n        } else if (client.queryQueue.indexOf(query) !== -1) {\n            client.queryQueue.splice(client.queryQueue.indexOf(query), 1);\n        }\n    }\n    setTypeParser(oid, format, parseFn) {\n        return this._types.setTypeParser(oid, format, parseFn);\n    }\n    getTypeParser(oid, format) {\n        return this._types.getTypeParser(oid, format);\n    }\n    // escapeIdentifier and escapeLiteral moved to utility functions & exported\n    // on PG\n    // re-exported here for backwards compatibility\n    escapeIdentifier(str) {\n        return utils.escapeIdentifier(str);\n    }\n    escapeLiteral(str) {\n        return utils.escapeLiteral(str);\n    }\n    _pulseQueryQueue() {\n        if (this.readyForQuery === true) {\n            this.activeQuery = this.queryQueue.shift();\n            if (this.activeQuery) {\n                this.readyForQuery = false;\n                this.hasExecuted = true;\n                const queryError = this.activeQuery.submit(this.connection);\n                if (queryError) {\n                    process.nextTick(()=>{\n                        this.activeQuery.handleError(queryError, this.connection);\n                        this.readyForQuery = true;\n                        this._pulseQueryQueue();\n                    });\n                }\n            } else if (this.hasExecuted) {\n                this.activeQuery = null;\n                this.emit(\"drain\");\n            }\n        }\n    }\n    query(config, values, callback) {\n        // can take in strings, config object or query object\n        var query;\n        var result;\n        var readTimeout;\n        var readTimeoutTimer;\n        var queryCallback;\n        if (config === null || config === undefined) {\n            throw new TypeError(\"Client was passed a null or undefined query\");\n        } else if (typeof config.submit === \"function\") {\n            readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n            result = query = config;\n            if (typeof values === \"function\") {\n                query.callback = query.callback || values;\n            }\n        } else {\n            readTimeout = this.connectionParameters.query_timeout;\n            query = new Query(config, values, callback);\n            if (!query.callback) {\n                result = new this._Promise((resolve, reject)=>{\n                    query.callback = (err, res)=>err ? reject(err) : resolve(res);\n                }).catch((err)=>{\n                    // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n                    // application that created the query\n                    Error.captureStackTrace(err);\n                    throw err;\n                });\n            }\n        }\n        if (readTimeout) {\n            queryCallback = query.callback;\n            readTimeoutTimer = setTimeout(()=>{\n                var error = new Error(\"Query read timeout\");\n                process.nextTick(()=>{\n                    query.handleError(error, this.connection);\n                });\n                queryCallback(error);\n                // we already returned an error,\n                // just do nothing if query completes\n                query.callback = ()=>{};\n                // Remove from queue\n                var index = this.queryQueue.indexOf(query);\n                if (index > -1) {\n                    this.queryQueue.splice(index, 1);\n                }\n                this._pulseQueryQueue();\n            }, readTimeout);\n            query.callback = (err, res)=>{\n                clearTimeout(readTimeoutTimer);\n                queryCallback(err, res);\n            };\n        }\n        if (this.binary && !query.binary) {\n            query.binary = true;\n        }\n        if (query._result && !query._result._types) {\n            query._result._types = this._types;\n        }\n        if (!this._queryable) {\n            process.nextTick(()=>{\n                query.handleError(new Error(\"Client has encountered a connection error and is not queryable\"), this.connection);\n            });\n            return result;\n        }\n        if (this._ending) {\n            process.nextTick(()=>{\n                query.handleError(new Error(\"Client was closed and is not queryable\"), this.connection);\n            });\n            return result;\n        }\n        this.queryQueue.push(query);\n        this._pulseQueryQueue();\n        return result;\n    }\n    ref() {\n        this.connection.ref();\n    }\n    unref() {\n        this.connection.unref();\n    }\n    end(cb) {\n        this._ending = true;\n        // if we have never connected, then end is a noop, callback immediately\n        if (!this.connection._connecting || this._ended) {\n            if (cb) {\n                cb();\n            } else {\n                return this._Promise.resolve();\n            }\n        }\n        if (this.activeQuery || !this._queryable) {\n            // if we have an active query we need to force a disconnect\n            // on the socket - otherwise a hung query could block end forever\n            this.connection.stream.destroy();\n        } else {\n            this.connection.end();\n        }\n        if (cb) {\n            this.connection.once(\"end\", cb);\n        } else {\n            return new this._Promise((resolve)=>{\n                this.connection.once(\"end\", resolve);\n            });\n        }\n    }\n}\n// expose a Query constructor\nClient.Query = Query;\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/connection-parameters.js":
/*!******************************************************!*\
  !*** ./node_modules/pg/lib/connection-parameters.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar dns = __webpack_require__(/*! dns */ \"dns\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/pg/lib/defaults.js\");\nvar parse = (__webpack_require__(/*! pg-connection-string */ \"(ssr)/./node_modules/pg-connection-string/index.js\").parse) // parses a connection string\n;\nvar val = function(key, config, envVar) {\n    if (envVar === undefined) {\n        envVar = process.env[\"PG\" + key.toUpperCase()];\n    } else if (envVar === false) {\n    // do nothing ... use false\n    } else {\n        envVar = process.env[envVar];\n    }\n    return config[key] || envVar || defaults[key];\n};\nvar readSSLConfigFromEnvironment = function() {\n    switch(process.env.PGSSLMODE){\n        case \"disable\":\n            return false;\n        case \"prefer\":\n        case \"require\":\n        case \"verify-ca\":\n        case \"verify-full\":\n            return true;\n        case \"no-verify\":\n            return {\n                rejectUnauthorized: false\n            };\n    }\n    return defaults.ssl;\n};\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function(value) {\n    return \"'\" + (\"\" + value).replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"'\";\n};\nvar add = function(params, config, paramName) {\n    var value = config[paramName];\n    if (value !== undefined && value !== null) {\n        params.push(paramName + \"=\" + quoteParamValue(value));\n    }\n};\nclass ConnectionParameters {\n    constructor(config){\n        // if a string is passed, it is a raw connection string so we parse it into a config\n        config = typeof config === \"string\" ? parse(config) : config || {};\n        // if the config has a connectionString defined, parse IT into the config we use\n        // this will override other default values with what is stored in connectionString\n        if (config.connectionString) {\n            config = Object.assign({}, config, parse(config.connectionString));\n        }\n        this.user = val(\"user\", config);\n        this.database = val(\"database\", config);\n        if (this.database === undefined) {\n            this.database = this.user;\n        }\n        this.port = parseInt(val(\"port\", config), 10);\n        this.host = val(\"host\", config);\n        // \"hiding\" the password so it doesn't show up in stack traces\n        // or if the client is console.logged\n        Object.defineProperty(this, \"password\", {\n            configurable: true,\n            enumerable: false,\n            writable: true,\n            value: val(\"password\", config)\n        });\n        this.binary = val(\"binary\", config);\n        this.options = val(\"options\", config);\n        this.ssl = typeof config.ssl === \"undefined\" ? readSSLConfigFromEnvironment() : config.ssl;\n        if (typeof this.ssl === \"string\") {\n            if (this.ssl === \"true\") {\n                this.ssl = true;\n            }\n        }\n        // support passing in ssl=no-verify via connection string\n        if (this.ssl === \"no-verify\") {\n            this.ssl = {\n                rejectUnauthorized: false\n            };\n        }\n        if (this.ssl && this.ssl.key) {\n            Object.defineProperty(this.ssl, \"key\", {\n                enumerable: false\n            });\n        }\n        this.client_encoding = val(\"client_encoding\", config);\n        this.replication = val(\"replication\", config);\n        // a domain socket begins with '/'\n        this.isDomainSocket = !(this.host || \"\").indexOf(\"/\");\n        this.application_name = val(\"application_name\", config, \"PGAPPNAME\");\n        this.fallback_application_name = val(\"fallback_application_name\", config, false);\n        this.statement_timeout = val(\"statement_timeout\", config, false);\n        this.lock_timeout = val(\"lock_timeout\", config, false);\n        this.idle_in_transaction_session_timeout = val(\"idle_in_transaction_session_timeout\", config, false);\n        this.query_timeout = val(\"query_timeout\", config, false);\n        if (config.connectionTimeoutMillis === undefined) {\n            this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0;\n        } else {\n            this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000);\n        }\n        if (config.keepAlive === false) {\n            this.keepalives = 0;\n        } else if (config.keepAlive === true) {\n            this.keepalives = 1;\n        }\n        if (typeof config.keepAliveInitialDelayMillis === \"number\") {\n            this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000);\n        }\n    }\n    getLibpqConnectionString(cb) {\n        var params = [];\n        add(params, this, \"user\");\n        add(params, this, \"password\");\n        add(params, this, \"port\");\n        add(params, this, \"application_name\");\n        add(params, this, \"fallback_application_name\");\n        add(params, this, \"connect_timeout\");\n        add(params, this, \"options\");\n        var ssl = typeof this.ssl === \"object\" ? this.ssl : this.ssl ? {\n            sslmode: this.ssl\n        } : {};\n        add(params, ssl, \"sslmode\");\n        add(params, ssl, \"sslca\");\n        add(params, ssl, \"sslkey\");\n        add(params, ssl, \"sslcert\");\n        add(params, ssl, \"sslrootcert\");\n        if (this.database) {\n            params.push(\"dbname=\" + quoteParamValue(this.database));\n        }\n        if (this.replication) {\n            params.push(\"replication=\" + quoteParamValue(this.replication));\n        }\n        if (this.host) {\n            params.push(\"host=\" + quoteParamValue(this.host));\n        }\n        if (this.isDomainSocket) {\n            return cb(null, params.join(\" \"));\n        }\n        if (this.client_encoding) {\n            params.push(\"client_encoding=\" + quoteParamValue(this.client_encoding));\n        }\n        dns.lookup(this.host, function(err, address) {\n            if (err) return cb(err, null);\n            params.push(\"hostaddr=\" + quoteParamValue(address));\n            return cb(null, params.join(\" \"));\n        });\n    }\n}\nmodule.exports = ConnectionParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/connection-parameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/connection.js":
/*!*******************************************!*\
  !*** ./node_modules/pg/lib/connection.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar net = __webpack_require__(/*! net */ \"net\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst { parse, serialize } = __webpack_require__(/*! pg-protocol */ \"(ssr)/./node_modules/pg-protocol/dist/index.js\");\nconst { getStream, getSecureStream } = __webpack_require__(/*! ./stream */ \"(ssr)/./node_modules/pg/lib/stream.js\");\nconst flushBuffer = serialize.flush();\nconst syncBuffer = serialize.sync();\nconst endBuffer = serialize.end();\n// TODO(bmc) support binary mode at some point\nclass Connection extends EventEmitter {\n    constructor(config){\n        super();\n        config = config || {};\n        this.stream = config.stream || getStream(config.ssl);\n        if (typeof this.stream === \"function\") {\n            this.stream = this.stream(config);\n        }\n        this._keepAlive = config.keepAlive;\n        this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis;\n        this.lastBuffer = false;\n        this.parsedStatements = {};\n        this.ssl = config.ssl || false;\n        this._ending = false;\n        this._emitMessage = false;\n        var self = this;\n        this.on(\"newListener\", function(eventName) {\n            if (eventName === \"message\") {\n                self._emitMessage = true;\n            }\n        });\n    }\n    connect(port, host) {\n        var self = this;\n        this._connecting = true;\n        this.stream.setNoDelay(true);\n        this.stream.connect(port, host);\n        this.stream.once(\"connect\", function() {\n            if (self._keepAlive) {\n                self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis);\n            }\n            self.emit(\"connect\");\n        });\n        const reportStreamError = function(error) {\n            // errors about disconnections should be ignored during disconnect\n            if (self._ending && (error.code === \"ECONNRESET\" || error.code === \"EPIPE\")) {\n                return;\n            }\n            self.emit(\"error\", error);\n        };\n        this.stream.on(\"error\", reportStreamError);\n        this.stream.on(\"close\", function() {\n            self.emit(\"end\");\n        });\n        if (!this.ssl) {\n            return this.attachListeners(this.stream);\n        }\n        this.stream.once(\"data\", function(buffer) {\n            var responseCode = buffer.toString(\"utf8\");\n            switch(responseCode){\n                case \"S\":\n                    break;\n                case \"N\":\n                    self.stream.end();\n                    return self.emit(\"error\", new Error(\"The server does not support SSL connections\"));\n                default:\n                    // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n                    self.stream.end();\n                    return self.emit(\"error\", new Error(\"There was an error establishing an SSL connection\"));\n            }\n            const options = {\n                socket: self.stream\n            };\n            if (self.ssl !== true) {\n                Object.assign(options, self.ssl);\n                if (\"key\" in self.ssl) {\n                    options.key = self.ssl.key;\n                }\n            }\n            var net = __webpack_require__(/*! net */ \"net\");\n            if (net.isIP && net.isIP(host) === 0) {\n                options.servername = host;\n            }\n            try {\n                self.stream = getSecureStream(options);\n            } catch (err) {\n                return self.emit(\"error\", err);\n            }\n            self.attachListeners(self.stream);\n            self.stream.on(\"error\", reportStreamError);\n            self.emit(\"sslconnect\");\n        });\n    }\n    attachListeners(stream) {\n        parse(stream, (msg)=>{\n            var eventName = msg.name === \"error\" ? \"errorMessage\" : msg.name;\n            if (this._emitMessage) {\n                this.emit(\"message\", msg);\n            }\n            this.emit(eventName, msg);\n        });\n    }\n    requestSsl() {\n        this.stream.write(serialize.requestSsl());\n    }\n    startup(config) {\n        this.stream.write(serialize.startup(config));\n    }\n    cancel(processID, secretKey) {\n        this._send(serialize.cancel(processID, secretKey));\n    }\n    password(password) {\n        this._send(serialize.password(password));\n    }\n    sendSASLInitialResponseMessage(mechanism, initialResponse) {\n        this._send(serialize.sendSASLInitialResponseMessage(mechanism, initialResponse));\n    }\n    sendSCRAMClientFinalMessage(additionalData) {\n        this._send(serialize.sendSCRAMClientFinalMessage(additionalData));\n    }\n    _send(buffer) {\n        if (!this.stream.writable) {\n            return false;\n        }\n        return this.stream.write(buffer);\n    }\n    query(text) {\n        this._send(serialize.query(text));\n    }\n    // send parse message\n    parse(query) {\n        this._send(serialize.parse(query));\n    }\n    // send bind message\n    bind(config) {\n        this._send(serialize.bind(config));\n    }\n    // send execute message\n    execute(config) {\n        this._send(serialize.execute(config));\n    }\n    flush() {\n        if (this.stream.writable) {\n            this.stream.write(flushBuffer);\n        }\n    }\n    sync() {\n        this._ending = true;\n        this._send(syncBuffer);\n    }\n    ref() {\n        this.stream.ref();\n    }\n    unref() {\n        this.stream.unref();\n    }\n    end() {\n        // 0x58 = 'X'\n        this._ending = true;\n        if (!this._connecting || !this.stream.writable) {\n            this.stream.end();\n            return;\n        }\n        return this.stream.write(endBuffer, ()=>{\n            this.stream.end();\n        });\n    }\n    close(msg) {\n        this._send(serialize.close(msg));\n    }\n    describe(msg) {\n        this._send(serialize.describe(msg));\n    }\n    sendCopyFromChunk(chunk) {\n        this._send(serialize.copyData(chunk));\n    }\n    endCopyFrom() {\n        this._send(serialize.copyDone());\n    }\n    sendCopyFail(msg) {\n        this._send(serialize.copyFail(msg));\n    }\n}\nmodule.exports = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/crypto/sasl.js":
/*!********************************************!*\
  !*** ./node_modules/pg/lib/crypto/sasl.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst crypto = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/pg/lib/crypto/utils.js\");\nfunction startSession(mechanisms) {\n    if (mechanisms.indexOf(\"SCRAM-SHA-256\") === -1) {\n        throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is currently supported\");\n    }\n    const clientNonce = crypto.randomBytes(18).toString(\"base64\");\n    return {\n        mechanism: \"SCRAM-SHA-256\",\n        clientNonce,\n        response: \"n,,n=*,r=\" + clientNonce,\n        message: \"SASLInitialResponse\"\n    };\n}\nasync function continueSession(session, password, serverData) {\n    if (session.message !== \"SASLInitialResponse\") {\n        throw new Error(\"SASL: Last message was not SASLInitialResponse\");\n    }\n    if (typeof password !== \"string\") {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");\n    }\n    if (password === \"\") {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string\");\n    }\n    if (typeof serverData !== \"string\") {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string\");\n    }\n    const sv = parseServerFirstMessage(serverData);\n    if (!sv.nonce.startsWith(session.clientNonce)) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n    } else if (sv.nonce.length === session.clientNonce.length) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n    }\n    var clientFirstMessageBare = \"n=*,r=\" + session.clientNonce;\n    var serverFirstMessage = \"r=\" + sv.nonce + \",s=\" + sv.salt + \",i=\" + sv.iteration;\n    var clientFinalMessageWithoutProof = \"c=biws,r=\" + sv.nonce;\n    var authMessage = clientFirstMessageBare + \",\" + serverFirstMessage + \",\" + clientFinalMessageWithoutProof;\n    var saltBytes = Buffer.from(sv.salt, \"base64\");\n    var saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration);\n    var clientKey = await crypto.hmacSha256(saltedPassword, \"Client Key\");\n    var storedKey = await crypto.sha256(clientKey);\n    var clientSignature = await crypto.hmacSha256(storedKey, authMessage);\n    var clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString(\"base64\");\n    var serverKey = await crypto.hmacSha256(saltedPassword, \"Server Key\");\n    var serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage);\n    session.message = \"SASLResponse\";\n    session.serverSignature = Buffer.from(serverSignatureBytes).toString(\"base64\");\n    session.response = clientFinalMessageWithoutProof + \",p=\" + clientProof;\n}\nfunction finalizeSession(session, serverData) {\n    if (session.message !== \"SASLResponse\") {\n        throw new Error(\"SASL: Last message was not SASLResponse\");\n    }\n    if (typeof serverData !== \"string\") {\n        throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");\n    }\n    const { serverSignature } = parseServerFinalMessage(serverData);\n    if (serverSignature !== session.serverSignature) {\n        throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match\");\n    }\n}\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */ function isPrintableChars(text) {\n    if (typeof text !== \"string\") {\n        throw new TypeError(\"SASL: text must be a string\");\n    }\n    return text.split(\"\").map((_, i)=>text.charCodeAt(i)).every((c)=>c >= 0x21 && c <= 0x2b || c >= 0x2d && c <= 0x7e);\n}\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */ function isBase64(text) {\n    return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text);\n}\nfunction parseAttributePairs(text) {\n    if (typeof text !== \"string\") {\n        throw new TypeError(\"SASL: attribute pairs text must be a string\");\n    }\n    return new Map(text.split(\",\").map((attrValue)=>{\n        if (!/^.=/.test(attrValue)) {\n            throw new Error(\"SASL: Invalid attribute pair entry\");\n        }\n        const name = attrValue[0];\n        const value = attrValue.substring(2);\n        return [\n            name,\n            value\n        ];\n    }));\n}\nfunction parseServerFirstMessage(data) {\n    const attrPairs = parseAttributePairs(data);\n    const nonce = attrPairs.get(\"r\");\n    if (!nonce) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing\");\n    } else if (!isPrintableChars(nonce)) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters\");\n    }\n    const salt = attrPairs.get(\"s\");\n    if (!salt) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");\n    } else if (!isBase64(salt)) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\");\n    }\n    const iterationText = attrPairs.get(\"i\");\n    if (!iterationText) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\n    } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n        throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count\");\n    }\n    const iteration = parseInt(iterationText, 10);\n    return {\n        nonce,\n        salt,\n        iteration\n    };\n}\nfunction parseServerFinalMessage(serverData) {\n    const attrPairs = parseAttributePairs(serverData);\n    const serverSignature = attrPairs.get(\"v\");\n    if (!serverSignature) {\n        throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");\n    } else if (!isBase64(serverSignature)) {\n        throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\");\n    }\n    return {\n        serverSignature\n    };\n}\nfunction xorBuffers(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        throw new TypeError(\"first argument must be a Buffer\");\n    }\n    if (!Buffer.isBuffer(b)) {\n        throw new TypeError(\"second argument must be a Buffer\");\n    }\n    if (a.length !== b.length) {\n        throw new Error(\"Buffer lengths must match\");\n    }\n    if (a.length === 0) {\n        throw new Error(\"Buffers cannot be empty\");\n    }\n    return Buffer.from(a.map((_, i)=>a[i] ^ b[i]));\n}\nmodule.exports = {\n    startSession,\n    continueSession,\n    finalizeSession\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/crypto/sasl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/crypto/utils-legacy.js":
/*!****************************************************!*\
  !*** ./node_modules/pg/lib/crypto/utils-legacy.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// This file contains crypto utility functions for versions of Node.js < 15.0.0,\n// which does not support the WebCrypto.subtle API.\nconst nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction md5(string) {\n    return nodeCrypto.createHash(\"md5\").update(string, \"utf-8\").digest(\"hex\");\n}\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nfunction postgresMd5PasswordHash(user, password, salt) {\n    var inner = md5(password + user);\n    var outer = md5(Buffer.concat([\n        Buffer.from(inner),\n        salt\n    ]));\n    return \"md5\" + outer;\n}\nfunction sha256(text) {\n    return nodeCrypto.createHash(\"sha256\").update(text).digest();\n}\nfunction hmacSha256(key, msg) {\n    return nodeCrypto.createHmac(\"sha256\", key).update(msg).digest();\n}\nasync function deriveKey(password, salt, iterations) {\n    return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, \"sha256\");\n}\nmodule.exports = {\n    postgresMd5PasswordHash,\n    randomBytes: nodeCrypto.randomBytes,\n    deriveKey,\n    sha256,\n    hmacSha256,\n    md5\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL2NyeXB0by91dGlscy1sZWdhY3kuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnRkFBZ0Y7QUFDaEYsbURBQW1EO0FBRW5ELE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCLFNBQVNDLElBQUlDLE1BQU07SUFDakIsT0FBT0gsV0FBV0ksVUFBVSxDQUFDLE9BQU9DLE1BQU0sQ0FBQ0YsUUFBUSxTQUFTRyxNQUFNLENBQUM7QUFDckU7QUFFQSxxR0FBcUc7QUFDckcsU0FBU0Msd0JBQXdCQyxJQUFJLEVBQUVDLFFBQVEsRUFBRUMsSUFBSTtJQUNuRCxJQUFJQyxRQUFRVCxJQUFJTyxXQUFXRDtJQUMzQixJQUFJSSxRQUFRVixJQUFJVyxPQUFPQyxNQUFNLENBQUM7UUFBQ0QsT0FBT0UsSUFBSSxDQUFDSjtRQUFRRDtLQUFLO0lBQ3hELE9BQU8sUUFBUUU7QUFDakI7QUFFQSxTQUFTSSxPQUFPQyxJQUFJO0lBQ2xCLE9BQU9qQixXQUFXSSxVQUFVLENBQUMsVUFBVUMsTUFBTSxDQUFDWSxNQUFNWCxNQUFNO0FBQzVEO0FBRUEsU0FBU1ksV0FBV0MsR0FBRyxFQUFFQyxHQUFHO0lBQzFCLE9BQU9wQixXQUFXcUIsVUFBVSxDQUFDLFVBQVVGLEtBQUtkLE1BQU0sQ0FBQ2UsS0FBS2QsTUFBTTtBQUNoRTtBQUVBLGVBQWVnQixVQUFVYixRQUFRLEVBQUVDLElBQUksRUFBRWEsVUFBVTtJQUNqRCxPQUFPdkIsV0FBV3dCLFVBQVUsQ0FBQ2YsVUFBVUMsTUFBTWEsWUFBWSxJQUFJO0FBQy9EO0FBRUFFLE9BQU9DLE9BQU8sR0FBRztJQUNmbkI7SUFDQW9CLGFBQWEzQixXQUFXMkIsV0FBVztJQUNuQ0w7SUFDQU47SUFDQUU7SUFDQWhCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3BnL2xpYi9jcnlwdG8vdXRpbHMtbGVnYWN5LmpzP2Y2ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgY3J5cHRvIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB2ZXJzaW9ucyBvZiBOb2RlLmpzIDwgMTUuMC4wLFxuLy8gd2hpY2ggZG9lcyBub3Qgc3VwcG9ydCB0aGUgV2ViQ3J5cHRvLnN1YnRsZSBBUEkuXG5cbmNvbnN0IG5vZGVDcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxuXG5mdW5jdGlvbiBtZDUoc3RyaW5nKSB7XG4gIHJldHVybiBub2RlQ3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShzdHJpbmcsICd1dGYtOCcpLmRpZ2VzdCgnaGV4Jylcbn1cblxuLy8gU2VlIEF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmQgYXQgaHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy9jdXJyZW50L3N0YXRpYy9wcm90b2NvbC1mbG93Lmh0bWxcbmZ1bmN0aW9uIHBvc3RncmVzTWQ1UGFzc3dvcmRIYXNoKHVzZXIsIHBhc3N3b3JkLCBzYWx0KSB7XG4gIHZhciBpbm5lciA9IG1kNShwYXNzd29yZCArIHVzZXIpXG4gIHZhciBvdXRlciA9IG1kNShCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShpbm5lciksIHNhbHRdKSlcbiAgcmV0dXJuICdtZDUnICsgb3V0ZXJcbn1cblxuZnVuY3Rpb24gc2hhMjU2KHRleHQpIHtcbiAgcmV0dXJuIG5vZGVDcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHRleHQpLmRpZ2VzdCgpXG59XG5cbmZ1bmN0aW9uIGhtYWNTaGEyNTYoa2V5LCBtc2cpIHtcbiAgcmV0dXJuIG5vZGVDcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2Jywga2V5KS51cGRhdGUobXNnKS5kaWdlc3QoKVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZXJpdmVLZXkocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMpIHtcbiAgcmV0dXJuIG5vZGVDcnlwdG8ucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgMzIsICdzaGEyNTYnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcG9zdGdyZXNNZDVQYXNzd29yZEhhc2gsXG4gIHJhbmRvbUJ5dGVzOiBub2RlQ3J5cHRvLnJhbmRvbUJ5dGVzLFxuICBkZXJpdmVLZXksXG4gIHNoYTI1NixcbiAgaG1hY1NoYTI1NixcbiAgbWQ1LFxufVxuIl0sIm5hbWVzIjpbIm5vZGVDcnlwdG8iLCJyZXF1aXJlIiwibWQ1Iiwic3RyaW5nIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsInBvc3RncmVzTWQ1UGFzc3dvcmRIYXNoIiwidXNlciIsInBhc3N3b3JkIiwic2FsdCIsImlubmVyIiwib3V0ZXIiLCJCdWZmZXIiLCJjb25jYXQiLCJmcm9tIiwic2hhMjU2IiwidGV4dCIsImhtYWNTaGEyNTYiLCJrZXkiLCJtc2ciLCJjcmVhdGVIbWFjIiwiZGVyaXZlS2V5IiwiaXRlcmF0aW9ucyIsInBia2RmMlN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwicmFuZG9tQnl0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/crypto/utils-legacy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/crypto/utils-webcrypto.js":
/*!*******************************************************!*\
  !*** ./node_modules/pg/lib/crypto/utils-webcrypto.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\");\nmodule.exports = {\n    postgresMd5PasswordHash,\n    randomBytes,\n    deriveKey,\n    sha256,\n    hmacSha256,\n    md5\n};\n/**\n * The Web Crypto API - grabbed from the Node.js library or the global\n * @type Crypto\n */ const webCrypto = nodeCrypto.webcrypto || globalThis.crypto;\n/**\n * The SubtleCrypto API for low level crypto operations.\n * @type SubtleCrypto\n */ const subtleCrypto = webCrypto.subtle;\nconst textEncoder = new TextEncoder();\n/**\n *\n * @param {*} length\n * @returns\n */ function randomBytes(length) {\n    return webCrypto.getRandomValues(Buffer.alloc(length));\n}\nasync function md5(string) {\n    try {\n        return nodeCrypto.createHash(\"md5\").update(string, \"utf-8\").digest(\"hex\");\n    } catch (e) {\n        // `createHash()` failed so we are probably not in Node.js, use the WebCrypto API instead.\n        // Note that the MD5 algorithm on WebCrypto is not available in Node.js.\n        // This is why we cannot just use WebCrypto in all environments.\n        const data = typeof string === \"string\" ? textEncoder.encode(string) : string;\n        const hash = await subtleCrypto.digest(\"MD5\", data);\n        return Array.from(new Uint8Array(hash)).map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n    }\n}\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nasync function postgresMd5PasswordHash(user, password, salt) {\n    var inner = await md5(password + user);\n    var outer = await md5(Buffer.concat([\n        Buffer.from(inner),\n        salt\n    ]));\n    return \"md5\" + outer;\n}\n/**\n * Create a SHA-256 digest of the given data\n * @param {Buffer} data\n */ async function sha256(text) {\n    return await subtleCrypto.digest(\"SHA-256\", text);\n}\n/**\n * Sign the message with the given key\n * @param {ArrayBuffer} keyBuffer\n * @param {string} msg\n */ async function hmacSha256(keyBuffer, msg) {\n    const key = await subtleCrypto.importKey(\"raw\", keyBuffer, {\n        name: \"HMAC\",\n        hash: \"SHA-256\"\n    }, false, [\n        \"sign\"\n    ]);\n    return await subtleCrypto.sign(\"HMAC\", key, textEncoder.encode(msg));\n}\n/**\n * Derive a key from the password and salt\n * @param {string} password\n * @param {Uint8Array} salt\n * @param {number} iterations\n */ async function deriveKey(password, salt, iterations) {\n    const key = await subtleCrypto.importKey(\"raw\", textEncoder.encode(password), \"PBKDF2\", false, [\n        \"deriveBits\"\n    ]);\n    const params = {\n        name: \"PBKDF2\",\n        hash: \"SHA-256\",\n        salt: salt,\n        iterations: iterations\n    };\n    return await subtleCrypto.deriveBits(params, key, 32 * 8, [\n        \"deriveBits\"\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL2NyeXB0by91dGlscy13ZWJjcnlwdG8uanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCQyxPQUFPQyxPQUFPLEdBQUc7SUFDZkM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7QUFDRjtBQUVBOzs7Q0FHQyxHQUNELE1BQU1DLFlBQVlWLFdBQVdXLFNBQVMsSUFBSUMsV0FBV0MsTUFBTTtBQUMzRDs7O0NBR0MsR0FDRCxNQUFNQyxlQUFlSixVQUFVSyxNQUFNO0FBQ3JDLE1BQU1DLGNBQWMsSUFBSUM7QUFFeEI7Ozs7Q0FJQyxHQUNELFNBQVNaLFlBQVlhLE1BQU07SUFDekIsT0FBT1IsVUFBVVMsZUFBZSxDQUFDQyxPQUFPQyxLQUFLLENBQUNIO0FBQ2hEO0FBRUEsZUFBZVQsSUFBSWEsTUFBTTtJQUN2QixJQUFJO1FBQ0YsT0FBT3RCLFdBQVd1QixVQUFVLENBQUMsT0FBT0MsTUFBTSxDQUFDRixRQUFRLFNBQVNHLE1BQU0sQ0FBQztJQUNyRSxFQUFFLE9BQU9DLEdBQUc7UUFDViwwRkFBMEY7UUFDMUYsd0VBQXdFO1FBQ3hFLGdFQUFnRTtRQUNoRSxNQUFNQyxPQUFPLE9BQU9MLFdBQVcsV0FBV04sWUFBWVksTUFBTSxDQUFDTixVQUFVQTtRQUN2RSxNQUFNTyxPQUFPLE1BQU1mLGFBQWFXLE1BQU0sQ0FBQyxPQUFPRTtRQUM5QyxPQUFPRyxNQUFNQyxJQUFJLENBQUMsSUFBSUMsV0FBV0gsT0FDOUJJLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxRQUFRLENBQUMsSUFBSUMsUUFBUSxDQUFDLEdBQUcsTUFDdENDLElBQUksQ0FBQztJQUNWO0FBQ0Y7QUFFQSxxR0FBcUc7QUFDckcsZUFBZWpDLHdCQUF3QmtDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxJQUFJO0lBQ3pELElBQUlDLFFBQVEsTUFBTWhDLElBQUk4QixXQUFXRDtJQUNqQyxJQUFJSSxRQUFRLE1BQU1qQyxJQUFJVyxPQUFPdUIsTUFBTSxDQUFDO1FBQUN2QixPQUFPVyxJQUFJLENBQUNVO1FBQVFEO0tBQUs7SUFDOUQsT0FBTyxRQUFRRTtBQUNqQjtBQUVBOzs7Q0FHQyxHQUNELGVBQWVuQyxPQUFPcUMsSUFBSTtJQUN4QixPQUFPLE1BQU05QixhQUFhVyxNQUFNLENBQUMsV0FBV21CO0FBQzlDO0FBRUE7Ozs7Q0FJQyxHQUNELGVBQWVwQyxXQUFXcUMsU0FBUyxFQUFFQyxHQUFHO0lBQ3RDLE1BQU1DLE1BQU0sTUFBTWpDLGFBQWFrQyxTQUFTLENBQUMsT0FBT0gsV0FBVztRQUFFSSxNQUFNO1FBQVFwQixNQUFNO0lBQVUsR0FBRyxPQUFPO1FBQUM7S0FBTztJQUM3RyxPQUFPLE1BQU1mLGFBQWFvQyxJQUFJLENBQUMsUUFBUUgsS0FBSy9CLFlBQVlZLE1BQU0sQ0FBQ2tCO0FBQ2pFO0FBRUE7Ozs7O0NBS0MsR0FDRCxlQUFleEMsVUFBVWlDLFFBQVEsRUFBRUMsSUFBSSxFQUFFVyxVQUFVO0lBQ2pELE1BQU1KLE1BQU0sTUFBTWpDLGFBQWFrQyxTQUFTLENBQUMsT0FBT2hDLFlBQVlZLE1BQU0sQ0FBQ1csV0FBVyxVQUFVLE9BQU87UUFBQztLQUFhO0lBQzdHLE1BQU1hLFNBQVM7UUFBRUgsTUFBTTtRQUFVcEIsTUFBTTtRQUFXVyxNQUFNQTtRQUFNVyxZQUFZQTtJQUFXO0lBQ3JGLE9BQU8sTUFBTXJDLGFBQWF1QyxVQUFVLENBQUNELFFBQVFMLEtBQUssS0FBSyxHQUFHO1FBQUM7S0FBYTtBQUMxRSIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvcGcvbGliL2NyeXB0by91dGlscy13ZWJjcnlwdG8uanM/NWY4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBub2RlQ3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBvc3RncmVzTWQ1UGFzc3dvcmRIYXNoLFxuICByYW5kb21CeXRlcyxcbiAgZGVyaXZlS2V5LFxuICBzaGEyNTYsXG4gIGhtYWNTaGEyNTYsXG4gIG1kNSxcbn1cblxuLyoqXG4gKiBUaGUgV2ViIENyeXB0byBBUEkgLSBncmFiYmVkIGZyb20gdGhlIE5vZGUuanMgbGlicmFyeSBvciB0aGUgZ2xvYmFsXG4gKiBAdHlwZSBDcnlwdG9cbiAqL1xuY29uc3Qgd2ViQ3J5cHRvID0gbm9kZUNyeXB0by53ZWJjcnlwdG8gfHwgZ2xvYmFsVGhpcy5jcnlwdG9cbi8qKlxuICogVGhlIFN1YnRsZUNyeXB0byBBUEkgZm9yIGxvdyBsZXZlbCBjcnlwdG8gb3BlcmF0aW9ucy5cbiAqIEB0eXBlIFN1YnRsZUNyeXB0b1xuICovXG5jb25zdCBzdWJ0bGVDcnlwdG8gPSB3ZWJDcnlwdG8uc3VidGxlXG5jb25zdCB0ZXh0RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7Kn0gbGVuZ3RoXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgcmV0dXJuIHdlYkNyeXB0by5nZXRSYW5kb21WYWx1ZXMoQnVmZmVyLmFsbG9jKGxlbmd0aCkpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1kNShzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbm9kZUNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoc3RyaW5nLCAndXRmLTgnKS5kaWdlc3QoJ2hleCcpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBgY3JlYXRlSGFzaCgpYCBmYWlsZWQgc28gd2UgYXJlIHByb2JhYmx5IG5vdCBpbiBOb2RlLmpzLCB1c2UgdGhlIFdlYkNyeXB0byBBUEkgaW5zdGVhZC5cbiAgICAvLyBOb3RlIHRoYXQgdGhlIE1ENSBhbGdvcml0aG0gb24gV2ViQ3J5cHRvIGlzIG5vdCBhdmFpbGFibGUgaW4gTm9kZS5qcy5cbiAgICAvLyBUaGlzIGlzIHdoeSB3ZSBjYW5ub3QganVzdCB1c2UgV2ViQ3J5cHRvIGluIGFsbCBlbnZpcm9ubWVudHMuXG4gICAgY29uc3QgZGF0YSA9IHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnID8gdGV4dEVuY29kZXIuZW5jb2RlKHN0cmluZykgOiBzdHJpbmdcbiAgICBjb25zdCBoYXNoID0gYXdhaXQgc3VidGxlQ3J5cHRvLmRpZ2VzdCgnTUQ1JywgZGF0YSlcbiAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoKSlcbiAgICAgIC5tYXAoKGIpID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpXG4gICAgICAuam9pbignJylcbiAgfVxufVxuXG4vLyBTZWUgQXV0aGVudGljYXRpb25NRDVQYXNzd29yZCBhdCBodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9kb2NzL2N1cnJlbnQvc3RhdGljL3Byb3RvY29sLWZsb3cuaHRtbFxuYXN5bmMgZnVuY3Rpb24gcG9zdGdyZXNNZDVQYXNzd29yZEhhc2godXNlciwgcGFzc3dvcmQsIHNhbHQpIHtcbiAgdmFyIGlubmVyID0gYXdhaXQgbWQ1KHBhc3N3b3JkICsgdXNlcilcbiAgdmFyIG91dGVyID0gYXdhaXQgbWQ1KEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKGlubmVyKSwgc2FsdF0pKVxuICByZXR1cm4gJ21kNScgKyBvdXRlclxufVxuXG4vKipcbiAqIENyZWF0ZSBhIFNIQS0yNTYgZGlnZXN0IG9mIHRoZSBnaXZlbiBkYXRhXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YVxuICovXG5hc3luYyBmdW5jdGlvbiBzaGEyNTYodGV4dCkge1xuICByZXR1cm4gYXdhaXQgc3VidGxlQ3J5cHRvLmRpZ2VzdCgnU0hBLTI1NicsIHRleHQpXG59XG5cbi8qKlxuICogU2lnbiB0aGUgbWVzc2FnZSB3aXRoIHRoZSBnaXZlbiBrZXlcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGtleUJ1ZmZlclxuICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICovXG5hc3luYyBmdW5jdGlvbiBobWFjU2hhMjU2KGtleUJ1ZmZlciwgbXNnKSB7XG4gIGNvbnN0IGtleSA9IGF3YWl0IHN1YnRsZUNyeXB0by5pbXBvcnRLZXkoJ3JhdycsIGtleUJ1ZmZlciwgeyBuYW1lOiAnSE1BQycsIGhhc2g6ICdTSEEtMjU2JyB9LCBmYWxzZSwgWydzaWduJ10pXG4gIHJldHVybiBhd2FpdCBzdWJ0bGVDcnlwdG8uc2lnbignSE1BQycsIGtleSwgdGV4dEVuY29kZXIuZW5jb2RlKG1zZykpXG59XG5cbi8qKlxuICogRGVyaXZlIGEga2V5IGZyb20gdGhlIHBhc3N3b3JkIGFuZCBzYWx0XG4gKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmRcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gc2FsdFxuICogQHBhcmFtIHtudW1iZXJ9IGl0ZXJhdGlvbnNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZGVyaXZlS2V5KHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zKSB7XG4gIGNvbnN0IGtleSA9IGF3YWl0IHN1YnRsZUNyeXB0by5pbXBvcnRLZXkoJ3JhdycsIHRleHRFbmNvZGVyLmVuY29kZShwYXNzd29yZCksICdQQktERjInLCBmYWxzZSwgWydkZXJpdmVCaXRzJ10pXG4gIGNvbnN0IHBhcmFtcyA9IHsgbmFtZTogJ1BCS0RGMicsIGhhc2g6ICdTSEEtMjU2Jywgc2FsdDogc2FsdCwgaXRlcmF0aW9uczogaXRlcmF0aW9ucyB9XG4gIHJldHVybiBhd2FpdCBzdWJ0bGVDcnlwdG8uZGVyaXZlQml0cyhwYXJhbXMsIGtleSwgMzIgKiA4LCBbJ2Rlcml2ZUJpdHMnXSlcbn1cbiJdLCJuYW1lcyI6WyJub2RlQ3J5cHRvIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwb3N0Z3Jlc01kNVBhc3N3b3JkSGFzaCIsInJhbmRvbUJ5dGVzIiwiZGVyaXZlS2V5Iiwic2hhMjU2IiwiaG1hY1NoYTI1NiIsIm1kNSIsIndlYkNyeXB0byIsIndlYmNyeXB0byIsImdsb2JhbFRoaXMiLCJjcnlwdG8iLCJzdWJ0bGVDcnlwdG8iLCJzdWJ0bGUiLCJ0ZXh0RW5jb2RlciIsIlRleHRFbmNvZGVyIiwibGVuZ3RoIiwiZ2V0UmFuZG9tVmFsdWVzIiwiQnVmZmVyIiwiYWxsb2MiLCJzdHJpbmciLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiZSIsImRhdGEiLCJlbmNvZGUiLCJoYXNoIiwiQXJyYXkiLCJmcm9tIiwiVWludDhBcnJheSIsIm1hcCIsImIiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiIsInVzZXIiLCJwYXNzd29yZCIsInNhbHQiLCJpbm5lciIsIm91dGVyIiwiY29uY2F0IiwidGV4dCIsImtleUJ1ZmZlciIsIm1zZyIsImtleSIsImltcG9ydEtleSIsIm5hbWUiLCJzaWduIiwiaXRlcmF0aW9ucyIsInBhcmFtcyIsImRlcml2ZUJpdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/crypto/utils-webcrypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/crypto/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/pg/lib/crypto/utils.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst useLegacyCrypto = parseInt(process.versions && process.versions.node && process.versions.node.split(\".\")[0]) < 15;\nif (useLegacyCrypto) {\n    // We are on an old version of Node.js that requires legacy crypto utilities.\n    module.exports = __webpack_require__(/*! ./utils-legacy */ \"(ssr)/./node_modules/pg/lib/crypto/utils-legacy.js\");\n} else {\n    module.exports = __webpack_require__(/*! ./utils-webcrypto */ \"(ssr)/./node_modules/pg/lib/crypto/utils-webcrypto.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL2NyeXB0by91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGtCQUFrQkMsU0FBU0MsUUFBUUMsUUFBUSxJQUFJRCxRQUFRQyxRQUFRLENBQUNDLElBQUksSUFBSUYsUUFBUUMsUUFBUSxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJO0FBQ3JILElBQUlMLGlCQUFpQjtJQUNuQiw2RUFBNkU7SUFDN0VNLGdIQUF5QjtBQUMzQixPQUFPO0lBQ0xBLHNIQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvcGcvbGliL2NyeXB0by91dGlscy5qcz9mMGUyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB1c2VMZWdhY3lDcnlwdG8gPSBwYXJzZUludChwcm9jZXNzLnZlcnNpb25zICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKVswXSkgPCAxNVxuaWYgKHVzZUxlZ2FjeUNyeXB0bykge1xuICAvLyBXZSBhcmUgb24gYW4gb2xkIHZlcnNpb24gb2YgTm9kZS5qcyB0aGF0IHJlcXVpcmVzIGxlZ2FjeSBjcnlwdG8gdXRpbGl0aWVzLlxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vdXRpbHMtbGVnYWN5Jylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi91dGlscy13ZWJjcnlwdG8nKVxufVxuIl0sIm5hbWVzIjpbInVzZUxlZ2FjeUNyeXB0byIsInBhcnNlSW50IiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSIsInNwbGl0IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/crypto/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/defaults.js":
/*!*****************************************!*\
  !*** ./node_modules/pg/lib/defaults.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = {\n    // database host. defaults to localhost\n    host: \"localhost\",\n    // database user's name\n    user: process.platform === \"win32\" ? process.env.USERNAME : process.env.USER,\n    // name of database to connect\n    database: undefined,\n    // database user's password\n    password: null,\n    // a Postgres connection string to be used instead of setting individual connection items\n    // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n    // in the defaults object.\n    connectionString: undefined,\n    // database port\n    port: 5432,\n    // number of rows to return at a time from a prepared statement's\n    // portal. 0 will return all rows at once\n    rows: 0,\n    // binary result mode\n    binary: false,\n    // Connection pool options - see https://github.com/brianc/node-pg-pool\n    // number of connections to use in connection pool\n    // 0 will disable connection pooling\n    max: 10,\n    // max milliseconds a client can go unused before it is removed\n    // from the pool and destroyed\n    idleTimeoutMillis: 30000,\n    client_encoding: \"\",\n    ssl: false,\n    application_name: undefined,\n    fallback_application_name: undefined,\n    options: undefined,\n    parseInputDatesAsUTC: false,\n    // max milliseconds any query using this connection will execute for before timing out in error.\n    // false=unlimited\n    statement_timeout: false,\n    // Abort any statement that waits longer than the specified duration in milliseconds while attempting to acquire a lock.\n    // false=unlimited\n    lock_timeout: false,\n    // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n    // false=unlimited\n    idle_in_transaction_session_timeout: false,\n    // max milliseconds to wait for query to complete (client side)\n    query_timeout: false,\n    connect_timeout: 0,\n    keepalives: 1,\n    keepalives_idle: 0\n};\nvar pgTypes = __webpack_require__(/*! pg-types */ \"(ssr)/./node_modules/pg-types/index.js\");\n// save default parsers\nvar parseBigInteger = pgTypes.getTypeParser(20, \"text\");\nvar parseBigIntegerArray = pgTypes.getTypeParser(1016, \"text\");\n// parse int8 so you can get your count values as actual numbers\nmodule.exports.__defineSetter__(\"parseInt8\", function(val) {\n    pgTypes.setTypeParser(20, \"text\", val ? pgTypes.getTypeParser(23, \"text\") : parseBigInteger);\n    pgTypes.setTypeParser(1016, \"text\", val ? pgTypes.getTypeParser(1007, \"text\") : parseBigIntegerArray);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL2RlZmF1bHRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmLHVDQUF1QztJQUN2Q0MsTUFBTTtJQUVOLHVCQUF1QjtJQUN2QkMsTUFBTUMsUUFBUUMsUUFBUSxLQUFLLFVBQVVELFFBQVFFLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHSCxRQUFRRSxHQUFHLENBQUNFLElBQUk7SUFFNUUsOEJBQThCO0lBQzlCQyxVQUFVQztJQUVWLDJCQUEyQjtJQUMzQkMsVUFBVTtJQUVWLHlGQUF5RjtJQUN6Rix5R0FBeUc7SUFDekcsMEJBQTBCO0lBQzFCQyxrQkFBa0JGO0lBRWxCLGdCQUFnQjtJQUNoQkcsTUFBTTtJQUVOLGlFQUFpRTtJQUNqRSx5Q0FBeUM7SUFDekNDLE1BQU07SUFFTixxQkFBcUI7SUFDckJDLFFBQVE7SUFFUix1RUFBdUU7SUFFdkUsa0RBQWtEO0lBQ2xELG9DQUFvQztJQUNwQ0MsS0FBSztJQUVMLCtEQUErRDtJQUMvRCw4QkFBOEI7SUFDOUJDLG1CQUFtQjtJQUVuQkMsaUJBQWlCO0lBRWpCQyxLQUFLO0lBRUxDLGtCQUFrQlY7SUFFbEJXLDJCQUEyQlg7SUFFM0JZLFNBQVNaO0lBRVRhLHNCQUFzQjtJQUV0QixnR0FBZ0c7SUFDaEcsa0JBQWtCO0lBQ2xCQyxtQkFBbUI7SUFFbkIsd0hBQXdIO0lBQ3hILGtCQUFrQjtJQUNsQkMsY0FBYztJQUVkLDJIQUEySDtJQUMzSCxrQkFBa0I7SUFDbEJDLHFDQUFxQztJQUVyQywrREFBK0Q7SUFDL0RDLGVBQWU7SUFFZkMsaUJBQWlCO0lBRWpCQyxZQUFZO0lBRVpDLGlCQUFpQjtBQUNuQjtBQUVBLElBQUlDLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3RCLHVCQUF1QjtBQUN2QixJQUFJQyxrQkFBa0JGLFFBQVFHLGFBQWEsQ0FBQyxJQUFJO0FBQ2hELElBQUlDLHVCQUF1QkosUUFBUUcsYUFBYSxDQUFDLE1BQU07QUFFdkQsZ0VBQWdFO0FBQ2hFbEMsT0FBT0MsT0FBTyxDQUFDbUMsZ0JBQWdCLENBQUMsYUFBYSxTQUFVQyxHQUFHO0lBQ3hETixRQUFRTyxhQUFhLENBQUMsSUFBSSxRQUFRRCxNQUFNTixRQUFRRyxhQUFhLENBQUMsSUFBSSxVQUFVRDtJQUM1RUYsUUFBUU8sYUFBYSxDQUFDLE1BQU0sUUFBUUQsTUFBTU4sUUFBUUcsYUFBYSxDQUFDLE1BQU0sVUFBVUM7QUFDbEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3BnL2xpYi9kZWZhdWx0cy5qcz81NWQzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gZGF0YWJhc2UgaG9zdC4gZGVmYXVsdHMgdG8gbG9jYWxob3N0XG4gIGhvc3Q6ICdsb2NhbGhvc3QnLFxuXG4gIC8vIGRhdGFiYXNlIHVzZXIncyBuYW1lXG4gIHVzZXI6IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyBwcm9jZXNzLmVudi5VU0VSTkFNRSA6IHByb2Nlc3MuZW52LlVTRVIsXG5cbiAgLy8gbmFtZSBvZiBkYXRhYmFzZSB0byBjb25uZWN0XG4gIGRhdGFiYXNlOiB1bmRlZmluZWQsXG5cbiAgLy8gZGF0YWJhc2UgdXNlcidzIHBhc3N3b3JkXG4gIHBhc3N3b3JkOiBudWxsLFxuXG4gIC8vIGEgUG9zdGdyZXMgY29ubmVjdGlvbiBzdHJpbmcgdG8gYmUgdXNlZCBpbnN0ZWFkIG9mIHNldHRpbmcgaW5kaXZpZHVhbCBjb25uZWN0aW9uIGl0ZW1zXG4gIC8vIE5PVEU6ICBTZXR0aW5nIHRoaXMgdmFsdWUgd2lsbCBjYXVzZSBpdCB0byBvdmVycmlkZSBhbnkgb3RoZXIgdmFsdWUgKHN1Y2ggYXMgZGF0YWJhc2Ugb3IgdXNlcikgZGVmaW5lZFxuICAvLyBpbiB0aGUgZGVmYXVsdHMgb2JqZWN0LlxuICBjb25uZWN0aW9uU3RyaW5nOiB1bmRlZmluZWQsXG5cbiAgLy8gZGF0YWJhc2UgcG9ydFxuICBwb3J0OiA1NDMyLFxuXG4gIC8vIG51bWJlciBvZiByb3dzIHRvIHJldHVybiBhdCBhIHRpbWUgZnJvbSBhIHByZXBhcmVkIHN0YXRlbWVudCdzXG4gIC8vIHBvcnRhbC4gMCB3aWxsIHJldHVybiBhbGwgcm93cyBhdCBvbmNlXG4gIHJvd3M6IDAsXG5cbiAgLy8gYmluYXJ5IHJlc3VsdCBtb2RlXG4gIGJpbmFyeTogZmFsc2UsXG5cbiAgLy8gQ29ubmVjdGlvbiBwb29sIG9wdGlvbnMgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JyaWFuYy9ub2RlLXBnLXBvb2xcblxuICAvLyBudW1iZXIgb2YgY29ubmVjdGlvbnMgdG8gdXNlIGluIGNvbm5lY3Rpb24gcG9vbFxuICAvLyAwIHdpbGwgZGlzYWJsZSBjb25uZWN0aW9uIHBvb2xpbmdcbiAgbWF4OiAxMCxcblxuICAvLyBtYXggbWlsbGlzZWNvbmRzIGEgY2xpZW50IGNhbiBnbyB1bnVzZWQgYmVmb3JlIGl0IGlzIHJlbW92ZWRcbiAgLy8gZnJvbSB0aGUgcG9vbCBhbmQgZGVzdHJveWVkXG4gIGlkbGVUaW1lb3V0TWlsbGlzOiAzMDAwMCxcblxuICBjbGllbnRfZW5jb2Rpbmc6ICcnLFxuXG4gIHNzbDogZmFsc2UsXG5cbiAgYXBwbGljYXRpb25fbmFtZTogdW5kZWZpbmVkLFxuXG4gIGZhbGxiYWNrX2FwcGxpY2F0aW9uX25hbWU6IHVuZGVmaW5lZCxcblxuICBvcHRpb25zOiB1bmRlZmluZWQsXG5cbiAgcGFyc2VJbnB1dERhdGVzQXNVVEM6IGZhbHNlLFxuXG4gIC8vIG1heCBtaWxsaXNlY29uZHMgYW55IHF1ZXJ5IHVzaW5nIHRoaXMgY29ubmVjdGlvbiB3aWxsIGV4ZWN1dGUgZm9yIGJlZm9yZSB0aW1pbmcgb3V0IGluIGVycm9yLlxuICAvLyBmYWxzZT11bmxpbWl0ZWRcbiAgc3RhdGVtZW50X3RpbWVvdXQ6IGZhbHNlLFxuXG4gIC8vIEFib3J0IGFueSBzdGF0ZW1lbnQgdGhhdCB3YWl0cyBsb25nZXIgdGhhbiB0aGUgc3BlY2lmaWVkIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcyB3aGlsZSBhdHRlbXB0aW5nIHRvIGFjcXVpcmUgYSBsb2NrLlxuICAvLyBmYWxzZT11bmxpbWl0ZWRcbiAgbG9ja190aW1lb3V0OiBmYWxzZSxcblxuICAvLyBUZXJtaW5hdGUgYW55IHNlc3Npb24gd2l0aCBhbiBvcGVuIHRyYW5zYWN0aW9uIHRoYXQgaGFzIGJlZW4gaWRsZSBmb3IgbG9uZ2VyIHRoYW4gdGhlIHNwZWNpZmllZCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcbiAgLy8gZmFsc2U9dW5saW1pdGVkXG4gIGlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0OiBmYWxzZSxcblxuICAvLyBtYXggbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIHF1ZXJ5IHRvIGNvbXBsZXRlIChjbGllbnQgc2lkZSlcbiAgcXVlcnlfdGltZW91dDogZmFsc2UsXG5cbiAgY29ubmVjdF90aW1lb3V0OiAwLFxuXG4gIGtlZXBhbGl2ZXM6IDEsXG5cbiAga2VlcGFsaXZlc19pZGxlOiAwLFxufVxuXG52YXIgcGdUeXBlcyA9IHJlcXVpcmUoJ3BnLXR5cGVzJylcbi8vIHNhdmUgZGVmYXVsdCBwYXJzZXJzXG52YXIgcGFyc2VCaWdJbnRlZ2VyID0gcGdUeXBlcy5nZXRUeXBlUGFyc2VyKDIwLCAndGV4dCcpXG52YXIgcGFyc2VCaWdJbnRlZ2VyQXJyYXkgPSBwZ1R5cGVzLmdldFR5cGVQYXJzZXIoMTAxNiwgJ3RleHQnKVxuXG4vLyBwYXJzZSBpbnQ4IHNvIHlvdSBjYW4gZ2V0IHlvdXIgY291bnQgdmFsdWVzIGFzIGFjdHVhbCBudW1iZXJzXG5tb2R1bGUuZXhwb3J0cy5fX2RlZmluZVNldHRlcl9fKCdwYXJzZUludDgnLCBmdW5jdGlvbiAodmFsKSB7XG4gIHBnVHlwZXMuc2V0VHlwZVBhcnNlcigyMCwgJ3RleHQnLCB2YWwgPyBwZ1R5cGVzLmdldFR5cGVQYXJzZXIoMjMsICd0ZXh0JykgOiBwYXJzZUJpZ0ludGVnZXIpXG4gIHBnVHlwZXMuc2V0VHlwZVBhcnNlcigxMDE2LCAndGV4dCcsIHZhbCA/IHBnVHlwZXMuZ2V0VHlwZVBhcnNlcigxMDA3LCAndGV4dCcpIDogcGFyc2VCaWdJbnRlZ2VyQXJyYXkpXG59KVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJob3N0IiwidXNlciIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsImVudiIsIlVTRVJOQU1FIiwiVVNFUiIsImRhdGFiYXNlIiwidW5kZWZpbmVkIiwicGFzc3dvcmQiLCJjb25uZWN0aW9uU3RyaW5nIiwicG9ydCIsInJvd3MiLCJiaW5hcnkiLCJtYXgiLCJpZGxlVGltZW91dE1pbGxpcyIsImNsaWVudF9lbmNvZGluZyIsInNzbCIsImFwcGxpY2F0aW9uX25hbWUiLCJmYWxsYmFja19hcHBsaWNhdGlvbl9uYW1lIiwib3B0aW9ucyIsInBhcnNlSW5wdXREYXRlc0FzVVRDIiwic3RhdGVtZW50X3RpbWVvdXQiLCJsb2NrX3RpbWVvdXQiLCJpZGxlX2luX3RyYW5zYWN0aW9uX3Nlc3Npb25fdGltZW91dCIsInF1ZXJ5X3RpbWVvdXQiLCJjb25uZWN0X3RpbWVvdXQiLCJrZWVwYWxpdmVzIiwia2VlcGFsaXZlc19pZGxlIiwicGdUeXBlcyIsInJlcXVpcmUiLCJwYXJzZUJpZ0ludGVnZXIiLCJnZXRUeXBlUGFyc2VyIiwicGFyc2VCaWdJbnRlZ2VyQXJyYXkiLCJfX2RlZmluZVNldHRlcl9fIiwidmFsIiwic2V0VHlwZVBhcnNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/defaults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/index.js":
/*!**************************************!*\
  !*** ./node_modules/pg/lib/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/pg/lib/client.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/pg/lib/defaults.js\");\nvar Connection = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/pg/lib/connection.js\");\nvar Pool = __webpack_require__(/*! pg-pool */ \"(ssr)/./node_modules/pg-pool/index.js\");\nconst { DatabaseError } = __webpack_require__(/*! pg-protocol */ \"(ssr)/./node_modules/pg-protocol/dist/index.js\");\nconst { escapeIdentifier, escapeLiteral } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/pg/lib/utils.js\");\nconst poolFactory = (Client)=>{\n    return class BoundPool extends Pool {\n        constructor(options){\n            super(options, Client);\n        }\n    };\n};\nvar PG = function(clientConstructor) {\n    this.defaults = defaults;\n    this.Client = clientConstructor;\n    this.Query = this.Client.Query;\n    this.Pool = poolFactory(this.Client);\n    this._pools = [];\n    this.Connection = Connection;\n    this.types = __webpack_require__(/*! pg-types */ \"(ssr)/./node_modules/pg-types/index.js\");\n    this.DatabaseError = DatabaseError;\n    this.escapeIdentifier = escapeIdentifier;\n    this.escapeLiteral = escapeLiteral;\n};\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== \"undefined\") {\n    module.exports = new PG(__webpack_require__(/*! ./native */ \"(ssr)/./node_modules/pg/lib/native/index.js\"));\n} else {\n    module.exports = new PG(Client);\n    // lazy require native module...the native module may not have installed\n    Object.defineProperty(module.exports, \"native\", ({\n        configurable: true,\n        enumerable: false,\n        get () {\n            var native = null;\n            try {\n                native = new PG(__webpack_require__(/*! ./native */ \"(ssr)/./node_modules/pg/lib/native/index.js\"));\n            } catch (err) {\n                if (err.code !== \"MODULE_NOT_FOUND\") {\n                    throw err;\n                }\n            }\n            // overwrite module.exports.native so that getter is never called again\n            Object.defineProperty(module.exports, \"native\", ({\n                value: native\n            }));\n            return native;\n        }\n    }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUUsYUFBYUYsbUJBQU9BLENBQUM7QUFDekIsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUM7QUFDbkIsTUFBTSxFQUFFSSxhQUFhLEVBQUUsR0FBR0osbUJBQU9BLENBQUM7QUFDbEMsTUFBTSxFQUFFSyxnQkFBZ0IsRUFBRUMsYUFBYSxFQUFFLEdBQUdOLG1CQUFPQSxDQUFDO0FBRXBELE1BQU1PLGNBQWMsQ0FBQ1I7SUFDbkIsT0FBTyxNQUFNUyxrQkFBa0JMO1FBQzdCTSxZQUFZQyxPQUFPLENBQUU7WUFDbkIsS0FBSyxDQUFDQSxTQUFTWDtRQUNqQjtJQUNGO0FBQ0Y7QUFFQSxJQUFJWSxLQUFLLFNBQVVDLGlCQUFpQjtJQUNsQyxJQUFJLENBQUNYLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDRixNQUFNLEdBQUdhO0lBQ2QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDZCxNQUFNLENBQUNjLEtBQUs7SUFDOUIsSUFBSSxDQUFDVixJQUFJLEdBQUdJLFlBQVksSUFBSSxDQUFDUixNQUFNO0lBQ25DLElBQUksQ0FBQ2UsTUFBTSxHQUFHLEVBQUU7SUFDaEIsSUFBSSxDQUFDWixVQUFVLEdBQUdBO0lBQ2xCLElBQUksQ0FBQ2EsS0FBSyxHQUFHZixtQkFBT0EsQ0FBQztJQUNyQixJQUFJLENBQUNJLGFBQWEsR0FBR0E7SUFDckIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0E7SUFDeEIsSUFBSSxDQUFDQyxhQUFhLEdBQUdBO0FBQ3ZCO0FBRUEsSUFBSSxPQUFPVSxRQUFRQyxHQUFHLENBQUNDLG9CQUFvQixLQUFLLGFBQWE7SUFDM0RDLE9BQU9DLE9BQU8sR0FBRyxJQUFJVCxHQUFHWCxtQkFBT0EsQ0FBQztBQUNsQyxPQUFPO0lBQ0xtQixPQUFPQyxPQUFPLEdBQUcsSUFBSVQsR0FBR1o7SUFFeEIsd0VBQXdFO0lBQ3hFc0IsaURBQWdEO1FBQzlDRSxjQUFjO1FBQ2RDLFlBQVk7UUFDWkM7WUFDRSxJQUFJQyxTQUFTO1lBQ2IsSUFBSTtnQkFDRkEsU0FBUyxJQUFJZixHQUFHWCxtQkFBT0EsQ0FBQztZQUMxQixFQUFFLE9BQU8yQixLQUFLO2dCQUNaLElBQUlBLElBQUlDLElBQUksS0FBSyxvQkFBb0I7b0JBQ25DLE1BQU1EO2dCQUNSO1lBQ0Y7WUFFQSx1RUFBdUU7WUFDdkVOLGlEQUFnRDtnQkFDOUNRLE9BQU9IO1lBQ1QsQ0FBQyxFQUFDO1lBRUYsT0FBT0E7UUFDVDtJQUNGLENBQUMsRUFBQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9wZy9saWIvaW5kZXguanM/NzZhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIENsaWVudCA9IHJlcXVpcmUoJy4vY2xpZW50JylcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKVxudmFyIENvbm5lY3Rpb24gPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24nKVxudmFyIFBvb2wgPSByZXF1aXJlKCdwZy1wb29sJylcbmNvbnN0IHsgRGF0YWJhc2VFcnJvciB9ID0gcmVxdWlyZSgncGctcHJvdG9jb2wnKVxuY29uc3QgeyBlc2NhcGVJZGVudGlmaWVyLCBlc2NhcGVMaXRlcmFsIH0gPSByZXF1aXJlKCcuL3V0aWxzJylcblxuY29uc3QgcG9vbEZhY3RvcnkgPSAoQ2xpZW50KSA9PiB7XG4gIHJldHVybiBjbGFzcyBCb3VuZFBvb2wgZXh0ZW5kcyBQb29sIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICBzdXBlcihvcHRpb25zLCBDbGllbnQpXG4gICAgfVxuICB9XG59XG5cbnZhciBQRyA9IGZ1bmN0aW9uIChjbGllbnRDb25zdHJ1Y3Rvcikge1xuICB0aGlzLmRlZmF1bHRzID0gZGVmYXVsdHNcbiAgdGhpcy5DbGllbnQgPSBjbGllbnRDb25zdHJ1Y3RvclxuICB0aGlzLlF1ZXJ5ID0gdGhpcy5DbGllbnQuUXVlcnlcbiAgdGhpcy5Qb29sID0gcG9vbEZhY3RvcnkodGhpcy5DbGllbnQpXG4gIHRoaXMuX3Bvb2xzID0gW11cbiAgdGhpcy5Db25uZWN0aW9uID0gQ29ubmVjdGlvblxuICB0aGlzLnR5cGVzID0gcmVxdWlyZSgncGctdHlwZXMnKVxuICB0aGlzLkRhdGFiYXNlRXJyb3IgPSBEYXRhYmFzZUVycm9yXG4gIHRoaXMuZXNjYXBlSWRlbnRpZmllciA9IGVzY2FwZUlkZW50aWZpZXJcbiAgdGhpcy5lc2NhcGVMaXRlcmFsID0gZXNjYXBlTGl0ZXJhbFxufVxuXG5pZiAodHlwZW9mIHByb2Nlc3MuZW52Lk5PREVfUEdfRk9SQ0VfTkFUSVZFICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IG5ldyBQRyhyZXF1aXJlKCcuL25hdGl2ZScpKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBuZXcgUEcoQ2xpZW50KVxuXG4gIC8vIGxhenkgcmVxdWlyZSBuYXRpdmUgbW9kdWxlLi4udGhlIG5hdGl2ZSBtb2R1bGUgbWF5IG5vdCBoYXZlIGluc3RhbGxlZFxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICduYXRpdmUnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldCgpIHtcbiAgICAgIHZhciBuYXRpdmUgPSBudWxsXG4gICAgICB0cnkge1xuICAgICAgICBuYXRpdmUgPSBuZXcgUEcocmVxdWlyZSgnLi9uYXRpdmUnKSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyLmNvZGUgIT09ICdNT0RVTEVfTk9UX0ZPVU5EJykge1xuICAgICAgICAgIHRocm93IGVyclxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIG92ZXJ3cml0ZSBtb2R1bGUuZXhwb3J0cy5uYXRpdmUgc28gdGhhdCBnZXR0ZXIgaXMgbmV2ZXIgY2FsbGVkIGFnYWluXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICduYXRpdmUnLCB7XG4gICAgICAgIHZhbHVlOiBuYXRpdmUsXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gbmF0aXZlXG4gICAgfSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJDbGllbnQiLCJyZXF1aXJlIiwiZGVmYXVsdHMiLCJDb25uZWN0aW9uIiwiUG9vbCIsIkRhdGFiYXNlRXJyb3IiLCJlc2NhcGVJZGVudGlmaWVyIiwiZXNjYXBlTGl0ZXJhbCIsInBvb2xGYWN0b3J5IiwiQm91bmRQb29sIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiUEciLCJjbGllbnRDb25zdHJ1Y3RvciIsIlF1ZXJ5IiwiX3Bvb2xzIiwidHlwZXMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9QR19GT1JDRV9OQVRJVkUiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibmF0aXZlIiwiZXJyIiwiY29kZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/native/client.js":
/*!**********************************************!*\
  !*** ./node_modules/pg/lib/native/client.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// eslint-disable-next-line\nvar Native;\ntry {\n    // Wrap this `require()` in a try-catch to avoid upstream bundlers from complaining that this might not be available since it is an optional import\n    Native = __webpack_require__(/*! pg-native */ \"?1c70\");\n} catch (e) {\n    throw e;\n}\nvar TypeOverrides = __webpack_require__(/*! ../type-overrides */ \"(ssr)/./node_modules/pg/lib/type-overrides.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar ConnectionParameters = __webpack_require__(/*! ../connection-parameters */ \"(ssr)/./node_modules/pg/lib/connection-parameters.js\");\nvar NativeQuery = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/pg/lib/native/query.js\");\nvar Client = module.exports = function(config) {\n    EventEmitter.call(this);\n    config = config || {};\n    this._Promise = config.Promise || global.Promise;\n    this._types = new TypeOverrides(config.types);\n    this.native = new Native({\n        types: this._types\n    });\n    this._queryQueue = [];\n    this._ending = false;\n    this._connecting = false;\n    this._connected = false;\n    this._queryable = true;\n    // keep these on the object for legacy reasons\n    // for the time being. TODO: deprecate all this jazz\n    var cp = this.connectionParameters = new ConnectionParameters(config);\n    if (config.nativeConnectionString) cp.nativeConnectionString = config.nativeConnectionString;\n    this.user = cp.user;\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, \"password\", {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: cp.password\n    });\n    this.database = cp.database;\n    this.host = cp.host;\n    this.port = cp.port;\n    // a hash to hold named queries\n    this.namedQueries = {};\n};\nClient.Query = NativeQuery;\nutil.inherits(Client, EventEmitter);\nClient.prototype._errorAllQueries = function(err) {\n    const enqueueError = (query)=>{\n        process.nextTick(()=>{\n            query.native = this.native;\n            query.handleError(err);\n        });\n    };\n    if (this._hasActiveQuery()) {\n        enqueueError(this._activeQuery);\n        this._activeQuery = null;\n    }\n    this._queryQueue.forEach(enqueueError);\n    this._queryQueue.length = 0;\n};\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function(cb) {\n    var self = this;\n    if (this._connecting) {\n        process.nextTick(()=>cb(new Error(\"Client has already been connected. You cannot reuse a client.\")));\n        return;\n    }\n    this._connecting = true;\n    this.connectionParameters.getLibpqConnectionString(function(err, conString) {\n        if (self.connectionParameters.nativeConnectionString) conString = self.connectionParameters.nativeConnectionString;\n        if (err) return cb(err);\n        self.native.connect(conString, function(err) {\n            if (err) {\n                self.native.end();\n                return cb(err);\n            }\n            // set internal states to connected\n            self._connected = true;\n            // handle connection errors from the native layer\n            self.native.on(\"error\", function(err) {\n                self._queryable = false;\n                self._errorAllQueries(err);\n                self.emit(\"error\", err);\n            });\n            self.native.on(\"notification\", function(msg) {\n                self.emit(\"notification\", {\n                    channel: msg.relname,\n                    payload: msg.extra\n                });\n            });\n            // signal we are connected now\n            self.emit(\"connect\");\n            self._pulseQueryQueue(true);\n            cb();\n        });\n    });\n};\nClient.prototype.connect = function(callback) {\n    if (callback) {\n        this._connect(callback);\n        return;\n    }\n    return new this._Promise((resolve, reject)=>{\n        this._connect((error)=>{\n            if (error) {\n                reject(error);\n            } else {\n                resolve();\n            }\n        });\n    });\n};\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function(config, values, callback) {\n    var query;\n    var result;\n    var readTimeout;\n    var readTimeoutTimer;\n    var queryCallback;\n    if (config === null || config === undefined) {\n        throw new TypeError(\"Client was passed a null or undefined query\");\n    } else if (typeof config.submit === \"function\") {\n        readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n        result = query = config;\n        // accept query(new Query(...), (err, res) => { }) style\n        if (typeof values === \"function\") {\n            config.callback = values;\n        }\n    } else {\n        readTimeout = this.connectionParameters.query_timeout;\n        query = new NativeQuery(config, values, callback);\n        if (!query.callback) {\n            let resolveOut, rejectOut;\n            result = new this._Promise((resolve, reject)=>{\n                resolveOut = resolve;\n                rejectOut = reject;\n            }).catch((err)=>{\n                Error.captureStackTrace(err);\n                throw err;\n            });\n            query.callback = (err, res)=>err ? rejectOut(err) : resolveOut(res);\n        }\n    }\n    if (readTimeout) {\n        queryCallback = query.callback;\n        readTimeoutTimer = setTimeout(()=>{\n            var error = new Error(\"Query read timeout\");\n            process.nextTick(()=>{\n                query.handleError(error, this.connection);\n            });\n            queryCallback(error);\n            // we already returned an error,\n            // just do nothing if query completes\n            query.callback = ()=>{};\n            // Remove from queue\n            var index = this._queryQueue.indexOf(query);\n            if (index > -1) {\n                this._queryQueue.splice(index, 1);\n            }\n            this._pulseQueryQueue();\n        }, readTimeout);\n        query.callback = (err, res)=>{\n            clearTimeout(readTimeoutTimer);\n            queryCallback(err, res);\n        };\n    }\n    if (!this._queryable) {\n        query.native = this.native;\n        process.nextTick(()=>{\n            query.handleError(new Error(\"Client has encountered a connection error and is not queryable\"));\n        });\n        return result;\n    }\n    if (this._ending) {\n        query.native = this.native;\n        process.nextTick(()=>{\n            query.handleError(new Error(\"Client was closed and is not queryable\"));\n        });\n        return result;\n    }\n    this._queryQueue.push(query);\n    this._pulseQueryQueue();\n    return result;\n};\n// disconnect from the backend server\nClient.prototype.end = function(cb) {\n    var self = this;\n    this._ending = true;\n    if (!this._connected) {\n        this.once(\"connect\", this.end.bind(this, cb));\n    }\n    var result;\n    if (!cb) {\n        result = new this._Promise(function(resolve, reject) {\n            cb = (err)=>err ? reject(err) : resolve();\n        });\n    }\n    this.native.end(function() {\n        self._errorAllQueries(new Error(\"Connection terminated\"));\n        process.nextTick(()=>{\n            self.emit(\"end\");\n            if (cb) cb();\n        });\n    });\n    return result;\n};\nClient.prototype._hasActiveQuery = function() {\n    return this._activeQuery && this._activeQuery.state !== \"error\" && this._activeQuery.state !== \"end\";\n};\nClient.prototype._pulseQueryQueue = function(initialConnection) {\n    if (!this._connected) {\n        return;\n    }\n    if (this._hasActiveQuery()) {\n        return;\n    }\n    var query = this._queryQueue.shift();\n    if (!query) {\n        if (!initialConnection) {\n            this.emit(\"drain\");\n        }\n        return;\n    }\n    this._activeQuery = query;\n    query.submit(this);\n    var self = this;\n    query.once(\"_done\", function() {\n        self._pulseQueryQueue();\n    });\n};\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function(query) {\n    if (this._activeQuery === query) {\n        this.native.cancel(function() {});\n    } else if (this._queryQueue.indexOf(query) !== -1) {\n        this._queryQueue.splice(this._queryQueue.indexOf(query), 1);\n    }\n};\nClient.prototype.ref = function() {};\nClient.prototype.unref = function() {};\nClient.prototype.setTypeParser = function(oid, format, parseFn) {\n    return this._types.setTypeParser(oid, format, parseFn);\n};\nClient.prototype.getTypeParser = function(oid, format) {\n    return this._types.getTypeParser(oid, format);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/native/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/native/index.js":
/*!*********************************************!*\
  !*** ./node_modules/pg/lib/native/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/pg/lib/native/client.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL25hdGl2ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBQSxvR0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3BnL2xpYi9uYXRpdmUvaW5kZXguanM/NjBmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jbGllbnQnKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/native/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/native/query.js":
/*!*********************************************!*\
  !*** ./node_modules/pg/lib/native/query.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/pg/lib/utils.js\");\nvar NativeQuery = module.exports = function(config, values, callback) {\n    EventEmitter.call(this);\n    config = utils.normalizeQueryConfig(config, values, callback);\n    this.text = config.text;\n    this.values = config.values;\n    this.name = config.name;\n    this.callback = config.callback;\n    this.state = \"new\";\n    this._arrayMode = config.rowMode === \"array\";\n    // if the 'row' event is listened for\n    // then emit them as they come in\n    // without setting singleRowMode to true\n    // this has almost no meaning because libpq\n    // reads all rows into memory befor returning any\n    this._emitRowEvents = false;\n    this.on(\"newListener\", (function(event) {\n        if (event === \"row\") this._emitRowEvents = true;\n    }).bind(this));\n};\nutil.inherits(NativeQuery, EventEmitter);\nvar errorFieldMap = {\n    /* eslint-disable quote-props */ sqlState: \"code\",\n    statementPosition: \"position\",\n    messagePrimary: \"message\",\n    context: \"where\",\n    schemaName: \"schema\",\n    tableName: \"table\",\n    columnName: \"column\",\n    dataTypeName: \"dataType\",\n    constraintName: \"constraint\",\n    sourceFile: \"file\",\n    sourceLine: \"line\",\n    sourceFunction: \"routine\"\n};\nNativeQuery.prototype.handleError = function(err) {\n    // copy pq error fields into the error object\n    var fields = this.native.pq.resultErrorFields();\n    if (fields) {\n        for(var key in fields){\n            var normalizedFieldName = errorFieldMap[key] || key;\n            err[normalizedFieldName] = fields[key];\n        }\n    }\n    if (this.callback) {\n        this.callback(err);\n    } else {\n        this.emit(\"error\", err);\n    }\n    this.state = \"error\";\n};\nNativeQuery.prototype.then = function(onSuccess, onFailure) {\n    return this._getPromise().then(onSuccess, onFailure);\n};\nNativeQuery.prototype.catch = function(callback) {\n    return this._getPromise().catch(callback);\n};\nNativeQuery.prototype._getPromise = function() {\n    if (this._promise) return this._promise;\n    this._promise = new Promise((function(resolve, reject) {\n        this._once(\"end\", resolve);\n        this._once(\"error\", reject);\n    }).bind(this));\n    return this._promise;\n};\nNativeQuery.prototype.submit = function(client) {\n    this.state = \"running\";\n    var self = this;\n    this.native = client.native;\n    client.native.arrayMode = this._arrayMode;\n    var after = function(err, rows, results) {\n        client.native.arrayMode = false;\n        setImmediate(function() {\n            self.emit(\"_done\");\n        });\n        // handle possible query error\n        if (err) {\n            return self.handleError(err);\n        }\n        // emit row events for each row in the result\n        if (self._emitRowEvents) {\n            if (results.length > 1) {\n                rows.forEach((rowOfRows, i)=>{\n                    rowOfRows.forEach((row)=>{\n                        self.emit(\"row\", row, results[i]);\n                    });\n                });\n            } else {\n                rows.forEach(function(row) {\n                    self.emit(\"row\", row, results);\n                });\n            }\n        }\n        // handle successful result\n        self.state = \"end\";\n        self.emit(\"end\", results);\n        if (self.callback) {\n            self.callback(null, results);\n        }\n    };\n    if (process.domain) {\n        after = process.domain.bind(after);\n    }\n    // named query\n    if (this.name) {\n        if (this.name.length > 63) {\n            /* eslint-disable no-console */ console.error(\"Warning! Postgres only supports 63 characters for query names.\");\n            console.error(\"You supplied %s (%s)\", this.name, this.name.length);\n            console.error(\"This can cause conflicts and silent errors executing queries\");\n        /* eslint-enable no-console */ }\n        var values = (this.values || []).map(utils.prepareValue);\n        // check if the client has already executed this named query\n        // if so...just execute it again - skip the planning phase\n        if (client.namedQueries[this.name]) {\n            if (this.text && client.namedQueries[this.name] !== this.text) {\n                const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`);\n                return after(err);\n            }\n            return client.native.execute(this.name, values, after);\n        }\n        // plan the named query the first time, then execute it\n        return client.native.prepare(this.name, this.text, values.length, function(err) {\n            if (err) return after(err);\n            client.namedQueries[self.name] = self.text;\n            return self.native.execute(self.name, values, after);\n        });\n    } else if (this.values) {\n        if (!Array.isArray(this.values)) {\n            const err = new Error(\"Query values must be an array\");\n            return after(err);\n        }\n        var vals = this.values.map(utils.prepareValue);\n        client.native.query(this.text, vals, after);\n    } else {\n        client.native.query(this.text, after);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/native/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/query.js":
/*!**************************************!*\
  !*** ./node_modules/pg/lib/query.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst Result = __webpack_require__(/*! ./result */ \"(ssr)/./node_modules/pg/lib/result.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/pg/lib/utils.js\");\nclass Query extends EventEmitter {\n    constructor(config, values, callback){\n        super();\n        config = utils.normalizeQueryConfig(config, values, callback);\n        this.text = config.text;\n        this.values = config.values;\n        this.rows = config.rows;\n        this.types = config.types;\n        this.name = config.name;\n        this.binary = config.binary;\n        // use unique portal name each time\n        this.portal = config.portal || \"\";\n        this.callback = config.callback;\n        this._rowMode = config.rowMode;\n        if (process.domain && config.callback) {\n            this.callback = process.domain.bind(config.callback);\n        }\n        this._result = new Result(this._rowMode, this.types);\n        // potential for multiple results\n        this._results = this._result;\n        this._canceledDueToError = false;\n    }\n    requiresPreparation() {\n        // named queries must always be prepared\n        if (this.name) {\n            return true;\n        }\n        // always prepare if there are max number of rows expected per\n        // portal execution\n        if (this.rows) {\n            return true;\n        }\n        // don't prepare empty text queries\n        if (!this.text) {\n            return false;\n        }\n        // prepare if there are values\n        if (!this.values) {\n            return false;\n        }\n        return this.values.length > 0;\n    }\n    _checkForMultirow() {\n        // if we already have a result with a command property\n        // then we've already executed one query in a multi-statement simple query\n        // turn our results into an array of results\n        if (this._result.command) {\n            if (!Array.isArray(this._results)) {\n                this._results = [\n                    this._result\n                ];\n            }\n            this._result = new Result(this._rowMode, this.types);\n            this._results.push(this._result);\n        }\n    }\n    // associates row metadata from the supplied\n    // message with this query object\n    // metadata used when parsing row results\n    handleRowDescription(msg) {\n        this._checkForMultirow();\n        this._result.addFields(msg.fields);\n        this._accumulateRows = this.callback || !this.listeners(\"row\").length;\n    }\n    handleDataRow(msg) {\n        let row;\n        if (this._canceledDueToError) {\n            return;\n        }\n        try {\n            row = this._result.parseRow(msg.fields);\n        } catch (err) {\n            this._canceledDueToError = err;\n            return;\n        }\n        this.emit(\"row\", row, this._result);\n        if (this._accumulateRows) {\n            this._result.addRow(row);\n        }\n    }\n    handleCommandComplete(msg, connection) {\n        this._checkForMultirow();\n        this._result.addCommandComplete(msg);\n        // need to sync after each command complete of a prepared statement\n        // if we were using a row count which results in multiple calls to _getRows\n        if (this.rows) {\n            connection.sync();\n        }\n    }\n    // if a named prepared statement is created with empty query text\n    // the backend will send an emptyQuery message but *not* a command complete message\n    // since we pipeline sync immediately after execute we don't need to do anything here\n    // unless we have rows specified, in which case we did not pipeline the intial sync call\n    handleEmptyQuery(connection) {\n        if (this.rows) {\n            connection.sync();\n        }\n    }\n    handleError(err, connection) {\n        // need to sync after error during a prepared statement\n        if (this._canceledDueToError) {\n            err = this._canceledDueToError;\n            this._canceledDueToError = false;\n        }\n        // if callback supplied do not emit error event as uncaught error\n        // events will bubble up to node process\n        if (this.callback) {\n            return this.callback(err);\n        }\n        this.emit(\"error\", err);\n    }\n    handleReadyForQuery(con) {\n        if (this._canceledDueToError) {\n            return this.handleError(this._canceledDueToError, con);\n        }\n        if (this.callback) {\n            try {\n                this.callback(null, this._results);\n            } catch (err) {\n                process.nextTick(()=>{\n                    throw err;\n                });\n            }\n        }\n        this.emit(\"end\", this._results);\n    }\n    submit(connection) {\n        if (typeof this.text !== \"string\" && typeof this.name !== \"string\") {\n            return new Error(\"A query must have either text or a name. Supplying neither is unsupported.\");\n        }\n        const previous = connection.parsedStatements[this.name];\n        if (this.text && previous && this.text !== previous) {\n            return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`);\n        }\n        if (this.values && !Array.isArray(this.values)) {\n            return new Error(\"Query values must be an array\");\n        }\n        if (this.requiresPreparation()) {\n            this.prepare(connection);\n        } else {\n            connection.query(this.text);\n        }\n        return null;\n    }\n    hasBeenParsed(connection) {\n        return this.name && connection.parsedStatements[this.name];\n    }\n    handlePortalSuspended(connection) {\n        this._getRows(connection, this.rows);\n    }\n    _getRows(connection, rows) {\n        connection.execute({\n            portal: this.portal,\n            rows: rows\n        });\n        // if we're not reading pages of rows send the sync command\n        // to indicate the pipeline is finished\n        if (!rows) {\n            connection.sync();\n        } else {\n            // otherwise flush the call out to read more rows\n            connection.flush();\n        }\n    }\n    // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n    prepare(connection) {\n        // TODO refactor this poor encapsulation\n        if (!this.hasBeenParsed(connection)) {\n            connection.parse({\n                text: this.text,\n                name: this.name,\n                types: this.types\n            });\n        }\n        // because we're mapping user supplied values to\n        // postgres wire protocol compatible values it could\n        // throw an exception, so try/catch this section\n        try {\n            connection.bind({\n                portal: this.portal,\n                statement: this.name,\n                values: this.values,\n                binary: this.binary,\n                valueMapper: utils.prepareValue\n            });\n        } catch (err) {\n            this.handleError(err, connection);\n            return;\n        }\n        connection.describe({\n            type: \"P\",\n            name: this.portal || \"\"\n        });\n        this._getRows(connection, this.rows);\n    }\n    handleCopyInResponse(connection) {\n        connection.sendCopyFail(\"No source stream defined\");\n    }\n    // eslint-disable-next-line no-unused-vars\n    handleCopyData(msg, connection) {\n    // noop\n    }\n}\nmodule.exports = Query;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/result.js":
/*!***************************************!*\
  !*** ./node_modules/pg/lib/result.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar types = __webpack_require__(/*! pg-types */ \"(ssr)/./node_modules/pg-types/index.js\");\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/;\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n    constructor(rowMode, types){\n        this.command = null;\n        this.rowCount = null;\n        this.oid = null;\n        this.rows = [];\n        this.fields = [];\n        this._parsers = undefined;\n        this._types = types;\n        this.RowCtor = null;\n        this.rowAsArray = rowMode === \"array\";\n        if (this.rowAsArray) {\n            this.parseRow = this._parseRowAsArray;\n        }\n        this._prebuiltEmptyResultObject = null;\n    }\n    // adds a command complete message\n    addCommandComplete(msg) {\n        var match;\n        if (msg.text) {\n            // pure javascript\n            match = matchRegexp.exec(msg.text);\n        } else {\n            // native bindings\n            match = matchRegexp.exec(msg.command);\n        }\n        if (match) {\n            this.command = match[1];\n            if (match[3]) {\n                // COMMMAND OID ROWS\n                this.oid = parseInt(match[2], 10);\n                this.rowCount = parseInt(match[3], 10);\n            } else if (match[2]) {\n                // COMMAND ROWS\n                this.rowCount = parseInt(match[2], 10);\n            }\n        }\n    }\n    _parseRowAsArray(rowData) {\n        var row = new Array(rowData.length);\n        for(var i = 0, len = rowData.length; i < len; i++){\n            var rawValue = rowData[i];\n            if (rawValue !== null) {\n                row[i] = this._parsers[i](rawValue);\n            } else {\n                row[i] = null;\n            }\n        }\n        return row;\n    }\n    parseRow(rowData) {\n        var row = {\n            ...this._prebuiltEmptyResultObject\n        };\n        for(var i = 0, len = rowData.length; i < len; i++){\n            var rawValue = rowData[i];\n            var field = this.fields[i].name;\n            if (rawValue !== null) {\n                row[field] = this._parsers[i](rawValue);\n            } else {\n                row[field] = null;\n            }\n        }\n        return row;\n    }\n    addRow(row) {\n        this.rows.push(row);\n    }\n    addFields(fieldDescriptions) {\n        // clears field definitions\n        // multiple query statements in 1 action can result in multiple sets\n        // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n        // you need to reset the fields\n        this.fields = fieldDescriptions;\n        if (this.fields.length) {\n            this._parsers = new Array(fieldDescriptions.length);\n        }\n        var row = {};\n        for(var i = 0; i < fieldDescriptions.length; i++){\n            var desc = fieldDescriptions[i];\n            row[desc.name] = null;\n            if (this._types) {\n                this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || \"text\");\n            } else {\n                this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || \"text\");\n            }\n        }\n        this._prebuiltEmptyResultObject = {\n            ...row\n        };\n    }\n}\nmodule.exports = Result;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL3Jlc3VsdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLElBQUlDLGNBQWM7QUFFbEIsb0NBQW9DO0FBQ3BDLDhCQUE4QjtBQUM5QixpREFBaUQ7QUFDakQsTUFBTUM7SUFDSkMsWUFBWUMsT0FBTyxFQUFFTCxLQUFLLENBQUU7UUFDMUIsSUFBSSxDQUFDTSxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLEdBQUcsR0FBRztRQUNYLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHQztRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBR2I7UUFDZCxJQUFJLENBQUNjLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsVUFBVSxHQUFHVixZQUFZO1FBQzlCLElBQUksSUFBSSxDQUFDVSxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSSxDQUFDQyxnQkFBZ0I7UUFDdkM7UUFDQSxJQUFJLENBQUNDLDBCQUEwQixHQUFHO0lBQ3BDO0lBRUEsa0NBQWtDO0lBQ2xDQyxtQkFBbUJDLEdBQUcsRUFBRTtRQUN0QixJQUFJQztRQUNKLElBQUlELElBQUlFLElBQUksRUFBRTtZQUNaLGtCQUFrQjtZQUNsQkQsUUFBUW5CLFlBQVlxQixJQUFJLENBQUNILElBQUlFLElBQUk7UUFDbkMsT0FBTztZQUNMLGtCQUFrQjtZQUNsQkQsUUFBUW5CLFlBQVlxQixJQUFJLENBQUNILElBQUlkLE9BQU87UUFDdEM7UUFDQSxJQUFJZSxPQUFPO1lBQ1QsSUFBSSxDQUFDZixPQUFPLEdBQUdlLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLElBQUlBLEtBQUssQ0FBQyxFQUFFLEVBQUU7Z0JBQ1osb0JBQW9CO2dCQUNwQixJQUFJLENBQUNiLEdBQUcsR0FBR2dCLFNBQVNILEtBQUssQ0FBQyxFQUFFLEVBQUU7Z0JBQzlCLElBQUksQ0FBQ2QsUUFBUSxHQUFHaUIsU0FBU0gsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNyQyxPQUFPLElBQUlBLEtBQUssQ0FBQyxFQUFFLEVBQUU7Z0JBQ25CLGVBQWU7Z0JBQ2YsSUFBSSxDQUFDZCxRQUFRLEdBQUdpQixTQUFTSCxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3JDO1FBQ0Y7SUFDRjtJQUVBSixpQkFBaUJRLE9BQU8sRUFBRTtRQUN4QixJQUFJQyxNQUFNLElBQUlDLE1BQU1GLFFBQVFHLE1BQU07UUFDbEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLE1BQU1MLFFBQVFHLE1BQU0sRUFBRUMsSUFBSUMsS0FBS0QsSUFBSztZQUNsRCxJQUFJRSxXQUFXTixPQUFPLENBQUNJLEVBQUU7WUFDekIsSUFBSUUsYUFBYSxNQUFNO2dCQUNyQkwsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBSSxDQUFDbEIsUUFBUSxDQUFDa0IsRUFBRSxDQUFDRTtZQUM1QixPQUFPO2dCQUNMTCxHQUFHLENBQUNHLEVBQUUsR0FBRztZQUNYO1FBQ0Y7UUFDQSxPQUFPSDtJQUNUO0lBRUFWLFNBQVNTLE9BQU8sRUFBRTtRQUNoQixJQUFJQyxNQUFNO1lBQUUsR0FBRyxJQUFJLENBQUNSLDBCQUEwQjtRQUFDO1FBQy9DLElBQUssSUFBSVcsSUFBSSxHQUFHQyxNQUFNTCxRQUFRRyxNQUFNLEVBQUVDLElBQUlDLEtBQUtELElBQUs7WUFDbEQsSUFBSUUsV0FBV04sT0FBTyxDQUFDSSxFQUFFO1lBQ3pCLElBQUlHLFFBQVEsSUFBSSxDQUFDdEIsTUFBTSxDQUFDbUIsRUFBRSxDQUFDSSxJQUFJO1lBQy9CLElBQUlGLGFBQWEsTUFBTTtnQkFDckJMLEdBQUcsQ0FBQ00sTUFBTSxHQUFHLElBQUksQ0FBQ3JCLFFBQVEsQ0FBQ2tCLEVBQUUsQ0FBQ0U7WUFDaEMsT0FBTztnQkFDTEwsR0FBRyxDQUFDTSxNQUFNLEdBQUc7WUFDZjtRQUNGO1FBQ0EsT0FBT047SUFDVDtJQUVBUSxPQUFPUixHQUFHLEVBQUU7UUFDVixJQUFJLENBQUNqQixJQUFJLENBQUMwQixJQUFJLENBQUNUO0lBQ2pCO0lBRUFVLFVBQVVDLGlCQUFpQixFQUFFO1FBQzNCLDJCQUEyQjtRQUMzQixvRUFBb0U7UUFDcEUsMERBQTBEO1FBQzFELCtCQUErQjtRQUMvQixJQUFJLENBQUMzQixNQUFNLEdBQUcyQjtRQUNkLElBQUksSUFBSSxDQUFDM0IsTUFBTSxDQUFDa0IsTUFBTSxFQUFFO1lBQ3RCLElBQUksQ0FBQ2pCLFFBQVEsR0FBRyxJQUFJZ0IsTUFBTVUsa0JBQWtCVCxNQUFNO1FBQ3BEO1FBRUEsSUFBSUYsTUFBTSxDQUFDO1FBRVgsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlRLGtCQUFrQlQsTUFBTSxFQUFFQyxJQUFLO1lBQ2pELElBQUlTLE9BQU9ELGlCQUFpQixDQUFDUixFQUFFO1lBQy9CSCxHQUFHLENBQUNZLEtBQUtMLElBQUksQ0FBQyxHQUFHO1lBRWpCLElBQUksSUFBSSxDQUFDcEIsTUFBTSxFQUFFO2dCQUNmLElBQUksQ0FBQ0YsUUFBUSxDQUFDa0IsRUFBRSxHQUFHLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQzBCLGFBQWEsQ0FBQ0QsS0FBS0UsVUFBVSxFQUFFRixLQUFLRyxNQUFNLElBQUk7WUFDL0UsT0FBTztnQkFDTCxJQUFJLENBQUM5QixRQUFRLENBQUNrQixFQUFFLEdBQUc3QixNQUFNdUMsYUFBYSxDQUFDRCxLQUFLRSxVQUFVLEVBQUVGLEtBQUtHLE1BQU0sSUFBSTtZQUN6RTtRQUNGO1FBQ0EsSUFBSSxDQUFDdkIsMEJBQTBCLEdBQUc7WUFBRSxHQUFHUSxHQUFHO1FBQUM7SUFDN0M7QUFDRjtBQUVBZ0IsT0FBT0MsT0FBTyxHQUFHeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW9uZXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3BnL2xpYi9yZXN1bHQuanM/MTM5YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHR5cGVzID0gcmVxdWlyZSgncGctdHlwZXMnKVxuXG52YXIgbWF0Y2hSZWdleHAgPSAvXihbQS1aYS16XSspKD86IChcXGQrKSk/KD86IChcXGQrKSk/L1xuXG4vLyByZXN1bHQgb2JqZWN0IHJldHVybmVkIGZyb20gcXVlcnlcbi8vIGluIHRoZSAnZW5kJyBldmVudCBhbmQgYWxzb1xuLy8gcGFzc2VkIGFzIHNlY29uZCBhcmd1bWVudCB0byBwcm92aWRlZCBjYWxsYmFja1xuY2xhc3MgUmVzdWx0IHtcbiAgY29uc3RydWN0b3Iocm93TW9kZSwgdHlwZXMpIHtcbiAgICB0aGlzLmNvbW1hbmQgPSBudWxsXG4gICAgdGhpcy5yb3dDb3VudCA9IG51bGxcbiAgICB0aGlzLm9pZCA9IG51bGxcbiAgICB0aGlzLnJvd3MgPSBbXVxuICAgIHRoaXMuZmllbGRzID0gW11cbiAgICB0aGlzLl9wYXJzZXJzID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fdHlwZXMgPSB0eXBlc1xuICAgIHRoaXMuUm93Q3RvciA9IG51bGxcbiAgICB0aGlzLnJvd0FzQXJyYXkgPSByb3dNb2RlID09PSAnYXJyYXknXG4gICAgaWYgKHRoaXMucm93QXNBcnJheSkge1xuICAgICAgdGhpcy5wYXJzZVJvdyA9IHRoaXMuX3BhcnNlUm93QXNBcnJheVxuICAgIH1cbiAgICB0aGlzLl9wcmVidWlsdEVtcHR5UmVzdWx0T2JqZWN0ID0gbnVsbFxuICB9XG5cbiAgLy8gYWRkcyBhIGNvbW1hbmQgY29tcGxldGUgbWVzc2FnZVxuICBhZGRDb21tYW5kQ29tcGxldGUobXNnKSB7XG4gICAgdmFyIG1hdGNoXG4gICAgaWYgKG1zZy50ZXh0KSB7XG4gICAgICAvLyBwdXJlIGphdmFzY3JpcHRcbiAgICAgIG1hdGNoID0gbWF0Y2hSZWdleHAuZXhlYyhtc2cudGV4dClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbmF0aXZlIGJpbmRpbmdzXG4gICAgICBtYXRjaCA9IG1hdGNoUmVnZXhwLmV4ZWMobXNnLmNvbW1hbmQpXG4gICAgfVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGhpcy5jb21tYW5kID0gbWF0Y2hbMV1cbiAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAvLyBDT01NTUFORCBPSUQgUk9XU1xuICAgICAgICB0aGlzLm9pZCA9IHBhcnNlSW50KG1hdGNoWzJdLCAxMClcbiAgICAgICAgdGhpcy5yb3dDb3VudCA9IHBhcnNlSW50KG1hdGNoWzNdLCAxMClcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMl0pIHtcbiAgICAgICAgLy8gQ09NTUFORCBST1dTXG4gICAgICAgIHRoaXMucm93Q291bnQgPSBwYXJzZUludChtYXRjaFsyXSwgMTApXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3BhcnNlUm93QXNBcnJheShyb3dEYXRhKSB7XG4gICAgdmFyIHJvdyA9IG5ldyBBcnJheShyb3dEYXRhLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcm93RGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIHJhd1ZhbHVlID0gcm93RGF0YVtpXVxuICAgICAgaWYgKHJhd1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIHJvd1tpXSA9IHRoaXMuX3BhcnNlcnNbaV0ocmF3VmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3dbaV0gPSBudWxsXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByb3dcbiAgfVxuXG4gIHBhcnNlUm93KHJvd0RhdGEpIHtcbiAgICB2YXIgcm93ID0geyAuLi50aGlzLl9wcmVidWlsdEVtcHR5UmVzdWx0T2JqZWN0IH1cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcm93RGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIHJhd1ZhbHVlID0gcm93RGF0YVtpXVxuICAgICAgdmFyIGZpZWxkID0gdGhpcy5maWVsZHNbaV0ubmFtZVxuICAgICAgaWYgKHJhd1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIHJvd1tmaWVsZF0gPSB0aGlzLl9wYXJzZXJzW2ldKHJhd1ZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm93W2ZpZWxkXSA9IG51bGxcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvd1xuICB9XG5cbiAgYWRkUm93KHJvdykge1xuICAgIHRoaXMucm93cy5wdXNoKHJvdylcbiAgfVxuXG4gIGFkZEZpZWxkcyhmaWVsZERlc2NyaXB0aW9ucykge1xuICAgIC8vIGNsZWFycyBmaWVsZCBkZWZpbml0aW9uc1xuICAgIC8vIG11bHRpcGxlIHF1ZXJ5IHN0YXRlbWVudHMgaW4gMSBhY3Rpb24gY2FuIHJlc3VsdCBpbiBtdWx0aXBsZSBzZXRzXG4gICAgLy8gb2Ygcm93RGVzY3JpcHRpb25zLi4uZWc6ICdzZWxlY3QgTk9XKCk7IHNlbGVjdCAxOjppbnQ7J1xuICAgIC8vIHlvdSBuZWVkIHRvIHJlc2V0IHRoZSBmaWVsZHNcbiAgICB0aGlzLmZpZWxkcyA9IGZpZWxkRGVzY3JpcHRpb25zXG4gICAgaWYgKHRoaXMuZmllbGRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcGFyc2VycyA9IG5ldyBBcnJheShmaWVsZERlc2NyaXB0aW9ucy5sZW5ndGgpXG4gICAgfVxuXG4gICAgdmFyIHJvdyA9IHt9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkRGVzY3JpcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzYyA9IGZpZWxkRGVzY3JpcHRpb25zW2ldXG4gICAgICByb3dbZGVzYy5uYW1lXSA9IG51bGxcblxuICAgICAgaWYgKHRoaXMuX3R5cGVzKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlcnNbaV0gPSB0aGlzLl90eXBlcy5nZXRUeXBlUGFyc2VyKGRlc2MuZGF0YVR5cGVJRCwgZGVzYy5mb3JtYXQgfHwgJ3RleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGFyc2Vyc1tpXSA9IHR5cGVzLmdldFR5cGVQYXJzZXIoZGVzYy5kYXRhVHlwZUlELCBkZXNjLmZvcm1hdCB8fCAndGV4dCcpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3ByZWJ1aWx0RW1wdHlSZXN1bHRPYmplY3QgPSB7IC4uLnJvdyB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXN1bHRcbiJdLCJuYW1lcyI6WyJ0eXBlcyIsInJlcXVpcmUiLCJtYXRjaFJlZ2V4cCIsIlJlc3VsdCIsImNvbnN0cnVjdG9yIiwicm93TW9kZSIsImNvbW1hbmQiLCJyb3dDb3VudCIsIm9pZCIsInJvd3MiLCJmaWVsZHMiLCJfcGFyc2VycyIsInVuZGVmaW5lZCIsIl90eXBlcyIsIlJvd0N0b3IiLCJyb3dBc0FycmF5IiwicGFyc2VSb3ciLCJfcGFyc2VSb3dBc0FycmF5IiwiX3ByZWJ1aWx0RW1wdHlSZXN1bHRPYmplY3QiLCJhZGRDb21tYW5kQ29tcGxldGUiLCJtc2ciLCJtYXRjaCIsInRleHQiLCJleGVjIiwicGFyc2VJbnQiLCJyb3dEYXRhIiwicm93IiwiQXJyYXkiLCJsZW5ndGgiLCJpIiwibGVuIiwicmF3VmFsdWUiLCJmaWVsZCIsIm5hbWUiLCJhZGRSb3ciLCJwdXNoIiwiYWRkRmllbGRzIiwiZmllbGREZXNjcmlwdGlvbnMiLCJkZXNjIiwiZ2V0VHlwZVBhcnNlciIsImRhdGFUeXBlSUQiLCJmb3JtYXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/stream.js":
/*!***************************************!*\
  !*** ./node_modules/pg/lib/stream.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Get a socket stream compatible with the current runtime environment.\n * @returns {Duplex}\n */ \nmodule.exports.getStream = function getStream(ssl) {\n    const net = __webpack_require__(/*! net */ \"net\");\n    if (typeof net.Socket === \"function\") {\n        return new net.Socket();\n    } else {\n        const { CloudflareSocket } = __webpack_require__(/*! pg-cloudflare */ \"(ssr)/./node_modules/pg-cloudflare/dist/empty.js\");\n        return new CloudflareSocket(ssl);\n    }\n};\n/**\n * Get a TLS secured socket, compatible with the current environment,\n * using the socket and other settings given in `options`.\n * @returns {Duplex}\n */ module.exports.getSecureStream = function getSecureStream(options) {\n    var tls = __webpack_require__(/*! tls */ \"tls\");\n    if (tls.connect) {\n        return tls.connect(options);\n    } else {\n        options.socket.startTls(options);\n        return options.socket;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0M7QUFDREEsd0JBQXdCLEdBQUcsU0FBU0UsVUFBVUMsR0FBRztJQUMvQyxNQUFNQyxNQUFNQyxtQkFBT0EsQ0FBQztJQUNwQixJQUFJLE9BQU9ELElBQUlFLE1BQU0sS0FBSyxZQUFZO1FBQ3BDLE9BQU8sSUFBSUYsSUFBSUUsTUFBTTtJQUN2QixPQUFPO1FBQ0wsTUFBTSxFQUFFQyxnQkFBZ0IsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztRQUNyQyxPQUFPLElBQUlFLGlCQUFpQko7SUFDOUI7QUFDRjtBQUVBOzs7O0NBSUMsR0FDREgsOEJBQThCLEdBQUcsU0FBU1EsZ0JBQWdCQyxPQUFPO0lBQy9ELElBQUlDLE1BQU1MLG1CQUFPQSxDQUFDO0lBQ2xCLElBQUlLLElBQUlDLE9BQU8sRUFBRTtRQUNmLE9BQU9ELElBQUlDLE9BQU8sQ0FBQ0Y7SUFDckIsT0FBTztRQUNMQSxRQUFRRyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0o7UUFDeEIsT0FBT0EsUUFBUUcsTUFBTTtJQUN2QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9wZy9saWIvc3RyZWFtLmpzPzRiNDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgYSBzb2NrZXQgc3RyZWFtIGNvbXBhdGlibGUgd2l0aCB0aGUgY3VycmVudCBydW50aW1lIGVudmlyb25tZW50LlxuICogQHJldHVybnMge0R1cGxleH1cbiAqL1xubW9kdWxlLmV4cG9ydHMuZ2V0U3RyZWFtID0gZnVuY3Rpb24gZ2V0U3RyZWFtKHNzbCkge1xuICBjb25zdCBuZXQgPSByZXF1aXJlKCduZXQnKVxuICBpZiAodHlwZW9mIG5ldC5Tb2NrZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbmV3IG5ldC5Tb2NrZXQoKVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHsgQ2xvdWRmbGFyZVNvY2tldCB9ID0gcmVxdWlyZSgncGctY2xvdWRmbGFyZScpXG4gICAgcmV0dXJuIG5ldyBDbG91ZGZsYXJlU29ja2V0KHNzbClcbiAgfVxufVxuXG4vKipcbiAqIEdldCBhIFRMUyBzZWN1cmVkIHNvY2tldCwgY29tcGF0aWJsZSB3aXRoIHRoZSBjdXJyZW50IGVudmlyb25tZW50LFxuICogdXNpbmcgdGhlIHNvY2tldCBhbmQgb3RoZXIgc2V0dGluZ3MgZ2l2ZW4gaW4gYG9wdGlvbnNgLlxuICogQHJldHVybnMge0R1cGxleH1cbiAqL1xubW9kdWxlLmV4cG9ydHMuZ2V0U2VjdXJlU3RyZWFtID0gZnVuY3Rpb24gZ2V0U2VjdXJlU3RyZWFtKG9wdGlvbnMpIHtcbiAgdmFyIHRscyA9IHJlcXVpcmUoJ3RscycpXG4gIGlmICh0bHMuY29ubmVjdCkge1xuICAgIHJldHVybiB0bHMuY29ubmVjdChvcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMuc29ja2V0LnN0YXJ0VGxzKG9wdGlvbnMpXG4gICAgcmV0dXJuIG9wdGlvbnMuc29ja2V0XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0U3RyZWFtIiwic3NsIiwibmV0IiwicmVxdWlyZSIsIlNvY2tldCIsIkNsb3VkZmxhcmVTb2NrZXQiLCJnZXRTZWN1cmVTdHJlYW0iLCJvcHRpb25zIiwidGxzIiwiY29ubmVjdCIsInNvY2tldCIsInN0YXJ0VGxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/type-overrides.js":
/*!***********************************************!*\
  !*** ./node_modules/pg/lib/type-overrides.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar types = __webpack_require__(/*! pg-types */ \"(ssr)/./node_modules/pg-types/index.js\");\nfunction TypeOverrides(userTypes) {\n    this._types = userTypes || types;\n    this.text = {};\n    this.binary = {};\n}\nTypeOverrides.prototype.getOverrides = function(format) {\n    switch(format){\n        case \"text\":\n            return this.text;\n        case \"binary\":\n            return this.binary;\n        default:\n            return {};\n    }\n};\nTypeOverrides.prototype.setTypeParser = function(oid, format, parseFn) {\n    if (typeof format === \"function\") {\n        parseFn = format;\n        format = \"text\";\n    }\n    this.getOverrides(format)[oid] = parseFn;\n};\nTypeOverrides.prototype.getTypeParser = function(oid, format) {\n    format = format || \"text\";\n    return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format);\n};\nmodule.exports = TypeOverrides;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGcvbGliL3R5cGUtb3ZlcnJpZGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEIsU0FBU0MsY0FBY0MsU0FBUztJQUM5QixJQUFJLENBQUNDLE1BQU0sR0FBR0QsYUFBYUg7SUFDM0IsSUFBSSxDQUFDSyxJQUFJLEdBQUcsQ0FBQztJQUNiLElBQUksQ0FBQ0MsTUFBTSxHQUFHLENBQUM7QUFDakI7QUFFQUosY0FBY0ssU0FBUyxDQUFDQyxZQUFZLEdBQUcsU0FBVUMsTUFBTTtJQUNyRCxPQUFRQTtRQUNOLEtBQUs7WUFDSCxPQUFPLElBQUksQ0FBQ0osSUFBSTtRQUNsQixLQUFLO1lBQ0gsT0FBTyxJQUFJLENBQUNDLE1BQU07UUFDcEI7WUFDRSxPQUFPLENBQUM7SUFDWjtBQUNGO0FBRUFKLGNBQWNLLFNBQVMsQ0FBQ0csYUFBYSxHQUFHLFNBQVVDLEdBQUcsRUFBRUYsTUFBTSxFQUFFRyxPQUFPO0lBQ3BFLElBQUksT0FBT0gsV0FBVyxZQUFZO1FBQ2hDRyxVQUFVSDtRQUNWQSxTQUFTO0lBQ1g7SUFDQSxJQUFJLENBQUNELFlBQVksQ0FBQ0MsT0FBTyxDQUFDRSxJQUFJLEdBQUdDO0FBQ25DO0FBRUFWLGNBQWNLLFNBQVMsQ0FBQ00sYUFBYSxHQUFHLFNBQVVGLEdBQUcsRUFBRUYsTUFBTTtJQUMzREEsU0FBU0EsVUFBVTtJQUNuQixPQUFPLElBQUksQ0FBQ0QsWUFBWSxDQUFDQyxPQUFPLENBQUNFLElBQUksSUFBSSxJQUFJLENBQUNQLE1BQU0sQ0FBQ1MsYUFBYSxDQUFDRixLQUFLRjtBQUMxRTtBQUVBSyxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9wZy9saWIvdHlwZS1vdmVycmlkZXMuanM/YTY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHR5cGVzID0gcmVxdWlyZSgncGctdHlwZXMnKVxuXG5mdW5jdGlvbiBUeXBlT3ZlcnJpZGVzKHVzZXJUeXBlcykge1xuICB0aGlzLl90eXBlcyA9IHVzZXJUeXBlcyB8fCB0eXBlc1xuICB0aGlzLnRleHQgPSB7fVxuICB0aGlzLmJpbmFyeSA9IHt9XG59XG5cblR5cGVPdmVycmlkZXMucHJvdG90eXBlLmdldE92ZXJyaWRlcyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICBjYXNlICd0ZXh0JzpcbiAgICAgIHJldHVybiB0aGlzLnRleHRcbiAgICBjYXNlICdiaW5hcnknOlxuICAgICAgcmV0dXJuIHRoaXMuYmluYXJ5XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7fVxuICB9XG59XG5cblR5cGVPdmVycmlkZXMucHJvdG90eXBlLnNldFR5cGVQYXJzZXIgPSBmdW5jdGlvbiAob2lkLCBmb3JtYXQsIHBhcnNlRm4pIHtcbiAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwYXJzZUZuID0gZm9ybWF0XG4gICAgZm9ybWF0ID0gJ3RleHQnXG4gIH1cbiAgdGhpcy5nZXRPdmVycmlkZXMoZm9ybWF0KVtvaWRdID0gcGFyc2VGblxufVxuXG5UeXBlT3ZlcnJpZGVzLnByb3RvdHlwZS5nZXRUeXBlUGFyc2VyID0gZnVuY3Rpb24gKG9pZCwgZm9ybWF0KSB7XG4gIGZvcm1hdCA9IGZvcm1hdCB8fCAndGV4dCdcbiAgcmV0dXJuIHRoaXMuZ2V0T3ZlcnJpZGVzKGZvcm1hdClbb2lkXSB8fCB0aGlzLl90eXBlcy5nZXRUeXBlUGFyc2VyKG9pZCwgZm9ybWF0KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFR5cGVPdmVycmlkZXNcbiJdLCJuYW1lcyI6WyJ0eXBlcyIsInJlcXVpcmUiLCJUeXBlT3ZlcnJpZGVzIiwidXNlclR5cGVzIiwiX3R5cGVzIiwidGV4dCIsImJpbmFyeSIsInByb3RvdHlwZSIsImdldE92ZXJyaWRlcyIsImZvcm1hdCIsInNldFR5cGVQYXJzZXIiLCJvaWQiLCJwYXJzZUZuIiwiZ2V0VHlwZVBhcnNlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/type-overrides.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pg/lib/utils.js":
/*!**************************************!*\
  !*** ./node_modules/pg/lib/utils.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst defaults = __webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/pg/lib/defaults.js\");\nfunction escapeElement(elementRepresentation) {\n    var escaped = elementRepresentation.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n    return '\"' + escaped + '\"';\n}\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString(val) {\n    var result = \"{\";\n    for(var i = 0; i < val.length; i++){\n        if (i > 0) {\n            result = result + \",\";\n        }\n        if (val[i] === null || typeof val[i] === \"undefined\") {\n            result = result + \"NULL\";\n        } else if (Array.isArray(val[i])) {\n            result = result + arrayString(val[i]);\n        } else if (ArrayBuffer.isView(val[i])) {\n            var item = val[i];\n            if (!(item instanceof Buffer)) {\n                var buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength);\n                if (buf.length === item.byteLength) {\n                    item = buf;\n                } else {\n                    item = buf.slice(item.byteOffset, item.byteOffset + item.byteLength);\n                }\n            }\n            result += \"\\\\\\\\x\" + item.toString(\"hex\");\n        } else {\n            result += escapeElement(prepareValue(val[i]));\n        }\n    }\n    result = result + \"}\";\n    return result;\n}\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nvar prepareValue = function(val, seen) {\n    // null and undefined are both null for postgres\n    if (val == null) {\n        return null;\n    }\n    if (val instanceof Buffer) {\n        return val;\n    }\n    if (ArrayBuffer.isView(val)) {\n        var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength);\n        if (buf.length === val.byteLength) {\n            return buf;\n        }\n        return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params\n        ;\n    }\n    if (val instanceof Date) {\n        if (defaults.parseInputDatesAsUTC) {\n            return dateToStringUTC(val);\n        } else {\n            return dateToString(val);\n        }\n    }\n    if (Array.isArray(val)) {\n        return arrayString(val);\n    }\n    if (typeof val === \"object\") {\n        return prepareObject(val, seen);\n    }\n    return val.toString();\n};\nfunction prepareObject(val, seen) {\n    if (val && typeof val.toPostgres === \"function\") {\n        seen = seen || [];\n        if (seen.indexOf(val) !== -1) {\n            throw new Error('circular reference detected while preparing \"' + val + '\" for query');\n        }\n        seen.push(val);\n        return prepareValue(val.toPostgres(prepareValue), seen);\n    }\n    return JSON.stringify(val);\n}\nfunction pad(number, digits) {\n    number = \"\" + number;\n    while(number.length < digits){\n        number = \"0\" + number;\n    }\n    return number;\n}\nfunction dateToString(date) {\n    var offset = -date.getTimezoneOffset();\n    var year = date.getFullYear();\n    var isBCYear = year < 1;\n    if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n    ;\n    var ret = pad(year, 4) + \"-\" + pad(date.getMonth() + 1, 2) + \"-\" + pad(date.getDate(), 2) + \"T\" + pad(date.getHours(), 2) + \":\" + pad(date.getMinutes(), 2) + \":\" + pad(date.getSeconds(), 2) + \".\" + pad(date.getMilliseconds(), 3);\n    if (offset < 0) {\n        ret += \"-\";\n        offset *= -1;\n    } else {\n        ret += \"+\";\n    }\n    ret += pad(Math.floor(offset / 60), 2) + \":\" + pad(offset % 60, 2);\n    if (isBCYear) ret += \" BC\";\n    return ret;\n}\nfunction dateToStringUTC(date) {\n    var year = date.getUTCFullYear();\n    var isBCYear = year < 1;\n    if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n    ;\n    var ret = pad(year, 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2) + \"T\" + pad(date.getUTCHours(), 2) + \":\" + pad(date.getUTCMinutes(), 2) + \":\" + pad(date.getUTCSeconds(), 2) + \".\" + pad(date.getUTCMilliseconds(), 3);\n    ret += \"+00:00\";\n    if (isBCYear) ret += \" BC\";\n    return ret;\n}\nfunction normalizeQueryConfig(config, values, callback) {\n    // can take in strings or config objects\n    config = typeof config === \"string\" ? {\n        text: config\n    } : config;\n    if (values) {\n        if (typeof values === \"function\") {\n            config.callback = values;\n        } else {\n            config.values = values;\n        }\n    }\n    if (callback) {\n        config.callback = callback;\n    }\n    return config;\n}\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nconst escapeIdentifier = function(str) {\n    return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n};\nconst escapeLiteral = function(str) {\n    var hasBackslash = false;\n    var escaped = \"'\";\n    for(var i = 0; i < str.length; i++){\n        var c = str[i];\n        if (c === \"'\") {\n            escaped += c + c;\n        } else if (c === \"\\\\\") {\n            escaped += c + c;\n            hasBackslash = true;\n        } else {\n            escaped += c;\n        }\n    }\n    escaped += \"'\";\n    if (hasBackslash === true) {\n        escaped = \" E\" + escaped;\n    }\n    return escaped;\n};\nmodule.exports = {\n    prepareValue: function prepareValueWrapper(value) {\n        // this ensures that extra arguments do not get passed into prepareValue\n        // by accident, eg: from calling values.map(utils.prepareValue)\n        return prepareValue(value);\n    },\n    normalizeQueryConfig,\n    escapeIdentifier,\n    escapeLiteral\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pg/lib/utils.js\n");

/***/ })

};
;