/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/memjs";
exports.ids = ["vendor-chunks/memjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/memjs/lib/memjs/header.js":
/*!************************************************!*\
  !*** ./node_modules/memjs/lib/memjs/header.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// # MemJS Memcache binary protocol header\n// fromBuffer converts a serialized header to a JS object.\nexports.fromBuffer = function(headerBuf) {\n    if (!headerBuf) {\n        return {};\n    }\n    return {\n        magic: headerBuf.readUInt8(0),\n        opcode: headerBuf.readUInt8(1),\n        keyLength: headerBuf.readUInt16BE(2),\n        extrasLength: headerBuf.readUInt8(4),\n        dataType: headerBuf.readUInt8(5),\n        status: headerBuf.readUInt16BE(6),\n        totalBodyLength: headerBuf.readUInt32BE(8),\n        opaque: headerBuf.readUInt32BE(12),\n        cas: headerBuf.slice(16, 24)\n    };\n};\n// toBuffer converts a JS memcache header object to a binary memcache header\nexports.toBuffer = function(header) {\n    var headerBuf = Buffer.alloc(24);\n    headerBuf.fill();\n    headerBuf.writeUInt8(header.magic, 0);\n    headerBuf.writeUInt8(header.opcode, 1);\n    headerBuf.writeUInt16BE(header.keyLength, 2);\n    headerBuf.writeUInt8(header.extrasLength, 4);\n    headerBuf.writeUInt8(header.dataType || 0, 5);\n    headerBuf.writeUInt16BE(header.status || 0, 6);\n    headerBuf.writeUInt32BE(header.totalBodyLength, 8);\n    headerBuf.writeUInt32BE(header.opaque || 0, 12);\n    if (header.cas) {\n        header.cas.copy(headerBuf, 16);\n    } else {\n        headerBuf.fill(\"\\x00\", 16);\n    }\n    return headerBuf;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVtanMvbGliL21lbWpzL2hlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFFMUMsMERBQTBEO0FBQzFEQSxrQkFBa0IsR0FBRyxTQUFTRSxTQUFTO0lBQ3JDLElBQUksQ0FBQ0EsV0FBVztRQUNkLE9BQU8sQ0FBQztJQUNWO0lBQ0EsT0FBTztRQUNMQyxPQUFpQkQsVUFBVUUsU0FBUyxDQUFDO1FBQ3JDQyxRQUFpQkgsVUFBVUUsU0FBUyxDQUFDO1FBQ3JDRSxXQUFpQkosVUFBVUssWUFBWSxDQUFDO1FBQ3hDQyxjQUFpQk4sVUFBVUUsU0FBUyxDQUFDO1FBQ3JDSyxVQUFpQlAsVUFBVUUsU0FBUyxDQUFDO1FBQ3JDTSxRQUFpQlIsVUFBVUssWUFBWSxDQUFDO1FBQ3hDSSxpQkFBaUJULFVBQVVVLFlBQVksQ0FBQztRQUN4Q0MsUUFBaUJYLFVBQVVVLFlBQVksQ0FBQztRQUN4Q0UsS0FBaUJaLFVBQVVhLEtBQUssQ0FBQyxJQUFJO0lBQ3ZDO0FBQ0Y7QUFFQSw0RUFBNEU7QUFDNUVmLGdCQUFnQixHQUFHLFNBQVNpQixNQUFNO0lBQ2hDLElBQUlmLFlBQVlnQixPQUFPQyxLQUFLLENBQUM7SUFDN0JqQixVQUFVa0IsSUFBSTtJQUNkbEIsVUFBVW1CLFVBQVUsQ0FBQ0osT0FBT2QsS0FBSyxFQUFFO0lBQ25DRCxVQUFVbUIsVUFBVSxDQUFDSixPQUFPWixNQUFNLEVBQUU7SUFDcENILFVBQVVvQixhQUFhLENBQUNMLE9BQU9YLFNBQVMsRUFBRTtJQUMxQ0osVUFBVW1CLFVBQVUsQ0FBQ0osT0FBT1QsWUFBWSxFQUFFO0lBQzFDTixVQUFVbUIsVUFBVSxDQUFDSixPQUFPUixRQUFRLElBQUksR0FBRztJQUMzQ1AsVUFBVW9CLGFBQWEsQ0FBQ0wsT0FBT1AsTUFBTSxJQUFJLEdBQUc7SUFDNUNSLFVBQVVxQixhQUFhLENBQUNOLE9BQU9OLGVBQWUsRUFBRTtJQUNoRFQsVUFBVXFCLGFBQWEsQ0FBQ04sT0FBT0osTUFBTSxJQUFJLEdBQUc7SUFDNUMsSUFBSUksT0FBT0gsR0FBRyxFQUFFO1FBQ2RHLE9BQU9ILEdBQUcsQ0FBQ1UsSUFBSSxDQUFDdEIsV0FBVztJQUM3QixPQUFPO1FBQ0xBLFVBQVVrQixJQUFJLENBQUMsUUFBUTtJQUN6QjtJQUNBLE9BQU9sQjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tZW1qcy9saWIvbWVtanMvaGVhZGVyLmpzPzZmZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIyBNZW1KUyBNZW1jYWNoZSBiaW5hcnkgcHJvdG9jb2wgaGVhZGVyXG5cbi8vIGZyb21CdWZmZXIgY29udmVydHMgYSBzZXJpYWxpemVkIGhlYWRlciB0byBhIEpTIG9iamVjdC5cbmV4cG9ydHMuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uKGhlYWRlckJ1Zikge1xuICBpZiAoIWhlYWRlckJ1Zikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1hZ2ljOiAgICAgICAgICAgaGVhZGVyQnVmLnJlYWRVSW50OCgwKSxcbiAgICBvcGNvZGU6ICAgICAgICAgIGhlYWRlckJ1Zi5yZWFkVUludDgoMSksXG4gICAga2V5TGVuZ3RoOiAgICAgICBoZWFkZXJCdWYucmVhZFVJbnQxNkJFKDIpLFxuICAgIGV4dHJhc0xlbmd0aDogICAgaGVhZGVyQnVmLnJlYWRVSW50OCg0KSxcbiAgICBkYXRhVHlwZTogICAgICAgIGhlYWRlckJ1Zi5yZWFkVUludDgoNSksXG4gICAgc3RhdHVzOiAgICAgICAgICBoZWFkZXJCdWYucmVhZFVJbnQxNkJFKDYpLFxuICAgIHRvdGFsQm9keUxlbmd0aDogaGVhZGVyQnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBvcGFxdWU6ICAgICAgICAgIGhlYWRlckJ1Zi5yZWFkVUludDMyQkUoMTIpLFxuICAgIGNhczogICAgICAgICAgICAgaGVhZGVyQnVmLnNsaWNlKDE2LCAyNClcbiAgfTtcbn07XG5cbi8vIHRvQnVmZmVyIGNvbnZlcnRzIGEgSlMgbWVtY2FjaGUgaGVhZGVyIG9iamVjdCB0byBhIGJpbmFyeSBtZW1jYWNoZSBoZWFkZXJcbmV4cG9ydHMudG9CdWZmZXIgPSBmdW5jdGlvbihoZWFkZXIpIHtcbiAgdmFyIGhlYWRlckJ1ZiA9IEJ1ZmZlci5hbGxvYygyNCk7XG4gIGhlYWRlckJ1Zi5maWxsKCk7XG4gIGhlYWRlckJ1Zi53cml0ZVVJbnQ4KGhlYWRlci5tYWdpYywgMCk7XG4gIGhlYWRlckJ1Zi53cml0ZVVJbnQ4KGhlYWRlci5vcGNvZGUsIDEpO1xuICBoZWFkZXJCdWYud3JpdGVVSW50MTZCRShoZWFkZXIua2V5TGVuZ3RoLCAyKTtcbiAgaGVhZGVyQnVmLndyaXRlVUludDgoaGVhZGVyLmV4dHJhc0xlbmd0aCwgNCk7XG4gIGhlYWRlckJ1Zi53cml0ZVVJbnQ4KGhlYWRlci5kYXRhVHlwZSB8fCAwLCA1KTtcbiAgaGVhZGVyQnVmLndyaXRlVUludDE2QkUoaGVhZGVyLnN0YXR1cyB8fCAwLCA2KTtcbiAgaGVhZGVyQnVmLndyaXRlVUludDMyQkUoaGVhZGVyLnRvdGFsQm9keUxlbmd0aCwgOCk7XG4gIGhlYWRlckJ1Zi53cml0ZVVJbnQzMkJFKGhlYWRlci5vcGFxdWUgfHwgMCwgMTIpO1xuICBpZiAoaGVhZGVyLmNhcykge1xuICAgIGhlYWRlci5jYXMuY29weShoZWFkZXJCdWYsIDE2KTtcbiAgfSBlbHNlIHtcbiAgICBoZWFkZXJCdWYuZmlsbCgnXFx4MDAnLCAxNik7XG4gIH1cbiAgcmV0dXJuIGhlYWRlckJ1Zjtcbn07XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsImZyb21CdWZmZXIiLCJoZWFkZXJCdWYiLCJtYWdpYyIsInJlYWRVSW50OCIsIm9wY29kZSIsImtleUxlbmd0aCIsInJlYWRVSW50MTZCRSIsImV4dHJhc0xlbmd0aCIsImRhdGFUeXBlIiwic3RhdHVzIiwidG90YWxCb2R5TGVuZ3RoIiwicmVhZFVJbnQzMkJFIiwib3BhcXVlIiwiY2FzIiwic2xpY2UiLCJ0b0J1ZmZlciIsImhlYWRlciIsIkJ1ZmZlciIsImFsbG9jIiwiZmlsbCIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJCRSIsImNvcHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/memjs/lib/memjs/header.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/memjs/lib/memjs/memjs.js":
/*!***********************************************!*\
  !*** ./node_modules/memjs/lib/memjs/memjs.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// # MemJS Memcache Client\nvar errors = (__webpack_require__(/*! ./protocol */ \"(ssr)/./node_modules/memjs/lib/memjs/protocol.js\").errors);\nvar Server = (__webpack_require__(/*! ./server */ \"(ssr)/./node_modules/memjs/lib/memjs/server.js\").Server);\nvar noopSerializer = (__webpack_require__(/*! ./noop-serializer */ \"(ssr)/./node_modules/memjs/lib/memjs/noop-serializer.js\").noopSerializer);\nvar makeRequestBuffer = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").makeRequestBuffer);\nvar hashCode = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").hashCode);\nvar merge = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").merge);\nvar makeExpiration = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").makeExpiration);\nvar makeAmountInitialAndExpiration = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").makeAmountInitialAndExpiration);\n// Client initializer takes a list of `Server`s and an `options` dictionary.\n// See `Client.create` for details.\nvar Client = function(servers, options) {\n    this.servers = servers;\n    this.seq = 0;\n    this.options = merge(options || {}, {\n        failoverTime: 60,\n        retries: 2,\n        retry_delay: 0.2,\n        expires: 0,\n        logger: console\n    });\n    this.serializer = this.options.serializer || noopSerializer;\n};\n// Creates a new client given an optional config string and optional hash of\n// options. The config string should be of the form:\n//\n//     \"[user:pass@]server1[:11211],[user:pass@]server2[:11211],...\"\n//\n// If the argument is not given, fallback on the `MEMCACHIER_SERVERS` environment\n// variable, `MEMCACHE_SERVERS` environment variable or `\"localhost:11211\"`.\n//\n// The options hash may contain the options:\n//\n// * `retries` - the number of times to retry an operation in lieu of failures\n// (default 2)\n// * `expires` - the default expiration in seconds to use (default 0 - never\n// expire). If `expires` is greater than 30 days (60 x 60 x 24 x 30), it is\n// treated as a UNIX time (number of seconds since January 1, 1970).\n// * `logger` - a logger object that responds to `log(string)` method calls.\n// * `failover` - whether to failover to next server. Defaults to false.\n// * `failoverTime` - how much to wait until retring a failed server. Default\n//                    is 60 seconds.\n//\n//   ~~~~\n//     log(msg1[, msg2[, msg3[...]]])\n//   ~~~~\n//\n//   Defaults to `console`.\n// * `serializer` - the object which will (de)serialize the data. It needs\n//   two public methods: serialize and deserialize. It defaults to the \n//   noopSerializer:\n//\n//   ~~~~\n//   var noopSerializer = {\n//     serialize: function (opcode, value, extras) {\n//       return { value: value, extras: extras };\n//     },\n//     deserialize: function (opcode, value, extras) {\n//       return { value: value, extras: extras };\n//     }\n//   };\n//   ~~~~\n//\n// Or options for the servers including:\n// * `username` and `password` for fallback SASL authentication credentials.\n// * `timeout` in seconds to determine failure for operations. Default is 0.5\n//             seconds.\n// * 'conntimeout' in seconds to connection failure. Default is twice the value\n//                 of `timeout`.\n// * `keepAlive` whether to enable keep-alive functionality. Defaults to false.\n// * `keepAliveDelay` in seconds to the initial delay before the first keepalive\n//                    probe is sent on an idle socket. Defaults is 30 seconds.\nClient.create = function(serversStr, options) {\n    serversStr = serversStr || process.env.MEMCACHIER_SERVERS || process.env.MEMCACHE_SERVERS || \"localhost:11211\";\n    var serverUris = serversStr.split(\",\");\n    var servers = serverUris.map(function(uri) {\n        var uriParts = uri.split(\"@\");\n        var hostPort = uriParts[uriParts.length - 1].split(\":\");\n        var userPass = (uriParts[uriParts.length - 2] || \"\").split(\":\");\n        return new Server(hostPort[0], parseInt(hostPort[1] || 11211, 10), userPass[0], userPass[1], options);\n    });\n    return new Client(servers, options);\n};\n// An overridable method you can use for determing\n// server selection. Should return the server index\n// in the list of servers on Client#servers.\n// \n//   Example using node-hashring:\n//   ~~~~\n//   const memjs = require('memjs');\n//   const HashRing = require('node-hashring');\n//   const servers = ['localhost:11211', 'localhost:11212'];\n//   // build a map of server addresses to their index in the server list\n//   const serverMap = {};\n//   servers.forEach((server, index) => serverMap[server] = index);\n//   const client = memjs.Client.create(servers.join(','));\n//   // build the hashring\n//   const hashRing = new HashRing(servers);\n//   // override the getServer method\n//   client.getServer = (key) => serverMap[hashRing.findNode(key)];\n//   ~~~~\nClient.prototype.getServer = function(key) {\n    return hashCode(key) % this.servers.length;\n};\n// Chooses the server to talk to by hashing the given key.\nClient.prototype.server = function(key) {\n    // mechanisms\n    var total = this.servers.length;\n    var origIdx = total > 1 ? this.getServer(key) : 0;\n    var idx = origIdx;\n    var serv = this.servers[idx];\n    while(serv.wakeupAt && serv.wakeupAt > Date.now()){\n        idx = (idx + 1) % total;\n        if (idx === origIdx) {\n            return null;\n        }\n        serv = this.servers[idx];\n    }\n    return serv;\n};\n// converts a call into a promise-returning one\nvar promisify = function(command) {\n    return new Promise(function(resolve, reject) {\n        command(function(err, result) {\n            err ? reject(err) : resolve(result);\n        });\n    });\n};\n// ## Memcache Commands\n//\n// All commands return their results through a callback passed as the last\n// required argument (some commands, like `Client#set`, take optional arguments\n// after the callback).\n//\n// The callback signature always follows:\n//\n//     callback(err, [arg1[, arg2[, arg3[...]]]])\n//\n// In case of an error the _err_ argument will be non-null and contain the\n// `Error`. A notable exception includes a `Client#get` on a key that doesn't\n// exist. In this case, _err_ will be null, as will the _value and _extras_\n// arguments.\n// GET\n//\n// Retrieves the value at the given key in memcache.\n//\n// The callback signature is:\n//\n//     callback(err, value, flags)\n//\n// _value_ and _flags_ are both `Buffer`s. If the key is not found, the\n// callback is invoked with null for both arguments and no error.\nClient.prototype.get = function(key, callback) {\n    var self = this;\n    if (callback === undefined) {\n        return promisify(function(callback) {\n            self.get(key, function(err, value, flags) {\n                callback(err, {\n                    value: value,\n                    flags: flags\n                });\n            });\n        });\n    }\n    var logger = this.options.logger;\n    this.incrSeq();\n    var request = makeRequestBuffer(0, key, \"\", \"\", this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    var deserialized = self.serializer.deserialize(response.header.opcode, response.val, response.extras);\n                    callback(null, deserialized.value, deserialized.extras);\n                }\n                break;\n            case 1:\n                if (callback) {\n                    callback(null, null, null);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS GET: \" + errors[response.header.status];\n                logger.log(errorMessage);\n                if (callback) {\n                    callback(new Error(errorMessage), null, null);\n                }\n        }\n    });\n};\n// SET\n//\n// Sets the given _key_ and _value_ in memcache.\n//\n// The options dictionary takes:\n// * _expires_: overrides the default expiration (see `Client.create`) for this\n//              particular key-value pair.\n//\n// The callback signature is:\n//\n//     callback(err, success)\nClient.prototype.set = function(key, value, options, callback) {\n    if (callback === undefined && typeof options !== \"function\") {\n        var self = this;\n        if (!options) options = {};\n        return promisify(function(callback) {\n            self.set(key, value, options, function(err, success) {\n                callback(err, success);\n            });\n        });\n    }\n    var logger = this.options.logger;\n    var expires;\n    if (typeof options === \"function\" || typeof callback === \"number\") {\n        // OLD: function(key, value, callback, expires)\n        logger.log(\"MemJS SET: using deprecated call - arguments have changed\");\n        expires = callback;\n        callback = options;\n        options = {};\n    }\n    logger = this.options.logger;\n    expires = options.expires;\n    // TODO: support flags, support version (CAS)\n    this.incrSeq();\n    var expiration = makeExpiration(expires || this.options.expires);\n    var extras = Buffer.concat([\n        Buffer.from(\"00000000\", \"hex\"),\n        expiration\n    ]);\n    var opcode = 1;\n    var serialized = this.serializer.serialize(opcode, value, extras);\n    var request = makeRequestBuffer(opcode, key, serialized.extras, serialized.value, this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    callback(null, true);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS SET: \" + errors[response.header.status];\n                logger.log(errorMessage);\n                if (callback) {\n                    callback(new Error(errorMessage), null, null);\n                }\n        }\n    });\n};\n// ADD\n//\n// Adds the given _key_ and _value_ to memcache. The operation only succeeds\n// if the key is not already set.\n//\n// The options dictionary takes:\n// * _expires_: overrides the default expiration (see `Client.create`) for this\n//              particular key-value pair.\n//\n// The callback signature is:\n//\n//     callback(err, success)\nClient.prototype.add = function(key, value, options, callback) {\n    if (callback === undefined && typeof options !== \"function\") {\n        var self = this;\n        if (!options) options = {};\n        return promisify(function(callback) {\n            self.add(key, value, options, function(err, success) {\n                callback(err, success);\n            });\n        });\n    }\n    var logger = this.options.logger;\n    var expires;\n    if (typeof options === \"function\") {\n        // OLD: function(key, value, callback, expires)\n        logger.log(\"MemJS ADD: using deprecated call - arguments have changed\");\n        expires = callback;\n        callback = options;\n        options = {};\n    }\n    logger = this.options.logger;\n    expires = options.expires;\n    // TODO: support flags, support version (CAS)\n    this.incrSeq();\n    var expiration = makeExpiration(expires || this.options.expires);\n    var extras = Buffer.concat([\n        Buffer.from(\"00000000\", \"hex\"),\n        expiration\n    ]);\n    var opcode = 2;\n    var serialized = this.serializer.serialize(opcode, value, extras);\n    var request = makeRequestBuffer(opcode, key, serialized.extras, serialized.value, this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    callback(null, true);\n                }\n                break;\n            case 2:\n                if (callback) {\n                    callback(null, false);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS ADD: \" + errors[response.header.status];\n                logger.log(errorMessage, false);\n                if (callback) {\n                    callback(new Error(errorMessage), null, null);\n                }\n        }\n    });\n};\n// REPLACE\n//\n// Replaces the given _key_ and _value_ to memcache. The operation only succeeds\n// if the key is already present.\n//\n// The options dictionary takes:\n// * _expires_: overrides the default expiration (see `Client.create`) for this\n//              particular key-value pair.\n//\n// The callback signature is:\n//\n//     callback(err, success)\nClient.prototype.replace = function(key, value, options, callback) {\n    if (callback === undefined && typeof options !== \"function\") {\n        var self = this;\n        if (!options) options = {};\n        return promisify(function(callback) {\n            self.replace(key, value, options, function(err, success) {\n                callback(err, success);\n            });\n        });\n    }\n    var logger = this.options.logger;\n    var expires;\n    if (typeof options === \"function\") {\n        // OLD: function(key, value, callback, expires)\n        logger.log(\"MemJS REPLACE: using deprecated call - arguments have changed\");\n        expires = callback;\n        callback = options;\n        options = {};\n    }\n    logger = this.options.logger;\n    expires = options.expires;\n    // TODO: support flags, support version (CAS)\n    this.incrSeq();\n    var expiration = makeExpiration(expires || this.options.expires);\n    var extras = Buffer.concat([\n        Buffer.from(\"00000000\", \"hex\"),\n        expiration\n    ]);\n    var opcode = 3;\n    var serialized = this.serializer.serialize(opcode, value, extras);\n    var request = makeRequestBuffer(opcode, key, serialized.extras, serialized.value, this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    callback(null, true);\n                }\n                break;\n            case 1:\n                if (callback) {\n                    callback(null, false);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS REPLACE: \" + errors[response.header.status];\n                logger.log(errorMessage, false);\n                if (callback) {\n                    callback(new Error(errorMessage), null, null);\n                }\n        }\n    });\n};\n// DELETE\n//\n// Deletes the given _key_ from memcache. The operation only succeeds\n// if the key is already present.\n//\n// The callback signature is:\n//\n//     callback(err, success)\nClient.prototype.delete = function(key, callback) {\n    if (callback === undefined) {\n        var self = this;\n        return promisify(function(callback) {\n            self.delete(key, function(err, success) {\n                callback(err, success);\n            });\n        });\n    }\n    // TODO: Support version (CAS)\n    var logger = this.options.logger;\n    this.incrSeq();\n    var request = makeRequestBuffer(4, key, \"\", \"\", this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    callback(null, true);\n                }\n                break;\n            case 1:\n                if (callback) {\n                    callback(null, false);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS DELETE: \" + errors[response.header.status];\n                logger.log(errorMessage, false);\n                if (callback) {\n                    callback(new Error(errorMessage), null);\n                }\n        }\n    });\n};\n// INCREMENT\n//\n// Increments the given _key_ in memcache.\n//\n// The options dictionary takes:\n// * _initial_: the value for the key if not already present, defaults to 0.\n// * _expires_: overrides the default expiration (see `Client.create`) for this\n//              particular key-value pair.\n//\n// The callback signature is:\n//\n//     callback(err, success, value)\nClient.prototype.increment = function(key, amount, options, callback) {\n    if (callback === undefined && typeof options !== \"function\") {\n        var self = this;\n        return promisify(function(callback) {\n            if (!options) options = {};\n            self.increment(key, amount, options, function(err, success, value) {\n                callback(err, {\n                    success: success,\n                    value: value\n                });\n            });\n        });\n    }\n    var logger = this.options.logger;\n    var initial;\n    var expires;\n    if (typeof options === \"function\") {\n        // OLD: function(key, amount, callback, expires, initial)\n        logger.log(\"MemJS INCREMENT: using deprecated call - arguments have changed\");\n        initial = arguments[4];\n        expires = callback;\n        callback = options;\n        options = {};\n    }\n    logger = this.options.logger;\n    initial = options.initial;\n    expires = options.expires;\n    // TODO: support version (CAS)\n    this.incrSeq();\n    initial = initial || 0;\n    expires = expires || this.options.expires;\n    var extras = makeAmountInitialAndExpiration(amount, initial, expires);\n    var request = makeRequestBuffer(5, key, extras, \"\", this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                var bufInt = (response.val.readUInt32BE(0) << 8) + response.val.readUInt32BE(4);\n                if (callback) {\n                    callback(null, true, bufInt);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS INCREMENT: \" + errors[response.header.status];\n                logger.log(errorMessage);\n                if (callback) {\n                    callback(new Error(errorMessage), null, null);\n                }\n        }\n    });\n};\n// DECREMENT\n//\n// Decrements the given _key_ in memcache.\n//\n// The options dictionary takes:\n// * _initial_: the value for the key if not already present, defaults to 0.\n// * _expires_: overrides the default expiration (see `Client.create`) for this\n//              particular key-value pair.\n//\n// The callback signature is:\n//\n//     callback(err, success, value)\nClient.prototype.decrement = function(key, amount, options, callback) {\n    if (callback === undefined && typeof options !== \"function\") {\n        var self = this;\n        return promisify(function(callback) {\n            self.decrement(key, amount, options, function(err, success, value) {\n                callback(err, {\n                    success: success,\n                    value: value\n                });\n            });\n        });\n    }\n    // TODO: support version (CAS)\n    var logger = this.options.logger;\n    var initial;\n    var expires;\n    if (typeof options === \"function\") {\n        // OLD: function(key, amount, callback, expires, initial)\n        logger.log(\"MemJS DECREMENT: using deprecated call - arguments have changed\");\n        initial = arguments[4];\n        expires = callback;\n        callback = options;\n        options = {};\n    }\n    // TODO: support version (CAS)\n    logger = this.options.logger;\n    initial = options.initial;\n    expires = options.expires;\n    this.incrSeq();\n    initial = initial || 0;\n    expires = expires || this.options.expires;\n    var extras = makeAmountInitialAndExpiration(amount, initial, expires);\n    var request = makeRequestBuffer(6, key, extras, \"\", this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                var bufInt = (response.val.readUInt32BE(0) << 8) + response.val.readUInt32BE(4);\n                if (callback) {\n                    callback(null, true, bufInt);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS DECREMENT: \" + errors[response.header.status];\n                logger.log(errorMessage);\n                if (callback) {\n                    callback(new Error(errorMessage), null, null);\n                }\n        }\n    });\n};\n// APPEND\n//\n// Append the given _value_ to the value associated with the given _key_ in\n// memcache. The operation only succeeds if the key is already present. The\n// callback signature is:\n//\n//     callback(err, success)\nClient.prototype.append = function(key, value, callback) {\n    if (callback === undefined) {\n        var self = this;\n        return promisify(function(callback) {\n            self.append(key, value, function(err, success) {\n                callback(err, success);\n            });\n        });\n    }\n    // TODO: support version (CAS)\n    var logger = this.options.logger;\n    this.incrSeq();\n    var opcode = 0x0E;\n    var serialized = this.serializer.serialize(opcode, value, \"\");\n    var request = makeRequestBuffer(opcode, key, serialized.extras, serialized.value, this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    callback(null, true);\n                }\n                break;\n            case 1:\n                if (callback) {\n                    callback(null, false);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS APPEND: \" + errors[response.header.status];\n                logger.log(errorMessage);\n                if (callback) {\n                    callback(new Error(errorMessage), null);\n                }\n        }\n    });\n};\n// PREPEND\n//\n// Prepend the given _value_ to the value associated with the given _key_ in\n// memcache. The operation only succeeds if the key is already present. The\n// callback signature is:\n//\n//     callback(err, success)\nClient.prototype.prepend = function(key, value, callback) {\n    if (callback === undefined) {\n        var self = this;\n        return promisify(function(callback) {\n            self.prepend(key, value, function(err, success) {\n                callback(err, success);\n            });\n        });\n    }\n    // TODO: support version (CAS)\n    var logger = this.options.logger;\n    this.incrSeq();\n    var opcode = 0x0E;\n    var serialized = this.serializer.serialize(opcode, value, \"\");\n    var request = makeRequestBuffer(opcode, key, serialized.extras, serialized.value, this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    callback(null, true);\n                }\n                break;\n            case 1:\n                if (callback) {\n                    callback(null, false);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS PREPEND: \" + errors[response.header.status];\n                logger.log(errorMessage);\n                if (callback) {\n                    callback(new Error(errorMessage), null);\n                }\n        }\n    });\n};\n// TOUCH\n//\n// Touch sets an expiration value, given by _expires_, on the given _key_ in\n// memcache. The operation only succeeds if the key is already present. The\n// callback signature is:\n//\n//     callback(err, success)\nClient.prototype.touch = function(key, expires, callback) {\n    if (callback === undefined) {\n        var self = this;\n        return promisify(function(callback) {\n            self.touch(key, expires, function(err, success) {\n                callback(err, success);\n            });\n        });\n    }\n    // TODO: support version (CAS)\n    var logger = this.options.logger;\n    this.incrSeq();\n    var extras = makeExpiration(expires || this.options.expires);\n    var request = makeRequestBuffer(0x1C, key, extras, \"\", this.seq);\n    this.perform(key, request, this.seq, function(err, response) {\n        if (err) {\n            if (callback) {\n                callback(err, null);\n            }\n            return;\n        }\n        switch(response.header.status){\n            case 0:\n                if (callback) {\n                    callback(null, true);\n                }\n                break;\n            case 1:\n                if (callback) {\n                    callback(null, false);\n                }\n                break;\n            default:\n                var errorMessage = \"MemJS TOUCH: \" + errors[response.header.status];\n                logger.log(errorMessage);\n                if (callback) {\n                    callback(new Error(errorMessage), null);\n                }\n        }\n    });\n};\n// FLUSH\n//\n// Flushes the cache on each connected server. The callback signature is:\n//\n//     callback(lastErr, results)\n//\n// where _lastErr_ is the last error encountered (or null, in the common case\n// of no errors). _results_ is a dictionary mapping `\"hostname:port\"` to either\n// `true` (if the operation was successful), or an error.\nClient.prototype.flush = function(callback) {\n    if (callback === undefined) {\n        var self = this;\n        return promisify(function(callback) {\n            self.flush(function(err, results) {\n                callback(err, results);\n            });\n        });\n    }\n    // TODO: support expiration\n    this.incrSeq();\n    var request = makeRequestBuffer(0x08, \"\", \"\", \"\", this.seq);\n    var count = this.servers.length;\n    var result = {};\n    var lastErr = null;\n    var i;\n    var handleFlush = function(seq, serv) {\n        serv.onResponse(seq, function() {\n            count -= 1;\n            result[serv.host + \":\" + serv.port] = true;\n            if (callback && count === 0) {\n                callback(lastErr, result);\n            }\n        });\n        serv.onError(seq, function(err) {\n            count -= 1;\n            lastErr = err;\n            result[serv.host + \":\" + serv.port] = err;\n            if (callback && count === 0) {\n                callback(lastErr, result);\n            }\n        });\n        serv.write(request);\n    };\n    for(i = 0; i < this.servers.length; i++){\n        handleFlush(this.seq, this.servers[i]);\n    }\n};\n// STATS_WITH_KEY\n//\n// Sends a memcache stats command with a key to each connected server. The\n// callback is invoked **ONCE PER SERVER** and has the signature:\n//\n//     callback(err, server, stats)\n//\n// _server_ is the `\"hostname:port\"` of the server, and _stats_ is a dictionary\n// mapping the stat name to the value of the statistic as a string.\nClient.prototype.statsWithKey = function(key, callback) {\n    var logger = this.options.logger;\n    this.incrSeq();\n    var request = makeRequestBuffer(0x10, key, \"\", \"\", this.seq);\n    var i;\n    var handleStats = function(seq, serv) {\n        var result = {};\n        var handle = function(response) {\n            // end of stat responses\n            if (response.header.totalBodyLength === 0) {\n                if (callback) {\n                    callback(null, serv.host + \":\" + serv.port, result);\n                }\n                return;\n            }\n            // process single stat line response\n            switch(response.header.status){\n                case 0:\n                    result[response.key.toString()] = response.val.toString();\n                    break;\n                default:\n                    var errorMessage = \"MemJS STATS (\" + key + \"): \" + errors[response.header.status];\n                    logger.log(errorMessage, false);\n                    if (callback) {\n                        callback(new Error(errorMessage), serv.host + \":\" + serv.port, null);\n                    }\n            }\n        };\n        handle.quiet = true;\n        serv.onResponse(seq, handle);\n        serv.onError(seq, function(err) {\n            if (callback) {\n                callback(err, serv.host + \":\" + serv.port, null);\n            }\n        });\n        serv.write(request);\n    };\n    for(i = 0; i < this.servers.length; i++){\n        handleStats(this.seq, this.servers[i]);\n    }\n};\n// STATS\n//\n// Fetches memcache stats from each connected server. The callback is invoked\n// **ONCE PER SERVER** and has the signature:\n//\n//     callback(err, server, stats)\n//\n// _server_ is the `\"hostname:port\"` of the server, and _stats_ is a\n// dictionary mapping the stat name to the value of the statistic as a string.\nClient.prototype.stats = function(callback) {\n    this.statsWithKey(\"\", callback);\n};\n// RESET_STATS\n//\n// Reset the statistics each server is keeping back to zero. This doesn't clear\n// stats such as item count, but temporary stats such as total number of\n// connections over time.\n//\n// The callback is invoked **ONCE PER SERVER** and has the signature:\n//\n//     callback(err, server)\n//\n// _server_ is the `\"hostname:port\"` of the server.\nClient.prototype.resetStats = function(callback) {\n    this.statsWithKey(\"reset\", callback);\n};\n// QUIT\n//\n// Closes the connection to each server, notifying them of this intention. Note\n// that quit can race against already outstanding requests when those requests\n// fail and are retried, leading to the quit command winning and closing the\n// connection before the retries complete.\nClient.prototype.quit = function() {\n    this.incrSeq();\n    // TODO: Nicer perhaps to do QUITQ (0x17) but need a new callback for when\n    // write is done.\n    var request = makeRequestBuffer(0x07, \"\", \"\", \"\", this.seq); // QUIT\n    var serv;\n    var i;\n    var handleQuit = function(seq, serv) {\n        serv.onResponse(seq, function() {\n            serv.close();\n        });\n        serv.onError(seq, function() {\n            serv.close();\n        });\n        serv.write(request);\n    };\n    for(i = 0; i < this.servers.length; i++){\n        serv = this.servers[i];\n        handleQuit(this.seq, serv);\n    }\n};\n// CLOSE\n//\n// Closes (abruptly) connections to all the servers.\nClient.prototype.close = function() {\n    var i;\n    for(i = 0; i < this.servers.length; i++){\n        this.servers[i].close();\n    }\n};\n// Perform a generic single response operation (get, set etc) on a server\n// serv: the server to perform the operation on\n// request: a buffer containing the request\n// seq: the sequence number of the operation. It is used to pin the callbacks\n//      to a specific operation and should never change during a `perform`.\n// callback: a callback invoked when a response is received or the request\n//           fails\n// retries: number of times to retry request on failure\nClient.prototype.perform = function(key, request, seq, callback, retries) {\n    var _this = this;\n    var serv = this.server(key);\n    if (!serv) {\n        if (callback) {\n            callback(new Error(\"No servers available\"), null);\n        }\n        return;\n    }\n    retries = retries || this.options.retries;\n    var failover = this.options.failover;\n    var failoverTime = this.options.failoverTime;\n    var origRetries = this.options.retries;\n    var logger = this.options.logger;\n    var retry_delay = this.options.retry_delay;\n    var responseHandler = function(response) {\n        if (callback) {\n            callback(null, response);\n        }\n    };\n    var errorHandler = function(error) {\n        if (--retries > 0) {\n            // Wait for retry_delay\n            setTimeout(function() {\n                _this.perform(key, request, seq, callback, retries);\n            }, 1000 * retry_delay);\n        } else {\n            logger.log(\"MemJS: Server <\" + serv.host + \":\" + serv.port + \"> failed after (\" + origRetries + \") retries with error - \" + error.message);\n            if (failover) {\n                serv.wakeupAt = Date.now() + failoverTime * 1000;\n                _this.perform(key, request, seq, callback, origRetries);\n            } else {\n                if (callback) {\n                    callback(error, null);\n                }\n            }\n        }\n    };\n    serv.onResponse(seq, responseHandler);\n    serv.onError(seq, errorHandler);\n    serv.write(request);\n};\n// Increment the seq value\nClient.prototype.incrSeq = function() {\n    this.seq++;\n    // Wrap `this.seq` to 32-bits since the field we fit it into is only 32-bits.\n    this.seq &= 0xffffffff;\n};\nexports.Client = Client;\nexports.Server = Server;\nexports.Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\");\nexports.Header = __webpack_require__(/*! ./header */ \"(ssr)/./node_modules/memjs/lib/memjs/header.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/memjs/lib/memjs/memjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/memjs/lib/memjs/noop-serializer.js":
/*!*********************************************************!*\
  !*** ./node_modules/memjs/lib/memjs/noop-serializer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var noopSerializer = {\n    serialize: function(opcode, value, extras) {\n        return {\n            value: value,\n            extras: extras\n        };\n    },\n    deserialize: function(opcode, value, extras) {\n        return {\n            value: value,\n            extras: extras\n        };\n    }\n};\nexports.noopSerializer = noopSerializer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVtanMvbGliL21lbWpzL25vb3Atc2VyaWFsaXplci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxpQkFBaUI7SUFDbkJDLFdBQVcsU0FBVUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07UUFDeEMsT0FBTztZQUFFRCxPQUFPQTtZQUFPQyxRQUFRQTtRQUFPO0lBQ3hDO0lBQ0FDLGFBQWEsU0FBVUgsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07UUFDMUMsT0FBTztZQUFFRCxPQUFPQTtZQUFPQyxRQUFRQTtRQUFPO0lBQ3hDO0FBQ0Y7QUFFQUUsc0JBQXNCLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tZW1qcy9saWIvbWVtanMvbm9vcC1zZXJpYWxpemVyLmpzP2UwZTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vb3BTZXJpYWxpemVyID0ge1xuICBzZXJpYWxpemU6IGZ1bmN0aW9uIChvcGNvZGUsIHZhbHVlLCBleHRyYXMpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGV4dHJhczogZXh0cmFzIH07XG4gIH0sXG4gIGRlc2VyaWFsaXplOiBmdW5jdGlvbiAob3Bjb2RlLCB2YWx1ZSwgZXh0cmFzKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBleHRyYXM6IGV4dHJhcyB9O1xuICB9XG59O1xuXG5leHBvcnRzLm5vb3BTZXJpYWxpemVyID0gbm9vcFNlcmlhbGl6ZXI7XG4iXSwibmFtZXMiOlsibm9vcFNlcmlhbGl6ZXIiLCJzZXJpYWxpemUiLCJvcGNvZGUiLCJ2YWx1ZSIsImV4dHJhcyIsImRlc2VyaWFsaXplIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/memjs/lib/memjs/noop-serializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/memjs/lib/memjs/protocol.js":
/*!**************************************************!*\
  !*** ./node_modules/memjs/lib/memjs/protocol.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// # MemJS Memcache binary protocol errors\nexports.errors = {};\nexports.errors[0] = \"No error\";\nexports.errors[1] = \"Key not found\";\nexports.errors[2] = \"Key exists\";\nexports.errors[3] = \"Value too large\";\nexports.errors[4] = \"Invalid arguments\";\nexports.errors[5] = \"Item not stored\";\nexports.errors[6] = \"Incr/Decr on non-numeric value\";\nexports.errors[7] = \"The vbucket belongs to another server\";\nexports.errors[8] = \"Authentication error\";\nexports.errors[9] = \"Authentication continue\";\nexports.errors[129] = \"Unknown command\";\nexports.errors[130] = \"Out of memory\";\nexports.errors[131] = \"Not supported\";\nexports.errors[132] = \"Internal error\";\nexports.errors[133] = \"Busy\";\nexports.errors[134] = \"Temporary failure\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVtanMvbGliL21lbWpzL3Byb3RvY29sLmpzIiwibWFwcGluZ3MiOiJBQUFBLDBDQUEwQztBQUUxQ0EsY0FBYyxHQUFHLENBQUM7QUFDbEJBLGlCQUFzQixHQUFHO0FBQ3pCQSxpQkFBc0IsR0FBRztBQUN6QkEsaUJBQXNCLEdBQUc7QUFDekJBLGlCQUFzQixHQUFHO0FBQ3pCQSxpQkFBc0IsR0FBRztBQUN6QkEsaUJBQXNCLEdBQUc7QUFDekJBLGlCQUFzQixHQUFHO0FBQ3pCQSxpQkFBc0IsR0FBRztBQUN6QkEsaUJBQXNCLEdBQUc7QUFDekJBLGlCQUFzQixHQUFHO0FBQ3pCQSxtQkFBc0IsR0FBRztBQUN6QkEsbUJBQXNCLEdBQUc7QUFDekJBLG1CQUFzQixHQUFHO0FBQ3pCQSxtQkFBc0IsR0FBRztBQUN6QkEsbUJBQXNCLEdBQUc7QUFDekJBLG1CQUFzQixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGlvbmV6LW5leHRqcy8uL25vZGVfbW9kdWxlcy9tZW1qcy9saWIvbWVtanMvcHJvdG9jb2wuanM/OWIzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAjIE1lbUpTIE1lbWNhY2hlIGJpbmFyeSBwcm90b2NvbCBlcnJvcnNcblxuZXhwb3J0cy5lcnJvcnMgPSB7fTtcbmV4cG9ydHMuZXJyb3JzWzB4MDAwMF0gPSAnTm8gZXJyb3InO1xuZXhwb3J0cy5lcnJvcnNbMHgwMDAxXSA9ICdLZXkgbm90IGZvdW5kJztcbmV4cG9ydHMuZXJyb3JzWzB4MDAwMl0gPSAnS2V5IGV4aXN0cyc7XG5leHBvcnRzLmVycm9yc1sweDAwMDNdID0gJ1ZhbHVlIHRvbyBsYXJnZSc7XG5leHBvcnRzLmVycm9yc1sweDAwMDRdID0gJ0ludmFsaWQgYXJndW1lbnRzJztcbmV4cG9ydHMuZXJyb3JzWzB4MDAwNV0gPSAnSXRlbSBub3Qgc3RvcmVkJztcbmV4cG9ydHMuZXJyb3JzWzB4MDAwNl0gPSAnSW5jci9EZWNyIG9uIG5vbi1udW1lcmljIHZhbHVlJztcbmV4cG9ydHMuZXJyb3JzWzB4MDAwN10gPSAnVGhlIHZidWNrZXQgYmVsb25ncyB0byBhbm90aGVyIHNlcnZlcic7XG5leHBvcnRzLmVycm9yc1sweDAwMDhdID0gJ0F1dGhlbnRpY2F0aW9uIGVycm9yJztcbmV4cG9ydHMuZXJyb3JzWzB4MDAwOV0gPSAnQXV0aGVudGljYXRpb24gY29udGludWUnO1xuZXhwb3J0cy5lcnJvcnNbMHgwMDgxXSA9ICdVbmtub3duIGNvbW1hbmQnO1xuZXhwb3J0cy5lcnJvcnNbMHgwMDgyXSA9ICdPdXQgb2YgbWVtb3J5JztcbmV4cG9ydHMuZXJyb3JzWzB4MDA4M10gPSAnTm90IHN1cHBvcnRlZCc7XG5leHBvcnRzLmVycm9yc1sweDAwODRdID0gJ0ludGVybmFsIGVycm9yJztcbmV4cG9ydHMuZXJyb3JzWzB4MDA4NV0gPSAnQnVzeSc7XG5leHBvcnRzLmVycm9yc1sweDAwODZdID0gJ1RlbXBvcmFyeSBmYWlsdXJlJztcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiZXJyb3JzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/memjs/lib/memjs/protocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/memjs/lib/memjs/server.js":
/*!************************************************!*\
  !*** ./node_modules/memjs/lib/memjs/server.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var net = __webpack_require__(/*! net */ \"net\");\nvar events = __webpack_require__(/*! events */ \"events\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar makeRequestBuffer = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").makeRequestBuffer);\nvar parseMessage = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").parseMessage);\nvar merge = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").merge);\nvar timestamp = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/memjs/lib/memjs/utils.js\").timestamp);\nvar Server = function(host, port, username, password, options) {\n    events.EventEmitter.call(this);\n    this.responseBuffer = Buffer.from([]);\n    this.host = host;\n    this.port = port;\n    this.connected = false;\n    this.timeoutSet = false;\n    this.connectCallbacks = [];\n    this.responseCallbacks = {};\n    this.requestTimeouts = [];\n    this.errorCallbacks = {};\n    this.options = merge(options || {}, {\n        timeout: 0.5,\n        keepAlive: false,\n        keepAliveDelay: 30\n    });\n    if (this.options.conntimeout === undefined || this.options.conntimeout === null) {\n        this.options.conntimeout = 2 * this.options.timeout;\n    }\n    this.username = username || this.options.username || process.env.MEMCACHIER_USERNAME || process.env.MEMCACHE_USERNAME;\n    this.password = password || this.options.password || process.env.MEMCACHIER_PASSWORD || process.env.MEMCACHE_PASSWORD;\n    return this;\n};\nutil.inherits(Server, events.EventEmitter);\nServer.prototype.onConnect = function(func) {\n    this.connectCallbacks.push(func);\n};\nServer.prototype.onResponse = function(seq, func) {\n    this.responseCallbacks[seq] = func;\n};\nServer.prototype.respond = function(response) {\n    var callback = this.responseCallbacks[response.header.opaque];\n    if (!callback) {\n        // in case of authentication, no callback is registered\n        return;\n    }\n    callback(response);\n    if (!callback.quiet || response.header.totalBodyLength === 0) {\n        delete this.responseCallbacks[response.header.opaque];\n        this.requestTimeouts.shift();\n        delete this.errorCallbacks[response.header.opaque];\n    }\n};\nServer.prototype.onError = function(seq, func) {\n    this.errorCallbacks[seq] = func;\n};\nServer.prototype.error = function(err) {\n    var errcalls = this.errorCallbacks;\n    this.connectCallbacks = [];\n    this.responseCallbacks = {};\n    this.requestTimeouts = [];\n    this.errorCallbacks = {};\n    this.timeoutSet = false;\n    if (this._socket) {\n        this._socket.destroy();\n        delete this._socket;\n    }\n    var k;\n    for(k in errcalls){\n        if (errcalls.hasOwnProperty(k)) {\n            errcalls[k](err);\n        }\n    }\n};\nServer.prototype.listSasl = function() {\n    var buf = makeRequestBuffer(0x20, \"\", \"\", \"\");\n    this.writeSASL(buf);\n};\nServer.prototype.saslAuth = function() {\n    var authStr = \"\\x00\" + this.username + \"\\x00\" + this.password;\n    var buf = makeRequestBuffer(0x21, \"PLAIN\", \"\", authStr);\n    this.writeSASL(buf);\n};\nServer.prototype.appendToBuffer = function(dataBuf) {\n    var old = this.responseBuffer;\n    this.responseBuffer = Buffer.alloc(old.length + dataBuf.length);\n    old.copy(this.responseBuffer, 0);\n    dataBuf.copy(this.responseBuffer, old.length);\n    return this.responseBuffer;\n};\nServer.prototype.responseHandler = function(dataBuf) {\n    var response = parseMessage(this.appendToBuffer(dataBuf));\n    var respLength;\n    while(response){\n        if (response.header.opcode === 0x20) {\n            this.saslAuth();\n        } else if (response.header.status === 0x20) {\n            this.error(\"Memcached server authentication failed!\");\n        } else if (response.header.opcode === 0x21) {\n            this.emit(\"authenticated\");\n        } else {\n            this.respond(response);\n        }\n        respLength = response.header.totalBodyLength + 24;\n        this.responseBuffer = this.responseBuffer.slice(respLength);\n        response = parseMessage(this.responseBuffer);\n    }\n};\nServer.prototype.sock = function(sasl, go) {\n    var self = this;\n    if (!self._socket) {\n        // CASE 1: completely new socket\n        self.connected = false;\n        self._socket = net.connect(this.port, this.host, function() {\n            // SASL authentication handler\n            self.once(\"authenticated\", function() {\n                if (self._socket) {\n                    self.connected = true;\n                    // cancel connection timeout\n                    self._socket.setTimeout(0);\n                    self.timeoutSet = false;\n                    // run actual request(s)\n                    go(self._socket);\n                    self.connectCallbacks.forEach(function(cb) {\n                        cb(self._socket);\n                    });\n                    self.connectCallbacks = [];\n                }\n            });\n            // setup response handler\n            this.on(\"data\", function(dataBuf) {\n                self.responseHandler(dataBuf);\n            });\n            // kick of SASL if needed\n            if (self.username && self.password) {\n                self.listSasl();\n            } else {\n                self.emit(\"authenticated\");\n            }\n        });\n        // setup error handler\n        self._socket.on(\"error\", function(error) {\n            self.error(error);\n        });\n        self._socket.on(\"close\", function() {\n            self.connected = false;\n            if (self.timeoutSet) {\n                self._socket.setTimeout(0);\n                self.timeoutSet = false;\n            }\n            self._socket = undefined;\n        });\n        // setup connection timeout handler\n        self.timeoutSet = true;\n        self._socket.setTimeout(self.options.conntimeout * 1000, function() {\n            self.timeoutSet = false;\n            if (!self.connected) {\n                this.end();\n                self._socket = undefined;\n                self.error(new Error(\"socket timed out connecting to server.\"));\n            }\n        });\n        // use TCP keep-alive\n        self._socket.setKeepAlive(self.options.keepAlive, self.options.keepAliveDelay * 1000);\n    } else if (!self.connected && !sasl) {\n        // CASE 2: socket exists, but still connecting / authenticating\n        self.onConnect(go);\n    } else {\n        // CASE 3: socket exists and connected / ready to use\n        go(self._socket);\n    }\n};\n// We handle tracking timeouts with an array of deadlines (requestTimeouts), as\n// node doesn't like us setting up lots of timers, and using just one is more\n// efficient anyway.\nvar timeoutHandler = function(server, sock) {\n    if (server.requestTimeouts.length === 0) {\n        // nothing active\n        server.timeoutSet = false;\n        return;\n    }\n    // some requests outstanding, check if any have timed-out\n    var now = timestamp();\n    var soonestTimeout = server.requestTimeouts[0];\n    if (soonestTimeout <= now) {\n        // timeout occurred!\n        sock.end();\n        server.connected = false;\n        server._socket = undefined;\n        server.timeoutSet = false;\n        server.error(new Error(\"socket timed out waiting on response.\"));\n    } else {\n        // no timeout! Setup next one.\n        var deadline = soonestTimeout - now;\n        sock.setTimeout(deadline, function() {\n            timeoutHandler(server, sock);\n        });\n    }\n};\nServer.prototype.write = function(blob) {\n    var self = this;\n    var deadline = Math.round(self.options.timeout * 1000);\n    this.sock(false, function(s) {\n        s.write(blob);\n        self.requestTimeouts.push(timestamp() + deadline);\n        if (!self.timeoutSet) {\n            self.timeoutSet = true;\n            s.setTimeout(deadline, function() {\n                timeoutHandler(self, this);\n            });\n        }\n    });\n};\nServer.prototype.writeSASL = function(blob) {\n    this.sock(true, function(s) {\n        s.write(blob);\n    });\n};\nServer.prototype.close = function() {\n    if (this._socket) {\n        this._socket.end();\n    }\n};\nServer.prototype.toString = function() {\n    return \"<Server \" + this.host + \":\" + this.port + \">\";\n};\nexports.Server = Server;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVtanMvbGliL21lbWpzL3NlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQixJQUFJRyxvQkFBb0JILHVHQUFvQztBQUM1RCxJQUFJSSxlQUFlSixrR0FBK0I7QUFDbEQsSUFBSUssUUFBUUwsMkZBQXdCO0FBQ3BDLElBQUlNLFlBQVlOLCtGQUE0QjtBQUU1QyxJQUFJTyxTQUFTLFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsT0FBTztJQUMzRFgsT0FBT1ksWUFBWSxDQUFDQyxJQUFJLENBQUMsSUFBSTtJQUM3QixJQUFJLENBQUNDLGNBQWMsR0FBR0MsT0FBT0MsSUFBSSxDQUFDLEVBQUU7SUFDcEMsSUFBSSxDQUFDVCxJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDUyxTQUFTLEdBQUc7SUFDakIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDbEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxFQUFFO0lBQzFCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBQztJQUMxQixJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO0lBQ3pCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLENBQUM7SUFDdkIsSUFBSSxDQUFDWCxPQUFPLEdBQUdQLE1BQU1PLFdBQVcsQ0FBQyxHQUFHO1FBQUNZLFNBQVM7UUFBS0MsV0FBVztRQUFPQyxnQkFBZ0I7SUFBRTtJQUN2RixJQUFJLElBQUksQ0FBQ2QsT0FBTyxDQUFDZSxXQUFXLEtBQUtDLGFBQWEsSUFBSSxDQUFDaEIsT0FBTyxDQUFDZSxXQUFXLEtBQUssTUFBTTtRQUMvRSxJQUFJLENBQUNmLE9BQU8sQ0FBQ2UsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFD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RCxRQUFRLEdBQUc7SUFDMUIsT0FBTyxhQUFhLElBQUksQ0FBQzNGLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0FBQ3BEO0FBRUEyRixjQUFjLEdBQUc3RiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpb25lei1uZXh0anMvLi9ub2RlX21vZHVsZXMvbWVtanMvbGliL21lbWpzL3NlcnZlci5qcz8wMGQxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBuZXQgPSByZXF1aXJlKCduZXQnKTtcbnZhciBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIG1ha2VSZXF1ZXN0QnVmZmVyID0gcmVxdWlyZSgnLi91dGlscycpLm1ha2VSZXF1ZXN0QnVmZmVyO1xudmFyIHBhcnNlTWVzc2FnZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5wYXJzZU1lc3NhZ2U7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCcuL3V0aWxzJykubWVyZ2U7XG52YXIgdGltZXN0YW1wID0gcmVxdWlyZSgnLi91dGlscycpLnRpbWVzdGFtcDtcblxudmFyIFNlcnZlciA9IGZ1bmN0aW9uKGhvc3QsIHBvcnQsIHVzZXJuYW1lLCBwYXNzd29yZCwgb3B0aW9ucykge1xuICBldmVudHMuRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHRoaXMucmVzcG9uc2VCdWZmZXIgPSBCdWZmZXIuZnJvbShbXSk7XG4gIHRoaXMuaG9zdCA9IGhvc3Q7XG4gIHRoaXMucG9ydCA9IHBvcnQ7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMudGltZW91dFNldCA9IGZhbHNlO1xuICB0aGlzLmNvbm5lY3RDYWxsYmFja3MgPSBbXTtcbiAgdGhpcy5yZXNwb25zZUNhbGxiYWNrcyA9IHt9O1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0cyA9IFtdO1xuICB0aGlzLmVycm9yQ2FsbGJhY2tzID0ge307XG4gIHRoaXMub3B0aW9ucyA9IG1lcmdlKG9wdGlvbnMgfHwge30sIHt0aW1lb3V0OiAwLjUsIGtlZXBBbGl2ZTogZmFsc2UsIGtlZXBBbGl2ZURlbGF5OiAzMH0pO1xuICBpZiAodGhpcy5vcHRpb25zLmNvbm50aW1lb3V0ID09PSB1bmRlZmluZWQgfHwgdGhpcy5vcHRpb25zLmNvbm50aW1lb3V0ID09PSBudWxsKSB7XG4gICAgdGhpcy5vcHRpb25zLmNvbm50aW1lb3V0ID0gMiAqIHRoaXMub3B0aW9ucy50aW1lb3V0O1xuICB9XG4gIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZSB8fCB0aGlzLm9wdGlvbnMudXNlcm5hbWUgfHwgcHJvY2Vzcy5lbnYuTUVNQ0FDSElFUl9VU0VSTkFNRSB8fCBwcm9jZXNzLmVudi5NRU1DQUNIRV9VU0VSTkFNRTtcbiAgdGhpcy5wYXNzd29yZCA9IHBhc3N3b3JkIHx8IHRoaXMub3B0aW9ucy5wYXNzd29yZCB8fCBwcm9jZXNzLmVudi5NRU1DQUNISUVSX1BBU1NXT1JEIHx8IHByb2Nlc3MuZW52Lk1FTUNBQ0hFX1BBU1NXT1JEO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnV0aWwuaW5oZXJpdHMoU2VydmVyLCBldmVudHMuRXZlbnRFbWl0dGVyKTtcblxuU2VydmVyLnByb3RvdHlwZS5vbkNvbm5lY3QgPSBmdW5jdGlvbihmdW5jKSB7XG4gIHRoaXMuY29ubmVjdENhbGxiYWNrcy5wdXNoKGZ1bmMpO1xufTtcblxuU2VydmVyLnByb3RvdHlwZS5vblJlc3BvbnNlID0gZnVuY3Rpb24oc2VxLCBmdW5jKSB7XG4gIHRoaXMucmVzcG9uc2VDYWxsYmFja3Nbc2VxXSA9IGZ1bmM7XG59O1xuXG5TZXJ2ZXIucHJvdG90eXBlLnJlc3BvbmQgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICB2YXIgY2FsbGJhY2sgPSB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlLmhlYWRlci5vcGFxdWVdO1xuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBhdXRoZW50aWNhdGlvbiwgbm8gY2FsbGJhY2sgaXMgcmVnaXN0ZXJlZFxuICAgIHJldHVybjtcbiAgfVxuICBjYWxsYmFjayhyZXNwb25zZSk7XG4gIGlmICghY2FsbGJhY2sucXVpZXQgfHwgcmVzcG9uc2UuaGVhZGVyLnRvdGFsQm9keUxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSh0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlLmhlYWRlci5vcGFxdWVdKTtcbiAgICB0aGlzLnJlcXVlc3RUaW1lb3V0cy5zaGlmdCgpO1xuICAgIGRlbGV0ZSh0aGlzLmVycm9yQ2FsbGJhY2tzW3Jlc3BvbnNlLmhlYWRlci5vcGFxdWVdKTtcbiAgfVxufTtcblxuU2VydmVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24oc2VxLCBmdW5jKSB7XG4gIHRoaXMuZXJyb3JDYWxsYmFja3Nbc2VxXSA9IGZ1bmM7XG59O1xuXG5TZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIHZhciBlcnJjYWxscyA9IHRoaXMuZXJyb3JDYWxsYmFja3M7XG4gIHRoaXMuY29ubmVjdENhbGxiYWNrcyA9IFtdO1xuICB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzID0ge307XG4gIHRoaXMucmVxdWVzdFRpbWVvdXRzID0gW107XG4gIHRoaXMuZXJyb3JDYWxsYmFja3MgPSB7fTtcbiAgdGhpcy50aW1lb3V0U2V0ID0gZmFsc2U7XG4gIGlmICh0aGlzLl9zb2NrZXQpIHtcbiAgICB0aGlzLl9zb2NrZXQuZGVzdHJveSgpO1xuICAgIGRlbGV0ZSh0aGlzLl9zb2NrZXQpO1xuICB9XG4gIHZhciBrO1xuICBmb3IgKGsgaW4gZXJyY2FsbHMpIHtcbiAgICBpZiAoZXJyY2FsbHMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGVycmNhbGxzW2tdKGVycik7XG4gICAgfVxuICB9XG59O1xuXG5TZXJ2ZXIucHJvdG90eXBlLmxpc3RTYXNsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBidWYgPSBtYWtlUmVxdWVzdEJ1ZmZlcigweDIwLCAnJywgJycsICcnKTtcbiAgdGhpcy53cml0ZVNBU0woYnVmKTtcbn07XG5cblNlcnZlci5wcm90b3R5cGUuc2FzbEF1dGggPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGhTdHIgPSAnXFx4MDAnICsgdGhpcy51c2VybmFtZSArICdcXHgwMCcgKyB0aGlzLnBhc3N3b3JkO1xuICB2YXIgYnVmID0gbWFrZVJlcXVlc3RCdWZmZXIoMHgyMSwgJ1BMQUlOJywgJycsIGF1dGhTdHIpO1xuICB0aGlzLndyaXRlU0FTTChidWYpO1xufTtcblxuU2VydmVyLnByb3RvdHlwZS5hcHBlbmRUb0J1ZmZlciA9IGZ1bmN0aW9uKGRhdGFCdWYpIHtcbiAgdmFyIG9sZCA9IHRoaXMucmVzcG9uc2VCdWZmZXI7XG4gIHRoaXMucmVzcG9uc2VCdWZmZXIgPSBCdWZmZXIuYWxsb2Mob2xkLmxlbmd0aCArIGRhdGFCdWYubGVuZ3RoKTtcbiAgb2xkLmNvcHkodGhpcy5yZXNwb25zZUJ1ZmZlciwgMCk7XG4gIGRhdGFCdWYuY29weSh0aGlzLnJlc3BvbnNlQnVmZmVyLCBvbGQubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXMucmVzcG9uc2VCdWZmZXI7XG59O1xuXG5TZXJ2ZXIucHJvdG90eXBlLnJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uKGRhdGFCdWYpIHtcbiAgdmFyIHJlc3BvbnNlID0gcGFyc2VNZXNzYWdlKHRoaXMuYXBwZW5kVG9CdWZmZXIoZGF0YUJ1ZikpO1xuICB2YXIgcmVzcExlbmd0aDtcbiAgd2hpbGUgKHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlc3BvbnNlLmhlYWRlci5vcGNvZGUgPT09IDB4MjApIHtcbiAgICAgIHRoaXMuc2FzbEF1dGgoKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmhlYWRlci5zdGF0dXMgPT09IDB4MjApIHtcbiAgICAgIHRoaXMuZXJyb3IoJ01lbWNhY2hlZCBzZXJ2ZXIgYXV0aGVudGljYXRpb24gZmFpbGVkIScpO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuaGVhZGVyLm9wY29kZSA9PT0gMHgyMSkge1xuICAgICAgdGhpcy5lbWl0KCdhdXRoZW50aWNhdGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzcG9uZChyZXNwb25zZSk7XG4gICAgfVxuICAgIHJlc3BMZW5ndGggPSByZXNwb25zZS5oZWFkZXIudG90YWxCb2R5TGVuZ3RoICsgMjQ7XG4gICAgdGhpcy5yZXNwb25zZUJ1ZmZlciA9IHRoaXMucmVzcG9uc2VCdWZmZXIuc2xpY2UocmVzcExlbmd0aCk7XG4gICAgcmVzcG9uc2UgPSBwYXJzZU1lc3NhZ2UodGhpcy5yZXNwb25zZUJ1ZmZlcik7XG4gIH1cbn07XG5cblNlcnZlci5wcm90b3R5cGUuc29jayA9IGZ1bmN0aW9uKHNhc2wsIGdvKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIXNlbGYuX3NvY2tldCkge1xuICAgIC8vIENBU0UgMTogY29tcGxldGVseSBuZXcgc29ja2V0XG4gICAgc2VsZi5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICBzZWxmLl9zb2NrZXQgPSBuZXQuY29ubmVjdCh0aGlzLnBvcnQsIHRoaXMuaG9zdCwgZnVuY3Rpb24oKSB7XG5cbiAgICAgIC8vIFNBU0wgYXV0aGVudGljYXRpb24gaGFuZGxlclxuICAgICAgc2VsZi5vbmNlKCdhdXRoZW50aWNhdGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzZWxmLl9zb2NrZXQpIHtcbiAgICAgICAgICBzZWxmLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgLy8gY2FuY2VsIGNvbm5lY3Rpb24gdGltZW91dFxuICAgICAgICAgIHNlbGYuX3NvY2tldC5zZXRUaW1lb3V0KDApO1xuICAgICAgICAgIHNlbGYudGltZW91dFNldCA9IGZhbHNlO1xuICAgICAgICAgIC8vIHJ1biBhY3R1YWwgcmVxdWVzdChzKVxuICAgICAgICAgIGdvKHNlbGYuX3NvY2tldCk7XG4gICAgICAgICAgc2VsZi5jb25uZWN0Q2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgICAgIGNiKHNlbGYuX3NvY2tldCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZi5jb25uZWN0Q2FsbGJhY2tzID0gW107XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBzZXR1cCByZXNwb25zZSBoYW5kbGVyXG4gICAgICB0aGlzLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YUJ1Zikge1xuICAgICAgICBzZWxmLnJlc3BvbnNlSGFuZGxlcihkYXRhQnVmKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBraWNrIG9mIFNBU0wgaWYgbmVlZGVkXG4gICAgICBpZiAoc2VsZi51c2VybmFtZSAmJiBzZWxmLnBhc3N3b3JkKSB7XG4gICAgICAgIHNlbGYubGlzdFNhc2woKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuZW1pdCgnYXV0aGVudGljYXRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gc2V0dXAgZXJyb3IgaGFuZGxlclxuICAgIHNlbGYuX3NvY2tldC5vbignZXJyb3InLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgc2VsZi5lcnJvcihlcnJvcik7XG4gICAgfSk7XG5cbiAgICBzZWxmLl9zb2NrZXQub24oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgaWYgKHNlbGYudGltZW91dFNldCkge1xuICAgICAgICBzZWxmLl9zb2NrZXQuc2V0VGltZW91dCgwKTtcbiAgICAgICAgc2VsZi50aW1lb3V0U2V0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBzZWxmLl9zb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgfSk7XG5cbiAgICAvLyBzZXR1cCBjb25uZWN0aW9uIHRpbWVvdXQgaGFuZGxlclxuICAgIHNlbGYudGltZW91dFNldCA9IHRydWU7XG4gICAgc2VsZi5fc29ja2V0LnNldFRpbWVvdXQoc2VsZi5vcHRpb25zLmNvbm50aW1lb3V0ICogMTAwMCwgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnRpbWVvdXRTZXQgPSBmYWxzZTtcbiAgICAgIGlmICghc2VsZi5jb25uZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5lbmQoKTtcbiAgICAgICAgc2VsZi5fc29ja2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICBzZWxmLmVycm9yKG5ldyBFcnJvcignc29ja2V0IHRpbWVkIG91dCBjb25uZWN0aW5nIHRvIHNlcnZlci4nKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB1c2UgVENQIGtlZXAtYWxpdmVcbiAgICBzZWxmLl9zb2NrZXQuc2V0S2VlcEFsaXZlKHNlbGYub3B0aW9ucy5rZWVwQWxpdmUsIHNlbGYub3B0aW9ucy5rZWVwQWxpdmVEZWxheSAqIDEwMDApO1xuXG4gIH0gZWxzZSBpZiAoIXNlbGYuY29ubmVjdGVkICYmICFzYXNsKSB7XG4gICAgLy8gQ0FTRSAyOiBzb2NrZXQgZXhpc3RzLCBidXQgc3RpbGwgY29ubmVjdGluZyAvIGF1dGhlbnRpY2F0aW5nXG4gICAgc2VsZi5vbkNvbm5lY3QoZ28pO1xuXG4gIH0gZWxzZSB7XG4gICAgLy8gQ0FTRSAzOiBzb2NrZXQgZXhpc3RzIGFuZCBjb25uZWN0ZWQgLyByZWFkeSB0byB1c2VcbiAgICBnbyhzZWxmLl9zb2NrZXQpO1xuICB9XG59O1xuXG4vLyBXZSBoYW5kbGUgdHJhY2tpbmcgdGltZW91dHMgd2l0aCBhbiBhcnJheSBvZiBkZWFkbGluZXMgKHJlcXVlc3RUaW1lb3V0cyksIGFzXG4vLyBub2RlIGRvZXNuJ3QgbGlrZSB1cyBzZXR0aW5nIHVwIGxvdHMgb2YgdGltZXJzLCBhbmQgdXNpbmcganVzdCBvbmUgaXMgbW9yZVxuLy8gZWZmaWNpZW50IGFueXdheS5cbnZhciB0aW1lb3V0SGFuZGxlciA9IGZ1bmN0aW9uKHNlcnZlciwgc29jaykge1xuICBpZiAoc2VydmVyLnJlcXVlc3RUaW1lb3V0cy5sZW5ndGggPT09IDApIHtcbiAgICAvLyBub3RoaW5nIGFjdGl2ZVxuICAgIHNlcnZlci50aW1lb3V0U2V0ID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc29tZSByZXF1ZXN0cyBvdXRzdGFuZGluZywgY2hlY2sgaWYgYW55IGhhdmUgdGltZWQtb3V0XG4gIHZhciBub3cgPSB0aW1lc3RhbXAoKTtcbiAgdmFyIHNvb25lc3RUaW1lb3V0ID0gc2VydmVyLnJlcXVlc3RUaW1lb3V0c1swXTtcblxuICBpZiAoc29vbmVzdFRpbWVvdXQgPD0gbm93KSB7XG4gICAgLy8gdGltZW91dCBvY2N1cnJlZCFcbiAgICBzb2NrLmVuZCgpO1xuICAgIHNlcnZlci5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICBzZXJ2ZXIuX3NvY2tldCA9IHVuZGVmaW5lZDtcbiAgICBzZXJ2ZXIudGltZW91dFNldCA9IGZhbHNlO1xuICAgIHNlcnZlci5lcnJvcihuZXcgRXJyb3IoJ3NvY2tldCB0aW1lZCBvdXQgd2FpdGluZyBvbiByZXNwb25zZS4nKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm8gdGltZW91dCEgU2V0dXAgbmV4dCBvbmUuXG4gICAgdmFyIGRlYWRsaW5lID0gc29vbmVzdFRpbWVvdXQgLSBub3c7XG4gICAgc29jay5zZXRUaW1lb3V0KGRlYWRsaW5lLCBmdW5jdGlvbigpIHtcbiAgICAgIHRpbWVvdXRIYW5kbGVyKHNlcnZlciwgc29jayk7XG4gICAgfSk7XG4gIH1cbn07XG5cblNlcnZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihibG9iKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGRlYWRsaW5lID0gTWF0aC5yb3VuZChzZWxmLm9wdGlvbnMudGltZW91dCAqIDEwMDApO1xuICB0aGlzLnNvY2soZmFsc2UsIGZ1bmN0aW9uKHMpIHtcbiAgICBzLndyaXRlKGJsb2IpO1xuICAgIHNlbGYucmVxdWVzdFRpbWVvdXRzLnB1c2godGltZXN0YW1wKCkgKyBkZWFkbGluZSk7XG4gICAgaWYgKCFzZWxmLnRpbWVvdXRTZXQpIHtcbiAgICAgIHNlbGYudGltZW91dFNldCA9IHRydWU7XG4gICAgICBzLnNldFRpbWVvdXQoZGVhZGxpbmUsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aW1lb3V0SGFuZGxlcihzZWxmLCB0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5TZXJ2ZXIucHJvdG90eXBlLndyaXRlU0FTTCA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgdGhpcy5zb2NrKHRydWUsIGZ1bmN0aW9uKHMpIHtcbiAgICBzLndyaXRlKGJsb2IpO1xuICB9KTtcbn07XG5cblNlcnZlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX3NvY2tldCkgeyB0aGlzLl9zb2NrZXQuZW5kKCk7IH1cbn07XG5cblNlcnZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICc8U2VydmVyICcgKyB0aGlzLmhvc3QgKyAnOicgKyB0aGlzLnBvcnQgKyAnPic7XG59O1xuXG5leHBvcnRzLlNlcnZlciA9IFNlcnZlcjtcbiJdLCJuYW1lcyI6WyJuZXQiLCJyZXF1aXJlIiwiZXZlbnRzIiwidXRpbCIsIm1ha2VSZXF1ZXN0QnVmZmVyIiwicGFyc2VNZXNzYWdlIiwibWVyZ2UiLCJ0aW1lc3RhbXAiLCJTZXJ2ZXIiLCJob3N0IiwicG9ydCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJvcHRpb25zIiwiRXZlbnRFbWl0dGVyIiwiY2FsbCIsInJlc3BvbnNlQnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsImNvbm5lY3RlZCIsInRpbWVvdXRTZXQiLCJjb25uZWN0Q2FsbGJhY2tzIiwicmVzcG9uc2VDYWxsYmFja3MiLCJyZXF1ZXN0VGltZW91dHMiLCJlcnJvckNhbGxiYWNrcyIsInRpbWVvdXQiLCJrZWVwQWxpdmUiLCJrZWVwQWxpdmVEZWxheSIsImNvbm50aW1lb3V0IiwidW5kZWZpbmVkIiwicHJvY2VzcyIsImVudiIsIk1FTUNBQ0hJRVJfVVNFUk5BTUUiLCJNRU1DQUNIRV9VU0VSTkFNRSIsIk1FTUNBQ0hJRVJfUEFTU1dPUkQiLCJNRU1DQUNIRV9QQVNTV09SRCIsImluaGVyaXRzIiwicHJvdG90eXBlIiwib25Db25uZWN0IiwiZnVuYyIsInB1c2giLCJvblJlc3BvbnNlIiwic2VxIiwicmVzcG9uZCIsInJlc3BvbnNlIiwiY2FsbGJhY2siLCJoZWFkZXIiLCJvcGFxdWUiLCJxdWlldCIsInRvdGFsQm9keUxlbmd0aCIsInNoaWZ0Iiwib25FcnJvciIsImVycm9yIiwiZXJyIiwiZXJyY2FsbHMiLCJfc29ja2V0IiwiZGVzdHJveSIsImsiLCJoYXNPd25Qcm9wZXJ0eSIsImxpc3RTYXNsIiwiYnVmIiwid3JpdGVTQVNMIiwic2FzbEF1dGgiLCJhdXRoU3RyIiwiYXBwZW5kVG9CdWZmZXIiLCJkYXRhQnVmIiwib2xkIiwiYWxsb2MiLCJsZW5ndGgiLCJjb3B5IiwicmVzcG9uc2VIYW5kbGVyIiwicmVzcExlbmd0aCIsIm9wY29kZSIsInN0YXR1cyIsImVtaXQiLCJzbGljZSIsInNvY2siLCJzYXNsIiwiZ28iLCJzZWxmIiwiY29ubmVjdCIsIm9uY2UiLCJzZXRUaW1lb3V0IiwiZm9yRWFjaCIsImNiIiwib24iLCJlbmQiLCJFcnJvciIsInNldEtlZXBBbGl2ZSIsInRpbWVvdXRIYW5kbGVyIiwic2VydmVyIiwibm93Iiwic29vbmVzdFRpbWVvdXQiLCJkZWFkbGluZSIsIndyaXRlIiwiYmxvYiIsIk1hdGgiLCJyb3VuZCIsInMiLCJjbG9zZSIsInRvU3RyaW5nIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/memjs/lib/memjs/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/memjs/lib/memjs/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/memjs/lib/memjs/utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// # MemJS utility functions\nvar header = __webpack_require__(/*! ./header */ \"(ssr)/./node_modules/memjs/lib/memjs/header.js\");\nvar bufferify = function(val) {\n    return Buffer.isBuffer(val) ? val : Buffer.from(val);\n};\nexports.makeRequestBuffer = function(opcode, key, extras, value, opaque) {\n    key = bufferify(key);\n    extras = bufferify(extras);\n    value = bufferify(value);\n    var buf = Buffer.alloc(24 + key.length + extras.length + value.length);\n    buf.fill();\n    var requestHeader = {\n        magic: 0x80,\n        opcode: opcode,\n        keyLength: key.length,\n        extrasLength: extras.length,\n        totalBodyLength: key.length + value.length + extras.length,\n        opaque: opaque\n    };\n    header.toBuffer(requestHeader).copy(buf);\n    extras.copy(buf, 24);\n    key.copy(buf, 24 + extras.length);\n    value.copy(buf, 24 + extras.length + key.length);\n    return buf;\n};\nexports.makeAmountInitialAndExpiration = function(amount, amountIfEmpty, expiration) {\n    var buf = Buffer.alloc(20);\n    buf.writeUInt32BE(0, 0);\n    buf.writeUInt32BE(amount, 4);\n    buf.writeUInt32BE(0, 8);\n    buf.writeUInt32BE(amountIfEmpty, 12);\n    buf.writeUInt32BE(expiration, 16);\n    return buf;\n};\nexports.makeExpiration = function(expiration) {\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(expiration, 0);\n    return buf;\n};\nexports.hashCode = function(str) {\n    var ret, i, len;\n    for(ret = 0, i = 0, len = str.length; i < len; i++){\n        ret = 31 * ret + str.charCodeAt(i) << 0;\n    }\n    return Math.abs(ret);\n};\nexports.parseMessage = function(dataBuf) {\n    if (dataBuf.length < 24) {\n        return false;\n    }\n    var responseHeader = header.fromBuffer(dataBuf);\n    if (dataBuf.length < responseHeader.totalBodyLength + 24 || responseHeader.totalBodyLength < responseHeader.keyLength + responseHeader.extrasLength) {\n        return false;\n    }\n    var pointer = 24;\n    var extras = dataBuf.slice(pointer, pointer + responseHeader.extrasLength);\n    pointer += responseHeader.extrasLength;\n    var key = dataBuf.slice(pointer, pointer + responseHeader.keyLength);\n    pointer += responseHeader.keyLength;\n    var val = dataBuf.slice(pointer, 24 + responseHeader.totalBodyLength);\n    return {\n        header: responseHeader,\n        key: key,\n        extras: extras,\n        val: val\n    };\n};\nexports.merge = function(original, deflt) {\n    var attr, originalValue;\n    for(attr in deflt){\n        if (deflt.hasOwnProperty(attr)) {\n            originalValue = original[attr];\n            if (originalValue === undefined || originalValue === null) {\n                original[attr] = deflt[attr];\n            }\n        }\n    }\n    return original;\n};\n// timestamp provides a monotonic timestamp with millisecond accuracy, useful\n// for timers.\nexports.timestamp = function() {\n    var times = process.hrtime();\n    return times[0] * 1000 + Math.round(times[1] / 1000000);\n};\nif (!Buffer.concat) {\n    Buffer.concat = function(list, length) {\n        if (!Array.isArray(list)) {\n            throw new Error(\"Usage: Buffer.concat(list, [length])\");\n        }\n        if (list.length === 0) {\n            return Buffer.alloc(0);\n        }\n        if (list.length === 1) {\n            return list[0];\n        }\n        var i, buf;\n        if (typeof length !== \"number\") {\n            length = 0;\n            for(i = 0; i < list.length; i++){\n                buf = list[i];\n                length += buf.length;\n            }\n        }\n        var buffer = Buffer.alloc(length);\n        var pos = 0;\n        for(i = 0; i < list.length; i++){\n            buf = list[i];\n            buf.copy(buffer, pos);\n            pos += buf.length;\n        }\n        return buffer;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/memjs/lib/memjs/utils.js\n");

/***/ })

};
;